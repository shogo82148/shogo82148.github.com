<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Shogo's Blog]]></title>
  <link href="http://shogo82148.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://shogo82148.github.io/"/>
  <updated>2014-06-04T08:12:17+09:00</updated>
  <id>http://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript版WaveZutaZuta作ってみた]]></title>
    <link href="http://shogo82148.github.io/blog/2012/12/24/wavezutazutajs/"/>
    <updated>2012-12-24T13:51:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2012/12/24/wavezutazutajs</id>
    <content type="html"><![CDATA[<p>「<a href="http://nekogata.hatenablog.com/entry/2012/12/23/155250">WaveZutaZutaというおもちゃを書いている話</a>」
という記事を見ていたら，誰かがツイッターで
「いっちーがJavaScriptに移植してくれる」と発言．</p>

<p>あ，はい．やってみましょう．</p>

<!-- More -->


<h2>どんな感じのものなの？</h2>

<p>音声ファイルをテキトーに切り貼りできるライブラリです．
<a href="http://shogo82148.github.com/WaveZutaZutaJS/">WaveZutaZutaJS</a>にブラウザで実行出来るサンプルを置いたので
実際試してみるのが一番わかりやすいと思います．
適当な音声ファイルをドラッグ＆ドロップして，playボタンを押すと音が流れるので，いろいろ遊んでみてください．</p>

<p>テキストボックスには楽譜が書かれています．
楽譜の書き方は「<a href="http://nekogata.hatenablog.com/entry/2012/12/23/155250">WaveZutaZutaというおもちゃを書いている話</a>」
と同じです．</p>

<blockquote><p>ちなみに、楽譜ファイルの読み方、書き方ですが、aからzまでの文字それぞれにずたずたにされたwaveファイルの"破片"がアサインされていて、-は音をのばす(タイ)を意味し、0は休符を意味します。*を指定すると、a-zのうちどれかをランダムで鳴らします。1文字が64分音符ひとつ分の長さです。空白文字は無視されます。</p></blockquote>

<h2>使い方</h2>

<p><a href="https://github.com/shogo82148/WaveZutaZutaJS">リポジトリ</a>の WaveZutaZutaJS.js がライブラリの本体です．
次のように使います．</p>

<p>``` javascript
var data = new ArrayBuffer(); // ずたずたにしたい音声データを入れておく
var context = new AudioContext();
var zuta = new WaveZutaZuta(context);
zuta.onSuccess = function(self, source) {</p>

<pre><code>// 元の音声の先頭5秒から3秒間流す
zuta.setNote('a', 5);
var node = zuta.getAudioNode([{sound: 'a': length: 3}]);
node.connect(context.destination);
</code></pre>

<p>};
zuta.loadAudio(data);
```</p>

<p><code>data</code> には入力音声のバイナリデータを入れておきます．
形式はブラウザが対応していれば何でもOKです．
Chromeなら wav, mp3, mp4 など，メジャーな形式はたいてい読めると思います．</p>

<p><code>getAudioNode</code>で返ってくるのは AudioNode なので，WaveZutzZutaJS の出力にさらにエフェクトをかけることができます．
例えば，次のコードで周波数フィルタを通すことができます．</p>

<p>``` javascript
var data = new ArrayBuffer(); // ずたずたにしたい音声データを入れておく
var context = new AudioContext();
var zuta = new WaveZutaZuta(context);
zuta.onSuccess = function(self, source) {</p>

<pre><code>// 元の音声の先頭5秒から3秒間流す
zuta.setNote('a', 5);
var node = zuta.getAudioNode([{sound: 'a': length: 3}]);

// 周波数フィルタを用意
var filter = context.createBiquadFilter();
filter.type = "lowpass";
filter.frequency.value = 1000;

// 接続
node.connect(filter);
filter.connect(context.destination);
</code></pre>

<p>};
zuta.loadAudio(data);
```</p>

<h2>簡単な技術解説</h2>

<h3>decodeAudioData</h3>

<p>WebAudioの<code>decodeAudioData</code>を使うと音声データからPCMデータを得ることができます．
これを使うと音声データを配列として得ることができるので，
WeveZutaZutaJSではこの配列を切り貼りしてずたずたにしています．</p>

<p>```javascript
var data = new ArrayBuffer() // 音声データ
var context = new AudioContext();
context.decodeAudioData(data, function(buf) {</p>

<pre><code>//buf には AudioBuffer 型の音声データが入っている

var float32array = getChannelData(0);
// float32array を適当にいじる
</code></pre>

<p>});
```</p>

<h3>JavaScriptNode</h3>

<p>JavaScriptNode は音源やフィルタ・アナライザを JavaScript のコードを使って書くことの出来るものです．
例えば，正弦波を生成するコードは次のようになります．</p>

<p>``` javascript
var context = new AudioContext();
var node = context.createJavaScriptNode(2048, 0, 1); // バッファの大きさ，入力の数，出力の数
var x;
node.onaudioprocess = function(buf) {</p>

<pre><code>var data = buf.outputBuffer.getChannelData(0);
var i;
for(i = 0; i &lt; data.length; ++i) {
    data[i] = Math.sin(x++);
}
</code></pre>

<p>};
node.connect(context.destination);
```</p>
]]></content>
  </entry>
  
</feed>
