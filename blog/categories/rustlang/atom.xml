<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rustlang | Shogo's Blog]]></title>
  <link href="https://shogo82148.github.io/blog/categories/rustlang/atom.xml" rel="self"/>
  <link href="https://shogo82148.github.io/"/>
  <updated>2017-04-13T09:14:41+09:00</updated>
  <id>https://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rust vs Go の終戦へ向けてPolyglotを作ってみた]]></title>
    <link href="https://shogo82148.github.io/blog/2017/02/25/rust-and-go-ploygolot/"/>
    <updated>2017-02-25T16:58:27+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/02/25/rust-and-go-ploygolot</id>
    <content type="html"><![CDATA[<p>「Golang Rust」とググると、関連項目は「Rust vs Go」のように
GolangとRustが対立しているような項目ばかりです。
まあまあ、もっと仲良くやろうじゃないですか、ということで、
どうしたら仲良くなれるかを考えました。
Polyglotにして同じソースコードの中に閉じ込めてやれば、
そのうち仲良くなるのではないかと考え、
RustとGoのPloyglotを作ってみました。</p>

<!-- More -->


<h2>結果</h2>

<pre><code class="rust polyglot.rs">/*/*/
package main

import "fmt"

func main() {
    fmt.Print("Hello Go!!")
    _ = `*/*/
fn main() {
    println!("Hello Rust!!");
//`
}
</code></pre>

<pre><code class="go polyglot.go">/*/*/
package main

import "fmt"

func main() {
    fmt.Print("Hello Go!!")
    _ = `*/*/
fn main() {
    println!("Hello Rust!!");
//`
}
</code></pre>

<h2>仕組み</h2>

<p>一番のポイントは最初の行の <code>/*/*/</code> です。
RustもGoも<code>/* */</code>形式の複数行コメントに対応していますが、
Rustはネストに対応しており、Goはネストはできないという違いがあります。
この違いにより、Rustは<code>/*/*/</code>を<code>/* /* /</code>のように「二重にネストしたコメントの開始部分」として扱いますが、
Goは<code>/* / */</code>のように「<code>/</code>をコメントアウトしたもの」と見なします。
これにより2行目<code>package main</code>以降はGoには普通のコードに見えますが、
Rustからは単なるコメントとして認識されます。</p>

<p>次はGoからRustへの切り替えです。
Goではバッククオートで複数行文字列を定義できるので、その中にRustのコードを書きます。
この中ではバッククオートさえ使わなければ自由にRustのコードを書くことが出来るので、
あとはGoのコードだけ上手くコメントアウトされるよう調整すれば完成です。</p>

<h2>せっかくなのでリンクしてみた</h2>

<p>GoからRustのコードを呼び出すサンプルコードを見つけたので、
せっかくなのでリンクしてみました。</p>

<ul>
<li><a href="https://github.com/medimatrix/rust-plus-golang">medimatrix/rust-plus-golang</a></li>
</ul>


<p><code>main.go</code>と<code>lib.go</code>を以下のように置き換えます。
内容は一緒なので、シンボリックリンクにすると編集が楽でいいかもしれませんね。</p>

<pre><code class="go main.go">/*golang code starts from here/*/
package main

/*
#cgo LDFLAGS: -L./lib -lhello
void hello(char *name);
*/
import "C"

func main() {
    C.hello(C.CString("John Smith"))

    _ = `rustlang code starts from here */*/
extern crate libc;
use std::ffi::CStr;

#[no_mangle]
pub extern "C" fn hello(name: *const libc::c_char) {
    let buf_name = unsafe { CStr::from_ptr(name).to_bytes() };
    let str_name = String::from_utf8(buf_name.to_vec()).unwrap();
    println!("Hello {}!", str_name);
//`
}
</code></pre>

<pre><code class="rust lib.rs">/*golang code starts from here/*/
package main

/*
#cgo LDFLAGS: -L./lib -lhello
void hello(char *name);
*/
import "C"

func main() {
    C.hello(C.CString("John Smith"))

    _ = `rustlang code starts from here */*/
extern crate libc;
use std::ffi::CStr;

#[no_mangle]
pub extern "C" fn hello(name: *const libc::c_char) {
    let buf_name = unsafe { CStr::from_ptr(name).to_bytes() };
    let str_name = String::from_utf8(buf_name.to_vec()).unwrap();
    println!("Hello {}!", str_name);
//`
}
</code></pre>

<p>呼び出し元と呼び出し先のコードが一度に確認できて便利(？)</p>

<h2>まとめ</h2>

<p>Goの最初に<code>package main</code>を書かなければいけない制限が意外と厳しいため、
Polyglotにする言語には相性があります。
つまりRustとGoは相性バツグンということですね！(？？？)
みなさんもRustとGoを仲良く使っていきましょう！！！！！</p>

<p>(※ジョークなので本気にしないでくださいね、念のため)</p>

<h2>参考</h2>

<ul>
<li><a href="https://doc.rust-lang.org/reference.html#comments">The Rust Reference#comment</a></li>
<li><a href="https://shogo82148.github.io/blog/2016/04/05/polyglot-of-perl-and-golang/">PerlとGolangで実行できるPolyglot書いてみた</a>

<ul>
<li>どうやらGoはPerlとも相性がいいようです</li>
</ul>
</li>
<li><a href="https://github.com/medimatrix/rust-plus-golang">medimatrix/rust-plus-golang</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
