<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: golang | Shogo's Blog]]></title>
  <link href="https://shogo82148.github.io/blog/categories/golang/atom.xml" rel="self"/>
  <link href="https://shogo82148.github.io/"/>
  <updated>2017-03-05T16:41:02+09:00</updated>
  <id>https://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[go-JSONStoreの高速化と機能追加]]></title>
    <link href="https://shogo82148.github.io/blog/2017/03/05/tune-up-go-jsonstore/"/>
    <updated>2017-03-05T16:19:25+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/03/05/tune-up-go-jsonstore</id>
    <content type="html"><![CDATA[<p>以前mattnさんが紹介していた<a href="https://github.com/schollz/jsonstore">schollz/jsonstore</a>。
時間が経ってしまいましたが「ここは高速化できそうだなー」といじってみたので、
やってみたことをメモ。</p>

<p>本来は上流にフィードバックしたほうがよいのですが、
本家のほうも修正が入ってコンフリクトして面倒になったので、
フォーク版をそのまま置いておきます。</p>

<ul>
<li><a href="https://github.com/shogo82148/jsonstore">shogo82148/jsonstore</a></li>
</ul>


<!-- More -->


<h2>高速化</h2>

<p>まだまだ高速化できそうなところがあったので、いじってみた部分です。</p>

<h3>ロックの範囲を最小にする</h3>

<p>ロックの範囲を小さくすることで、並列処理時の性能が上がります。
例えば、jsonstoreに値を入れる<code>Set</code>メソッドは、
以下のように<code>Set</code>全体がロックの対象になっていました。</p>

<pre><code class="go">func (s *JSONStore) Set(key string, value interface{}) error {
    // Set の中全体がロックの対象になっている
    s.Lock()
    defer s.Unlock()

    b, err := json.Marshal(value)
    if err != nil {
        return err
    }

    if s.data == nil {
        s.data = make(map[string]*json.RawMessage)
    }
    s.data[key] = (*json.RawMessage)(&amp;b)
    return nil
}
</code></pre>

<p>jsonのエンコード処理はjsonstoreの中身を触らないので並列実行可能です。
次のように <code>s.data</code> だけをロックの対象にすれば十分です。</p>

<pre><code class="go">func (s *JSONStore) Set(key string, value interface{}) error {
    // json.Marshal は並列実行可能
    b, err := json.Marshal(value)
    if err != nil {
        return err
    }

    // s.data を触る直前でロック
    s.Lock()
    defer s.Unlock()

    if s.data == nil {
        s.data = make(map[string]*json.RawMessage)
    }
    s.data[key] = (*json.RawMessage)(&amp;b)
    return nil
}
</code></pre>

<p>デコード処理も同様に並列化が可能なので、<code>Get</code>にも同じ修正をいれました。
修正前後でベンチを取ってみたところ以下のようになりました。</p>

<pre><code class="plain">Before:
BenchmarkGet-4               1000000          1923 ns/op         272 B/op          5 allocs/op
BenchmarkParaGet-4           1000000          1000 ns/op         272 B/op          5 allocs/op
BenchmarkSet-4               1000000          1159 ns/op         216 B/op          3 allocs/op
BenchmarkParaSet-4           1000000          1974 ns/op         216 B/op          3 allocs/op

After:
BenchmarkGet-4               1000000          1793 ns/op         256 B/op          4 allocs/op
BenchmarkParaGet-4           2000000           845 ns/op         256 B/op          4 allocs/op
BenchmarkSet-4               1000000          1212 ns/op         248 B/op          4 allocs/op
BenchmarkParaSet-4           2000000           686 ns/op         248 B/op          4 allocs/op
</code></pre>

<p>Paraが付いているのが並列実行したとき、付いていないのが単一のgorotineで実行したときの結果です。
単一gorotineでは修正前後で余り大きな性能差はありませんが、
並列実行の性能が向上していることがわかりますね。</p>

<p>(他にも細々とした修正を入れたので、全部がロックの効果ではないと思いますが)</p>

<h3>ストリーミングAPIを利用する</h3>

<p>ファイル保存時にjsonのエンコーディングをしているのですが、
修正前のコードでは<code>json.MarshalIndent</code>を使用していました。
<code>json.MarshalIndent</code>は結果をメモリ上に出力するので、
メモリの消費量が増え、そのメモリをアロケーションする分だけ性能が劣化します。</p>

<p><code>io.Writer</code>に書き込むだけなら、以下のように<code>json.NewEncoder</code>を利用するのが効率的です。</p>

<pre><code class="go">enc := json.NewEncoder(w)
return enc.Encode(data)
</code></pre>

<h3>不要な再エンコードを避ける</h3>

<p>元のコードでは一度jsonに変換した値を、ファイル保存時に<code>string</code>にキャストしていました。
そのため、出力されたjsonは以下のように文字列の中にjsonが入っている形になります。
この形式だと<code>"</code>のエスケープが必要になるので、
処理性能的にも、ファイル容量的にも不利です。</p>

<pre><code class="go">package main

import (
    "encoding/json"
    "os"
)

func main() {
    b := []byte(`{"Name":"Dante","Height":5.4}`)
    data := map[string]string{
        "human:1": string(b), // ここでキャストしている
    }
    enc := json.NewEncoder(os.Stdout)
    enc.Encode(data)
}
</code></pre>

<pre><code class="json">{"human:1": "{\"Name\":\"Dante\",\"Height\":5.4}"}
</code></pre>

<p>値は既にjsonエンコード済みなので、ファイル出力時に手を加える必要はありません。
以下のように<code>*json.RawMessage</code>型に変換することで、
余計な再エンコードを避けることができます。</p>

<pre><code class="go">package main

import (
    "encoding/json"
    "os"
)

func main() {
    b := []byte(`{"Name":"Dante","Height":5.4}`)
    data := map[string]*json.RawMessage{
        "human:1": (*json.RawMessage)(&amp;b),
    }
    enc := json.NewEncoder(os.Stdout)
    enc.Encode(data)
}
</code></pre>

<pre><code class="json">{"human:1":{"Name":"Dante","Height":5.4}}
</code></pre>

<p><code>json.RawMessage</code>でなく<code>*json.RawMessage</code>とポインタを使っているのがポイントです。
<code>json.RawMessage</code>だと<code>[]byte</code>とみなされてbase64エンコーディングされてしまうのです・・・。</p>

<pre><code class="go">package main

import (
    "encoding/json"
    "os"
)

func main() {
    b := []byte(`{"Name":"Dante","Height":5.4}`)
    data := map[string]json.RawMessage{
        "human:1": json.RawMessage(b),
    }
    enc := json.NewEncoder(os.Stdout)
    enc.Encode(data)
}
</code></pre>

<pre><code class="json">// Go1.7以下で実行時
{"human:1":"eyJOYW1lIjoiRGFudGUiLCJIZWlnaHQiOjUuNH0="}

// Go1.8で実行時
{"human:1":{"Name":"Dante","Height":5.4}}
</code></pre>

<p>ちなみにこの挙動、1.8で<code>json.RawMessage</code>も<code>*json.RawMessage</code>と同じ結果になる修正されたようです。
(この記事を書いていて気がついた)
1.7以下を切り捨てるなら<code>json.RawMessage</code>の方が良さそうですね。</p>

<p>「ストリーミングAPIを利用する」「不要な再エンコードを避ける」をやった結果は以下のとおりです。</p>

<pre><code class="plain">Before:
BenchmarkSave-4                  500       3324647 ns/op     1418718 B/op       3121 allocs/op

After:
BenchmarkSave-4                  500       2455853 ns/op     1127372 B/op       3094 allocs/op
</code></pre>

<h3>浅いコピーで並列処理性能を上げる</h3>

<p>一度<code>Set</code>で<code>json.RawMessage</code>に変換されたデータは書き換えられることがないので、
浅いコピーをするだけでスナップショットが簡単にとれます。</p>

<pre><code class="go">func (s *JSONStore) Snapshot() *JSONStore {
    s.RLock()
    defer s.RUnlock()
    results := make(map[string]*json.RawMessage)
    for k, v := range s.data {
        results[k] = v
    }
    return &amp;JSONStore{
        data:     results,
    }
}
</code></pre>

<p>一度スナップショットを取ってしまえば、ファイルへの書き込み時にはロックが不要になります。
ファイルの書き込みはI/Oを伴うとても重い処理なので、
この部分をロックの外側に出せるのは非常に効果大です。</p>

<pre><code class="go">func (s *JSONStore) Save() {
    snapshot := s.Snapshot()

    // snapshotを取ったあとはLock不要
    enc := json.NewEncoder(w)
    return enc.Encode(snapshot.data)
}
</code></pre>

<p>別gorotineでひたすらSaveを繰り返しながらSetのベンチを取ってみた結果です。
修正前はSaveがほとんどの時間ロックを獲得していまうので、Saveと同程度の性能しか出ません。
修正後はSaveとSetを並列実行できるようになるので、大幅に性能が改善します。</p>

<pre><code class="plain">Before:
BenchmarkSaveSet-4               500       3260143 ns/op     1382516 B/op       3047 allocs/op

After:
BenchmarkSaveSet-4           1000000          1948 ns/op         914 B/op          5 allocs/op
</code></pre>

<h3>正規表現をなるべく避ける</h3>

<p>元のjsonstoreには正規表現でキーを指定して値を取ってくる機能があります。</p>

<pre><code class="go">func GetAll(re *regexp.Regexp) map[string]json.RawMessage
</code></pre>

<p>Gopherのみなさんなら御存知の通り、Goの正規表現はとても遅いです。
stringsパッケージなどを使えるよう、関数を受け取るインターフェースの方がよいでしょう。</p>

<pre><code class="go">func GetAll(matcher func(key string) bool) map[string]json.RawMessage
</code></pre>

<p>これのインターフェースなら簡単なものであれば自分で関数をかけば良いし、
どうしても正規表現が必要な場合は<code>s.GetAll(re.MatchString)</code>とやればいいので大きな問題にはなりません。</p>

<p>以下ベンチマークの結果です。Afterの方は正規表現ではなくstringsパッケージを使用しています。</p>

<pre><code class="plain">Before:
BenchmarkRegex-4                3000        449209 ns/op      206954 B/op         67 allocs/op

After:
BenchmarkRegex-4                5000        251788 ns/op      124483 B/op         68 allocs/op
</code></pre>

<h2>機能追加</h2>

<p>実際使うなら最低限こんな機能も必要だよな・・・
といくつか機能追加も行いました。</p>

<h3>アトミックなデータ保存</h3>

<p>例えば<code>humans.json.gz</code>に保存されたデータを書き換えることを考えます。
もっとも簡単になるなら以下のようになるでしょう。</p>

<pre><code class="go">ks, _ := jsonstore.Open("humans.json.gz")

// ksに何か操作を行う

go jsonstore.Save(ks, "humans.json.gz")

// もしpanicしたら・・・？
panic("error!!")
</code></pre>

<p>ここでもしSaveの最中にプログラムが強制終了してしまったらどうなるでしょう。
書きかけの<code>humans.json.gz</code>だけが残り、元のデータが失われてしまう可能性があります。</p>

<p>それを避けるために、一度テンポラリファイルに書き出し、Renameするのが安全です。
たとえ途中でクラッシュしても、最悪変更前のデータは残ります。</p>

<pre><code class="go">ks, _ := jsonstore.Open("humans.json.gz")

// ksに何か操作を行う

go func() {
    jsonstore.Save(ks, "humans.json.tmp.gz")
    os.Rename("humans.json.tmp.gz", "humans.json.gz")
}()

panic("error!!")
</code></pre>

<p>これを勝手にやってくれる<code>SaveAndRename</code>という関数を追加しました。</p>

<p>Linuxの場合、Renameはアトミックに行われるので、
サーバを起動したままデータベースのバックアップを取るのも安全にできます。
しかしWindowsの場合、アトミック性は保証されていない模様・・・？
本当は<code>SafeSave</code>とかにしたかったけど、Windowsの事情がよくわからなったので、
やってることをそのまま名前にしました。</p>

<h3>自動保存機能</h3>

<p>変更のたびに毎回ファイルに書き込んでいたら、極端に性能が劣化してしまうので、
適当なタイミングで自動保存してくれる機能を追加しました。
次のようにすることで、1000回変更があるたびに保存、
変更回数が1000回に満たなくても最低60秒毎に保存してくれます。</p>

<pre><code class="go">ks := new(jsonstore.JSONStore)
ks.StartAutoSave("db.json.gz", 60 * time.Second, 1000)
defer ks.StopAutoSave()
</code></pre>

<h2>まとめ</h2>

<p>以下の高速化を行いました。</p>

<ul>
<li>ロックの範囲を最小にする</li>
<li>ストリーミングAPIを利用する</li>
<li>不要な再エンコードを避ける</li>
<li>浅いコピーで並列処理性能を上げる</li>
<li>正規表現をなるべく避ける</li>
</ul>


<p>また、実際使う際に必要になるであろう、次の機能も追加しました。</p>

<ul>
<li>アトミックなデータ保存</li>
<li>自動保存機能</li>
</ul>


<p>これだけあれば、簡単なおもちゃを作るときのデータベースに使うくらいは出来るんじゃないですかね。</p>

<p>プロセス間でデータ共有できない問題はありますが・・・
まあ、そういうときは素直にRedisとかSQLiteとかboltdbとか使って下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust vs Go の終戦へ向けてPolyglotを作ってみた]]></title>
    <link href="https://shogo82148.github.io/blog/2017/02/25/rust-and-go-ploygolot/"/>
    <updated>2017-02-25T16:58:27+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/02/25/rust-and-go-ploygolot</id>
    <content type="html"><![CDATA[<p>「Golang Rust」とググると、関連項目は「Rust vs Go」のように
GolangとRustが対立しているような項目ばかりです。
まあまあ、もっと仲良くやろうじゃないですか、ということで、
どうしたら仲良くなれるかを考えました。
Polyglotにして同じソースコードの中に閉じ込めてやれば、
そのうち仲良くなるのではないかと考え、
RustとGoのPloyglotを作ってみました。</p>

<!-- More -->


<h2>結果</h2>

<pre><code class="rust polyglot.rs">/*/*/
package main

import "fmt"

func main() {
    fmt.Print("Hello Go!!")
    _ = `*/*/
fn main() {
    println!("Hello Rust!!");
//`
}
</code></pre>

<pre><code class="go polyglot.go">/*/*/
package main

import "fmt"

func main() {
    fmt.Print("Hello Go!!")
    _ = `*/*/
fn main() {
    println!("Hello Rust!!");
//`
}
</code></pre>

<h2>仕組み</h2>

<p>一番のポイントは最初の行の <code>/*/*/</code> です。
RustもGoも<code>/* */</code>形式の複数行コメントに対応していますが、
Rustはネストに対応しており、Goはネストはできないという違いがあります。
この違いにより、Rustは<code>/*/*/</code>を<code>/* /* /</code>のように「二重にネストしたコメントの開始部分」として扱いますが、
Goは<code>/* / */</code>のように「<code>/</code>をコメントアウトしたもの」と見なします。
これにより2行目<code>package main</code>以降はGoには普通のコードに見えますが、
Rustからは単なるコメントとして認識されます。</p>

<p>次はGoからRustへの切り替えです。
Goではバッククオートで複数行文字列を定義できるので、その中にRustのコードを書きます。
この中ではバッククオートさえ使わなければ自由にRustのコードを書くことが出来るので、
あとはGoのコードだけ上手くコメントアウトされるよう調整すれば完成です。</p>

<h2>せっかくなのでリンクしてみた</h2>

<p>GoからRustのコードを呼び出すサンプルコードを見つけたので、
せっかくなのでリンクしてみました。</p>

<ul>
<li><a href="https://github.com/medimatrix/rust-plus-golang">medimatrix/rust-plus-golang</a></li>
</ul>


<p><code>main.go</code>と<code>lib.go</code>を以下のように置き換えます。
内容は一緒なので、シンボリックリンクにすると編集が楽でいいかもしれませんね。</p>

<pre><code class="go main.go">/*golang code starts from here/*/
package main

/*
#cgo LDFLAGS: -L./lib -lhello
void hello(char *name);
*/
import "C"

func main() {
    C.hello(C.CString("John Smith"))

    _ = `rustlang code starts from here */*/
extern crate libc;
use std::ffi::CStr;

#[no_mangle]
pub extern "C" fn hello(name: *const libc::c_char) {
    let buf_name = unsafe { CStr::from_ptr(name).to_bytes() };
    let str_name = String::from_utf8(buf_name.to_vec()).unwrap();
    println!("Hello {}!", str_name);
//`
}
</code></pre>

<pre><code class="rust lib.rs">/*golang code starts from here/*/
package main

/*
#cgo LDFLAGS: -L./lib -lhello
void hello(char *name);
*/
import "C"

func main() {
    C.hello(C.CString("John Smith"))

    _ = `rustlang code starts from here */*/
extern crate libc;
use std::ffi::CStr;

#[no_mangle]
pub extern "C" fn hello(name: *const libc::c_char) {
    let buf_name = unsafe { CStr::from_ptr(name).to_bytes() };
    let str_name = String::from_utf8(buf_name.to_vec()).unwrap();
    println!("Hello {}!", str_name);
//`
}
</code></pre>

<p>呼び出し元と呼び出し先のコードが一度に確認できて便利(？)</p>

<h2>まとめ</h2>

<p>Goの最初に<code>package main</code>を書かなければいけない制限が意外と厳しいため、
Polyglotにする言語には相性があります。
つまりRustとGoは相性バツグンということですね！(？？？)
みなさんもRustとGoを仲良く使っていきましょう！！！！！</p>

<p>(※ジョークなので本気にしないでくださいね、念のため)</p>

<h2>参考</h2>

<ul>
<li><a href="https://doc.rust-lang.org/reference.html#comments">The Rust Reference#comment</a></li>
<li><a href="https://shogo82148.github.io/blog/2016/04/05/polyglot-of-perl-and-golang/">PerlとGolangで実行できるPolyglot書いてみた</a>

<ul>
<li>どうやらGoはPerlとも相性がいいようです</li>
</ul>
</li>
<li><a href="https://github.com/medimatrix/rust-plus-golang">medimatrix/rust-plus-golang</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go言語でコンパイル時フィボナッチ数列計算]]></title>
    <link href="https://shogo82148.github.io/blog/2017/02/19/golang-compile-time-fib/"/>
    <updated>2017-02-19T09:06:05+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/02/19/golang-compile-time-fib</id>
    <content type="html"><![CDATA[<p><a href="http://postd.cc/fibonacci/">整数の公式でフィボナッチ数列を求める</a>という記事を読んで、
「これコンパイル時ならGoでも簡単に計算できるのでは？」と思いやってみたメモ。</p>

<!-- More -->


<h2>背景</h2>

<p>みんな大好きフィボナッチ数列(要出典)。
漸化式で定義されているため、再帰やループを使って書くことが多いと思いますが、
閉じた式で書くことが知られています。
ただし、この一般式には無理数の演算が入るので、コンピュータで厳密に扱うことはできません。
ところが、さきほど紹介した記事で紹介された方法を使うと、整数の演算のみで実現できるそうです。</p>

<p>原理などはネタ元の記事を参照してもらうとして、
Python3では以下のように書けるらしいです。</p>

<pre><code class="python">def fib(n):
    return (4 &lt;&lt; n*(3+n)) // ((4 &lt;&lt; 2*n) - (2 &lt;&lt; n) - 1) &amp; ((2 &lt;&lt; n) - 1)
</code></pre>

<p>ある程度大きなフィボナッチ数を求める場合、
計算途中の値が非常に大きくなるため、多倍長整数が必要となります。
Python3は多倍長整数に組み込みで対応していますが、
Goでは<a href="https://golang.org/pkg/math/big/">math/bigパッケージ</a>を利用する必要があります。</p>

<p>なんか面倒だなGolangと思っていたのですが、
<a href="http://qiita.com/sonatard/items/464a9d45c689386edfe1">Better C - Go言語と整数 #golang</a>を読んで、
「Goの定数には型がない(場合がある)」「任意の精度で計算してくれる」ということを知り、
「つまりコンパイル時に定数として計算すれば楽にいけるのでは！！」と考えたわけです。</p>

<h2>結果</h2>

<p>ちょっと複雑な式ですが、個々の演算自体はPython3もGoも変わらないので、
翻訳は簡単ですね。</p>

<pre><code class="go">package main

import "fmt"

const Fib0 = 1 // 0だけはうまくいかない

const (
    _    = (4 &lt;&lt; (iota * (3 + iota))) / ((4 &lt;&lt; (2 * iota)) - (2 &lt;&lt; iota) - 1) &amp; ((2 &lt;&lt; iota) - 1)
    Fib1
    Fib2
    Fib3
    Fib4
    Fib5
    Fib6
    Fib7
    Fib8
    Fib9
    Fib10
    Fib11
    Fib12
    Fib13
    Fib14
    Fib15
    Fib16
    Fib17
    Fib18
    Fib19
    Fib20
    Fib21
)

func main() {
    fibs := []int{
        Fib0,
        Fib1,
        Fib2,
        Fib3,
        Fib4,
        Fib5,
        Fib6,
        Fib7,
        Fib8,
        Fib9,
        Fib10,
        Fib11,
        Fib12,
        Fib13,
        Fib14,
        Fib15,
        Fib16,
        Fib17,
        Fib18,
        Fib19,
        Fib20,
        Fib21,
    }
    for i, fib := range fibs {
        fmt.Println(i, fib)
    }
}
</code></pre>

<p>実行結果です。</p>

<pre><code class="plain">$ go run fibconst.go
0 1
1 1
2 2
3 3
4 5
5 8
6 13
7 21
8 34
9 55
10 89
11 144
12 233
13 377
14 610
15 987
16 1597
17 2584
18 4181
19 6765
20 10946
21 17711
</code></pre>

<p><code>Fibxxx</code>をたくさん書くのはつらかったので、ソースコードはPerlで自動生成しました。</p>

<pre><code class="perl">print &lt;&lt;EOF;
package main

import "fmt"

const Fib0 = 1

const (
    _    = (4 &lt;&lt; (iota * (3 + iota))) / ((4 &lt;&lt; (2 * iota)) - (2 &lt;&lt; iota) - 1) &amp; ((2 &lt;&lt; iota) - 1)
EOF

print "    Fib$_\n" for 1..21;

print &lt;&lt;EOF;
)

func main() {
    fibs := []int{
        Fib0,
EOF

print "        Fib$_,\n" for 1..21;

print &lt;&lt;EOF
    }
    for i, fib := range fibs {
        fmt.Println(i, fib)
    }
}
EOF
</code></pre>

<p>21までしかないのは、
22以降を求めようとしたらコンパイルが通らなかったためです。</p>

<pre><code class="plain">$ go run fibconst.go
# command-line-arguments
./fibconst.go:29: shift count too large: 550
</code></pre>

<p>どうやら512bitまでしか扱えないらしい。
任意精度扱えるって書いてあったのに！！！</p>

<ul>
<li><a href="https://github.com/golang/go/blob/go1.8/src/cmd/compile/internal/gc/mpint.go#L211">mpint.go</a></li>
<li><a href="https://github.com/golang/go/blob/go1.8/src/cmd/compile/internal/gc/mpfloat.go#L18">mpfloat.go</a></li>
</ul>


<p>おとなしく多倍長整数が組込の言語でやれっている話ではありますが、
なんとなくやってみたかったんです。</p>

<h2>参考</h2>

<ul>
<li><a href="http://postd.cc/fibonacci/">整数の公式でフィボナッチ数列を求める</a>

<ul>
<li>Source: <a href="http://paulhankin.github.io/Fibonacci/">An integer formula for Fibonacci numbers</a></li>
</ul>
</li>
<li><a href="http://qiita.com/sonatard/items/464a9d45c689386edfe1">Better C - Go言語と整数 #golang</a></li>
</ul>


<p>ネタ元にある「母関数」という概念は、数学ガールを読んで知りました。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=shogo82148-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=4797341378&linkId=be2c6011ca1a5f15d96c370e494b0f95"></iframe>


<p>フィボナッチ数列に触れている部分はWebでも公開されているので、そちらもどうぞ(<a href="http://www.hyuki.com/story/genfunc.html">ミルカさんとフィボナッチ数列</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go-sql-proxyがcontextに対応しました]]></title>
    <link href="https://shogo82148.github.io/blog/2017/02/16/go-sql-proxy-in-go18/"/>
    <updated>2017-02-16T07:16:44+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/02/16/go-sql-proxy-in-go18</id>
    <content type="html"><![CDATA[<p>Go1.8ではdatabase/sqlのcontextサポートが入ります。
(きっと今日の<a href="https://eventdots.jp/event/611405">Go 1.8 Release Party</a>で詳しく説明があるはず、たぶん)
それにともない<a href="https://shogo82148.github.io/blog/2015/05/13/golang-sql-proxy/">Go言語でSQLのトレースをする</a>で紹介した
<a href="https://github.com/shogo82148/go-sql-proxy">shogo82148/go-sql-proxy</a>でもcontextを扱えるようにしました。</p>

<!-- More -->


<h2>Go1.8新機能のサポート</h2>

<p><a href="http://mattn.kaoriya.net/software/lang/go/20161106232834.htm">Golang 1.8 でやってくる database/sql の変更点</a>で
mattnさんが紹介しているように、Go1.8ではdatabase/sqlにいくつか新機能が追加されます。
(mattnさんの対応が早すぎて、メソッド名とか微妙に変更が入っているので注意)</p>

<p>特に大きなのがcontextのサポートでしょう。以下のようなコードでクエリのキャンセルが可能になります。</p>

<pre><code class="go">ctx, cancel := context.WithCancel(context.Background())
go func() {
    // 1秒待ってからキャンセル
    time.Sleep(1 * time.Second)
    cancel()
}()

rows, err := db.QueryContext(ctx, "SELECT name FROM test where id = ?", id)
if err != nil {
    log.Fatal(err)
}
</code></pre>

<p>go-sql-proxyでもcontext対応を行ったので、
proxyを経由した場合でも、キャンセルが可能になります。
(もちろん、originとなるドライバの対応も必要です)</p>

<p>Go1.8ではcontextサポート以外にもいくつか新機能が追加される予定です。
これらについても、originとなるドライバが対応していれば、go-sql-proxy経由でも全く同じように扱えます。</p>

<h2>contextとHookの関連付け</h2>

<p>contextにHookを関連付けて、一部のクエリにだけHookを付けることができるようになりました。
例えば以下のようなコードでctxに関連したクエリだけログを出力できます。</p>

<pre><code class="go">package main

import (
    "context"
    "database/sql"

    "github.com/shogo82148/go-sql-proxy"
)

var tracer = proxy.NewTraceHooks(proxy.TracerOptions{})

func main() {
    // 何もしないproxyをインストール
    proxy.RegisterProxy()

    // 末尾に":proxy"がついた名前でアクセス
    db, _ := sql.Open("origin:proxy", "data source")

    // このコンテキストに関連したクエリだけでログが有効になります
    ctx := proxy.WithHooks(context.Background(), tracer)
    db.ExecContext(ctx, "CREATE TABLE t1 (id INTEGER PRIMARY KEY)")
}
</code></pre>

<p>グローバルなproxyに既にHookが設定してあった場合は上書きされます。
上書きされたHookは実行されないので注意してください。</p>

<p>「トレースの負荷が気になるから、全体の1%だけ出力したい！」とか
「このAPIだけ重たいから、この部分だけトレースしたい！」とか
そういう場合に便利ではないでしょうか。</p>

<h2>トレースオプションの追加</h2>

<p>Tracerに色々オプションをつけたいなと思ったので、<code>proxy.TracerOptions</code>を追加しました。
例えばSlowQueryに時間を設定すると、この時間以上経ったクエリだけ表示されます。</p>

<pre><code class="go">var tracer = proxy.NewTraceHooks(proxy.TracerOptions{
    SlowQuery: 10 * time.Second,
})
</code></pre>

<p>ちなみに初期のトレーサーは<code>logger.Output(6, "Begin")</code>みたいな感じで書いてたので、
案の定Go1.8の変更でぶっ壊れました。
頑張ってスタックトレースを辿って、関数名をパースしてパッケージ名を取得(ダイレクトにパッケージ名だけ取る機能は見つからなかった)して、
フィルタリングするようにしたので、もう大丈夫なはず。
その代わりにパフォーマンスが犠牲になったので、
あまり高負荷のところに突っ込まないでくださいね。</p>

<h2>フック関数の変更</h2>

<p>context対応に伴い、Hookの差し込み方も変わっています。
<code>proxy.Hooks</code>は非推奨の扱いで、<code>proxy.HooksContext</code>を使って下さい。
以下の例のようにcontext.Contextが第一引数に追加されています。
デバッグ情報の受け渡しに使えるかも？</p>

<pre><code class="go">package main

import (
    "database/sql"
    "database/sql/driver"
    "log"
    "time"

    "github.com/mattn/go-sqlite3"
    "github.com/shogo82148/go-sql-proxy"
)

func main() {
    sql.Register("sqlite3-proxy", proxy.NewProxyContext(&amp;sqlite3.SQLiteDriver{}, &amp;proxy.HooksContext{
        PreExec: func(_ context.Context, _ *proxy.Stmt, _ []driver.NamedValue) (interface{}, error) {
            // The first return value(time.Now()) is passed to both `Hooks.Exec` and `Hook.ExecPost` callbacks.
            return time.Now(), nil
        },
        PostExec: func(_ context.Context, ctx interface{}, stmt *proxy.Stmt, args []driver.NamedValue, _ driver.Result, _ error) error {
            // The `ctx` parameter is the return value supplied from the `Hooks.PreExec` method, and may be nil.
            log.Printf("Query: %s; args = %v (%s)\n", stmt.QueryString, args, time.Since(ctx.(time.Time)))
            return nil
        },
    }))

    db, err := sql.Open("sqlite3-proxy", ":memory:")
    if err != nil {
        log.Fatalf("Open filed: %v", err)
    }
    defer db.Close()

    _, err = db.Exec(
        "CREATE TABLE t1 (id INTEGER PRIMARY KEY)",
    )
    if err != nil {
        log.Fatal(err)
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go1.8のGraceful Shutdownとgo-gracedownの対応]]></title>
    <link href="https://shogo82148.github.io/blog/2017/01/21/golang-1-dot-8-graceful-shutdown/"/>
    <updated>2017-01-21T12:44:32+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/01/21/golang-1-dot-8-graceful-shutdown</id>
    <content type="html"><![CDATA[<p>Go1.8beta1が出た時に、Go1.8で追加される予定のGraceful Shutdownについて書く！
とTwitterに書き込んで早1ヶ月。
この前の金曜日に<a href="https://twitter.com/golang/status/822201571928731648">Go1.8rc2がリリースされ</a>、正式リリースも間近になってきて、
さすがに書かねばという気持ちになって来たので、がんばって検証してみます。</p>

<!-- More -->


<h2>公式サポートで増える予定の機能</h2>

<p>以前<a href="https://shogo82148.github.io/blog/2015/11/23/golang-graceful-restart-2nd/">Go言語でGraceful Restartをするときに取りこぼしを少なくする</a>で
紹介したように<a href="https://github.com/shogo82148/go-gracedown">shogo82148/go-gracedown</a>というものを書きました。
あれから時は経ち、ついにGo1.8からは<a href="https://github.com/golang/go/issues/4674">Graceful Shudownがbuild-inの機能として提供</a>される予定です。
公式サポートが入ることによって、以下のような機能を使えるようになります。</p>

<h3>HTTP/2のGraceful Shutdownができる</h3>

<p>HTTP/2ではGOAWAYフレームという接続を切ることを通知する機能があります。
Go1.8からはシャットダウン時にこのGOAWAYフレームを送ってくれるようになります。
GOAWAYフレームはサーバ側から任意のタイミングで送ることができ、
どこまで正常に処理できたかをクライアントに伝えられるという利点があります。</p>

<p>余談ですが、この機能は<a href="https://github.com/golang/go/issues/18471">x/net/http2を利用している場合は動かない</a>らしいです。
<a href="https://github.com/golang/net/blob/8fd7f25955530b92e73e9e1932a41b522b22ccd9/http2/server.go#L2716-L2736">importしたときには動かないけどbundleしたときにだけ動く黒魔術</a>が使われているためです。
覚えておいても今後絶対使うことはなさそう。というか使いたくない・・・。</p>

<h3>contextが使える</h3>

<p>go-gracedownを作った頃は、contextはまだ標準パッケージに取り込まれていなかったので対応していませんでした。
(1.7のリリース時に対応を怠っていただけとも言える)
net/httpのシャットダウンはもちろんcontextに対応しています。
これにより、Graceful Shutdownを中断して強制終了する、
ということが簡単にできるようになります。</p>

<h2>公式サポートで変更になる予定の挙動</h2>

<p>Keep-Aliveでのリクエストの挙動が少し変わります。
1.7以前のgo-gracedownでは、クライアントにKeep-Aliveが無効になったのを伝え、
クライアント側から接続を切るのを待つように実装してしました。
多少接続時間が延びたとしてもクライアント側でよくわからないエラーになるよりはマシだろ、との考えからです。</p>

<p>1.8からはシャットダウン時にIdle状態(TCP接続は有効だけど、リクエストは処理していない状態)な接続は切断されます。
内部で使っている<a href="https://golang.org/pkg/net/http/#Server.SetKeepAlivesEnabled">Server.SetKeepAlivesEnabled</a>の
挙動が<a href="https://github.com/golang/go/issues/9478">変更になった</a>ためです。</p>

<p>Goの中の人的には「この挙動が原因で万が一トラブルになっても、クライアントがリトライしてくれるから大丈夫でしょ」とのことのようです。
サーバシャットダウン以外にもネットワークトラブル等でも接続は切れるので、
クライアント側で頑張ってというのは正論ですが、
どの程度エラーが増えるのかは気になるところです。</p>

<h3>go-gracedownの対応</h3>

<p>go-gracedownはGo1.8でコンパイルされたときはbuild-inの機能を直接使うようになります。
中身はほとんどがインターフェースの互換性を保つためのコードなので、
機能的なメリットは完全になくなってしまいました・・・。
HTTP/2サポートも問題なく動くはずです。
逆にパッケージの依存が増えること以外はデメリットはないともいえます。</p>

<p>Go1.7以下では今までの方法にフォールバックしてくれます。
というわけで、以下のような人には有用です。</p>

<ul>
<li>深淵な理由でGo1.7以下しか使えない人</li>
<li>Go1.8とGo1.7以下のサポートがどうしても必要な人</li>
<li>Go1.8にアップグレードしたけど、graceful shutdownの処理を書き換えるのがめんどくさい人</li>
</ul>


<p>ところで、環境が悪いときに性能を落としたり機能を制限することをフォールバック(fall back)というわけですが、
逆に環境が良いときに性能を上げたり機能を拡張することはなんていうんですかね？
モデムでは通信環境が良いときに高速な通信方式に切り変えることを「フォールフォワード(fall forward)」というらしいです。
「Go1.8ではbild-inのGraceful Shutdownにフォールフォワードする」で使い方あってます？</p>

<h2>使い方</h2>

<h3>Server.Shutdownを使う</h3>

<p><a href="http://qiita.com/advent-calendar/2016/go3">Go(その3) Advent Calendar</a>の
<a href="http://qiita.com/najeira/items/806cacb9bba96ff06ec4">最終日の記事</a>でも扱ってますが改めて。</p>

<pre><code class="go">package main

import (
    "context"
    "fmt"
    "log"
    "net"
    "net/http"
    "os"
    "os/signal"
    "syscall"

    "github.com/lestrrat/go-server-starter/listener"
)

func main() {
    log.Printf("start pid %d\n", os.Getpid())

    listeners, err := listener.ListenAll()
    if err != nil &amp;&amp; err != listener.ErrNoListeningTarget {
        panic(err)
    }
    var l net.Listener
    if err == listener.ErrNoListeningTarget {
        // Fallback if not running under Server::Starter
        l, err = net.Listen("tcp", ":8080")
        if err != nil {
            panic("Failed to listen to port 8080")
        }
    } else {
        l = listeners[0]
    }

    // 別goroutineでServeしていることに注意！
    srv := &amp;http.Server{Handler: newHandler()}
    go func() {
        srv.Serve(l)
    }()

    // mainの中でシグナルの待受をしていることに注意！
    signal_chan := make(chan os.Signal)
    signal.Notify(signal_chan, syscall.SIGTERM)
    for {
        s := &lt;-signal_chan
        if s == syscall.SIGTERM {
            log.Printf("SIGTERM!!!!\n")
            srv.Shutdown(context.Background())
            return
        }
    }
}

func newHandler() http.Handler {
    mux := http.NewServeMux()
    mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
        fmt.Fprintf(w, "from pid %d.\n", os.Getpid())
    })
    return mux
}
</code></pre>

<p>go-gracedownからの移行するさいの注意点は以下の通りです。</p>

<ul>
<li><code>Server.Shutdown</code>を使う(<code>Serer.Close</code>もあるけど、そっちはGracefulではない)</li>
<li><code>Server.Serve</code>は<strong>シャットダウンが始まる</strong>とすぐに制御を返す(<strong>シャットダウンが終わる</strong>とではない)</li>
<li><code>Server.Shutdown</code>は<strong>シャットダウンが終わる</strong>と制御を返す(<strong>シャットダウンが始まる</strong>とではない)</li>
</ul>


<h3>go-gracedownを使う</h3>

<p>go-gracedownの使い方も再掲しておきます。
Go1.6から利用方法は一切変更はないですが、
Go1.8でコンパイルすると<code>Server.Shutdown</code>を利用してくれます。</p>

<pre><code class="go">package main

import (
    "fmt"
    "log"
    "net"
    "net/http"
    "os"
    "os/signal"
    "syscall"

    "github.com/lestrrat/go-server-starter/listener"
    "github.com/shogo82148/go-gracedown"
)

func main() {
    log.Printf("start pid %d\n", os.Getpid())

    signal_chan := make(chan os.Signal)
    signal.Notify(signal_chan, syscall.SIGTERM)
    go func() {
        for {
            s := &lt;-signal_chan
            if s == syscall.SIGTERM {
                log.Printf("SIGTERM!!!!\n")
                gracedown.Close()
            }
        }
    }()

    listeners, err := listener.ListenAll()
    if err != nil &amp;&amp; err != listener.ErrNoListeningTarget {
        panic(err)
    }
    var l net.Listener
    if err == listener.ErrNoListeningTarget {
        // Fallback if not running under Server::Starter
        l, err = net.Listen("tcp", ":8080")
        if err != nil {
            panic("Failed to listen to port 8080")
        }
    } else {
        l = listeners[0]
    }

    gracedown.Serve(l, newHandler())
}

func newHandler() http.Handler {
    mux := http.NewServeMux()
    mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
        fmt.Fprintf(w, "from pid %d.\n", os.Getpid())
    })
    return mux
}
</code></pre>

<h3>HTTP/2を使う</h3>

<p>せっかくHTTP/2にも対応したことなので、
Server::Starterを使ってHTTP/2サーバのGraceful Restartをする例も書いてみました。</p>

<pre><code class="go">package main

import (
    "context"
    "crypto/tls"
    "fmt"
    "log"
    "net"
    "net/http"
    "os"
    "os/signal"
    "syscall"

    "github.com/lestrrat/go-server-starter/listener"
)

// net/http/internal/testcert.go から拝借
var localhostCert = []byte(`-----BEGIN CERTIFICATE-----
MIICEzCCAXygAwIBAgIQMIMChMLGrR+QvmQvpwAU6zANBgkqhkiG9w0BAQsFADAS
MRAwDgYDVQQKEwdBY21lIENvMCAXDTcwMDEwMTAwMDAwMFoYDzIwODQwMTI5MTYw
MDAwWjASMRAwDgYDVQQKEwdBY21lIENvMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB
iQKBgQDuLnQAI3mDgey3VBzWnB2L39JUU4txjeVE6myuDqkM/uGlfjb9SjY1bIw4
iA5sBBZzHi3z0h1YV8QPuxEbi4nW91IJm2gsvvZhIrCHS3l6afab4pZBl2+XsDul
rKBxKKtD1rGxlG4LjncdabFn9gvLZad2bSysqz/qTAUStTvqJQIDAQABo2gwZjAO
BgNVHQ8BAf8EBAMCAqQwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDwYDVR0TAQH/BAUw
AwEB/zAuBgNVHREEJzAlggtleGFtcGxlLmNvbYcEfwAAAYcQAAAAAAAAAAAAAAAA
AAAAATANBgkqhkiG9w0BAQsFAAOBgQCEcetwO59EWk7WiJsG4x8SY+UIAA+flUI9
tyC4lNhbcF2Idq9greZwbYCqTTTr2XiRNSMLCOjKyI7ukPoPjo16ocHj+P3vZGfs
h1fIw3cSS2OolhloGw/XM6RWPWtPAlGykKLciQrBru5NAPvCMsb/I1DAceTiotQM
fblo6RBxUQ==
-----END CERTIFICATE-----`)

var localhostKey = []byte(`-----BEGIN RSA PRIVATE KEY-----
MIICXgIBAAKBgQDuLnQAI3mDgey3VBzWnB2L39JUU4txjeVE6myuDqkM/uGlfjb9
SjY1bIw4iA5sBBZzHi3z0h1YV8QPuxEbi4nW91IJm2gsvvZhIrCHS3l6afab4pZB
l2+XsDulrKBxKKtD1rGxlG4LjncdabFn9gvLZad2bSysqz/qTAUStTvqJQIDAQAB
AoGAGRzwwir7XvBOAy5tM/uV6e+Zf6anZzus1s1Y1ClbjbE6HXbnWWF/wbZGOpet
3Zm4vD6MXc7jpTLryzTQIvVdfQbRc6+MUVeLKwZatTXtdZrhu+Jk7hx0nTPy8Jcb
uJqFk541aEw+mMogY/xEcfbWd6IOkp+4xqjlFLBEDytgbIECQQDvH/E6nk+hgN4H
qzzVtxxr397vWrjrIgPbJpQvBsafG7b0dA4AFjwVbFLmQcj2PprIMmPcQrooz8vp
jy4SHEg1AkEA/v13/5M47K9vCxmb8QeD/asydfsgS5TeuNi8DoUBEmiSJwma7FXY
fFUtxuvL7XvjwjN5B30pNEbc6Iuyt7y4MQJBAIt21su4b3sjXNueLKH85Q+phy2U
fQtuUE9txblTu14q3N7gHRZB4ZMhFYyDy8CKrN2cPg/Fvyt0Xlp/DoCzjA0CQQDU
y2ptGsuSmgUtWj3NM9xuwYPm+Z/F84K6+ARYiZ6PYj013sovGKUFfYAqVXVlxtIX
qyUBnu3X9ps8ZfjLZO7BAkEAlT4R5Yl6cGhaJQYZHOde3JEMhNRcVFMO8dJDaFeo
f9Oeos0UUothgiDktdQHxdNEwLjQf7lJJBzV+5OtwswCWA==
-----END RSA PRIVATE KEY-----`)

func main() {
    log.Printf("start pid %d\n", os.Getpid())

    listeners, err := listener.ListenAll()
    if err != nil &amp;&amp; err != listener.ErrNoListeningTarget {
        panic(err)
    }
    var l net.Listener
    if err == listener.ErrNoListeningTarget {
        // Fallback if not running under Server::Starter
        l, err = net.Listen("tcp", ":8080")
        if err != nil {
            panic("Failed to listen to port 8080")
        }
    } else {
        l = listeners[0]
    }
    cert, err := tls.X509KeyPair(localhostCert, localhostKey)
    if err != nil {
        panic(err)
    }
    tlsConfig := &amp;tls.Config{
        NextProtos:   []string{"h2"},
        Certificates: []tls.Certificate{cert},
    }

    srv := &amp;http.Server{
        Handler:   newHandler(),
        TLSConfig: tlsConfig,
    }
    l = tls.NewListener(l, tlsConfig)
    go func() {
        srv.Serve(l)
    }()

    signal_chan := make(chan os.Signal)
    signal.Notify(signal_chan, syscall.SIGTERM)
    for {
        s := &lt;-signal_chan
        if s == syscall.SIGTERM {
            log.Printf("SIGTERM!!!!\n")
            srv.Shutdown(context.Background())
            return
        }
    }
}

func newHandler() http.Handler {
    mux := http.NewServeMux()
    mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
        fmt.Fprintf(w, "from pid %d.\n", os.Getpid())
    })
    return mux
}
</code></pre>

<p><code>NextProtos</code>へ明示的に<code>h2</code>を指定する必要があるのがポイントです。
net/httpはデフォルトでHTTP/2を有効にしてくれますが、
<code>TLSConfig</code>が指定されているときは自前でやる必要があります。</p>

<h2>実験</h2>

<p>HTTP/2に対応していて証明書の検証もスキップできて・・・という条件で
ベンチマークソフトを探すのが面倒だったので、Goで自作です。
あまり詳しい統計情報は要らないので、負荷をかけるのにリソースを割きたかったというのもあります。</p>

<pre><code class="go">package main

import (
    "crypto/tls"
    "flag"
    "io"
    "io/ioutil"
    "log"
    "net"
    "net/http"
    "time"

    "github.com/kayac/parallel-benchmark/benchmark"
    "golang.org/x/net/http2"
)

type myWorker struct {
    URL    string
    client *http.Client
    buf    []byte
}

func (w *myWorker) Setup() {
    tr := &amp;http.Transport{
        Proxy: http.ProxyFromEnvironment,
        DialContext: (&amp;net.Dialer{
            Timeout:   30 * time.Second,
            KeepAlive: 30 * time.Second,
        }).DialContext,
        MaxIdleConns:        1,
        IdleConnTimeout:     90 * time.Second,
        TLSHandshakeTimeout: 10 * time.Second,
        TLSClientConfig: &amp;tls.Config{
            // テストなので証明書の検証はスキップ
            // プロダクションでは必ず有効にしてください！
            InsecureSkipVerify: true,
        },
        ExpectContinueTimeout: 1 * time.Second,
    }
    if err := http2.ConfigureTransport(tr); err != nil {
        panic(err)
    }
    w.client = &amp;http.Client{
        Transport: tr,
    }
    w.buf = make([]byte, 1024)
}

func (w *myWorker) Teardown() {
}

func (w *myWorker) Process() (subscore int) {
    resp, err := w.client.Get(w.URL)
    if err != nil {
        log.Printf("ERROR: %v", err)
        return 0
    }
    _, err = io.CopyBuffer(ioutil.Discard, resp.Body, w.buf)
    resp.Body.Close()
    if err != nil &amp;&amp; err != io.EOF {
        log.Printf("ERROR: %v", err)
        return 0
    }
    if resp.StatusCode != http.StatusOK {
        log.Printf("Invalid Status: %d", resp.StatusCode)
        return 0
    }
    return 1
}

func main() {
    var (
        conn     int
        duration time.Duration
    )
    flag.IntVar(&amp;conn, "c", 1, "connections to keep open")
    flag.DurationVar(&amp;duration, "d", time.Second, "duration of benchmark")
    flag.Parse()
    url := flag.Args()[0]
    workers := make([]benchmark.Worker, conn)
    for i, _ := range workers {
        workers[i] = &amp;myWorker{URL: url}
    }
    benchmark.Run(workers, duration)
}
</code></pre>

<p>前回記事同様、Server::Starterを使って1秒毎に再起動を繰り返しながらベンチを回します。
AWSのc4.largeインスタンス上で実行しました。</p>

<pre><code class="bash">$ start_server --port 8080 --pid-file app.pid -- ./main
$ while true; do kill -HUP `cat app.pid`; sleep 1; done
$ ./bin/bench -c 10 -d=1m http://localhost:8080/
</code></pre>

<h2>結果</h2>

<h3>Server.Shutdownを使った場合</h3>

<p>Server.Shutdownを使った場合の結果です。</p>

<pre><code class="plain">$ ./bin/bench -c 10 -d=1m http://localhost:8080/
2017/01/22 12:20:51 starting benchmark: concurrency: 10, time: 1m0s, GOMAXPROCS: 2
2017/01/22 12:21:51 done benchmark: score 1174412, elapsed 1m0.002557914s = 19572.698912 / sec
</code></pre>

<p>先程紹介したKeepAliveの挙動変更の影響で多少はエラーがでるのでは？と予想していたものの、
まったく影響はありませんでした。</p>

<h3>go-gracedownを使った場合</h3>

<p>go-gracedownを使った場合の結果です。</p>

<pre><code class="plain">$ ./bin/bench -c 10 -d=1m http://localhost:8080/
2017/01/22 12:22:26 starting benchmark: concurrency: 10, time: 1m0s, GOMAXPROCS: 2
2017/01/22 12:23:26 done benchmark: score 1160878, elapsed 1m0.009764419s = 19344.818485 / sec
</code></pre>

<p>中身は<code>Server.Shutdown</code>なので、当然ながら同じ結果です。</p>

<h3>HTTP/2でアクセスした場合</h3>

<p>HTTP/2でアクセスした場合の結果です。
GoのHTTP/2サポートはHTTPSで通信したときにしか有効にならないので、他のベンチとURLが違うことに注意。</p>

<pre><code class="plain">$ ./bin/bench -c 10 -d=1m https://localhost:8080/
2017/01/22 12:30:04 starting benchmark: concurrency: 10, time: 1m0s, GOMAXPROCS: 2
2017/01/22 12:31:04 done benchmark: score 666801, elapsed 1m0.001842465s = 11113.008745 / sec
</code></pre>

<p>特にエラーもなく、全く問題ありませんでした。</p>

<h2>まとめ</h2>

<ul>
<li>Go1.8からサポートされる予定のHTTPサーバのGraceful Shutdownについて検証しました

<ul>
<li>HTTP/1.1とHTTP/2で検証しましたが、特に問題は見つかりませんでした</li>
</ul>
</li>
<li>go-gracedownはGo1.8でコンパイルされたときはbuild-inの機能を使うようになります

<ul>
<li>機能的にはbuild-inの機能を直接使う場合とまったく変わりありません</li>
</ul>
</li>
</ul>


<p>Go1.8の正式リリース楽しみですね！</p>

<h2>参考</h2>

<ul>
<li><a href="https://shogo82148.github.io/blog/2015/05/03/golang-graceful-restart/">Go言語でGraceful Restartをする</a></li>
<li><a href="https://shogo82148.github.io/blog/2015/11/23/golang-graceful-restart-2nd/">Go言語でGraceful Restartをするときに取りこぼしを少なくする</a></li>
<li><a href="https://github.com/golang/go/issues/4674">net/http: add built-in graceful shutdown support to Server #4674</a></li>
<li><a href="https://github.com/golang/go/issues/9478">net/http: make Server.SetKeepAlivesEnabled(false) drop currently-open connections #9478</a></li>
<li><a href="http://qiita.com/najeira/items/806cacb9bba96ff06ec4">Go 1.8 の HTTP Server Graceful Shutdown を試す</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
