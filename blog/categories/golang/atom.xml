<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: golang | Shogo's Blog]]></title>
  <link href="http://shogo82148.github.io/blog/categories/golang/atom.xml" rel="self"/>
  <link href="http://shogo82148.github.io/"/>
  <updated>2015-12-17T18:37:35+09:00</updated>
  <id>http://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Go言語でGraceful Restartをするときに取りこぼしを少なくする]]></title>
    <link href="http://shogo82148.github.io/blog/2015/11/23/golang-graceful-restart-2nd/"/>
    <updated>2015-11-23T20:51:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/11/23/golang-graceful-restart-2nd</id>
    <content type="html"><![CDATA[<p>少し前に<a href="https://github.com/kazuho/Starlet">Starlet</a>にGraceful Restartが時たま上手く動かない問題を修正する<a href="https://github.com/kazuho/Starlet/pull/21">pullreq</a>を投げました。
原因は割り込みハンドラ内でexitを呼んでいたからでした。
「割り込みハンドラ内ではフラグを建てるだけ」
「メインのプログラム内でそのフラグを見て分岐する」という原則があるのですが、それを守るのは難しいということですね。
(しかし新たな問題を産んでしまい<a href="https://github.com/kazuho/Starlet/pull/23">revertされてしまいましたが・・・</a>
まあ修正後のコードも考え方は一緒です。割り込みホント難しい・・・)</p>

<p>このpullreqを取り込んでもらうときに再現実験をやってみたのですが、
Goでもちゃんと動くのかな？と気になったので
<a href="http://shogo82148.github.io/blog/2015/05/03/golang-graceful-restart/">Go言語でGraceful Restartをする</a>で紹介した
プログラムに同じテストをやってみました。</p>

<!-- More -->


<h2>mannersでテストしてみる</h2>

<p>前回の記事では<a href="https://github.com/braintree/manners">manners</a>と<a href="https://github.com/lestrrat/go-server-starter">go-server-starter</a>の
組み合わせが良さそうとの結論になったので、この組み合わせでテストしてみます。
以下テストに使用したコードです。
(今回の内容とは直接関係は無いですが、go-server-starterに変更が入ってFallbackのやり方が前回から少し変わってます)</p>

<p>``` go
package main</p>

<p>import (</p>

<pre><code>    "fmt"
    "log"
    "net"
    "net/http"
    "os"
    "os/signal"
    "syscall"
    "time"

    "github.com/braintree/manners"
    "github.com/lestrrat/go-server-starter/listener"
</code></pre>

<p>)</p>

<p>var now = time.Now()</p>

<p>func main() {</p>

<pre><code>    log.Printf("start pid %d\n", os.Getpid())

    signal_chan := make(chan os.Signal)
    signal.Notify(signal_chan, syscall.SIGTERM)
    go func() {
            for {
                    s := &lt;-signal_chan
                    if s == syscall.SIGTERM {
                            log.Printf("SIGTERM!!!!\n")
                            manners.Close()
                    }
            }
    }()

    listeners, err := listener.ListenAll()
    if err != nil &amp;&amp; err != listener.ErrNoListeningTarget {
            panic(err)
    }
    var l net.Listener
    if err == listener.ErrNoListeningTarget {
            // Fallback if not running under Server::Starter
            l, err = net.Listen("tcp", ":8080")
            if err != nil {
                    panic("Failed to listen to port 8080")
            }
    } else {
            l = listeners[0]
    }

    manners.Serve(l, newHandler())
</code></pre>

<p>}</p>

<p>func newHandler() http.Handler {</p>

<pre><code>    mux := http.NewServeMux()
    mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
            fmt.Fprintf(
                    w,
                    "from pid %d.\n",
                    os.Getpid(),
            )
    })
    return mux
</code></pre>

<p>}
```</p>

<p>1秒毎にgraceful restartを行いながら負荷をかけます。
以下のコマンドを別々のターミナルから実行します。
<code>go run main.go</code>だと自分で書いたプログラムがシグナルを受け取れなくなってしまうので、
<code>go build main.go</code>とコンパイルしてから実行するところがポイントです。</p>

<p><code>bash
$ start_server --port 8080 --pid app.pid -- ./main
$ while true; do kill -HUP `cat app.pid`; sleep 1; done
$ ab -r -n 1000000 -c 10 http://localhost:8080/
</code></p>

<p><a href="https://gist.github.com/shogo82148/a1524f31292202ec34f3#file-manners">mannersを使った場合の実験結果</a>へのリンクを貼っておきます。
「Failed requests:        122」となっており、残念ながら取りこぼしが発生してしまいました。
負荷をかけた時間は72.437秒なので、70回ほどリスタートをかけたことになります。
github-flowを採用しているようなところだと毎日数回デプロイをするということも珍しくないので、
1〜2ヶ月も運用していれば一度くらいはこの現象に遭遇することになります(秒間1万リクエストさばく必要のあるようなサービスの場合ですが)。
ちょっと気になりますね。</p>

<h2>自分で書いてみた</h2>

<p>mannersの改造、難しそうだったので、自分で書いてみました。</p>

<ul>
<li>https://github.com/shogo82148/go-gracedown</li>
</ul>


<p>mannersと全く同じインタフェースなので、s/manners/gracedown/するだけです。
これを使って実験してみた結果がこちら https://gist.github.com/shogo82148/a1524f31292202ec34f3#file-gracedown
「Failed requests:        0」やったね！</p>

<h2>その他メモ</h2>

<p>これ書くのに色々しらべたのでメモとして残しておきます。</p>

<h3>acceptの直後にcloseされた場合の挙動について</h3>

<p>Starletで起こっていた不具合の原因は、
acceptから処理が帰ってきてからcanExitフラグを落とすまでにわずかな期間があるのが問題でした。
この期間にシグナルを受け取ると間違えてサーバを終了させてしまいます。
GoでもacceptしてからステートがStateNewになるまでの間に若干の時間差があるので、
ここが問題にならないか少し気になっていました。</p>

<p>net/httpの処理を追ってみると、acceptとStateNewは<code>Serve(net.Listener)</code>を実行したのと同じgoroutineで実行されているようです。
したがって、サーバシャットダウンの判定も<code>Serve(net.Listener)</code>と同じgoroutineで行えば、
誤ってacceptしてからステートがStateNewになるまでの間にサーバをシャットダウンしてしまうことは防げるということがわかりました。</p>

<h3>Acceptがブロックしているのを解除する方法について</h3>

<p><a href="http://qiita.com/hiratara/items/0f0b6103a0dc9280cea9">UnixListener.Closeでソケットファイルが消えて困っている</a> という記事に</p>

<blockquote><p>POSIX では Close() を呼んだからといって Accept() が制御を戻してくれる保証はないといことでしょうか。</p></blockquote>

<p>という一文が書いてありました。</p>

<p>これについて実際はどうなんだろうと調べてみたところ<a href="net.Listener">https://golang.org/pkg/net/#Listener</a>のコメントに</p>

<blockquote><p>Close closes the listener.
Any blocked Accept operations will be unblocked and return errors.</p></blockquote>

<p>とありました。
このコメントを読む限りGo言語では「<code>Close()</code> を呼んだら<code>Accept()</code>が制御を戻す」と考えて良さそうです。
POSIXでどう規定されているかまでは調査しきれていませんが、
たとえどう規定されていようとも互換性を保つために裏で色々やってくれていると信じています。</p>

<p>この記事の主題である「UnixListener.Closeでソケットファイルが消えて困っている」件についても調べてはみたのですが、
結論は出ませんでした・・・。
たしかにソケットファイルは使い終わったらunlinkすることが推奨されているということがわかったくらいです。
nameが「@」で始まっていると「abstract socket address」と見なされて削除されなくなるから、「@」をテキトウにつけるとか・・・？</p>

<h3>keep-aliveの挙動について</h3>

<p>mannersはKeep-Aliveなコネクションがあった場合でも、それがIdle状態であればシャットダウンしてしまいます。
それに対してgo-gracedownは全部のコネクションがClosedになるまでまちます。
終了処理に入った段階でKeep-Aliveは無効にしているので、
go-gracedown側で特に操作しなくてもnet/httpがそのうちクローズしてくれるだろうとの考えからです。</p>

<p>Keep-Aliveはクライアントからリクエストがないと切断できない(レスポンスに「Connection: Close」ヘッダを含める必要があるため)ので
リクエストがないと永遠にシャットダウンできません。
それでは困るので一応タイムアウトも入れてあります。</p>

<p>この挙動のおかげで<a href="https://github.com/rakyll/boom">boom</a>(http benchで検索したら一番上にきた)でのベンチでも
<a href="https://gist.github.com/shogo82148/a1524f31292202ec34f3#file-gracedown-boom">エラー無しで処理できています</a>。
ちなみにApache Benchでも-kオプションでKeep-Aliveを有効にできるのですが、
HTTP/1.0だと「Connection: Close」を送る方法が使えないので、<a href="https://gist.github.com/shogo82148/a1524f31292202ec34f3#file-gracedown-keep-alive">残念ながらエラーが出てしまいました</a>。</p>

<h2>まとめ</h2>

<ul>
<li>実験の結果<a href="https://github.com/braintree/manners">manners</a>はときどきGraceful Shutdownに失敗する場合があることがわかった</li>
<li><a href="https://github.com/shogo82148/go-gracedown">go-gracedown</a>というのを書いてみた

<ul>
<li>今回行った再現実験ではすべてのリクエストを正常に処理できました</li>
</ul>
</li>
<li>Graceful Restartむずかしい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goオールスターズで登壇してきました]]></title>
    <link href="http://shogo82148.github.io/blog/2015/10/14/go-all-stars/"/>
    <updated>2015-10-14T08:11:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/10/14/go-all-stars</id>
    <content type="html"><![CDATA[<p>先週の日曜日に登壇してきました。</p>

<p><iframe src="https://www.slideshare.net/slideshow/embed_code/key/gC0o0V8Vx7tI9z" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/shogo82148/go-go-53787565" title="過去に自作したGoプロダクトの紹介 - Goオールスターズ" target="_blank">過去に自作したGoプロダクトの紹介 - Goオールスターズ</a> </strong> from <strong><a href="http://www.slideshare.net/shogo82148" target="_blank">Shogo Ichinose</a></strong> </div>

</p>

<ul>
<li><a href="http://www.slideshare.net/shogo82148/go-go-53787565">過去に自作したGoプロダクトの紹介 - Goオールスタース</a></li>
</ul>


<!-- More -->


<p>発表の10日くらい前にsongmuさんがKAYACのIRCに現われオールスターを募集に来てくださったものの、
弊社スターの都合がつかないため僕が代わりに発表してきました。</p>

<p>KAYACではGoプロダクトたくさん動いていますが説明は作者にお任せしたほうがいいかなと思い、
自作のGoプロダクトをメインに発表してきました。</p>

<ul>
<li><a href="https://github.com/shogo82148/go-rgba4444">go-rgba4444</a></li>
<li><a href="https://github.com/shogo82148/androidbinary">androidbinary</a> - <a href="http://shogo82148.github.io/blog/2014/05/07/androidbinary/">Androidのバイナリファイルを解析するgoのライブラリ</a></li>
<li><a href="https://github.com/shogo82148/go-sql-proxy">go-sql-proxy</a> - <a href="http://shogo82148.github.io/blog/2015/05/13/golang-sql-proxy/">Go言語でSQLのトレースをする</a></li>
<li><a href="https://github.com/shogo82148/go-dithering">go-dithering</a> - <a href="http://shogo82148.github.io/blog/2015/04/25/quantize-image-in-golang/">Go言語で画像の減色を行う</a></li>
<li><a href="https://github.com/shogo82148/go-prove">go-prove</a>/<a href="https://github.com/shogo82148/go-tap">go-tap</a> - <a href="http://shogo82148.github.io/blog/2015/09/19/faster-perl-test-with-go-lang/">Go言語でPerlのテストを早くする</a></li>
<li><a href="https://github.com/shogo82148/go-webtail">go-webtail</a>/<a href="https://github.com/shogo82148/go-tail">go-webtail</a> - <a href="http://shogo82148.github.io/blog/2015/06/21/go-webtail/">Go-webtailってのを書いた</a></li>
</ul>


<p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">go-prove、CPANに上げればいいんじゃない？w <a href="https://twitter.com/hashtag/eventdots?src=hash">#eventdots</a></p>&mdash; songmu (@songmu) <a href="https://twitter.com/songmu/status/653100524296736768">October 11, 2015</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>Perl Archive Network とはいったい・・・</p>

<p>KAYACではいろんなGoプロダクトが動いているのでこちらもどうぞ。</p>

<ul>
<li><a href="https://github.com/kayac/go-katsubushi">go-katsubushi</a> snowﬂake-likeなIDジェネレータ</li>
<li><a href="https://github.com/fujiwara/stretcher">stretcher</a> Consul/Surfと連携したデプロイツール</li>
<li><a href="https://github.com/fujiwara/Rin">rin</a> AWS-S3に出力されたログをRedshiftへインポートするツール</li>
<li><a href="https://github.com/acidlemon/mirage">mirage</a> Dockerを使ったテスト用環境構築</li>
<li><a href="https://github.com/kayac/alphawing">alphawing</a> Android/iOSアプリの社内配信ツール</li>
</ul>


<p>スライドにちょこちょこ修正いれててGopherくん人形もらうの忘れてたけどもらっておけばよかった。</p>

<p>他の人の発表はこちら。</p>

<ul>
<li><a href="http://eventdots.jp/event/571126">Goオールスターズ</a></li>
<li><a href="http://togetter.com/li/885585">GoオールスターズToggetterまとめ</a></li>
<li><a href="http://www.songmu.jp/riji/entry/2015-10-12-go-all-stars.html">Goオールスターズで登壇してきました - おそらくはそれさえも平凡な日々</a></li>
<li><a href="http://ymotongpoo.hatenablog.com/entry/2015/10/13/104247">Goオールスターズでpackage managementについて話してきました - YAMAGUCHI::weblog</a></li>
<li><a href="http://www.slideshare.net/takuyaueda967/go-53785408">Goだけでモバイルアプリを作ろう</a></li>
<li><a href="http://bokko.hatenablog.com/entry/2015/10/12/151641">Goオールスターズ - 考える人、コードを書く人</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go言語でSQLのトレースをする]]></title>
    <link href="http://shogo82148.github.io/blog/2015/05/13/golang-sql-proxy/"/>
    <updated>2015-05-13T01:22:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/05/13/golang-sql-proxy</id>
    <content type="html"><![CDATA[<p>ぴっぴ先輩が「Go言語で発行したクエリを確認したい」って言ってて、
「MySQL使っているならGeneral Logを吐けばよいのでは？」と返したんだけども、
もっと汎用的な方法はないものかと考えてみました。</p>

<!-- More -->


<p>Golangの <code>database/sql</code> はどんなDBでも対応できるよう、ドライバを自由に入れ替えることができます。
ドライバは単に<code>database/sql/driver</code>にあるインターフェースを満たしている何かなので、
ユーザが自由に作ることができるし、<code>interface</code>を経由して直接呼び出すことも可能です。
この仕組を使って、別のドライバにそのまま渡すプロキシを作れば、ログを吐けるのでは？ということでやってみました。</p>

<ul>
<li><a href="https://github.com/shogo82148/go-sql-proxy">go-sql-proxy</a></li>
</ul>


<h2>使い方</h2>

<p>まず最初にgo-sql-proxyをドライバとして登録します。</p>

<p>``` go
hooks := &amp;proxy.Hooks{</p>

<pre><code>// Hook functions here(Open, Exec, Query, etc.)
</code></pre>

<p>}
sql.Register("new-proxy-name", proxy.NewProxy(&amp;another.Driver{}, hooks))
```</p>

<p>あとは登録したドライバと使って新しいDBハンドラを開くだけです。</p>

<p><code>go
db, err := sql.Open("new-proxy-name", dataSourceName)
</code></p>

<p>このハンドラを使ってクエリ実行を行うと、Hooksで登録した関数が呼び出されます。
元のドライバを直接使った場合と同じように振る舞うので、既存のコードを一切変えること無くHookを差し込めて便利！</p>

<h2>トレーサの例</h2>

<p>簡単なトレーサを書いてみるとこんな感じ。
発行したSQLのクエリをログに吐き出します。</p>

<p>``` go
package proxy</p>

<p>import (</p>

<pre><code>"database/sql"
"database/sql/driver"
"log"

"github.com/mattn/go-sqlite3"
"github.com/shogo82148/txmanager"
</code></pre>

<p>)</p>

<p>func main() {</p>

<pre><code>sql.Register("sqlite3-proxy", NewProxy(&amp;sqlite3.SQLiteDriver{}, &amp;Hooks{
    Open: func(conn *Conn) error {
        log.Println("Open")
        return nil
    },
    Exec: func(stmt *Stmt, args []driver.Value, result driver.Result) error {
        log.Printf("Exec: %s; args = %v\n", stmt.QueryString, args)
        return nil
    },
    Query: func(stmt *Stmt, args []driver.Value, rows driver.Rows) error {
        log.Printf("Query: %s; args = %v\n", stmt.QueryString, args)
        return nil
    },
    Begin: func(conn *Conn) error {
        log.Println("Begin")
        return nil
    },
    Commit: func(tx *Tx) error {
        log.Println("Commit")
        return nil
    },
    Rollback: func(tx *Tx) error {
        log.Println("Rollback")
        return nil
    },
}))

db, err := sql.Open("sqlite3-proxy", ":memory:")
if err != nil {
    log.Fatalf("Open filed: %v", err)
}
defer db.Close()

_, err = db.Exec(
    "CREATE TABLE t1 (id INTEGER PRIMARY KEY)",
)
if err != nil {
    log.Fatal(err)
}
</code></pre>

<p>}
```</p>

<h2>おまけ機能</h2>

<p><code>proxy.NewTraceProxy</code> を使うと上記のコードと同様のプロキシを簡単につくれます。
<code>db.Exec</code>, <code>db.Query</code> 等の呼び出しもとを報告するという便利機能付き。
ただ、<code>logger.Output(6, "Begin")</code> みたいな感じで「6個スタックトレースをさかのぼってログに表示」という実装をしているので、
<code>database/sql</code>のアップデートと共にすぐに壊れそう。(<code>database/sql</code>で何回関数呼び出しがあったかに強く依存している)
一応、Go1.1から1.4までで同じ結果を返すことは確認はしてるんだけど、将来のことまではちょっと分からない・・・。
あんまり信用はしないほうがいいかも。</p>

<p>こういう情報を知りたい場合どうするのがいいんだろうね。
この前作った<a href="http://shogo82148.github.io/blog/2015/05/09/go-txmanager/">txmanger</a>のレベルでプロキシを作ったほうがいいのかなあ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goのトランザクションマネージャ作った]]></title>
    <link href="http://shogo82148.github.io/blog/2015/05/09/go-txmanager/"/>
    <updated>2015-05-09T15:17:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/05/09/go-txmanager</id>
    <content type="html"><![CDATA[<p>Golangの<code>database/sql</code>はBeginとCommitでトランザクションの制御を行うことができます。
クエリの実行が確実に成功するのであれば難しくは無いのですが、
トランザクション内でエラーが発生場合、確実にトランザクションを終了させるのは少し面倒です。
また、ネストができないので、「トランザクションの中から呼び出しても外から呼び出しても、関数の中はトランザクション内」みたいなことができません。
Perlには<a href="https://metacpan.org/release/DBIx-TransactionManager">DBIx-TransactionManager</a>というものがあるのですが、
このGolang版が欲しくなったので作ってみました。</p>

<ul>
<li><a href="https://github.com/shogo82148/txmanager">txmanager</a></li>
</ul>


<!-- More -->


<h2>簡単な使い方</h2>

<p><code>sql.DB</code> をラップした <code>txmanager.DB</code> を使います。
<code>Begin</code>, <code>Commit</code> する代わりに <code>TxBegin</code>, <code>TxCommit</code> を使ってトランザクションを開始・終了すると
txmanagerの管理下になります。
確実にトランザクションが終了させるために、トランザクションを開始したら<code>defer tx.TxFinish()</code>を忘れないように。</p>

<p>``` go
import (</p>

<pre><code>"database/sql"

"github.com/shogo82148/txmanager"
</code></pre>

<p>)</p>

<p>func Example(db *sql.DB) {</p>

<pre><code>dbm := txmanager.NewDB(db)

// トランザクション開始
tx, _ := dbm.TxBegin()
defer tx.TxFinish()

// INSERTはトランザクションの中で実行される
_, err := tx.Exec("INSERT INTO t1 (id) VALUES(1)")
if err != nil {
    tx.TxRollback()
}
tx.TxCommit()
</code></pre>

<p>}
```</p>

<p>実際にはこれに加えてエラー処理も必要です。
<code>txmanager.Do</code> を使うと、トランザクションの開始処理・終了をtxmangerがやってくれるので少し楽になります。</p>

<p>``` go
import (</p>

<pre><code>"database/sql"

"github.com/shogo82148/txmanager"
</code></pre>

<p>)</p>

<p>func Example(db *sql.DB) error {</p>

<pre><code>dbm := txmanager.NewDB(db)
return txmanager.Do(dbm, func(tx txmanager.Tx) error {
    // INSERTはトランザクションの中で実行される
    _, err := tx.Exec("INSERT INTO t1 (id) VALUES(1)")
    return err
})
</code></pre>

<p>}
```</p>

<h2>トランザクションをネストする</h2>

<p>以下のようにトランザクションをネストすることができます。
ネストした内側のトランザクションは<code>TxCommit</code>しても特に何もしません。
一番外側のトランザクションで<code>TxCommit</code>が実行されたときにコミットが行われます。</p>

<p>``` go
import (</p>

<pre><code>"database/sql"

"github.com/shogo82148/txmanager"
</code></pre>

<p>)</p>

<p>//トランザクションの外からでも中からでもFooを呼び出すことができる
func Example(db *sql.DB) {</p>

<pre><code>dbm := txmanager.NewDB(db)

txmanager.Do(dbm, func(tx txmanager.Tx) error {
    txmanager.Do(tx, func(tx txmanager.Tx) error {
        // INSERTはトランザクションの中で実行される
        _, err := tx.Exec("INSERT INTO t1 (id) VALUES(1)")
        return err
    })
    // この時点ではまだコミットされていない
    _, err := tx.Exec("INSERT INTO t1 (id) VALUES(2)")
    return err
})
// 全部のトランザクションが終了した時点ではじめてコミットされる
</code></pre>

<p>}
```</p>

<p>トランザクションの中で実行するべき処理を、関数に切り出すときなどに便利ですね。</p>

<p>``` go
import (</p>

<pre><code>"database/sql"

"github.com/shogo82148/txmanager"
</code></pre>

<p>)</p>

<p>func Foo(dbm *txmanager.DB) error {</p>

<pre><code>// この時点ではトランザクションの中にいるのか、外にいるのか分からない
return txmanager.Do(dbm, func(tx txmanager.Tx) error {
    // INSERTを確実にトランザクションの中で実行する
    _, err := tx.Exec("INSERT INTO t1 (id) VALUES(1)")
    return err
})
</code></pre>

<p>}</p>

<p>//トランザクションの外からでも中からでもFooを呼び出すことができる
func Example(db *sql.DB) {</p>

<pre><code>dbm := txmanager.NewDB(db)

Foo(dbm)

txmanager.Do(dbm, func(tx txmanager.Tx) error {
    return Foo(tx)
})
</code></pre>

<p>}
```</p>

<h2>コミットしたら何かする</h2>

<p><a href="https://github.com/soh335/DBIx-TransactionManager-EndHook">DBIx::TransactionManager::EndHook</a>相当の機能も追加してみました。</p>

<p>トランザクションはネスト可能なため、<code>TxCommit</code>でコミットを行ったからと言って、その場でコミットが行われるとは限りません。
後からROLLBACKされてしまう可能性があります。
例えば、以下のコードではINSERTした行はロールバックされたにもかかわらず「INSERTに成功したよ！！」というログが流れてしまいます。</p>

<p>``` go
import (</p>

<pre><code>"database/sql"

"github.com/shogo82148/txmanager"
</code></pre>

<p>)</p>

<p>func Foo(dbm *txmanager.DB) error {</p>

<pre><code>err := txmanager.Do(dbm, func(tx txmanager.Tx) error {
    _, err := tx.Exec("INSERT INTO t1 (id) VALUES(1)")
    return nil
})
if err != nil {
    return err
}
log.Println("INSERTに成功したよ！！")
return nil
</code></pre>

<p>}</p>

<p>func Example(db *sql.DB) {</p>

<pre><code>dbm := txmanager.NewDB(db)

txmanager.Do(dbm, func(tx txmanager.Tx) error {
    Foo(tx)
    // ...その他トランザクション内で実行しないといけない処理...
    // エラーが発生するとロールバックされる
    return errors.New("何かのエラー！")
})
</code></pre>

<p>}
```</p>

<p><code>TxAddEndHook</code>を使うと全てのトランザクションが正常に終了した場合にのみ処理を実行することができます。</p>

<p>``` go
func Foo(dbm *txmanager.DB) error {</p>

<pre><code>return txmanager.Do(dbm, func(tx txmanager.Tx) error {
    if _, err := tx.Exec("INSERT INTO t1 (id) VALUES(1)"); err != nil {
        return err
    }
    tx.TxAddEndHook(func() error {
        // 全てのトランザクションが正常に終了した場合にのみ呼ばれる
        log.Println("INSERTに成功したよ！！")
        return nil
    })
    return nil
})
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go言語でGraceful Restartをする]]></title>
    <link href="http://shogo82148.github.io/blog/2015/05/03/golang-graceful-restart/"/>
    <updated>2015-05-03T12:10:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/05/03/golang-graceful-restart</id>
    <content type="html"><![CDATA[<p>とあるHTTPサーバをGolangで立てようって話になったんだけど、
止まると困るので無停止でサーバ再起動をしたい。
Perlには<a href="https://metacpan.org/pod/Server::Starter">Server::Starter</a>という有名モジュールがあるんだけど、
Golangはどうなってるの？ってことで調べてみました。</p>

<!-- More -->


<h2>gracefulじゃないバージョン</h2>

<p>Golangの標準ライブラリを使ってHTTPサーバを立ててみる例。
レスポンスが一瞬で終わってしまうとよくわからないので、sleepするhandlerを追加しておきます。</p>

<p>``` go
package main</p>

<p>import (</p>

<pre><code>"fmt"
"log"
"net/http"
"os"
"time"
</code></pre>

<p>)</p>

<p>var now = time.Now()</p>

<p>func main() {</p>

<pre><code>log.Printf("start pid %d\n", os.Getpid())
s := &amp;http.Server{Addr: ":8080", Handler: newHandler()}
s.ListenAndServe()
</code></pre>

<p>}</p>

<p>// https://github.com/facebookgo/grace/blob/master/gracedemo/demo.go から一部拝借
func newHandler() http.Handler {</p>

<pre><code>mux := http.NewServeMux()
mux.HandleFunc("/sleep/", func(w http.ResponseWriter, r *http.Request) {
    duration, err := time.ParseDuration(r.FormValue("duration"))
    if err != nil {
        http.Error(w, err.Error(), 400)
        return
    }
    time.Sleep(duration)
    fmt.Fprintf(
        w,
        "started at %s slept for %d nanoseconds from pid %d.\n",
        now,
        duration.Nanoseconds(),
        os.Getpid(),
    )
})
return mux
</code></pre>

<p>}
```</p>

<p>以下のような感じで実行してみる。
(それぞれのコマンドは処理が終わるまでブロックするので、コンソールを3つ程開いて実行してね！)</p>

<p><code>plain
$ go run main.go
2015/05/03 12:04:08 start pid 69046
$ curl 'http://localhost:8080/sleep/?duration=20s'
$ kill -TERM 69046
</code></p>

<p>curlからのリクエストをさばく前に終了してしまい
<code>curl: (52) Empty reply from server</code> といわれてしまいます。</p>

<h2>facebookgo/grace</h2>

<p>facebook製の<a href="https://github.com/facebookgo/grace/gracehttp">grace</a>は
gracefulな終了と再起動をしてくれるライブラリ。</p>

<p>``` go
package main</p>

<p>import (</p>

<pre><code>"fmt"
"log"
"net/http"
"os"
"time"

"github.com/facebookgo/grace/gracehttp"
</code></pre>

<p>)</p>

<p>var now = time.Now()</p>

<p>func main() {</p>

<pre><code>log.Printf("start pid %d\n", os.Getpid())
s := &amp;http.Server{Addr: ":8080", Handler: newHandler()}
// s.ListenAndServe()
gracehttp.Serve(s)
</code></pre>

<p>}</p>

<p>// newHanderは一緒なので、以下省略。適当に補完して実行して
```</p>

<p>さっきと同じように実行してみるとリクエストを捌き切るまで終了しなくなります。</p>

<p><code>plain
$ go run main.go
2015/05/03 12:04:08 start pid 69046
2015/05/03 12:04:08 Serving [::]:8080 with pid 69046
$ curl 'http://localhost:8080/sleep/?duration=20s'
started at 2015-05-04 12:04:08.562569712 +0900 JST slept for 20000000000 nanoseconds from pid
$ kill -TERM 69046
</code></p>

<p>TERMの代わりにUSR2シグナルを送るとgracefulに再起動できる。
ただ、再起動すると最初のプロセスは死んでしまうので、daemontoolsみたいなデーモン管理ツールと一緒には使えない。
そのためデーモン化に必要なもろもろ(PID・標準出力・標準エラー等をファイルに書き出す等)は全部自前でやる必要があります。
<a href="https://github.com/facebookgo/cmdctrl">cmdctrl</a>を使うとそこら辺の処理をやってくれる。</p>

<p>``` go
package main</p>

<p>import (</p>

<pre><code>"fmt"
"log"
"net/http"
"os"
"time"

"github.com/facebookgo/cmdctrl"
"github.com/facebookgo/grace/gracehttp"
</code></pre>

<p>)</p>

<p>var now = time.Now()</p>

<p>func main() {</p>

<pre><code>cmdctrl.SimpleStart()

log.Printf("start pid %d\n", os.Getpid())
s := &amp;http.Server{Addr: ":8080", Handler: newHandler()}
gracehttp.Serve(s)
</code></pre>

<p>}</p>

<p>// newHanderは一緒なので、以下省略。適当に補完して実行して
```</p>

<p><code>plain
$ go run main.go -c hoge.conf -pidfile hoge.pid start
2015/05/03 12:04:08 start pid 69046
2015/05/03 12:04:08 Serving [::]:8080 with pid 69046
$ curl 'http://localhost:8080/sleep/?duration=20s'
started at 2015-05-04 12:04:08.562569712 +0900 JST slept for 20000000000 nanoseconds from pid
$ go run main.go stop
</code></p>

<p>ただ、デーモン化はされないみたいなので、実際に使うには他にもいろいろ工夫しないといけないっぽい。</p>

<h2>go-server-starter-listener</h2>

<p>牧さん作の<a href="https://github.com/lestrrat/go-server-starter-listener">go-server-starter-listener</a>。
Perlの<a href="https://metacpan.org/pod/Server::Starter">Server::Starter</a>と一緒に使える。</p>

<p>``` go
package main</p>

<p>import (</p>

<pre><code>"fmt"
"log"
"net"
"net/http"
"os"
"time"

"github.com/lestrrat/go-server-starter-listener"
</code></pre>

<p>)</p>

<p>var now = time.Now()</p>

<p>func main() {</p>

<pre><code>log.Printf("start pid %d\n", os.Getpid())

l, err := ss.NewListener()
if l == nil || err != nil {
    // Fallback if not running under Server::Starter
    l, err = net.Listen("tcp", ":8080")
    if err != nil {
        panic("Failed to listen to port 8080")
    }
}

s := &amp;http.Server{Handler: newHandler()}
s.Serve(l)
</code></pre>

<p>}</p>

<p>// newHanderは一緒なので、以下省略。適当に補完して実行して
```</p>

<p>以下のようにstart_serverコマンドと組み合わせて起動することで、
Server::Starterの管理下で実行されるようになります。</p>

<p><code>plain
$ start_server --port=8080 ./main
start_server (pid:6941) starting now...
starting new worker 6942
2015/05/03 08:27:54 start pid 6942
$ kill -HUP 6941
</code></p>

<p>ただ、<a href="https://github.com/lestrrat/go-server-starter-listener">go-server-starter-listener</a>自体はgracefulなシャットダウンに対応していないので、
再起動の途中のコネクションは破棄されてしまいます。
これを避けるには<a href="https://github.com/braintree/manners">manners</a>を使うといいようです。</p>

<p>``` go
package main</p>

<p>import (</p>

<pre><code>"fmt"
"log"
"net"
"net/http"
"os"
"os/signal"
"syscall"
"time"

"github.com/braintree/manners"
"github.com/lestrrat/go-server-starter-listener"
</code></pre>

<p>)</p>

<p>var now = time.Now()</p>

<p>func main() {</p>

<pre><code>log.Printf("start pid %d\n", os.Getpid())

signal_chan := make(chan os.Signal)
signal.Notify(signal_chan, syscall.SIGTERM)
go func() {
    for {
        s := &lt;-signal_chan
        if s == syscall.SIGTERM {
            manners.Close()
        }
    }
}()

l, err := ss.NewListener()
if l == nil || err != nil {
    // Fallback if not running under Server::Starter
    l, err = net.Listen("tcp", ":8080")
    if err != nil {
        panic("Failed to listen to port 8080")
    }
}

manners.Serve(l, newHandler())
</code></pre>

<p>}</p>

<p>// newHanderは一緒なので、以下省略。適当に補完して実行して
```</p>

<p>manners自体はシグナルの扱いをやってくれないみたいなので、
そこだけ自分で書く必要がありますが、
今回調べた中ではこれがベストっぽい。
自前でデーモン化はできませんが、daemontoolsが使えるのでそれで十分でしょう。</p>

<p>ちなみに、Server::StarterのGo版<a href="https://github.com/lestrrat/go-server-starter">go-server-starter</a>もあるので、
デーモン化以外はGo化できそう。</p>

<h2>2015-05-07 追記</h2>

<p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">やーやー、ドキュメント書いてなくてごめん。「こっちみんな」的なコメント書いておいた <a href="https://t.co/T9Dx3EmBmo">https://t.co/T9Dx3EmBmo</a> <a href="https://twitter.com/hashtag/golang?src=hash">#golang</a></p>&mdash; Daisuke Maki (@lestrrat) <a href="https://twitter.com/lestrrat/status/596154619740303360">May 7, 2015</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>こっち見んな！
作者の方によると、<a href="https://github.com/lestrrat/go-server-starter-listener">go-server-starter-listener</a>は非推奨らしいです。
<a href="https://github.com/lestrrat/go-server-starter">go-server-starter</a> にlistenerも一緒に入っているのでこちらを使います。</p>

<p>``` go
package main</p>

<p>import (</p>

<pre><code>"fmt"
"log"
"net"
"net/http"
"os"
"os/signal"
"syscall"
"time"

"github.com/braintree/manners"
"github.com/lestrrat/go-server-starter/listener"
</code></pre>

<p>)</p>

<p>var now = time.Now()</p>

<p>func main() {</p>

<pre><code>log.Printf("start pid %d\n", os.Getpid())

signal_chan := make(chan os.Signal)
signal.Notify(signal_chan, syscall.SIGTERM)
go func() {
    for {
        s := &lt;-signal_chan
        if s == syscall.SIGTERM {
            log.Printf("SIGTERM!!!!\n")
            manners.Close()
        }
    }
}()

listeners, err := listener.ListenAll()
if err != nil {
    panic(err)
}
var l net.Listener
if len(listeners) == 0 {
    // Fallback if not running under Server::Starter
    l, err = net.Listen("tcp", ":8080")
    if err != nil {
        panic("Failed to listen to port 8080")
    }
} else {
    l = listeners[0]
}

manners.Serve(l, newHandler())
</code></pre>

<p>}</p>

<p>// newHanderは一緒なので、以下省略。適当に補完して実行して
```</p>

<p>こっちのほうが複数ポートの読み込みにも対応していて高機能みたいなので、
<a href="https://github.com/lestrrat/go-server-starter">go-server-starter</a> を使いましょう！</p>

<h3>2015-05-09 追記</h3>

<p>検証が不十分で、<a href="https://github.com/lestrrat/go-server-starter">go-server-starter</a>を使った上記のコード
Server::Starterから起動されなかった場合のフォールバックが正しく機能しません。
現状では自前で<code>SERVER_STARTER_PORT</code>環境変数が定義されているのを確認するしかなさそうです。
handlename先輩が<a href="https://github.com/lestrrat/go-server-starter/pull/3">PR</a>を出しているので、これがマージされたら状況が変わるかも。</p>
]]></content>
  </entry>
  
</feed>
