<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: yapcasia | Shogo's Blog]]></title>
  <link href="https://shogo82148.github.io/blog/categories/yapcasia/atom.xml" rel="self"/>
  <link href="https://shogo82148.github.io/"/>
  <updated>2017-02-19T09:17:03+09:00</updated>
  <id>https://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[YAPCへ行ってきた(二日目)]]></title>
    <link href="https://shogo82148.github.io/blog/2013/09/24/yapc-second-day/"/>
    <updated>2013-09-24T07:52:00+09:00</updated>
    <id>https://shogo82148.github.io/blog/2013/09/24/yapc-second-day</id>
    <content type="html"><![CDATA[<p>前回のポストにつづいてYAPC二日目。
聞いたトークの内容を簡単にメモ。</p>

<h2>Perl で書く結合テスト</h2>

<p>前半はSWET(Software Engineer in Test), TE(Test Engineer)といった業種の話。
後半はテスト手法の分類(誰がする？テストの対象は？方法は？目的は？)について。</p>

<p>スライドはこちら→[Perlで書く結合テスト(]<a href="http://ikasama.hateblo.jp/entry/2013/09/22/234521">http://ikasama.hateblo.jp/entry/2013/09/22/234521</a>)</p>

<h2>これからのPerlプロダクトのかたち</h2>

<p>世界一高速な処理系を目指して開発中の<a href="https://github.com/goccy/gperl">gperl</a>と、
その過程でできたツールの紹介。
PerlをLLVMにコンパイルすることがで、高速動作するらしい。
恐ろしい・・・。</p>

<p>Perlは文脈によってトークンの意味が変わってしまうから、トークナイザーを作るのに苦労したとのこと。
(例えば、<code>hoge * fuga</code> とあったときに、<code>*</code>が掛け算なのかブロブなのかわからない)
コンパイルの高速化のために文法を工夫しているKuinを見習って欲しいですね。</p>

<h2>Emacs実践入門 Perl編</h2>

<p>typester先生によるEmacs入門。
PerlCompletion とか helm とか便利そう。
あんまりEmacsカスタマイズできていないので、今度いろいろ入れて遊んでみよう。</p>

<h2>Perlでレコメンデーション</h2>

<p>登壇者はJubatusのPerlモジュールを書いたりしているらしい。
Jubatus に触ってみようと考え始めてからどれだけの月日が経っただろう・・・
そのうち触ってみます。そのうち。</p>

<h2>中規模チャットサービスの運用事例</h2>

<p>handlename先生のLobi運用のお話。
今日もcronのメールが迷惑メールフィルタによって闇に葬りさられる悲しいことがあったので、
cronの結果をIRCに飛ばすのとか参考にして何とかしたい。</p>

<h2>PhantomJSによる多岐にわたる広告枠の確実な表示テスト</h2>

<p>最近の広告はJavascriptを使った遅延読み込みをするので、
ちゃんと表示されるかを静的に判断することができない。
そこで PhantomJS を使ってテストするお話。</p>

<h2>フルテストも50msで終わらせたい 〜 FreakOutの取り組み 〜</h2>

<p>さすがにフルテストは50msで終わりません。
Ukigumoを使って複数台のサーバでテストを分散実行する取り組みを紹介。</p>

<p>スライド→<a href="http://yapcasia.org/2013/talk/show/767463b0-d8fd-11e2-971a-72936aeab6a4">http://yapcasia.org/2013/talk/show/767463b0-d8fd-11e2-971a-72936aeab6a4</a></p>

<h2>LT</h2>

<p>前日にアイデアだけLTで紹介した<a href="HTTP::Body::Builder%E3%81%8C%E3%80%81%E5%88%A5%E3%81%AE%E4%BA%BA%E3%81%AE%E6%89%8B%E3%81%AB%E3%82%88%E3%81%A3%E3%81%A6%E5%AE%9F%E7%8F%BE%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%81%9F%E3%81%AE%E3%81%AB%E3%81%AF%E9%A9%9A%E3%81%84%E3%81%9F%E3%80%82">HTTP::Body::Builder%E3%81%8C%E3%80%81%E5%88%A5%E3%81%AE%E4%BA%BA%E3%81%AE%E6%89%8B%E3%81%AB%E3%82%88%E3%81%A3%E3%81%A6%E5%AE%9F%E7%8F%BE%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%81%9F%E3%81%AE%E3%81%AB%E3%81%AF%E9%A9%9A%E3%81%84%E3%81%9F%E3%80%82</a>
YAPC恐ろしいところだ・・・。</p>

<h2>HUB</h2>

<p>懇親会参加しない組だったので、
@sasaplus1 さん, @kazuph さん, @aokcub とHUBで飲み会。
なぜ学内にHUBがあるんだ・・・？</p>

<p>NDS勢やNiigata.pm勢、あと何故かスタッフになっていた @jewel_x12 とも会えて楽しかったです！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPCへ行ってきた(一日目)]]></title>
    <link href="https://shogo82148.github.io/blog/2013/09/20/yapc-first-day/"/>
    <updated>2013-09-20T21:48:00+09:00</updated>
    <id>https://shogo82148.github.io/blog/2013/09/20/yapc-first-day</id>
    <content type="html"><![CDATA[<p>YAPCの一日目に行ってきたよ。</p>

<!-- More -->


<h2>いまどきのカジュアルなデータベース関連開発</h2>

<p>Songmu先生のセッション。</p>

<p>DBIx::Schema::DSL とか GitDDL::Migrator とかの説明や、
DBのスキーマ設計、Redisの紹介なんかがありました。
自分もMySQLやRedisを触る機会が増えて、DB周りでつらい思いをしたことが何度かあるので
(外部キー制約でデッドロック起こしたり、無駄なインデックスを必死に削除したり・・・)
大いに参考に参考にさせていただきます。</p>

<p>スライドはこちらから→<a href="http://songmu.github.io/slides/yapc-asia2013/">いまどきのカジュアルなデータベース関連開発</a></p>

<h2>学術分野におけるPerlの活用例</h2>

<p>Perlを使ったアンケートの結果と、PerCUDAの紹介。
GPGPUをPerlのコードで実現しようとのお話。</p>

<h2>大規模Perl初心者研修を支える技術</h2>

<p>:DeNAさんが行った研修の紹介です。
顔覚えられない、
研修生の状況把握が大変、
信頼関係を作るのが大変
といった問題をどうやって解決したかについてのお話がありました。</p>

<p>トークの中で紹介された本何冊か持っているけど、全然読んでない・・・。
というか研修生みんなこれ読んだんですか。</p>

<p>スライドはこちらから→<a href="http://www.slideshare.net/DaisukeTamada/perl-26371335">大規模Perl初心者研修を支える技術</a></p>

<h2>mod_perlの展望とApacheの超絶技巧</h2>

<p>最近僕の周辺ではあまり Apache の話題を聞かなくなってしまいましたね。
しかし、その知名度の高さからか、他のオープンソースのプロダクトはダメでも、
Apache はOKという案件があるらしい。
「Apache使いました！」っていうために、mod_perl で代替品を作ろう、というお話。
おそろしい・・・。</p>

<p>スライドはこちらから→<a href="http://www.slideshare.net/xtetsuji/apachemodperl-yapcasia">mod_perlの展望とApacheの超絶技巧</a></p>

<h2>0から学んだポストモダンPerl</h2>

<p>ルーティングとかORMはWAFにはいらない。
blessで十分！これぞ、ポスト・モダンPerl！とのことでした。</p>

<p>僕もフルスタックのフレームワークより、
各機能が別になっているほうが好きですね。
(でもblessよりはクラスを扱うためのライブラリ使ったほうがよいと思う)
まあ、あんまり大規模なWebアプリ作ったこと無いので、
実際に作ってみると意見が変わるかもしれませんが。</p>

<p>スライドはこちらから→<a href="http://www.slideshare.net/TasukuSuenaga/yapc2013">0から学んだポストモダンPerl</a></p>

<h2>Dist::Zilla</h2>

<p>英語のトークに紛れ込んでしまい、正直良くわからなかった。
英語能力全く向上していない。</p>

<p>モジュールを作成、テスト、アップロード等の管理をするためのプログラムらしい。
Redis::Namespace でつらい思いをしたので、
次モジュールを作りたくなったら試してみよう。</p>

<h2>perl な web application のためのテスト情報</h2>

<p>スライドの順番が正しいか、今使っているのは本当にマイクなのかのテストが必要ですね！
335さん自らテストの必要性を教えてくれました。
「なぜテストが必要か」言葉では語らず行動で示す335さんかっこいい。</p>

<p>Test::Deep は Redis::Namespace のテストでも一部使っていますが、これ便利ですね。
Test::More の is_deeply はちょっと不便だと思っていたので、今後も使っていこうと思います。</p>
]]></content>
  </entry>
  
</feed>
