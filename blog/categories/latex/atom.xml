<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: latex | Shogo's Blog]]></title>
  <link href="https://shogo82148.github.io/blog/categories/latex/atom.xml" rel="self"/>
  <link href="https://shogo82148.github.io/"/>
  <updated>2016-06-10T01:52:26+09:00</updated>
  <id>https://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LaTeX2EPUBで電子書籍を作ってみる]]></title>
    <link href="https://shogo82148.github.io/blog/2013/03/02/latex2epub/"/>
    <updated>2013-03-02T16:20:00+09:00</updated>
    <id>https://shogo82148.github.io/blog/2013/03/02/latex2epub</id>
    <content type="html"><![CDATA[<p>LaTeXで書いた文章を電子書籍にしたくなったので，
<a href="http://kmuto.jp/d/index.cgi/computer/latex2epub.htm">LaTeX2EPUB</a>を使ってみました．</p>

<!-- More -->


<p><a href="http://kmuto.jp/d/index.cgi/computer/latex2epub.htm">LaTeX2EPUB</a>は<a href="http://dlmf.nist.gov/LaTeXML/">LaTeXML</a>と<a href="https://github.com/kmuto/review/">ReVIEW</a>に依存しているようなので，
それぞれインストールしていきます．
あと，数式の変換とかにLaTeXを使っているので別途用意する必要あり．
いろんなディストリビューションがあるけど，
ここでは TeX Live 2012 を使いました．</p>

<h2>LaTeXML のインストール</h2>

<p><a href="http://dlmf.nist.gov/LaTeXML/">LaTeXML</a>はLaTeXの文章をXML形式に変換するソフト．
そこからさらにXSLTを使ってXHTMLへ変換できる．
<a href="http://dlmf.nist.gov/LaTeXML/get.html">ドキュメント</a>に従って
依存するライブラリをインストール．</p>

<pre><code class="bash">perl -MCPAN -e shell
cpan&gt; install DB_File, Parse::RecDescent, File::Which
cpan&gt; install XML::LibXML, XML::LibXSLT
</code></pre>

<p>ドキュメントが少し古いらしく，これだけでは不十分だった．
追加でParse::RecDescentとImage::Magickもインストールしておく．</p>

<pre><code class="bash">cpan&gt; install Parse::RecDescent
cpan&gt; quit
yum install ImageMagick-perl
</code></pre>

<p>後はソースを取ってきてmakeするだけ．
現時点での最新版0.7.0をインストールした．</p>

<pre><code>wget http://dlmf.nist.gov/LaTeXML/releases/LaTeXML-0.7.0.tar.gz
tar zxvf LaTeXML-0.7.0.tar.gz
cd LaTeXML-0.7.0
perl Makefile.PL
make
make test
make install
</code></pre>

<h2>ReVIEW のインストール</h2>

<p><a href="https://github.com/kmuto/review/">ReVIEW</a>は簡単なマークアップ言語で書かれたテキストから
PDFやEPUBを作成するためのスクリプトです．
このなかのEPUB作成機能に依存しているようなのでインストールしておきます．
<a href="https://github.com/kmuto/review/">ReVIEW</a>はgemで簡単インストール．</p>

<pre><code class="bash">gem install review
</code></pre>

<h2>LaTeX2EPUB のインストール</h2>

<p><a href="http://kmuto.jp/d/index.cgi/computer/latex2epub.htm">LaTeX2EPUB</a>本体をインストール．
本家の日本語化対応が少し不十分だったので
改造版を上げといた．
これをダウンロードしてパスの通ったところに置けばインストール完了．</p>

<pre><code class="bash">git clone https://github.com/shogo82148/latex2epub
</code></pre>

<h2>日本語化対応</h2>

<p>自分の環境だと
数式中に日本語を上手く扱えませんでした．
どうやらGhostscriptの設定が不十分だった模様．
<a href="http://www.ice.is.kit.ac.jp/~umehara/misc/comp/20110817a.html">ここ</a>
を参考に設定変更．
自分の環境では/usr/share/ghostscript/8.70/Resource/Init/cidfmap
に次の内容を追加することで変換できました．</p>

<pre><code class="plain">/TakaoMincho &lt;&lt; /FileType /TrueType /Path (/usr/share/fonts/ipa-mincho/ipam.ttf) /SubfontID 0 /CSI [(Japan1) 2] &gt;&gt; ;
/TakaoGothic &lt;&lt; /FileType /TrueType /Path (less /usr/share/fonts/ipa-gothic/ipag.ttf) /SubfontID 0 /CSI [(Japan1) 2] &gt;&gt; ;
/Ryumin-Light /TakaoMincho ;
/GothicBBB-Medium /TakaoGothic ;
</code></pre>

<h2>電子書籍を作ってみる</h2>

<p>yaml形式の設定ファイルを適当に編集して</p>

<pre><code class="bash">latex2epub.rb sample.tex sample.yaml
</code></pre>

<p>と打てば変換してくれる．</p>

<p>デフォルトの設定ではスタイルファイルを読んでくれないので，
自前スタイルファイル中でマクロを定義している場合はそのままでは変換できない．
*.sty.ltxml というファイルを代わりに作っておくと，そっちを代わりに読んでくれる．
中身はPerlスクリプト．
書き方は<a href="http://dlmf.nist.gov/LaTeXML/manual/customization/customization.latexml.xhtml">LaTeXMLのドキュメント</a>を参照．</p>

<p>Perlのソースを頑張って読んで，以下の問題は一応解決した．
画像の変換もできた．</p>

<ul>
<li>数式内に日本語を含めるとエラーになる．</li>
<li>画像はまだ実験していない</li>
</ul>


<p>次の問題はまだ解決してない．
XSLよくわかんない．</p>

<ul>
<li>目次に「〜 in 〜」とどうしても入ってしまう．</li>
<li>対応TeXクラスがまだ少ない．</li>
<li>数式部分を(出来れば画像も)SVG化できるようにしたい．</li>
<li>もうちょっといいCSSが必要．</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TinySegmenterをLaTeXに移植してみた]]></title>
    <link href="https://shogo82148.github.io/blog/2012/12/16/tinysegmenter-for-tex/"/>
    <updated>2012-12-16T13:11:00+09:00</updated>
    <id>https://shogo82148.github.io/blog/2012/12/16/tinysegmenter-for-tex</id>
    <content type="html"><![CDATA[<p>この記事は<a href="http://atnd.org/events/34318">TeX &amp; LaTeX Advent Calendar</a>の傘下記事です．
15日はk16.shikanoさんの「<a href="http://note.golden-lucky.net/2012/12/tex.html">TeX がむかついたので実装したけど挫折してる話</a>」,
17日は@egtraさんの「<a href="http://dev.activebasic.com/egtra/2012/12/18/522/">LCDF TypetoolsでOpenTypeフォントを使う(DVIPDFMXで)</a>」です．</p>

<p>neruko3114が参加しているのを見てなんだか楽しそうだったで参加してみました．
とはいってもネタも思いつかなったので，過去に作ったものをTeXに移植してみました．
ターゲットは<a href="http://chasen.org/~taku/software/TinySegmenter/">TinySegmenter</a>．
以前作った<a href="https://github.com/shogo82148/TinySegmenterMaker">TinySegmenterMaker</a>でLaTeXを出力できるようになったよ！</p>

<!-- More -->


<h2>使ってみる</h2>

<p><a href="https://github.com/shogo82148/TinySegmenterMaker">TinySegmenterMaker</a>のレポジトリをダウンロードするなり<code>git clone</code>するなりして
落としてきます．
レポジトリに入っているのはモデルファイルとスクリプトだけです．
これらを使ってTeXのスタイルファイルを作ります．</p>

<pre><code class="bash">$ cd /path/to/TinySegmenterMaker/
$ ./maker tex &lt; RWCP.model
</code></pre>

<p>カレントディレクトリにtinysegmenter.styができます．
TeX から見えるところにおいておきましょう．
これを使うソースコードは次のようになります．</p>

<pre><code class="tex">\documentclass{jarticle}
\usepackage{tinysegmenter}
\begin{document}
\TinySegmenter{-}{私の名前は中野です}
\end{document}
</code></pre>

<p>platexで処理するとこんな感じに表示されるはず．</p>

<pre><code class="plain">私-の-名前-は-中野-です
</code></pre>

<h2>仕組み</h2>

<p>TinySegmeneterは元の文章の一部を切り取ってハッシュに入れる動作をしている．
でも，LaTeXにはハッシュみたいなデータ構造がないのでコントロールシーケンスで代用．
<code>\@ifundefined</code>で有無を確認し，<code>\csname\endcsname</code>で置き換え．
コントロールシーケンスの一部に日本語を使わないといけないので，日本語LaTeX環境でしか動かない．
ただ，一部句点などの扱いが違う？よくわからない．</p>

<p>あとは，文字種の取得が必要なんだけど，ここでも同じことをしてます．
すべてのアルファベット・ひらがな・カタカナ・数字について，その文字種をベタ書き．
それ以外は全部漢字扱い．
そのため，それ以外の文字を使うとオリジナルとは違う結果になるかも．</p>

<p>最後は足し算．これはカウンタを使えば簡単ですね．</p>

<h2>応用編</h2>

<p>TinySegmenterMakerでは自由にモデルを差し替えることができます．
以前JavaScript版のTinySegmenterを使って，
<a href="http://shogo82148.github.com/blog/2012/12/05/kikoemasuka/">聞こえますか…自動生成…してみた…よ…</a>
ということをしてみました．
LaTeXだってできるはず．</p>

<p><a href="https://github.com/shogo82148/kikoemasuka">聞こえますか…</a>
に心に呼びかけるためのモデルファイルが含まれています．
これをダウンロードして読み込ませます．</p>

<pre><code class="bash">$ ./maker tex &lt; model
</code></pre>

<p>これを自分のドキュメントに読み込ませてみます．</p>

<pre><code class="tex">\documentclass{jarticle}
\usepackage{tinysegmenter}
\begin{document}
(…\TinySegmenter{…}{聞こえますか聞こえますかあなたの心に直接語りかけています}…)
\end{document}
</code></pre>

<p>私の声が聞こえましたか・・・？</p>

<pre><code class="plain">(…聞こえますか…聞こえますか…あなたの…心に…直接語りかけています…)
</code></pre>
]]></content>
  </entry>
  
</feed>
