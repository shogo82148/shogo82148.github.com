<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | Shogo's Blog]]></title>
  <link href="https://shogo82148.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="https://shogo82148.github.io/"/>
  <updated>2016-06-09T17:44:09+09:00</updated>
  <id>https://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress用OEmbedプラグインを作ってみた]]></title>
    <link href="https://shogo82148.github.io/blog/2012/08/09/oembed/"/>
    <updated>2012-08-09T18:43:00+09:00</updated>
    <id>https://shogo82148.github.io/blog/2012/08/09/oembed</id>
    <content type="html"><![CDATA[<p>Octopressでツイートを引用しようと思ったけど
使えそうなプラグインがなかったので作ってみた。
ツイートに限らずいろんなものを挿入できるよ！</p>

<!-- more -->


<h2>OEmbed</h2>

<p>調べてみるとツイートの表示は<a href="http://oembed.com/">OEmbed</a>というのを使うとできるらしい。
これはURLを埋め込み適した形に変換してくれるプロトコル。
ツイートのURLから引用のためのHTMLを作ったり、YouTubeのURLから動画再生用のHTMLを作ることができる。</p>

<p>せっかくだからOEmbedに対応してしまえばいろんなものを埋め込めて便利だよね！ってことでやってみた。</p>

<h2>インストール</h2>

<p><a href="https://github.com/judofyr/ruby-oembed">ruby-oembed</a>をインストール。</p>

<pre><code class="bash">gem install ruby-oembed
</code></pre>

<p>ruby-oembedは名前から想像できる通り、RubyでOEmbedプロトコルを扱うためのライブラリ。
Provider(OEmbedの提供者)を自分で追加したり、Discovery(HTMLドキュメントにProviderの情報を入れる)にも対応している。
しかし、プロキシ環境下で動かなかったり、文字コードのエラーを吐いて死んだりしたので、
フォークして<a href="https://github.com/shogo82148/ruby-oembed">改造版ruby-oembed</a>を作った。
もしオリジナルで不具合が出るようなら、こちらもどうぞ。</p>

<p><a href="https://github.com/shogo82148/oembed_tag">oembed_tag</a>からoembed_tag.rbをダウンロードして、pluginsフォルダに置く。</p>

<p>Gemfileを適当なテキストエディタで開き、「gem &lsquo;ruby-oembed'」の行を追加</p>

<pre><code class="ruby Gemfile">source "http://rubygems.org"

group :development do
  gem 'rake'
  gem 'rack'
  gem 'jekyll'
  gem 'rdiscount'
  gem 'pygments.rb'
  gem 'RedCloth'
  gem 'haml', '&gt;= 3.1'
  gem 'compass', '&gt;= 0.11'
  gem 'rubypants'
  gem 'rb-fsevent'
  gem 'stringex'
  gem 'liquid', '2.2.2'
  gem 'ruby-oembed' #追加
end

gem 'sinatra', '1.2.6'
</code></pre>

<p>これでとりあえずは動くはず。
以上の作業に加えて、キャッシュファイルがリポジトリに含まれないよう.gitignoreに.oembed-cacheを追加しておく。</p>

<h2>使い方</h2>

<p>以下の様に書くと、適切な埋め込み方法をWebから取得して変換してくれる。</p>

<pre><code class="plain">&amp;#123;% oembed URL %&amp;#125;
</code></pre>

<h2>例</h2>

<h3>Twitter</h3>

<pre><code class="plain">&amp;#123;% oembed https://twitter.com/shogo82148/status/233612741670207488 %&amp;#125;
</code></pre>

<p><a href="https://twitter.com/shogo82148/status/233612741670207488">https://twitter.com/shogo82148/status/233612741670207488</a>">https://twitter.com/shogo82148/status/233612741670207488">https://twitter.com/shogo82148/status/233612741670207488</a></a></p>

<h3>slideshare</h3>

<pre><code>&amp;#123;% oembed http://www.slideshare.net/shogo82148/ss-10377588 %&amp;#125;
</code></pre>

<p><a href="http://www.slideshare.net/shogo82148/ss-10377588">http://www.slideshare.net/shogo82148/ss-10377588</a>">http://www.slideshare.net/shogo82148/ss-10377588">http://www.slideshare.net/shogo82148/ss-10377588</a></a></p>

<h3>YouTube</h3>

<pre><code class="plain">&amp;#123;% oembed http://www.youtube.com/watch?v=rrsxEGgQDkM %&amp;#125;
</code></pre>

<p><a href="http://www.youtube.com/watch?v=rrsxEGgQDkM">http://www.youtube.com/watch?v=rrsxEGgQDkM</a>">http://www.youtube.com/watch?v=rrsxEGgQDkM">http://www.youtube.com/watch?v=rrsxEGgQDkM</a></a></p>

<h2>参考</h2>

<ul>
<li><a href="http://orihubon.com/blog/2012/03/20/instagram-tag-plugin-for-octopress/">OctopressにInstagramの写真を挿入するTag Pluginを作ってみた</a></li>
<li><a href="http://d.hatena.ne.jp/lyokato/20080815/1218767965">URLを埋め込みコンテンツに変換するoEmbedの仕様</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHubにブログを設置してみたよ]]></title>
    <link href="https://shogo82148.github.io/blog/2012/03/21/test/"/>
    <updated>2012-03-21T19:29:00+09:00</updated>
    <id>https://shogo82148.github.io/blog/2012/03/21/test</id>
    <content type="html"><![CDATA[<p>TLにGitHubでブログのホスティングしている人がいたので、
「<a href="http://mattn.kaoriya.net/software/lang/ruby/20111017205717.htm">githubとjekyllとoctopressで作る簡単でモダンなブログ</a>」
を参考に作ってみましたよ。</p>

<!-- more -->


<h2>RVM のインストール</h2>

<p>自分の環境には Ruby 1.9.2.2 が入っているんだけど、Ocropressでは Ruby 1.9.2 が必要らしい。
そのままでもいけるかと思ったけど、怒られた。
rake コマンドを全部 bundle exec rake に置き換えると一応実行はできるけど、なんだか警告がでる。</p>

<p>こういう時は複数のバージョンの Ruby を切り替えて管理できる、 rvm というのを使うといいらしい。
公式サイトの「<a href="http://octopress.org/docs/setup/rvm/">Installing RVM</a>」通りにコマンドを打てばOK。</p>

<pre><code class="bash">bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm" # Load RVM function' &gt;&gt; ~/.bash_profile
source ~/.bash_profile
rvm install 1.9.2 &amp;&amp; rvm use 1.9.2
rvm rubygems latest
</code></pre>

<h2>Octopress のインストール</h2>

<p>あとはgitでクローンして、インストールコマンドを叩くだけ。</p>

<pre><code class="bash">git clone git://github.com/imathis/octopress.git octopress
cd octopress

gem install bundler
bundle install

rake install
rake setup_github_pages
</code></pre>

<p>最後のコマンドは GitHub Pages に公開するためのもの。公開用のレポジトリを聞いてくるので予め登録しておこう。</p>

<h2>rubypythonの検索パスを書き換える</h2>

<p>markdown記法はソースコードの表示にも対応しているんだけど、自分の環境では、ソースコードの代わりに</p>

<pre><code>Liquid error: undefined method `Py_IsInitialized’ for RubyPython::Python:Module
</code></pre>

<p>と表示されてしまった。</p>

<p>ソースコードを追って見るとソースコードの表示には <a href="http://rubypython.rubyforge.org/">rubypython</a> という
Ruby から Python のコードを実行する gem が使われているみたい。
Python コードの実行に本物の Python を使っているんだけど、その Python の検索機能が貧弱で rubypython が想定していない場所に置いてあるとエラーを吐くみたい。</p>

<p>僕の環境の場合、 ~/.rvm/gems/ruby-1.9.2-p318/gems/rubypython-0.5.1/lib/rubypython/pythonexec.rb の中に Python の検索設定が書いてあった。
53行目から次のようなUnix系の設定がある。</p>

<pre><code class="ruby">    if FFI::Platform.unix?
      # On Unixes, let's look in some standard alternative places, too.
      # Just in case. Some Unixes don't include a .so symlink when they
      # should, so let's look for the base case of .so.1, too.
      [ libname, "#{libname}.1" ].each do |name|
        locations &lt;&lt; File.join("/opt/local/lib", name)
        locations &lt;&lt; File.join("/opt/lib", name)
        locations &lt;&lt; File.join("/usr/local/lib", name)
        locations &lt;&lt; File.join("/usr/lib", name)
      end
    end
</code></pre>

<p>64bitな環境で実行したいので、以下の設定を追加。</p>

<pre><code class="ruby">        locations &lt;&lt; File.join("/opt/local/lib64", name)
        locations &lt;&lt; File.join("/opt/lib64", name)
        locations &lt;&lt; File.join("/usr/local/lib64", name)
        locations &lt;&lt; File.join("/usr/lib64", name)
</code></pre>

<p>これで表示されるようになった。</p>

<h2>記事を書いて公開してみる</h2>

<p>新しい記事を書くには、</p>

<pre><code class="bash">rake new_post["title"]
</code></pre>

<p>source/_posts 以下に記事用のファイルを作ってくれるのでこれを自分の好きなエディタで編集。</p>

<p>最後に</p>

<pre><code class="bash">rake gen_deploy
</code></pre>

<p>とすると、HTMLの生成、公開をしてくれる。</p>

<h2>記事のプレビュー</h2>

<p>デプロイしてから実際に見られるようになるには若干時間がかかるし、誰でも見られる状態になってしまうので、下記コマンドでプレビュー</p>

<pre><code>rake generate
rake preview
</code></pre>

<h2>感想</h2>

<p>慣れない Ruby に少し手こずったけど、自分が普段使っているエディタを使えるのは楽でいいね。
普段は TeX 使いなので、WYSIWYG環境で編集できなくても苦じゃないし。むしろ楽。</p>

<p>はてな記法よりも markdown 記法のほうが自分には馴染みやすい。
改行の扱いとか TeX に近いし。</p>

<p>しばらく使って良かったらこっちに移ってみようかな。</p>
]]></content>
  </entry>
  
</feed>
