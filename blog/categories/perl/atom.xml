<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: perl | Shogo's Blog]]></title>
  <link href="http://shogo82148.github.io/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://shogo82148.github.io/"/>
  <updated>2014-10-21T02:30:37+09:00</updated>
  <id>http://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redis::Fast 0.13をリリースしました]]></title>
    <link href="http://shogo82148.github.io/blog/2014/10/16/redis-fast-0-dot-13-released/"/>
    <updated>2014-10-16T23:51:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/10/16/redis-fast-0-dot-13-released</id>
    <content type="html"><![CDATA[<p>Redis::Fast 0.13をリリースしました。
主な変更点は以下のとおりです。</p>

<ul>
<li>passwordオプションの対応</li>
<li>maxclientsに達した場合に、deep recursion することがある問題の修正</li>
<li>トランザクション内で再接続処理が行われる問題の修正</li>
</ul>


<!-- More -->


<h2>passwordオプションの対応</h2>

<p>今更感のある機能ですね。昔は対応してたんです。
対応してたんですが、Sentinel対応のために接続開始周りをごそっと入れ替えて、そのときに間違ってパスワード認証機能を削除しちゃってたっぽいです(・ω&lt;)
なんというかごめんなさい。</p>

<p>実際実装してテストしてみると、認証失敗したときにdouble freeで落ちてちょっとハマりました。
hiredisを使う場合は<code>redisAsyncSetConnectCallback</code>に指定する関数内で、コネクションを切断するような処理(password認証とか)はしないようにしましょう。</p>

<h2>maxclientsに達した場合に、deep recursion することがある問題の修正</h2>

<p>Redis::Fastでは、接続処理の中で、コネクションに名前をつけたり、パスワード認証したり、その他独自の処理を実行しています。
この処理の途中でも再接続処理が走ってしまい、
再接続処理の中で再接続処理が実行されて、その再接続処理の中で再接続が... というような無限ループに突入する場合があります。
maxclientsに達した場合、一度コネクションの確立に成功したあとに接続が切られるので、この無限ループに入ってしまうようです。</p>

<p>接続処理中は再接続処理を行わないようにすることで対応しました。</p>

<h2>トランザクション内で再接続処理が行われる問題の修正</h2>

<p>Redis::Fast 0.07以降、<code>MULTI</code>-<code>EXEC</code>コマンドを遣ったトランザクションの中にいるときは再接続処理が行わないようになっています。
その仕組みを作るにあたって、トランザクションの中にいるか外にいるかを表すフラグをコマンド送信前に更新していました。</p>

<ol>
<li>再接続を禁止する</li>
<li><code>MULTI</code> コマンドを送る</li>
<li>結果を受け取る</li>
<li>必要なコマンド発行を行う</li>
<li>再接続を許可する</li>
<li><code>EXEC</code>コマンドを実行する</li>
<li>結果を受け取る</li>
</ol>


<p>しかしこれだと 5 と 6 の間で再接続が起こってしまいます。
<code>EXEC</code>コマンドがまだ実行されていないので、ここはまだトランザクションの中ですね。</p>

<p>Redis::Fast 0.13ではフラグの更新はコマンドが成功したときに変更してあります。</p>

<ol>
<li><code>MULTI</code>コマンドを送る</li>
<li>結果を受け取る</li>
<li>再接続を禁止する</li>
<li>必要なコマンド発行を行う</li>
<li><code>EXEC</code>コマンドを実行する</li>
<li>結果を受け取る</li>
<li>再接続を許可する</li>
</ol>


<p>これでトランザクション中に再接続処理が走ることは無いはずです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github::Hooks::ReceiverがX-Hub-Signatureをサポートしました]]></title>
    <link href="http://shogo82148.github.io/blog/2014/09/23/github-hooks-receiver-supports-x-hub-signature/"/>
    <updated>2014-09-23T00:25:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/09/23/github-hooks-receiver-supports-x-hub-signature</id>
    <content type="html"><![CDATA[<p><a href="https://metacpan.org/pod/Github::Hooks::Receiver">Github::Hooks::Receiver</a>にX-Hub-SignatureをサポートするPull Requestを送ったら、
速攻取り込まれ、さらにGithubのコミット権とPAUSEのco-maintパーミッションをもらったというお話。</p>

<!-- More -->


<h2>X-Hub-Signature</h2>

<p>GithubのWebhookは大変便利なんですが、特に対策をしないままだと
他の人にcurlとかで叩かれてしまう可能性があります。
本来であればIPアドレスで制限をかけるべきなんですが、
iptablesの設定とかよくわからないし・・・と思ってGithubのドキュメントを読んでいたら、
もっとお手軽な方法発見。</p>

<ul>
<li><a href="https://developer.github.com/webhooks/securing/">Securing your webhooks</a></li>
</ul>


<p>GithubからのリクエストにはX-Hub-Signatureというのがついていて、
これを使うとPayloadの検証ができるらしい。
<a href="https://metacpan.org/pod/Github::Hooks::Receiver">Github::Hooks::Receiver</a>は
このヘッダを全くみていないようだったので<a href="https://github.com/Songmu/Github-Hooks-Receiver/pull/1">Pull Requestを送ってみた</a>。</p>

<p>Github::Hooks::Receiver 0.02以降で、以下のようにsecretの指定ができるようになります。</p>

<p>``` perl
use Github::Hooks::Receiver::Declare;
my $receiver = receiver {</p>

<pre><code>secret 'secret1234'; # Webhookの設定画面のsecretの項目と同じものを入力
on push =&gt; sub {
    # レポジトリにPushされた時の処理とかをゴニョゴニョ書く
};
</code></pre>

<p>};
my $psgi = $receiver->to_app;
$receiver->run;
```</p>

<p>これでsecretを知らない人がリクエストを偽装できなくなるので安心です。
secretはエントロピーが高いほうがいいので
<code>ruby -rsecurerandom -e 'puts SecureRandom.hex(20)'</code>
みたいなコマンド使うといいらしいですよ。</p>

<h2>String::Compare::ConstantTime</h2>

<p>Signatureの比較にはRubyの<a href="http://rubydoc.info/github/rack/rack/master/Rack/Utils.secure_compare">secure_compare</a>のような関数を
使ったほうがいいらしい。
Github::Hooks::Receiverでは、そのPerl版の<a href="https://metacpan.org/pod/String::Compare::ConstantTime">String::Compare::ConstantTime</a>を使ってみた。
ちょっと引数のチェックに甘いところがあって、segmentation fault場合があったので、こちらにもPull Requestを送っておきました。
Github::Hooks::Receiverは使う前にチェックを入れてあるので、現行バージョンでも問題なく動くはず。</p>

<p>String::Compare::ConstantTimeはXSで書かれたモジュールなんですが、
この手のバグが入り込みやすいのでXS難しいですね。</p>

<h2>まとめ</h2>

<ul>
<li>XS怖い</li>
<li>Github::Hooks::Receiverにsecretを指定できるようになったので、IP制限がかけられない場合でも安心</li>
<li>でも、可能であればIP制限もしましょうね</li>
<li>XS怖い</li>
</ul>


<h2>追記</h2>

<h3>IP制限について</h3>

<p>Songmu先生よりコメントをいただきました。</p>

<p><blockquote class="twitter-tweet"><p>これはいい機能。ちなみにIP制限は、Nginxとかでやるのがお手軽で、plackで完結させたいのであれば、Plack::Middlewareで弾いてやればいいと思います。 / “Github::Hooks::ReceiverがX-…” <a href="http://t.co/NM0uQzW1s8">http://t.co/NM0uQzW1s8</a></p>&mdash; songmu (@songmu) <a href="https://twitter.com/songmu/status/514426458190528513">September 23, 2014</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>確かにPlack::Middlewareとか使えばお手軽に弾けるので、
X-Hub-SignatureだけでなくIP制限もやっておくと良いですね。</p>

<h3>String::Compare::ConstantTime</h3>

<p>String::Compare::ConstantTime ですが、僕のprが取り込まれた 0.310 がリリースされました。
<code>undef</code> を渡すとsegmentation fault で落ちるというバグが修正されています。
XS怖い。</p>

<h2>SEE ALSO</h2>

<ul>
<li><a href="https://metacpan.org/pod/Github::Hooks::Receiver">Github::Hooks::Receiver</a></li>
<li><a href="https://metacpan.org/pod/String::Compare::ConstantTime">String::Compare::ConstantTime</a></li>
<li><a href="http://www.songmu.jp/riji/entry/2013-12-05-github-hooks.html">GithubのHookについてのまとめとソリューション</a></li>
<li><a href="http://www.songmu.jp/riji/entry/2014-04-18-github-hooks.html">Jenkinsでパラメータ付ビルドでブランチ指定出来るようにしつつ、GithubのHookも受け付けられるようにする</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPC::Asia 2014 に行ってきた #yapcasia]]></title>
    <link href="http://shogo82148.github.io/blog/2014/08/31/yapcasia/"/>
    <updated>2014-08-31T16:02:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/08/31/yapcasia</id>
    <content type="html"><![CDATA[<p><a href="http://yapcasia.org/2014/">YAPC::Asia 2014</a> に参加してきました。
「ブログに書くまでがYAPC」らしいので、メモ書き。</p>

<!-- More -->


<h2>見たトーク</h2>

<ul>
<li><a href="http://yapcasia.org/2014/talk/show/103a434e-ec02-11e3-bd6d-c7a06aeab6a4">Perl meets Real World 〜ハードウェアと恋に落ちるPerlの使い方〜</a>

<ul>
<li>デモ中のURLが「localhost」になってたんであれ？って思ったんですが、WebサーバはPC上にあったんですね。RaspberryPi上でPerl動くんじゃなかったんですか！</li>
<li>ネギ振りミククラウド化するって言ってたんで期待してます</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2014/talk/show/2276d7b2-eba7-11e3-bd6d-c7a06aeab6a4">Go For Perl Mongers</a></li>
<li><a href="http://yapcasia.org/2014/talk/show/66c55626-eba9-11e3-bd6d-c7a06aeab6a4">お待たせしました。Perl で BDD を簡単に実践する最高にクールなフレームワークができました</a></li>
<li><a href="http://yapcasia.org/2014/talk/show/3c896370-01de-11e4-9357-07b16aeab6a4">DBIx::Class - what is it and what is it good for?</a>

<ul>
<li><a href="http://search.cpan.org/~ribasushi/DBIx-Class-0.08270/lib/DBIx/Class/ResultClass/HashRefInflator.pm">HashRefInflator</a>の存在を初めて知りました</li>
<li>今関わってるプロジェクトでDBICのRowObject生成コストが問題になってるんで、後で試してみたいです</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2014/talk/show/d557ddbe-fde4-11e3-b7e8-e4a96aeab6a4">Scala In Perl Company : Hatena</a></li>
<li><a href="http://yapcasia.org/2014/talk/show/e495bc1a-f30d-11e3-b7e8-e4a96aeab6a4">WHERE狙いのキー、ORDER BY狙いのキー</a></li>
<li><a href="http://yapcasia.org/2014/talk/show/e35ec49a-ebba-11e3-bd6d-c7a06aeab6a4">Get a kick out of CPAN</a></li>
<li><p><a href="http://yapcasia.org/2014/talk/show/61b78258-026f-11e4-9357-07b16aeab6a4">初心者が Web エンジニアのコミュニティに触れてみて感じたこと - ゆとりエンジニアの成長戦略</a></p></li>
<li><p><a href="http://yapcasia.org/2014/talk/show/d1eb4942-fdb5-11e3-b7e8-e4a96aeab6a4">突然ITインフラを任された人のための…監視設計入門</a></p></li>
<li><a href="http://yapcasia.org/2014/talk/show/a02d05e6-fead-11e3-b7e8-e4a96aeab6a4">半端なPHPDisでPHPerに陰で笑われないためのPerl Monger向け最新PHP事情(5.6対応)</a>

<ul>
<li>MacにはPHPが最初から入ってるらしいですよ</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2014/talk/show/77109da0-00b8-11e4-b7e8-e4a96aeab6a4">モバイルアプリとAPIのありかたを考える2014</a></li>
<li><a href="http://yapcasia.org/2014/talk/show/3a5f2a0e-ec3e-11e3-bd6d-c7a06aeab6a4">Mobile Application Development for Perl Mongers [ninjinkun x gfx]</a>

<ul>
<li>シングルトンは嫌だシングルトンは嫌だ</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2014/talk/show/d5049940-ebb2-11e3-bd6d-c7a06aeab6a4">そんなにビッグでもないデータ処理手法の話</a>

<ul>
<li>一日分の解析ならなんとか一台で、でも一ヶ月分となると・・・ってことが多いんでもうちょっと調査して、どれかに手を出してみようかな・・・</li>
</ul>
</li>
<li>typester先生のキーノート

<ul>
<li>28才で結婚・・・あと2年・・・20代・・・あと4年・・・(´；ω；｀)ｳｯ…</li>
</ul>
</li>
</ul>


<h2>全体を通して</h2>

<p>僕が見たトークは全体からしたらほんの一部ですが、それでも一覧にすると結構見てるな。
貧乏症なんで、こういうイベント参加するとトークたくさん見ないといけない気持ちになっちゃうんです。
のんびり人と話すのもいいってことは分かるんですけどね。</p>

<p>去年も感じましたが、参加人数に対して会場が狭く、立ち見が多くて大変でした。
特に今年は去年より参加者多かったみたいですし、余計にそう感じたかも。
あと移動時間がほとんどないのもつらい。</p>

<p>NSD(Nagaoka Developers Study)のメンバーや、元同僚も多く参加していて、なんだか同窓会みたいな感じでしたね。
ただ、やっぱり、全く知らない人には話しかけづらい(´・ω・｀)
来年やるようだったら何かトークしたいなと思った２日間でした。</p>

<h2>最後に一番言いたいこと</h2>

<p>Twitterのほうでは騒いでましたが、先日Mac Book Airにアクエリアスを飲ませてダメにするという悲しい事故が・・・。
このブログOctopressで書いてるんで、
ローカルの環境がなくなって再構築面倒だったり、
pushし忘れてて一部記事がなかったり、
非常に面倒でした。</p>

<p>みなさんもアクエリアスの扱いには注意しましょう・・・(ヽ´ω`)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PerlのXS中に起きたシグナルの扱い]]></title>
    <link href="http://shogo82148.github.io/blog/2014/07/05/signal-in-xs/"/>
    <updated>2014-07-05T11:56:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/07/05/signal-in-xs</id>
    <content type="html"><![CDATA[<p><a href="https://metacpan.org/pod/Redis::Fast">Redis::Fast</a> にIssueが来ていたので、
それに関して調査したお話です。</p>

<ul>
<li>接続タイムアウトすると double free check に引っかかる</li>
<li><code>brpop</code> みたいな長時間ブロックするコマンド中にシグナルが入ると、最初の1回が無視される</li>
</ul>


<p>前者はC言語つらいって話で頑張って double free になる条件を探せばいいんですが、
後者はシグナル時のPerlやPOSIX APIの挙動を知らなくと解決できなそう。
そういうわけで、主に後者について調べた結果をまとめておきます。</p>

<!-- More -->


<h2>PERL_ASYNC_CHECKってXS中から呼んでもいいの？</h2>

<p>言いたいことは最初に書いとけって偉い人に言われたので、最初にこの記事の結論を。
「よしななタイミングでPERL_ASYNC_CHECKを呼べばいいっぽい」みたいです。
でも、 <strong> 「PERL_ASYNC_CHECKってXS中から呼んでもいいの？」 </strong> という点に確証が持ててないので、
識者のご意見を募集してます！</p>

<h2>selectの挙動を調べる</h2>

<p>Redis::FastはRedisからのレスポンスを待つのにLinuxのselect apiを叩いてます。
ファイルとかが読み書き可能になるまで処理をブロックしてくれるいいやつです。
しかし、select が処理をブロックしている間にシグナルを受信すると、うまく処理ができてないらしい。
そこで割り込み発生時の挙動を確認してみます。</p>

<p>困った時の<a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man2/select.2.html">manページ(select)</a>
をちゃんと読めば書いてありますね。</p>

<blockquote><p>エラーならば -1 を返し、 errno にエラーを示す値が設定される;</p>

<p>EINTR
シグナルを受信した。</p></blockquote>

<p>Redis::Fastは<code>errno</code>を特に確認せず、とにかくエラーが発生したらリトライになってたのでダメだったみたいです。
通信にエラーが起きたわけではないので、再接続処理とかみたいな複雑なリトライ処理は必要なく、
単にもう一度selectしなおせば良さそうです。</p>

<h2>Perlさんのシグナル処理のタイミング</h2>

<p>「割り込みかかったら再度select」っていうふうに修正してみたんですが、
今度はPerlのシグナルハンドラがなかなか呼び出されない！！</p>

<p>```perl
use Redis::Fast;
$SIG{TERM}= sub {</p>

<pre><code>warn "TERM handler called";
</code></pre>

<p>};
my $c =->new(reconnect=>2, every => 100, server => "localhost:6379");
$c->brpop("a", 100); # 100秒経ったら諦めて戻ってくる
```</p>

<p>このコードを実行中にSIGTERMを送ると、送った瞬間に"TERM handler called"と表示されて欲しいのですが、
<code>brpop</code>コマンドが終わるまで実行されない……</p>

<p>ググってみるとPerlはシグナルハンドラを即座に処理しているのではなく、
シグナルハンドラを安全に実行できるタイミングを見計らって実行しているみたいです。</p>

<ul>
<li><a href="http://perl-users.jp/articles/advent-calendar/2009/data-model/03.html">Q4M を使ってる時のシグナル処理に注意</a></li>
</ul>


<p>この記事では「Low Levelなシグナルハンドラを使おう」っていうことになってますが、できることならライブラリ側で対応したい。
安全にシグナルハンドラを実行できるタイミングで<code>PERL_ASYNC_CHECK</code>を呼び出しているので、
XS中でもこいつを呼べばできるのでは！ってことでやってみたら動いてるっぽい……？</p>

<p>ただDBIでもシグナルの扱いに同様の問題があるらしく、
これで解決するならDBIが解決してるよな・・・何か罠があるんだろうか。不安だ・・・。</p>

<h2>まとめ</h2>

<ul>
<li>selectはシグナルを受信するとエラーを返すので、<code>errno</code> をみて適切に扱うこと</li>
<li>Perlはシグナルハンドラを安全に実行できるタイミングでしか実行しない</li>
<li><code>PERL_ASYNC_CHECK</code>を使えば解決しそうだけど、どこからか椅子が飛んでくるんじゃないだろうか怖い</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IRCに癒やしボットを入れてみた]]></title>
    <link href="http://shogo82148.github.io/blog/2014/06/04/irc-healing-bot/"/>
    <updated>2014-06-04T07:37:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/06/04/irc-healing-bot</id>
    <content type="html"><![CDATA[<p>別チームがIRCに癒やしボットを入れてたので、自分のチームのチャンネルにも入れてみた。</p>

<!-- More -->


<h2>Instagramに登録する</h2>

<p><a href="http://instagram.com/developer/">InstagramのDeveloperサイト</a>に開発者として登録します。
<a href="http://instagram.com/developer/authentication/">Authentication</a>
のページを見ながら、Server-side (Explicit) Flow を参考にアクセストークンを取得します。</p>

<h2>Instagram APIを叩く</h2>

<p><code>https://api.instagram.com/v1/tags/$TAGNAME/media/recent?access_token=YOUR_ACCESS_TOKEN</code>を叩くと
TAGNAMEに関連する画像の情報がJSONで帰ってくるので、
Perlからこのエンドポイントを叩きます。
IRCとのやりとりには<a href="http://www.songmu.jp/riji/entry/2013-09-09-unazusan.html">UnazuSan</a>を使いました。</p>

<p>``` perl
!/usr/bin/env perl
use 5.014;
use warnings;
use strict;
use utf8;
use Encode qw/encode_utf8/;
use Furl;
use JSON;</p>

<p>use UnazuSan;</p>

<p>sub neko {</p>

<pre><code>state $data = undef;
state $time = 0;
if( !$data || time - $time &gt; 60 * 60) {
    $time = time;
    my $furl = Furl-&gt;new;
    my $res = $furl-&gt;get('https://api.instagram.com/v1/tags/%E7%8C%AB/media/recent?access_token=YOUR_ACCESS_TOKEN');
    my $hash = JSON::decode_json($res-&gt;content);
    $data = $hash-&gt;{data};
}
my $media = $data-&gt;[rand(scalar @$data)];
return $media-&gt;{images}{standard_resolution}{url};
</code></pre>

<p>}</p>

<p>my $unazu_san;
my $NICKNAME = 'iyashi';
$unazu_san = UnazuSan->new(</p>

<pre><code>host       =&gt; '127.0.0.1',
enable_ssl =&gt; 1,
join_channels =&gt; ['#test'],
respond_all   =&gt; 1,
nickname      =&gt; $NICKNAME,
</code></pre>

<p>);</p>

<p>$unazu_san->on_message(</p>

<pre><code>qr/^\s+$NICKNAME:/ =&gt; sub {
    my $receive = shift;
    $receive-&gt;reply('うんうん');
},
qr/(.*)/ =&gt; sub {
    my ($receive, $match) = @_;
    say $match;
    say $receive-&gt;message;
},
</code></pre>

<p>);</p>

<p>$unazu_san->on_command(
   ' 癒やし' => sub {</p>

<pre><code>    my ($receive, @args) = @_;
    $receive-&gt;reply(neko());
}
</code></pre>

<p>);</p>

<p>$unazu_san->run;
```</p>

<p>「癒して」と話しかけると猫画像を検索して返してくれます。</p>

<h2>引数をMeCabで解析する</h2>

<p><code>plain
acidlemon unazu_san: 癒やしをうさぎで頼む
acidlemon ネコやん! ('-'#)
</code></p>

<p>みたいなことがあったので、「癒して」のあとも見ることにしました。
MeCabを使って名詞っぽいものを抽出して、タグ名に使います。</p>

<p>``` perl
state $mecab = Text::MeCab->new();</p>

<p>my $n = $mecab->parse(join ' ', @_);
my $keyword = undef;
while ($n) {</p>

<pre><code>my $f = decode_utf8 $n-&gt;feature;
$keyword //= decode_utf8($n-&gt;surface) if ($f =~ /^名詞,/) &amp;&amp; ($f !~ /^名詞,代名詞,/);
$n = $n-&gt;next;
</code></pre>

<p>}
$keyword //= '猫';
my $word = uri_escape_utf8($keyword);
my $res = $furl->get("https://api.instagram.com/v1/tags/$word/media/recent?access_token=ACCESS_TOKEN");
```</p>

<p>これで癒やしをうさぎで頼まれてもウサギ画像を返せるようになりました。</p>
]]></content>
  </entry>
  
</feed>
