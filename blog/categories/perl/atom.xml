<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: perl | Shogo's Blog]]></title>
  <link href="https://shogo82148.github.io/blog/categories/perl/atom.xml" rel="self"/>
  <link href="https://shogo82148.github.io/"/>
  <updated>2017-03-17T22:26:36+09:00</updated>
  <id>https://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WEB+DB PRESS Vol.97にPerlとRedisの記事を寄稿しました]]></title>
    <link href="https://shogo82148.github.io/blog/2017/02/23/perl-webdb-vol97/"/>
    <updated>2017-02-23T18:27:53+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/02/23/perl-webdb-vol97</id>
    <content type="html"><![CDATA[<p>昨年末に<a href="https://twitter.com/songmu">Songmu</a>さんからお話を頂き、
<a href="http://gihyo.jp/magazine/wdpress/archive/2017/vol97">WEB+DB PRESS Vol.97</a>内の連載「第43回Perl Hackers Hub」に
「PerlでのRedis活用法」というタイトルで寄稿しました。
発売日は<strong>2月24日</strong>です。</p>

<!-- More -->


<h2>内容</h2>

<p>簡単に内容を紹介しておきます。
Perl使いではじめてRedisを使う人向けに書いたつもりです。</p>

<h3>Redisの簡単な説明</h3>

<p>Redisのインストール方と、Perlからの接続方法、そしてRedisの型の説明です。
記事の中でも紹介していますが、Redisはその豊富な型が特長です。
読者はきっとPerl使いだろうということで、Perlの型(Perlにも型はあるんだよ！！)と
比較しながら簡単に紹介しています。</p>

<h3>Redisの応用例とCPANモジュールの紹介</h3>

<p>Redisを使うとこんなことができるよ、という紹介です。
CPANで公開されているRedis関連のモジュールも合わせて紹介しています。</p>

<h3>Redis自体の注意点</h3>

<p>以前Redisを使ったサービスの運用に携わっていたのですが、
そのなかで実際に起きたことを元に、Redisの注意点について書きました。
さいわいサービスが停止するような事故にはありませんでしたが、
メトリックスを眺めながらエンジニア勢でヤバイヤバイ騒いでましたね・・・。
みなさんも気をつけて下さい。</p>

<h2>執筆してみての感想</h2>

<p>昔から文章を書くのにはだいぶ苦手意識があり、
今回の執筆も非常に苦労しました。
一文の前半を書いた時点で
「今から書こうとしている情報は本当に必要なのか」
「自分の記憶違いで間違った情報なのでは」と不安になり、
色々考えているうちに、何書こうとしてたのかわからなくなるんですよね。
まずは適当に書き上げて、後からちゃんと推敲しよう、
とは思いつつもなかなか進められず・・・。
スループットを上げたい。</p>

<p>細かい表現とかも気になってなかなか進まないので、
こういうの入れて頑張ろうと思います！</p>

<ul>
<li><a href="http://qiita.com/azu/items/2c565a38df5ed4c9f4e1">VS Codeでtextlintを使って文章をチェックする</a></li>
<li><a href="http://takemikami.com/2017/02/14/gitbook.html">gitbookで技術書を書く環境の構築手順</a></li>
</ul>


<p>(執筆が進まないと、こういう環境構築に時間をかけてしまうのもよくないと思うんだ・・・)</p>

<h2>余談</h2>

<p>ところで、<strong>Vol.97</strong>と<strong>第43回</strong>ってどっちも<strong>素数</strong>ですね！
雑なプログラムを書いて調べてみたところ、
両方素数になるのはVol.83, 第29回以来、<strong>7回目</strong>(これも<strong>素数</strong>だ！)。
次はVol.101, 第47回です。
そのときのPerl Hackerは誰になるのでしょうか。楽しみですね！</p>

<pre><code class="perl">use warnings;
use strict;

sub is_prime {
    my $n = shift;
    return 0 if $n &lt; 2;
    my $i = 2;
    while($i*$i&lt;=$n) {
        return 0 if $n % $i == 0;
        $i++;
    }
    return 1;
}

my $i = 1;
for my $n(1..200) {
    my $m = $n-43+97;
    if (is_prime($n) &amp;&amp; is_prime($m)) {
        printf "%3d: Vol.%3d, No.%3d\n", $i, $m, $n;
        $i++;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis::Fast 0.19リリースのお知らせ]]></title>
    <link href="https://shogo82148.github.io/blog/2016/12/20/redis-fast-0-dot-19-released/"/>
    <updated>2016-12-20T22:38:27+09:00</updated>
    <id>https://shogo82148.github.io/blog/2016/12/20/redis-fast-0-dot-19-released</id>
    <content type="html"><![CDATA[<p><a href="https://metacpan.org/pod/Redis::Fast">Redis::Fast 0.19</a> をリリースしました。
主な変更点は以下の通りです。</p>

<ul>
<li><code>reconnect_on_error</code> オプションの追加</li>
<li>Sentinelのノード一覧が更新されない不具合の修正</li>
<li>IPv6の実験的サポート</li>
</ul>


<!-- More -->


<h2><code>reconnect_on_error</code> オプションの追加</h2>

<p><a href="https://github.com/yoheimuta">@yoheimuta</a>さんからのプルリクエストです。
今まではネットワークエラーが発生した時のみ再接続処理が走っていましたが、
Redisがエラーを返した場合にも再接続を行うようになります。
マスタースレーブ構成をしているときに、
何らかの原因によりRedis::Fastからのコネクションを維持したまま、
マスターがスレーブに降格してしまった場合に対処するための機能です。
以下のように設定することで、新しいマスターに再接続を行うことが可能になります。</p>

<pre><code class="perl">my $r = Redis::Fast-&gt;new(
    reconnect          =&gt; 1, # 0以上で再接続有効
    reconnect_on_error =&gt; sub {
        my ($error, $ret, $command) = @_;
        if ($error =~ /READONLY You can't write against a read only slave/) {
            return 1; # 再接続を行う。次の再接続まで最低1秒空ける
        }
        return -1; # 再接続は行わない
    },
);
</code></pre>

<h2>Sentinelのノード一覧が更新されない不具合の修正</h2>

<p>Redis::FastにはどれかひとつのSentinelノードに接続すると、
他のノードの情報を自動的に収集する機能があります。
この機能が最新のRedisでは動いていなかったので修正しました。
具体的にいつからなのかまでは追ってないのですが、
Redisのバージョン3.0.6から3.2.6の間のどこかで
ノード一覧の形式が変わってしまったようです。</p>

<p>(最近Sentinelの話題を聞かないけど、みんな使ってるのかな・・・)</p>

<h2>IPv6の実験的サポート</h2>

<p>サーバの指定にIPv6のアドレスが使えるようになりました。
<code>Redis::Fast-&gt;new(server =&gt; "[::1]:6379")</code> のような指定ができます。</p>

<p>バックエンドのhiredis自体は以前からIPv6に対応していたのですが、
今までRedis::Fastでは正しく動きませんでした。</p>

<p>とりあえずlocalhostに接続できることは確認しましたが、
手元にIPv6のネットワークがなくて検証もできていないため、
実験的サポートという扱いで・・・。
 誰かIPv6に詳しい方、検証お願いします。</p>

<h2>感想</h2>

<ul>
<li>テストがなかなか通らず辛かった</li>
<li>CPAN Autherを変な幾何学模様から変えたい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DateTime.pmにうるう秒の修正が入った話]]></title>
    <link href="https://shogo82148.github.io/blog/2016/12/15/leap-second-in-datetime-dot-pm/"/>
    <updated>2016-12-15T22:17:47+09:00</updated>
    <id>https://shogo82148.github.io/blog/2016/12/15/leap-second-in-datetime-dot-pm</id>
    <content type="html"><![CDATA[<p>こんにちは、<a href="https://metacpan.org/pod/DateTime">DateTime.pm</a> Watcherのいっちーです。
本日面白いパッチがDateTime.pmに取り込まれたので、ご紹介したいと思います。</p>

<!-- More -->


<p>そのpullreqがこちらです。Closedになっていますが、該当コミットはmasterに取り込まれています。</p>

<ul>
<li><a href="https://github.com/houseabsolute/DateTime.pm/pull/48">The leap second in 2012 was on 2012-07-01 not 2012-06-01. #48</a></li>
</ul>


<blockquote><p>per <a href="https://confluence.qps.nl/display/KBE/UTC+to+GPS+Time+Correction">https://confluence.qps.nl/display/KBE/UTC+to+GPS+Time+Correction</a> the leap second in 2012 was on 2012-07-01 not 2012-06-01. It&rsquo;s is well known that leap seconds only occur directly before Jan 1st or July 1st.</p></blockquote>

<p>適当な和訳「2012年に挿入されたうるう秒は2012年6月1日ではなく2012年7月1日です。よく知られているように、今までに挿入されたうるう秒は1月1日と7月1日の直前だけです。」</p>

<pre><code class="diff">diff --git a/lib/DateTime/LeapSecond.pm b/lib/DateTime/LeapSecond.pm
index 66e1b2b..4a38be2 100644
--- a/lib/DateTime/LeapSecond.pm
+++ b/lib/DateTime/LeapSecond.pm
@@ -108,7 +108,7 @@ sub _initialize {
             1999  Jan. 1  +1
             2006  Jan. 1  +1
             2009  Jan. 1  +1
-            2012  Jun. 1  +1
+            2012  Jul. 1  +1
             2015  Jul. 1  +1
             2017  Jan. 1  +1
             )
</code></pre>

<p>なぜ4年間誰も気が付かなかった。</p>

<h2>このバグの影響</h2>

<p>結論から言うと、<strong>この修正によるDateTime.pmの挙動への影響はありません</strong>。
これを書いている時点で最新版のver1.41には、上記の修正は取り込まれていませんが、
うるう秒は2012年7月1日に正しく挿入されます。</p>

<p>以前<a href="//shogo82148.github.io/blog/2015/12/09/perl-datetime/">Perl の DateTime 利用上の注意点</a>で
うるう秒の確認をしたときと同様に検証してみましょう。</p>

<pre><code class="perl">use feature qw(say);
my $dt;

use DateTime;

$dt = DateTime-&gt;new( year =&gt; 2012, month =&gt; 7, day =&gt; 1, hour =&gt; 9, time_zone =&gt; 'Asia/Tokyo' );
say $dt-&gt;subtract(seconds =&gt; 1);

$dt = DateTime-&gt;new( year =&gt; 2012, month =&gt; 6, day =&gt; 1, hour =&gt; 9, time_zone =&gt; 'Asia/Tokyo' );
say $dt-&gt;subtract(seconds =&gt; 1);
</code></pre>

<pre><code class="plain">$ perl datetime.pl
2012-07-01T08:59:60
2012-06-01T08:59:59

$ PERL_DATETIME_PP=1 perl datetime.pl
2012-07-01T08:59:60
2012-06-01T08:59:59
</code></pre>

<p>DateTime.pmにはXSの実装とPurePerlの実装が含まれていますが、
どちらの実装でも2012年7月1日に正しくうるう秒が挿入され、2012年6月1日にはうるう秒はありません。</p>

<p><a href="https://twitter.com/kazoo04/status/808195587518578688">https://twitter.com/kazoo04/status/808195587518578688</a>">https://twitter.com/kazoo04/status/808195587518578688">https://twitter.com/kazoo04/status/808195587518578688</a></a></p>

<p>まさに、「コード見たら絶対動かないはずなのになぜか思った通りにちゃんと動く」といった感じです。</p>

<h2>なぜ正しく動くのか</h2>

<p>なぜ正しく動くのか、その答えはうるう秒一覧の解析を行う部分にありました。</p>

<ul>
<li><a href="https://github.com/houseabsolute/DateTime.pm/blob/ff0e3780ea1c841eb17a0245f5f8061cf10c28d3/lib/DateTime/LeapSecond.pm#L40-L41">DateTime.pm/lib/DateTime/LeapSecond.pm</a></li>
</ul>


<pre><code class="perl">my $utc_epoch
    = DateTime-&gt;_ymd2rd( $year, ( $mon =~ /Jan/i ? 1 : 7 ), $mday );
</code></pre>

<p><strong>Jan.(1月)以外はすべて7月として扱っている！</strong></p>

<p>Janか否かが重要なので、JunだろうがJulだろうが7月として扱われるので、結果的に正しく動くわけです。
「バグを埋め込んでいたけど、実装が適当でたまたま動いていた」というよくあるパターンですね。
将来3月末や9月末に挿入されるようになったとき大丈夫なんでしょうか・・・。
まあ、必要になるのは数百年後とかなので、僕には関係ない・・・そう、関係ないのです・・・。</p>

<h2>まとめ</h2>

<ul>
<li>DateTime.pmのうるう秒一覧にbug fix</li>
<li>動作に影響は無いので、ユーザ側では特に気にする必要はない

<ul>
<li>うるう秒自体を気にしないといけないのは仕方がない・・・</li>
</ul>
</li>
<li>JanとかJunとかJulとか似てて紛らわしいんだよ！！数字書け！！</li>
</ul>


<h2>ちなみに</h2>

<p>最新版のver1.41は来年(2017年)の1月1日のうるう秒に対応済みです。</p>

<pre><code class="perl">use feature qw(say);
my $dt;

use DateTime;

$dt = DateTime-&gt;new( year =&gt; 2017, month =&gt; 1, day =&gt; 1, hour =&gt; 9, time_zone =&gt; 'Asia/Tokyo' );
say $dt-&gt;subtract(seconds =&gt; 1);
</code></pre>

<pre><code class="plain">$ perl datetime.pl
2017-01-01T08:59:60
</code></pre>

<p>みなさん準備は出来ていますか 😇</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PerlでもGoでも実行できるQuine書いた]]></title>
    <link href="https://shogo82148.github.io/blog/2016/04/06/ployglot-quine-of-golang-and-perl/"/>
    <updated>2016-04-06T10:07:00+09:00</updated>
    <id>https://shogo82148.github.io/blog/2016/04/06/ployglot-quine-of-golang-and-perl</id>
    <content type="html"><![CDATA[<p><a href="http://shogo82148.github.io/blog/2016/04/05/polyglot-of-perl-and-golang/">昨日のPolyglot</a>を元にPerlでもGoでも実行できるQuine書いた。</p>

<!-- More -->


<pre><code>package main;import("fmt");var(q=`printf'package main;import("fmt");var(q%c%c%s%c/*%c);sub import{}sub var{$_%cshift%c~s!%c(.*)%c/\*!$1!gr;eval}%c__END__%c',61,96,$_,96,61,61,61,96,96,10,10;print&lt;DATA&gt;`/*=);sub import{}sub var{$_=shift=~s!`(.*)`/\*!$1!gr;eval}
__END__
*/);func main(){s:=`package main;import("fmt");var(q=%c%s%c/*=);sub import{}sub var{$_=shift=~s!%c(.*)%c/\*!$1!gr;eval}
__END__
*/);func main(){s:=%c%s%c;fmt.Printf(s,96,q,96,96,96,96,s,96)}
`;fmt.Printf(s,96,q,96,96,96,96,s,96)}
</code></pre>

<p>Perlで実行してもGoで実行しても自分自身を出力します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PerlとGolangで実行できるPolyglot書いてみた]]></title>
    <link href="https://shogo82148.github.io/blog/2016/04/05/polyglot-of-perl-and-golang/"/>
    <updated>2016-04-05T12:27:00+09:00</updated>
    <id>https://shogo82148.github.io/blog/2016/04/05/polyglot-of-perl-and-golang</id>
    <content type="html"><![CDATA[<p>Rubyの会社をPerlの会社に変えてしまおう計画。
Golangのフリをして忍び込ませれば行けるのではという話になったので、
GoでもPerlでも実行できるコードを書いてみた。</p>

<!-- More -->


<p>出来上がったのがこちら。</p>

<pre><code class="plain">package main;
import ("fmt");
var (s=0/*==);
sub import {}
sub var { print "Hello macotasu"; }
__END__
*/)
func main() { fmt.Println("Hello macotasu") }
</code></pre>

<p>一番のポイントは<code>var (s=0/*==);</code>の行ですね。
Perlで解釈すると正規表現置換<code>s///</code>として解釈され、<code>/*</code>が無視されます。
Goで解釈すると変数<code>s</code>への代入として解釈され、<code>/*</code>がコメントとして扱われます。</p>

<p>あとはGoのキーワードをPerlが解釈できないので、ちょっと書き方を工夫します。</p>

<ul>
<li><code>package main</code> はGoでもPerlでも似たような意味で解釈されるのでそのまま</li>
<li>Goの <code>import</code>, <code>var</code> はPerlで解釈できないので、()を省略せずに書いてPerlの関数呼び出しっぽくする</li>
<li>省略可能なセミコロンをちゃんと書く</li>
</ul>


<p>GoとPerlのコードは分かれているのでどんな処理でも自由に書くことができますが、
<code>import</code> だけGoでもPerlでも解釈されてしまうというという制限があります。
<code>import</code> するパッケージが一個だけなら問題ないんですが、
複数書く場合は以下のように２個め以降をすべてドットインポートする必要があって男気あふれる感じです。
(Perlでは文字列結合として解釈される。Goでは<code>var</code>のあとに<code>import</code>かけないっぽいので、ここに押し込むしかない。)</p>

<pre><code class="plain">package main;
import (
  "fmt"
  . "math"
);
var (s=0/*==);
sub import {}
sub var { print "Hello macotasu"; }
__END__
*/)
func main() { fmt.Println("Hello macotasu", Pi) }
</code></pre>

<p>もっと簡潔にかけないかな。</p>

<h2>追記</h2>

<p>シンタックスハイライトしてみたらわかりやすいかなと思ってやってみた。</p>

<p>Perlのシンタックスハイライト。</p>

<pre><code class="perl">package main;
import ("fmt");
var (s=0/*==);
sub import {}
sub var { print "Hello macotasu"; }
__END__
*/)
func main() { fmt.Println("Hello macotasu") }
</code></pre>

<p>Goのシンタックスハイライト。</p>

<pre><code class="go">package main;
import ("fmt");
var (s=0/*==);
sub import {}
sub var { print "Hello macotasu"; }
__END__
*/)
func main() { fmt.Println("Hello macotasu") }
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="https://golang.org/ref/spec">The Go Programming Language Specification</a></li>
<li><a href="http://d.hatena.ne.jp/sugyan/20110306/1299418878">polyglot 基礎の基礎</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
