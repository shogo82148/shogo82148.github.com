<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: go | Shogo's Blog]]></title>
  <link href="http://shogo82148.github.io/blog/categories/go/atom.xml" rel="self"/>
  <link href="http://shogo82148.github.io/"/>
  <updated>2015-05-09T09:58:52+09:00</updated>
  <id>http://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[map[string]Hoge or map[string]*Hoge ?]]></title>
    <link href="http://shogo82148.github.io/blog/2015/02/22/should-i-use-a-pointer-in-go/"/>
    <updated>2015-02-22T02:14:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/02/22/should-i-use-a-pointer-in-go</id>
    <content type="html"><![CDATA[<p>Go言語でポインタを使うべきか使わないべきか問題。
「ケース・バイ・ケースなので、状況に応じて使い分けましょう！」という結論が出るのは目に見えているので、
具体例について検証してみた結果を書いておきます。</p>

<!-- More -->


<h2>背景</h2>

<p>他の人のコードレビューを見ていたら、
レビュアーが「コピーをしないで済むのでstructの受け渡しにはポインタ使ったほうがいいと思います！」とコメントしていて、
そうなのか？と思ったのですがあんまり自信がなかったので検証してみました。
コメントがついていたのは以下のようなコード。</p>

<p>``` go
package hoge</p>

<p>import (</p>

<pre><code>"strconv"
</code></pre>

<p>)</p>

<p>type Hoge struct {</p>

<pre><code>A int
B int
C int
</code></pre>

<p>}</p>

<p>func NewHogeMapStruct() map[string]Hoge {</p>

<pre><code>m := make(map[string]Hoge)
for i := 0; i &lt; 10000; i++ {
    m[strconv.Itoa(i)] = Hoge{i, i, i}
}
return m
</code></pre>

<p>}
```</p>

<p>ポイントは以下の点です。</p>

<ul>
<li>受け渡すstructはintが3つ程度の小さなもの</li>
<li>mapに入れて返す</li>
</ul>


<h2>benchmarkを使って検証する</h2>

<p>ポインタを使わない版と使う版を両方作ってベンチマークをとってみます。</p>

<p>``` go
package hoge</p>

<p>import (</p>

<pre><code>"strconv"
</code></pre>

<p>)</p>

<p>type Hoge struct {</p>

<pre><code>A int
B int
C int
</code></pre>

<p>}</p>

<p>// ポインタ使わない版
func NewHogeMapStruct() map[string]Hoge {</p>

<pre><code>m := make(map[string]Hoge)
for i := 0; i &lt; 10000; i++ {
    m[strconv.Itoa(i)] = Hoge{i, i, i}
}
return m
</code></pre>

<p>}</p>

<p>// ポインタ使う版
func NewHogeMapPointer() map[string]*Hoge {</p>

<pre><code>m := make(map[string]*Hoge)
for i := 0; i &lt; 10000; i++ {
    m[strconv.Itoa(i)] = &amp;Hoge{i, i, i}
}
return m
</code></pre>

<p>}
```</p>

<p>ベンチマークはこれらの関数をただ呼び出すだけのシンプルなもの。</p>

<p>``` go
package hoge</p>

<p>import (</p>

<pre><code>"strconv"
"testing"
</code></pre>

<p>)</p>

<p>func BenchmarkStruct(b *testing.B) {</p>

<pre><code>for i := 0; i &lt; b.N; i++ {
    NewHogeMapStruct()
}
</code></pre>

<p>}</p>

<p>func BenchmarkPointer(b *testing.B) {</p>

<pre><code>for i := 0; i &lt; b.N; i++ {
    NewHogeMapPointer()
}
</code></pre>

<p>}
```</p>

<p><code>go test -benchmem -bench .</code> すると以下のような結果が得られました。</p>

<p><code>plain
PASS
BenchmarkStruct      500       3238732 ns/op     1662087 B/op      10615 allocs/op
BenchmarkPointer     500       3485712 ns/op     1372074 B/op      20593 allocs/op
ok      github.com/shogo82148/pointer-test  4.067s
</code></p>

<p>ポインタを使わないほうが若干速いですね。
メモリのアロケーション回数はポインタ使う版の半分です。</p>

<p>ポインタ使わない版は速度・メモリアロケーション回数は減ったものの、
必要なバイト数は増えています。
おそらく、これから値が入る予定のメモリ領域を予め確保しており、
その分のメモリを多めに食っているのでしょう。
ポインタ使う版では構造体の中身を入れる分は必要になったときにnewするので、
使用するメモリは最小限で済みます。</p>

<h2>アセンブリを見てみてみる</h2>

<p>go tool を使うとアセンブリが見れるらしい。
<code>go tool 6g -S hoge.go</code> を実行してアセンブリも眺めてみます。</p>

<p><code>plain
--- prog list "NewHogeMapStruct" ---
0000 (hoge.go:13) TEXT    NewHogeMapStruct+0(SB),$72-8
0001 (hoge.go:13) FUNCDATA $0,gcargs·0+0(SB)
0002 (hoge.go:13) FUNCDATA $1,gclocals·0+0(SB)
0003 (hoge.go:13) TYPE    ~anon0+0(FP){map[string]"".Hoge},$8
0004 (hoge.go:13) TYPE    m+-8(SP){map[string]"".Hoge},$8
0005 (hoge.go:13) TYPE    i+-16(SP){int},$8
0006 (hoge.go:14) MOVQ    $type.map[string]"".Hoge+0(SB),(SP)
0007 (hoge.go:14) MOVQ    $0,8(SP)
0008 (hoge.go:14) PCDATA  $0,$24
0009 (hoge.go:14) CALL    ,runtime.makemap+0(SB)
0010 (hoge.go:14) PCDATA  $0,$-1
0011 (hoge.go:14) MOVQ    16(SP),BX
0012 (hoge.go:14) MOVQ    BX,m+-8(SP)
0013 (hoge.go:15) MOVQ    $0,AX
0014 (hoge.go:15) JMP     ,16
0015 (hoge.go:15) INCQ    ,AX
0016 (hoge.go:15) CMPQ    AX,$10000
0017 (hoge.go:15) JGE     $0,40
0018 (hoge.go:16) MOVQ    AX,i+-16(SP)
0019 (hoge.go:16) MOVQ    AX,(SP)
0020 (hoge.go:16) CALL    ,strconv.Itoa+0(SB)
0021 (hoge.go:16) MOVQ    i+-16(SP),DX
0022 (hoge.go:16) MOVQ    8(SP),SI
0023 (hoge.go:16) MOVQ    16(SP),BP
0024 (hoge.go:16) MOVQ    statictmp_0002+0(SB),BX
0025 (hoge.go:16) MOVQ    statictmp_0002+8(SB),BX
0026 (hoge.go:16) MOVQ    statictmp_0002+16(SB),BX
0027 (hoge.go:16) MOVQ    $type.map[string]"".Hoge+0(SB),(SP)
0028 (hoge.go:16) MOVQ    m+-8(SP),BX
0029 (hoge.go:16) MOVQ    BX,8(SP)
0030 (hoge.go:16) MOVQ    SI,16(SP)
0031 (hoge.go:16) MOVQ    BP,24(SP)
0032 (hoge.go:16) MOVQ    DX,32(SP)
0033 (hoge.go:16) MOVQ    DX,40(SP)
0034 (hoge.go:16) MOVQ    DX,48(SP)
0035 (hoge.go:16) PCDATA  $0,$56
0036 (hoge.go:16) CALL    ,runtime.mapassign1+0(SB)
0037 (hoge.go:16) MOVQ    i+-16(SP),AX
0038 (hoge.go:16) PCDATA  $0,$-1
0039 (hoge.go:15) JMP     ,15
0040 (hoge.go:18) MOVQ    m+-8(SP),BX
0041 (hoge.go:18) MOVQ    BX,~anon0+0(FP)
0042 (hoge.go:18) RET     ,
</code></p>

<p><code>plain
--- prog list "NewHogeMapPointer" ---
0043 (hoge.go:21) TEXT    NewHogeMapPointer+0(SB),$72-8
0044 (hoge.go:21) FUNCDATA $0,gcargs·1+0(SB)
0045 (hoge.go:21) FUNCDATA $1,gclocals·1+0(SB)
0046 (hoge.go:21) TYPE    ~anon0+0(FP){map[string]*"".Hoge},$8
0047 (hoge.go:21) TYPE    m+-24(SP){map[string]*"".Hoge},$8
0048 (hoge.go:21) TYPE    i+-32(SP){int},$8
0049 (hoge.go:21) TYPE    autotmp_0003+-16(SP){string},$16
0050 (hoge.go:22) MOVQ    $type.map[string]*"".Hoge+0(SB),(SP)
0051 (hoge.go:22) MOVQ    $0,8(SP)
0052 (hoge.go:22) PCDATA  $0,$24
0053 (hoge.go:22) CALL    ,runtime.makemap+0(SB)
0054 (hoge.go:22) PCDATA  $0,$-1
0055 (hoge.go:22) MOVQ    16(SP),BX
0056 (hoge.go:22) MOVQ    BX,m+-24(SP)
0057 (hoge.go:23) MOVQ    $0,AX
0058 (hoge.go:23) JMP     ,60
0059 (hoge.go:23) INCQ    ,AX
0060 (hoge.go:23) CMPQ    AX,$10000
0061 (hoge.go:23) JGE     $0,94
0062 (hoge.go:24) MOVQ    AX,i+-32(SP)
0063 (hoge.go:24) MOVQ    AX,(SP)
0064 (hoge.go:24) CALL    ,strconv.Itoa+0(SB)
0065 (hoge.go:24) MOVQ    8(SP),BX
0066 (hoge.go:24) MOVQ    BX,autotmp_0003+-16(SP)
0067 (hoge.go:24) MOVQ    16(SP),BX
0068 (hoge.go:24) MOVQ    BX,autotmp_0003+-8(SP)
0069 (hoge.go:24) MOVQ    $type."".Hoge+0(SB),(SP)
0070 (hoge.go:24) PCDATA  $0,$16
0071 (hoge.go:24) CALL    ,runtime.new+0(SB)
0072 (hoge.go:24) MOVQ    i+-32(SP),CX
0073 (hoge.go:24) PCDATA  $0,$-1
0074 (hoge.go:24) MOVQ    8(SP),AX
0075 (hoge.go:24) NOP     ,
0076 (hoge.go:24) MOVQ    CX,(AX)
0077 (hoge.go:24) NOP     ,
0078 (hoge.go:24) MOVQ    CX,8(AX)
0079 (hoge.go:24) NOP     ,
0080 (hoge.go:24) MOVQ    CX,16(AX)
0081 (hoge.go:24) MOVQ    $type.map[string]*"".Hoge+0(SB),(SP)
0082 (hoge.go:24) MOVQ    m+-24(SP),BX
0083 (hoge.go:24) MOVQ    BX,8(SP)
0084 (hoge.go:24) MOVQ    autotmp_0003+-16(SP),BX
0085 (hoge.go:24) MOVQ    BX,16(SP)
0086 (hoge.go:24) MOVQ    autotmp_0003+-8(SP),BX
0087 (hoge.go:24) MOVQ    BX,24(SP)
0088 (hoge.go:24) MOVQ    AX,32(SP)
0089 (hoge.go:24) PCDATA  $0,$40
0090 (hoge.go:24) CALL    ,runtime.mapassign1+0(SB)
0091 (hoge.go:24) MOVQ    i+-32(SP),AX
0092 (hoge.go:24) PCDATA  $0,$-1
0093 (hoge.go:23) JMP     ,59
0094 (hoge.go:26) MOVQ    m+-24(SP),BX
0095 (hoge.go:26) MOVQ    BX,~anon0+0(FP)
0096 (hoge.go:26) RET     ,
</code></p>

<p>メモリアロケーションが起きているのはおそらく <code>runtime.new</code> と <code>strconv.Itoa</code> を呼び出している部分でしょう。
ポインタ使う版では両方とも呼び出していますが、ポインタ使わない版では<code>strconv.Itoa</code>の呼び出しだけです。
ポインタ使う版ではmapのkeyとvalueのメモリ領域をそれぞれ確保が必要なのに対して、
ポインタ使わない版ではvalueのためのメモリ領域を<code>new(map[string]Hoge)</code>の時点で一括確保するので、
メモリアロケーションが少なくて済むということですね。</p>

<h2>結論</h2>

<p>今回の場合構造体のサイズが小さいく、コピーのコスト&lt;アロケーションのコストであったため、
速度的にはポインタを使わない方が有利でした。
しかし、<code>map</code>は値の入っていない要素分を予め確保するので、
メモリ使用量的にはポインタを使う方が有利でした。
結局は速度とメモリ使用量のトレードオフということです。</p>

<p>実際のコードでは、キーの個数は60個程度で呼び出される頻度もそんなに多くなく、
速度もメモリも十分に足りるので、正直どっちでも良かった気がします。
ポインタを使わないほうがタイプ数がちょっと減ってコード書くときに少し嬉しいくらいですかね。</p>

<h2>結論の結論</h2>

<p>ケース・バイ・ケースなので、状況に応じて使い分けましょう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Androidのバイナリファイルを解析するgoのライブラリ]]></title>
    <link href="http://shogo82148.github.io/blog/2014/05/07/androidbinary/"/>
    <updated>2014-05-07T13:29:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/05/07/androidbinary</id>
    <content type="html"><![CDATA[<p>Androidのアプリの実態はzipファイルなのでunzipすれば簡単に中身を見ることができるわけですが、
開いてもバイナリファイルが入っているだけでよくわかりません。
AndroidSDKに付属しているaaptというツールを使えば読めるんだけどインストールが大変で苦しんでいる人がいたので、
お手軽に解析できるgolangのライブラリを書いてみました。</p>

<!-- More -->


<h2>使い方</h2>

<h3>go getしてくる</h3>

<p><a href="https://github.com/shogo82148/androidbinary">githubのレポジトリ</a> からダウンロードしてきます。</p>

<p><code>bash
go get github.com/shogo82148/androidbinary
</code></p>

<h3>AndroidManifest.xmlを解析する</h3>

<p><code>io.ReaderAt</code>インターフェースを満たすオブジェクトを<code>androidbinary.NewXMLFile</code>に渡すと解析してくれます。</p>

<p><code>go
f, _ := os.Open("AndroidManifest.xml")
xmlFile, _ := androidbinary.NewXMLFile(f)
reader := xmlFile.Reader()
// reader を読むと普通のXMLファイルとして読める
</code></p>

<h3>resources.arscを解析する</h3>

<p>アプリ名などの設定はAndroidManifest.xmlには直接書かれておらず、
リソースファイルに書いてあることがほとんどです(開発者がよほどものぐさでなければ)。
リソースの情報はapk内のresources.arscに書かれているので、
このファイルを読む機能もついてます。</p>

<p>``` go
f, _ := os.Open("resources.arsc")
tableFile, _ := androidbinary.NewTableFile(f)</p>

<p>// ID 0x7F040000 に対応するリソースを読む
config := &amp;androidbinary.ResTableConfig{}
val, _ := tableFile.GetResource(androidbinary.ResId(0x7f040000), config)
```</p>

<p>アプリ名はロケールによって変わったりするので、
<code>config</code>で設定できます。
例えば日本語の名前を取得したい場合はこんな感じ。</p>

<p><code>go
// ID 0x7F040000 に対応するリソース(日本語)を読む
config := &amp;androidbinary.ResTableConfig{}
config.Language[0] = 'j'
config.Language[1] = 'a'
val, _ := tableFile.GetResource(androidbinary.ResId(0x7f040000), config)
</code></p>

<h3>サンプルコード</h3>

<p>apkを解析してアプリの日本語名を取得する例。</p>

<p>``` go
package main</p>

<p>import (</p>

<pre><code>"archive/zip"
"bytes"
"encoding/xml"
"fmt"
"github.com/shogo82148/androidbinary"
"io/ioutil"
"strconv"
</code></pre>

<p>)</p>

<p>type XMLManifest struct {</p>

<pre><code>XMLName      xml.Name          `xml:"manifest"`
Applications []*XMLApplication `xml:"application"`
</code></pre>

<p>}</p>

<p>type XMLApplication struct {</p>

<pre><code>XMLName xml.Name `xml:"application"`
Label   string   `xml:"http://schemas.android.com/apk/res/android label,attr"`
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>r, _ := zip.OpenReader("sample.apk")
defer r.Close()

// read manifest and resource
var xmlFile *androidbinary.XMLFile
var tableFile *androidbinary.TableFile
for _, f := range r.File {
    switch f.Name {
    case "AndroidManifest.xml":
        rc, _ := f.Open()
        buf, _ := ioutil.ReadAll(rc)
        xmlFile, _ = androidbinary.NewXMLFile(bytes.NewReader(buf))
        rc.Close()
    case "resources.arsc":
        rc, _ := f.Open()
        buf, _ := ioutil.ReadAll(rc)
        tableFile, _ = androidbinary.NewTableFile(bytes.NewReader(buf))
        rc.Close()
    }
}

// parse xml
decoder := xml.NewDecoder(xmlFile.Reader())
xmlManifest := &amp;XMLManifest{}
decoder.Decode(xmlManifest)

// get application label
labelId, _ := strconv.ParseInt(xmlManifest.Applications[0].Label[3:], 16, 32)
config := &amp;androidbinary.ResTableConfig{}
config.Language[0] = 'j'
config.Language[1] = 'a'
label, _ := tableFile.GetResource(androidbinary.ResId(labelId), config)
fmt.Println("Application Name:", label)
</code></pre>

<p>}
```</p>

<p>エラー処理とか完全に省いているので上手く補ってください。</p>

<h2>制限事項</h2>

<p>GW中頑張ったけど途中で力尽きたので、今のところ以下のような制限があります。</p>

<ul>
<li>リソース名を扱えない

<ul>
<li>普通AndroidManifest.xmlにリソースを埋め込むときは<code>@string/app_name</code>みたいな名前を埋め込みますが、リソースファイルとの連携機能がないため<code>@0x7F04000000</code>のような数値を返します</li>
<li>resources.arsc からリソース名を読み取ったり、リソース名からリソースを取得する機能はありません</li>
</ul>
</li>
<li>configの設定が一部しか対応していない

<ul>
<li>ロケール、画面サイズ、SDKバージョン等にしか対応してません</li>
<li>IMEの設定や画面の細かいオプションとかも指定はできるけど、<code>GetResource</code>が解釈してくれないので誤った結果を返すかも</li>
</ul>
</li>
<li>リソースタイプ

<ul>
<li>文字列、整数、ブーリアン値にしか対応してません</li>
<li>string-array とかいうのとかあったりするけど、そんなの知らない</li>
</ul>
</li>
</ul>


<p>いろいろ制限はありますが、アプリ名を読み取ったり、パーミッションを解析するくらいはできるんじゃないですかね。
golang初心者なのでイケてないところがあったら教えて下さい。</p>

<h2>参考</h2>

<ul>
<li><a href="http://dsas.blog.klab.org/archives/52011424.html">エンコードされた AndroidManifest.xml を読む</a></li>
<li><a href="https://gist.github.com/cielavenir/4365521">ruby_apk Android::Resource can relate string pool (partially)</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
