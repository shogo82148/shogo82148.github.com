<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Shogo's Blog]]></title>
  <link href="http://shogo82148.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://shogo82148.github.io/"/>
  <updated>2015-08-23T01:54:33+09:00</updated>
  <id>http://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[各ブランチの最後にコミットした人を知る]]></title>
    <link href="http://shogo82148.github.io/blog/2015/05/21/branch-committer/"/>
    <updated>2015-05-21T00:50:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/05/21/branch-committer</id>
    <content type="html"><![CDATA[<p>ブランチが大量にあるので整理したい、けど大人数で開発しているから誰がどのブランチいじってるか分からない、
ということがあったので、出し方のメモ。</p>

<!-- More -->


<p>githubのbranch一覧も見ればいいじゃん！っていう意見もあると思うんだけど、
「自分のbranch一覧」は見れるんですが「特定のだれかのbranch一覧」が見れない・・・。</p>

<p>git-for-each-refを使うと各ブランチに対していろいろ操作できるようです。
各ブランチの最後にコミットした人一覧を出すには以下のコマンド。</p>

<p><code>bash
git for-each-ref --format='%(authordate:short) %(authorname) %(refname)' --sort=-committerdate refs/remotes/origin/
</code></p>

<p>formatは自由にいじれるのでいろいろ遊べます。
例えば、ブランチをたくさん抱え込んでいる人の一覧を表示する例。</p>

<p><code>bash
git for-each-ref --format="%(authorname)" refs/remotes/origin/ | sort | uniq -c | sort -nr
</code></p>

<h2>参考</h2>

<ul>
<li><a href="http://git-scm.com/docs/git-for-each-ref">git-for-each-ref - Output information on each ref</a></li>
<li><a href="http://d.hatena.ne.jp/syohex/20131225/1387948682">リモートブランチも含め更新日時が新しい順番にソートする</a></li>
<li><a href="http://shuzo-kino.hateblo.jp/entry/2014/07/03/232310">ブランチ一覧を更新時刻つきで表示したい場合、gitのfor-each-refが使える。</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git diffでcsvの差分を見やすく表示する]]></title>
    <link href="http://shogo82148.github.io/blog/2015/03/24/git-diff-csv/"/>
    <updated>2015-03-24T23:08:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/03/24/git-diff-csv</id>
    <content type="html"><![CDATA[<p>ExcelやGoogle Spreadsheetを使って作ったデータをプログラムに取り込むのにcsv形式が便利でよく使っているんですが、
gitで履歴管理をしてもdiffが見づらい・・・。
gitのdiffがかなり自由にカスタマイズできることを知ったので、いろいろいじってみたメモ。</p>

<!-- More -->


<p>例として、以下のようなcsvファイルを編集することを考えます。</p>

<p><code>plain hogehoge.csv
id,name,param_a,param_b,param_c,param_d,param_e
101,hoge,314,159,265,358,979
102,fuga,271,828,182,845,904
</code></p>

<p>一行目は列の見出しになっていて、プログラムからは列番号ではなく<code>param_d</code>の様に指定する、
という作りになってます。
<code>id: 101</code>の行の<code>param_d</code>の数値に変更が入った場合、普通のgitだと以下のようになります。</p>

<p><code>diff git-diff
diff --git a/hogehoge.csv b/hogehoge.csv
index c8dbd17..37f4ff5 100644
--- a/hogehoge.csv
+++ b/hogehoge.csv
@@ -1,3 +1,3 @@
id,name,param_a,param_b,param_c,param_d,param_e
-101,hoge,314,159,265,358,979
+101,hoge,314,159,265,359,979
 102,fuga,271,828,182,845,904
</code></p>

<p>二行目に何か変更があったことはわかりますが、
<code>param_d</code> だとはすぐにはわかりませんね・・・</p>

<h2>YAMLに変換して比較する</h2>

<p>バイナリファイルであっても差分が確認できるよう、
git-diffを実行する前に変換ツールを実行する機能があります。
拡張子がcsvのファイルに対してこの機能が働くように<code>.gitattributes</code>に以下の行を足します。</p>

<p><code>plain .gitattributes
*.csv diff=csv
</code></p>

<p><code>.git/config</code> に変換ツールの設定を追加します。
<code>key: value</code>の形式になっていると見やすそうなので、変換先の形式にはyamlを選びました。</p>

<p>``` plain .git/config
[diff "csv"]</p>

<pre><code>textconv = csv2yaml
</code></pre>

<p>```</p>

<p>ここで指定している<code>csv2yaml</code>は自前で用意する必要があります。
インターネット上をさまよえば同名のツールはいくらでもありそうですが、今回は自分でgoを使って書きました。
<a href="https://gist.github.com/shogo82148/8f19cb771dc6f91308a7">csv2yaml.go</a>をコンパイルしてパスの通る場所においておきましょう。
csv2yamlは自分のよく使うcsvのフォーマットにあわせて以下のようなカスタマイズをしてあります。</p>

<ul>
<li><code>id</code>という名前のキーを必ず最初にする</li>
<li>それ以外のキーはアルファベット順にソートする</li>
</ul>


<p>この状態で<code>git diff</code>を実行すると以下のようになります。</p>

<p><code>diff git-diff
diff --git a/hogehoge.csv b/hogehoge.csv
index c8dbd17..37f4ff5 100644
--- a/hogehoge.csv
+++ b/hogehoge.csv
@@ -3,7 +3,7 @@
   param_a: "314"
   param_b: "159"
   param_c: "265"
-  param_d: "358"
+  param_d: "359"
   param_e: "979"
 - id: "102"
   name: fuga
</code></p>

<p>これなら <code>param_d</code> が変更されたとすぐに分かりますね。</p>

<h2>hunk-headerを設定する</h2>

<p>めでたく<code>param_d</code>が変更されていることがわかるようになったのですが、
今度はどの行が変更されたのかがわからなくなってしまいました。</p>

<p>差分の <code>@@ -3,7 +3,7 @@</code> となっている部分はhunk-headerといって、自由にカスタマイズすることができます。
<code>.git/config</code> に表示したい文字列のパターンを入力しましょう。</p>

<p>``` plain .git/config
[diff "csv"]</p>

<pre><code>textconv = csv2yaml
xfuncname = "^- .*$"
</code></pre>

<p>```</p>

<p>この状態で差分を確認すると「<code>id: 101</code>の<code>param_d</code>をいうパラメータ」が更新されたことが一目瞭然ですね！</p>

<p><code>diff git-diff
diff --git a/hogehoge.csv b/hogehoge.csv
index c8dbd17..37f4ff5 100644
--- a/hogehoge.csv
+++ b/hogehoge.csv
@@ -3,7 +3,7 @@ - id: "101"
   param_a: "314"
   param_b: "159"
   param_c: "265"
-  param_d: "358"
+  param_d: "359"
   param_e: "979"
 - id: "102"
   name: fuga
</code></p>

<p><code>csv2yaml</code>を作るときに「<code>id</code>という名前のキーを必ず最初にする」としたのはこの機能を使うためです。
僕のユースケースでは<code>id</code>がわかれば十分なことがほとんどですが、
場合によってはもっと別の情報の方がいいかもしれませんね。</p>

<p>まだ設定したばっかりなので本当に有用かはよくわかってないですが、しばらくこの設定で試してみようと思います。</p>

<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/YasuOza/items/c472f803dab51b7d4f51">gitのdiffを見やすく表示する</a></li>
<li><a href="http://git-scm.com/docs/gitattributes">gitattributes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git で管理しているリポジトリの各ブランチの中身をそれぞれ個別のディレクトリにエクスポートする(git-archive版)]]></title>
    <link href="http://shogo82148.github.io/blog/2015/03/20/git-pack-branch/"/>
    <updated>2015-03-20T18:38:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/03/20/git-pack-branch</id>
    <content type="html"><![CDATA[<p><a href="http://moznion.hatenadiary.com/entry/2015/03/20/175035">git で管理しているリポジトリの各ブランチの中身をそれぞれ個別のディレクトリにエクスポートする</a> を読んで、
git-archive を使うともう少しシンプルに書けるんじゃないかと思ってやってみた。</p>

<p><code>bash
git branch | sed -e 's/^[\* ]*//g' | xargs -n1 -I% sh -c 'git archive --prefix=%/ % | tar x'
</code></p>

<p>.gitconfig とかでエイリアスを設定しておくといいんじゃないでしょうか</p>

<p>以上</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitで作業ディレクトリの変更を破棄したのに差分が出続けて困った話その2]]></title>
    <link href="http://shogo82148.github.io/blog/2014/10/21/git-case-sensitivity/"/>
    <updated>2014-10-21T00:56:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/10/21/git-case-sensitivity</id>
    <content type="html"><![CDATA[<p>先日「<a href="http://shogo82148.github.io/blog/2014/10/04/gitattribute-eol-equals-crlf/">Gitで作業ディレクトリの変更を破棄したのに差分が出続けて困った話</a>」と
いうのを書きましたが、より強力な敵が現われました。
このときは文字コードが原因で <code>git checkout -- &lt;file&gt;</code> しても差分が残り続けるというもので、<code>git add</code> してコミットし直すことで回避出来ました。
しかし、今度の敵は <code>git checkout -- &lt;file&gt;</code> しても <code>git add &lt;file&gt;</code>しても差分が残り続けます。</p>

<p>なんだ・・・このボスを倒したら新たなラスボスが現れた感・・・</p>

<p>acidlemon先生の手助けにより事無きを得たのですが、
ちょっと不明な点もあったので、その点もあわせてメモを残しておきます。</p>

<!-- More -->


<h2>症状</h2>

<p><code>git checkout -- &lt;file&gt;</code> しても、<code>git add &lt;file&gt;</code> しても、<code>git reset --hard HEAD</code> しても、
何をしても差分が出続ける・・・なんだこいつ・・・</p>

<p>``` plain
$ git checkout -- AwesomeFeature
$ git add .
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)</p>

<pre><code>(use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

modified:   AwesomeFeature/HogeHoge.txt

no changes added to commit (use "git add" and/or "git commit -a")
</code></pre>

<p>```</p>

<p>操作は全てMac上で行いました。</p>

<h2>原因</h2>

<p>原因はファイル名の大文字小文字でした。
<code>git ls-files</code> でgitに管理されているファイルの一覧を表示します。</p>

<p><code>
$ git ls-files
AwesomeFeature/HogeHoge.txt
AwesomeFeature/hogehoge.txt
README.txt
</code></p>

<p>大文字小文字だけが違う「HogeHoge.txt」と「hogehoge.txt」が管理されています。</p>

<p>しかしワーキングディレクトリにあるのは「HogeHoge.txt」のみです。</p>

<p><code>
$ ls AwesomeFeature/
HogeHoge.txt
</code></p>

<p>Macのファイルシステムは大文字小文字を区別しないので、
ワーキングディレクトリ上で「HogeHoge.txt」と「hogehoge.txt」を同時に扱えません。
しかしgitは両者を区別するので、よくわからない差分が生まれてしまったわけです。</p>

<p>両方同時に扱えないので、どちらか片方を消して解決します。
<code>git diff</code>で「HogeHoge.txt」と「hogehoge.txt」の差分が見れるのでどっちを残すが選択、
<code>git checkout -- &lt;file&gt;</code>で必要なほうをワーキングディレクトリに反映後、
<code>git rm --cached &lt;file&gt;</code>で不要なファイルをレポジトリから削除です。
「hogehoge.txt」を残す場合は以下のような感じです。全てファイル名を明示してるのがポイントです(症状のところではディレクトリ名指定だった)。</p>

<p><code>
$ # 差分確認
$ # 今はHogeHoge.txtの方がワーキングディレクトリに反映されているので、hogehoge.txtに変更があるように見える
$ git diff
diff --git a/AwesomeFeature/hogehoge.txt b/AwesomeFeature/hogehoge.txt
index 3488202..1150100 100644
--- a/AwesomeFeature/hogehoge.txt
+++ b/AwesomeFeature/hogehoge.txt
@@ -1 +1 @@
-this is hogehoge.txt
+this is HogeHoge.txt
$
$ # hogehoge.txt の内容をワーキングディレクトリに反映
$ git checkout -- AwesomeFeature/hogehoge.txt
$
$ # 今度はHogeHoge.txtに変更があるように見える
$ git diff
diff --git a/AwesomeFeature/HogeHoge.txt b/AwesomeFeature/HogeHoge.txt
index 1150100..3488202 100644
--- a/AwesomeFeature/HogeHoge.txt
+++ b/AwesomeFeature/HogeHoge.txt
@@ -1 +1 @@
-this is HogeHoge.txt
+this is hogehoge.txt
$
$ # HogeHoge.txtの方はgitから削除
$ git rm AwesomeFeature/HogeHoge.txt
rm 'AwesomeFeature/HogeHoge.txt'
$ git commit -m 'rm AwesomeFeature/HogeHoge.txt'
</code></p>

<p>「HogeHoge.txt」があるブランチと「hogehoge.txt」があるブランチをマージするとこうなるようです。
gitの扱いに慣れてない人が触っているレポジトリなのでトラブルが絶えない・・・それにしたってなんでこう見事に地雷を踏抜いて行くんだ・・・(ヽ´ω`)</p>

<h2>まとめ</h2>

<p>大文字小文字を区別しないファイルシステムなんか滅んでしまえ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitで作業ディレクトリの変更を破棄したのに差分が出続けて困った話]]></title>
    <link href="http://shogo82148.github.io/blog/2014/10/04/gitattribute-eol-equals-crlf/"/>
    <updated>2014-10-04T15:05:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/10/04/gitattribute-eol-equals-crlf</id>
    <content type="html"><![CDATA[<p>gitで変更した覚えの無いファイルに差分が出ていたので、
作業ディレクトリの変更を破棄したのに、
<code>git status</code>で差分が出続けて困ったのでメモ。</p>

<!-- More -->


<h2>症状</h2>

<p>gitでは<code>git checkout -- &lt;file&gt;</code> ってコマンドを叩くと、
作業ディレクトリの変更を破棄できます。</p>

<p>``` plain
$ git checkout -- hoge.txt
$ git status
On branch master
Changes not staged for commit:
 (use "git add <file>..." to update what will be committed)
 (use "git checkout -- <file>..." to discard changes in working directory)</p>

<p>   modified:   hoge.txt
```</p>

<p>しかし、差分が出続ける...
<code>git checkout -- &lt;file&gt;</code> ならさっきやったよ！</p>

<p><code>git reset --hard HEAD</code> して全変更を破棄してもダメでした。</p>

<h2>原因</h2>

<p>.gitattributesに改行コードの指定があったからでした。</p>

<p><code>plain .gitattributes
*.txt text=auto eol=crlf
</code></p>

<p>これが指定されていると、CRLFなファイルをコミットしようとしても、
レポジトリには改行コードがLFで保存されるようになる。</p>

<p><code>plain
$ cat .gitattributes # .gitattributes には eol=crlf が指定されている
*.txt text=auto eol=crlf
$ hexdump hoge.txt   # hoge.txt は改行コードCRLFで保存されている
0000000 48 65 6c 6c 6f 20 57 6f 72 6c 64 21 21 0d 0a
000000f
$ git add hoge.txt
$ git commit -m 'add hoge.txt'  # 改行コードがCRLFなhoge.txtをコミット
$ git cat-file -p master^{tree} # レポジトリにコミットされているオブジェクトを確認
100644 blob 523f058ebd4f1a280b5a33a79af8f22b74415f37   .gitattributes
100644 blob 936977184a9fa89d82f86957a90b92d4924b6573   hoge.txt
$ git cat-file -p 936977184a9fa89d82f86957a90b92d4924b6573 | hexdump # 改行コードがLF(末尾が0a)になっている！！
0000000 48 65 6c 6c 6f 20 57 6f 72 6c 64 21 21 0a
000000e
</code></p>

<p>ところがレポジトリ上にCRLFなファイルがコミットされていると、
コミットすべき内容と一致しないので差分がでてしまう。</p>

<p>``` plain
$ git cat-file -p master<sup>{tree}</sup>
100644 blob 523f058ebd4f1a280b5a33a79af8f22b74415f37   .gitattributes
100644 blob 23c3aefeda706ec02f4a724edc2faf1913a547ef   hoge.txt
$ git cat-file -p 23c3aefeda706ec02f4a724edc2faf1913a547ef | hexdump # 改行コードはCRLF(末尾が0d 0a)
0000000 48 65 6c 6c 6f 20 57 6f 72 6c 64 21 21 0d 0a
000000f
$ git status # 差分がでてしまう
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)</p>

<pre><code>modified:   hoge.txt
</code></pre>

<p>  no changes added to commit (use "git add" and/or "git commit -a")
```</p>

<p>作業ディレクトリが壊れているわけでなく、レポジトリの内容がおかしい(<code>eol=crlf</code>が設定されているときは全てのファイルはLFでコミットされているべき)ので、
今回はコミットして正しい状態にすることで解決。
差分計算の効率化のためにタイムスタンプを最初に見ているみたいなので、
touchしただけで差分が！ってなってびっくりした。</p>

<h2>まとめ</h2>

<p>CRLF滅びろ</p>

<h2>追記</h2>

<p><a href="http://shogo82148.github.io/blog/2014/10/21/git-case-sensitivity/">続編</a>がでました</p>
]]></content>
  </entry>
  
</feed>
