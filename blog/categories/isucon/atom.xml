<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: isucon | Shogo's Blog]]></title>
  <link href="http://shogo82148.github.io/blog/categories/isucon/atom.xml" rel="self"/>
  <link href="http://shogo82148.github.io/"/>
  <updated>2015-03-25T00:29:17+09:00</updated>
  <id>http://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ISUCON4にチームぽわわで参加しました]]></title>
    <link href="http://shogo82148.github.io/blog/2014/10/03/isucon-powawa-4/"/>
    <updated>2014-10-03T19:55:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/10/03/isucon-powawa-4</id>
    <content type="html"><![CDATA[<p>遅くなりましたが、ISUCON4のレポートです。
まこぴーとchroneさんとともにチームぽわわで参加し、惨敗してきました。</p>

<p>2014-10-06 追記: <a href="https://github.com/shogo82148/isucon4_powawa">競技中に使ったレポジトリ</a>を公開しました。</p>

<!-- More -->


<h2>事前準備</h2>

<ul>
<li>メンバー三人で集まって、去年のnopasteアプリで練習

<ul>
<li>chroneさんは初参戦なので雰囲気を掴んでもらう</li>
</ul>
</li>
<li>Ansibleを使っていこうっていう話になったので、プレイブックを書いて遊んでみる</li>
<li>githubにprivate repositoryを予め建てる

<ul>
<li>PayPalに対応してるっぽいので、ログインを試みるも何故か失敗</li>
<li>諦めてクレカ情報を直接入力</li>
<li>どうなってるんですかgithubさん！！！</li>
</ul>
</li>
</ul>


<h2>競技</h2>

<h3>10時くらいまで</h3>

<ul>
<li>お題確認</li>
<li>サーバのセットアップはchroneさんにお願いしスムーズにできた</li>
<li>サーバは人数分準備

<ul>
<li>僕がコミット＆実行確認をこまめに繰り返すタイプなので、書いたコードはすぐにデプロイしてテストに回したい！！</li>
<li>サーバ一台だとインフラの調整とアプリの確認がかぶって面倒</li>
<li>かといってローカルで同じ環境用意するのも面倒</li>
<li>AMIがあるならそれを使っちゃえ！(って記事を去年見た気がしたので)</li>
</ul>
</li>
<li>密かにUkigumoで自動デプロイする仕組みを作っておいた

<ul>
<li>書いたコードはすぐにデプロイしてテストに回したい！！</li>
<li>あらかじめukigumo-agentを起動</li>
<li>github-hookを設定してコミットしたら実行</li>
<li><a href="http://shogo82148.github.io/blog/2014/09/23/github-hooks-receiver-supports-x-hub-signature/">Github::Hooks::Receiverいじってた</a>のはこれやるためだったんだけど、Ukigumoさんで十分でした。便利ですね！！</li>
<li>去年はサーバに入って作業する人(まこぴー)がかなり忙しそうだったので、なんとか解消したかった</li>
</ul>
</li>
</ul>


<h3>お昼くらいまで</h3>

<ul>
<li>nginxで静的ファイル配信とかMySQLのクエリ分析とか</li>
<li>いっちーさんは早速Redis::Fastに手を付ける

<ul>
<li>みんなもRedis::Fast使ってね！！</li>
</ul>
</li>
<li>あとUkigumoさんのおもり

<ul>
<li>UkigumoとAnsibleのお陰で僕が何もしなくても、まこぴー氏が「nginxで静的ファイル配信したよ！」って言って数分後には確認できる状態になっていて便利</li>
<li>これのおかげでページが真っ白になっているのに気がつく</li>
<li>普通に設定を書き換えるとMIMEの設定がなくなるらしい</li>
<li>Ukigumo++</li>
</ul>
</li>
</ul>


<h3>14時くらいまで</h3>

<ul>
<li>chroneさんにMySQLのクエリ改善

<ul>
<li><code>COUNT()</code> している部分を一行SELECTだけにする修正とか</li>
</ul>
</li>
<li>一部Redis::Fastに書き換えた版も一応スコアでる</li>
<li>アプリが単純すぎてMySQLでもRedisでも大差ないスコア</li>
<li>自分の環境でmy.cnfの調整をしたら、MySQL gone awayしてしまってつらいことに

<ul>
<li>Redisに書き換えたものの、reportのロジックには手をつけてなかったので、効果あるのではと</li>
<li>MySQLだけ再起動したらそうなるらしいけど、ansibleのplaybookにアプリの再起動手順も含まれていたので全部再起動かかってたと思うんだけど・・・</li>
<li>結局サーバごと再起動しました(・ω&lt;)</li>
</ul>
</li>
</ul>


<h3>17時くらいまで</h3>

<ul>
<li>workloadを上げるとfailが大量にでて/reportのチェックでコケる問題</li>
<li>トランザクションとかFOR UPDATEの問題かと思ってSQLをいじくりまわす</li>
<li>初期データの考慮を忘れてたことに気が付き、初期化スクリプトを組む</li>
</ul>


<h3>18時まで</h3>

<ul>
<li>workload変えてベンチ走らせたり最後のあがき</li>
</ul>


<h2>まとめ</h2>

<ul>
<li>初期化大事！！

<ul>
<li>社内ISUCONに参加したときも初期化で散々な目にあった</li>
</ul>
</li>
<li>Ansibleがあまり効果的に使えてなかった

<ul>
<li>configいじるのが速いので、どうしても直接いじっちゃう</li>
<li>各個人にサーバ用意したけど、微妙に環境が違ってつらい</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISUCON3の本戦に参加してきた]]></title>
    <link href="http://shogo82148.github.io/blog/2013/11/09/isucon3/"/>
    <updated>2013-11-09T23:58:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/11/09/isucon3</id>
    <content type="html"><![CDATA[<p><a href="http://shogo82148.github.io/blog/2013/10/07/isucon3-qualify/">ISUCON3の予選</a>を何とか通過し、
本戦へと参戦してきました。</p>

<p>大会中の方針とか考えたこととかメモ。</p>

<h2>お題</h2>

<ul>
<li>Tw○tter--likeな画像投稿サービス

<ul>
<li>ユーザをフォローできる</li>
<li>フォローしたユーザが画像を投稿すると、タイムラインに画像が流れる</li>
<li>公開範囲を全員に公開・フォロワーのみに公開・自分だけに公開から選べる</li>
</ul>
</li>
<li>タイムラインはロングポーリングを使ってリアルタイム反映

<ul>
<li>JSON-APIが用意されていて、Javascriptから叩く</li>
</ul>
</li>
<li>使用できるサーバは5台</li>
</ul>


<p>画像を扱うお題と聞いて、会場がざわめきました。</p>

<h2>MySQLのクエリを見てみる</h2>

<p>開始直後、鍵を用意したり、gitのレポジトリを立てたりなんだりした後、
一回目の計測。</p>

<p>topコマンドで走っているプロセスを見ていると、大量のconvertが！！
プロセス名とお題から考えるに、こいつら確実にImage Magickだ・・・。
CPUのほとんどが画像の変換にくわれていたので、
まずは「どこかでキャッシュする」作戦をとることに。
キャッシュするならフロントに近いほうがいいだろうということで、
フロントのnginxでキャッシュする作戦をとることにしました
(アクセス制限があるimageは難しいかもしれないけど、全部publicなiconならすぐできるだろうとこのときは思ってました)。</p>

<p>僕はnginxがconvertを駆逐してくれると信じて、MySQLに投げているクエリを中心にPerlのコードを見てました。
役割分担はこんな感じ。</p>

<ul>
<li>サーバの設定とか(@mackee_wさん)</li>
<li>nginxでキャッシュする設定(@9reさん)</li>
<li>コード読む、主にMySQLに投げてるクエリとか(@shogo82148)</li>
</ul>


<p>毎回、ひどいクエリが仕込まれているようなイメージがあったけど、
今回はそこまでひどくない。
クエリチューニング全然効果なさそうと判断して、次の作戦を考えることにしました。</p>

<h2>No Image Magick, use Imager!</h2>

<p>やっぱり一番のボトルネックは画像変換。
nginxでキャッシュするとはいえ軽いほうがいいよね、ということで、
外部プロセスで実行している画像変換をImagerを使ってPerlと同じプロセスでやる作戦。</p>

<p>Imagerに置き換え後ベンチにかけたら、若干スコアが・・・上がった・・・ような・・・？
しかし、画像が変化していると怒られて、スコアは無効。
画像エラーを修正するコストと、スコアの上がり具合を見て、Image Magickのままにすることにしました。</p>

<p>予選でも同じように外部プロセス起動している部分をPerlのライブラリにしたけど、
その時はあっさり動いた。
あれは外部プロセス起動をやめたらスコア上がると思い込ませるための布石だったんだ・・・。
(今回の場合、プロセスの起動より画像の変換のほうが重いので、スコアが上がらないのは当たり前)</p>

<h2>いろいろ諦めてPerl側でファイルキャッシュ</h2>

<p>Imagerはテストを通らず、nginxの設定キャッシュ設定も上手く動作しなかったので、
Perlでファイルキャッシュする方針に変更。
convertの結果にmvで適当な場所にコピーして保存。
これだけでスコアが5倍くらいに跳ね上がり、一気に上位に浮上！
最初からやっておくべきだった・・・。
もうちょっと早ければ特別賞もらえたかもしれないのに。</p>

<h2>rsync! rsync!</h2>

<p>ファイルキャッシュの作業をやっている間に、@mackee_wさんがnfsの設定をやってくれたので、
アップロードされたファイルやキャッシュファイルの保存先をnfsに変更。</p>

<p>あとは物量作戦でいくしかないだろうということで、rsyncで他のサーバにコピーして調整を繰り返してた。
(並行してnginxのキャッシュ設定にも再チャレンジしてたけど、nginx力が足りなかった)</p>

<h2>最終結果</h2>

<p>テストFAILした!! No Score!!</p>

<p>なんかこんなの前もあった！</p>

<h2>反省点</h2>

<ul>
<li>画像変換をGETでやってたけど、POSTでやったほうがよかったかも</li>
<li>nginxについて勉強しよう</li>
<li>nfsについて勉強しよう</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISUCON3の予選に参加してきた]]></title>
    <link href="http://shogo82148.github.io/blog/2013/10/07/isucon3-qualify/"/>
    <updated>2013-10-07T13:03:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/10/07/isucon3-qualify</id>
    <content type="html"><![CDATA[<p>こんにちは、いつの間にかチームぽわわ2のメンバーになっていたいっちーです。</p>

<p><a href="https://twitter.com/9re">@9re</a>さんと
<a href="https://twitter.com/mackee_w">@mackee_w</a>さんとでISUCON3の予選に参加してきました。
主にアプリの書き換えを担当していたので、やったことを残しておきます。
チーム全体の方針とか役割分担とかはまこぴー先生の<a href="http://mackee.hatenablog.com/entry/2013/10/06/230412">#isucon 予選でとりあえず10位だった</a>を参照。</p>

<!-- More -->


<h2>お題</h2>

<p>gistみたいなWebアプリ。
<a href="http://shogo82148.github.io/blog/2013/04/13/isucon/">社内ISUCON</a>のときと似たようなお題ですね。
違いは...</p>

<ul>
<li>スターは無い</li>
<li>Recent Postsのサイドバーが無い代わりに、ページングしてたどっていけるページがある</li>
<li>privateな投稿ができる</li>
<li>Markdown形式で投稿できて、表示はHTMLでレンダリングされる</li>
</ul>


<p>詳しくは、れもんさんの<a href="http://isucon.net/archives/32853582.html">#isucon 2013年予選問題の解説など</a>を参照。</p>

<h2>やったこと</h2>

<p>一言で言えば、Redisにキャッシュするようにしました。</p>

<h3>RecentをRedisのリストで管理</h3>

<p>Recentの表示で日付順ソートしているのが重たそうだったので、
公開メモのソート結果をあらかじめRedisのリストに入れておく作戦。</p>

<p>Redisの<code>SORT</code>コマンドが高機能で面白いなーって思ってたので使ってみました。
リストにはメモのIDだけ入れておいて、メモの実体は別のキーを参照する、なんてことができます。
このコマンド、<code>SORT</code>って名前なのに「ソートしない」ってオプションあるところがいいですよね！</p>

<p>MySQLがボトルネックになっているのはこれで解消できました。</p>

<h3>bin/markdownを使わない＆レンダリング結果をキャッシュ</h3>

<p>Markdownのレンダリングを外部コマンド叩いてやっていたので、
<a href="https://metacpan.org/module/Text::Markdown::Discount">Text::Markdown::Discount</a>を使ってレンダリングするように変更。
qx{hoge}って記法はじめて見ました。Perlってやつはいろんな書き方があってよくわからないです。</p>

<p>Markdownの文法って亜種が結構あるので、レンダラをかえるのはちょっと怖かったんですが、全く問題なし。
スコアも3000くらい上がってかなり効果がありました。</p>

<p>さらにレンダリング結果をRedisに入れてキャッシュで+1000くらい。</p>

<h3>Recentのレンダリング結果をキャッシュ</h3>

<p>RecentをRedisでさばくようにしたけど、そもそも100要素もあるHTMLのレンダリングそうとう重いはず。
と、いうわけでここもRedisにキャッシュするようにしました。
公開メモが投稿されたらRecent/:pageのキャッシュを全部削除。
Postのたびにキャッシュクリアされるのであんまり効果ないかなーと思っていたけど、わりと効果あったみたい？
(正確なスコアよく見てなかった)</p>

<h3>Redis::Fast!!</h3>

<p>残り時間も少なくなり時間内にできることも限られれきたので、最後の最後で<a href="https://github.com/shogo82148/Redis-Fast">Redis::Fast</a>を投入。
これで+1000くらい上がったらしい。(正確なスコアよく見てなかった)</p>

<p>s/Redis/Redis::Fast/ するだけの簡単なお仕事の予定が、githubからのインストールに一番手間取った。
cpanfileにgitのレポジトリを書くと(非公式だけど)インストールできるよ！ってどこかで見た気がするけどなかなかうまく行かず、
自分で<code>git clone</code>してそのディレクトリを指定してインストール(したってまこぴー先生が言ってた)。
(<code>hiredis.h</code>が無い！って叫んでいたから、cartonがsubmoduleをうまく処理できていなかったと予想。
非公式の機能に頼るの良くないね。)</p>

<h2>できなかったこと</h2>

<ul>
<li>my.cnf？なにそれ美味しいの？</li>
<li>SQLクエリをいじる余裕がなかった

<ul>
<li>Newer/Olderのクエリが残念なのはわかってたけど、結局いじってない</li>
</ul>
</li>
<li>Nginxでキャッシュしたい</li>
<li>必要なモジュールは事前にCPANにあげておこう。</li>
</ul>


<h2>まとめ</h2>

<p>結果は13192.1点で10位でした。
特に問題がなければこのまま予選突破できるはず・・・！</p>

<p>ところで、魔王軍が学生枠を制圧していて恐ろしいですね。
てか、<a href="http://shiro-goma.hatenablog.com/entry/2013/10/07/202913">僕らのチームとの差、500点程度しか無いじゃないですか</a>。怖！！！
これ以上の侵攻はなんとしてでも食い止めなければ。</p>
]]></content>
  </entry>
  
</feed>
