<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GitHub | Shogo's Blog]]></title>
  <link href="http://shogo82148.github.io/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://shogo82148.github.io/"/>
  <updated>2016-02-10T16:17:19+09:00</updated>
  <id>http://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GitHubにブログを設置してみたよ]]></title>
    <link href="http://shogo82148.github.io/blog/2012/03/21/test/"/>
    <updated>2012-03-21T19:29:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2012/03/21/test</id>
    <content type="html"><![CDATA[<p>TLにGitHubでブログのホスティングしている人がいたので、
「<a href="http://mattn.kaoriya.net/software/lang/ruby/20111017205717.htm">githubとjekyllとoctopressで作る簡単でモダンなブログ</a>」
を参考に作ってみましたよ。</p>

<!-- more -->


<h2>RVM のインストール</h2>

<p>自分の環境には Ruby 1.9.2.2 が入っているんだけど、Ocropressでは Ruby 1.9.2 が必要らしい。
そのままでもいけるかと思ったけど、怒られた。
rake コマンドを全部 bundle exec rake に置き換えると一応実行はできるけど、なんだか警告がでる。</p>

<p>こういう時は複数のバージョンの Ruby を切り替えて管理できる、 rvm というのを使うといいらしい。
公式サイトの「<a href="http://octopress.org/docs/setup/rvm/">Installing RVM</a>」通りにコマンドを打てばOK。</p>

<p><code>bash
bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm" # Load RVM function' &gt;&gt; ~/.bash_profile
source ~/.bash_profile
rvm install 1.9.2 &amp;&amp; rvm use 1.9.2
rvm rubygems latest
</code></p>

<h2>Octopress のインストール</h2>

<p>あとはgitでクローンして、インストールコマンドを叩くだけ。</p>

<p>``` bash
git clone git://github.com/imathis/octopress.git octopress
cd octopress</p>

<p>gem install bundler
bundle install</p>

<p>rake install
rake setup_github_pages
```</p>

<p>最後のコマンドは GitHub Pages に公開するためのもの。公開用のレポジトリを聞いてくるので予め登録しておこう。</p>

<h2>rubypythonの検索パスを書き換える</h2>

<p>markdown記法はソースコードの表示にも対応しているんだけど、自分の環境では、ソースコードの代わりに</p>

<pre><code>Liquid error: undefined method `Py_IsInitialized’ for RubyPython::Python:Module
</code></pre>

<p>と表示されてしまった。</p>

<p>ソースコードを追って見るとソースコードの表示には <a href="http://rubypython.rubyforge.org/">rubypython</a> という
Ruby から Python のコードを実行する gem が使われているみたい。
Python コードの実行に本物の Python を使っているんだけど、その Python の検索機能が貧弱で rubypython が想定していない場所に置いてあるとエラーを吐くみたい。</p>

<p>僕の環境の場合、 ~/.rvm/gems/ruby-1.9.2-p318/gems/rubypython-0.5.1/lib/rubypython/pythonexec.rb の中に Python の検索設定が書いてあった。
53行目から次のようなUnix系の設定がある。</p>

<p>``` ruby</p>

<pre><code>if FFI::Platform.unix?
  # On Unixes, let's look in some standard alternative places, too.
  # Just in case. Some Unixes don't include a .so symlink when they
  # should, so let's look for the base case of .so.1, too.
  [ libname, "#{libname}.1" ].each do |name|
    locations &lt;&lt; File.join("/opt/local/lib", name)
    locations &lt;&lt; File.join("/opt/lib", name)
    locations &lt;&lt; File.join("/usr/local/lib", name)
    locations &lt;&lt; File.join("/usr/lib", name)
  end
end
</code></pre>

<p>```</p>

<p>64bitな環境で実行したいので、以下の設定を追加。</p>

<p>``` ruby</p>

<pre><code>    locations &lt;&lt; File.join("/opt/local/lib64", name)
    locations &lt;&lt; File.join("/opt/lib64", name)
    locations &lt;&lt; File.join("/usr/local/lib64", name)
    locations &lt;&lt; File.join("/usr/lib64", name)
</code></pre>

<p>```</p>

<p>これで表示されるようになった。</p>

<h2>記事を書いて公開してみる</h2>

<p>新しい記事を書くには、</p>

<p><code>bash
rake new_post["title"]
</code></p>

<p>source/_posts 以下に記事用のファイルを作ってくれるのでこれを自分の好きなエディタで編集。</p>

<p>最後に</p>

<p><code>bash
rake gen_deploy
</code></p>

<p>とすると、HTMLの生成、公開をしてくれる。</p>

<h2>記事のプレビュー</h2>

<p>デプロイしてから実際に見られるようになるには若干時間がかかるし、誰でも見られる状態になってしまうので、下記コマンドでプレビュー</p>

<p><code>
rake generate
rake preview
</code></p>

<h2>感想</h2>

<p>慣れない Ruby に少し手こずったけど、自分が普段使っているエディタを使えるのは楽でいいね。
普段は TeX 使いなので、WYSIWYG環境で編集できなくても苦じゃないし。むしろ楽。</p>

<p>はてな記法よりも markdown 記法のほうが自分には馴染みやすい。
改行の扱いとか TeX に近いし。</p>

<p>しばらく使って良かったらこっちに移ってみようかな。</p>
]]></content>
  </entry>
  
</feed>
