<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ark | Shogo's Blog]]></title>
  <link href="https://shogo82148.github.io/blog/categories/ark/atom.xml" rel="self"/>
  <link href="https://shogo82148.github.io/"/>
  <updated>2017-02-16T07:57:14+09:00</updated>
  <id>https://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ark-View-DataTable グラフや表やCSVを簡単に表示したい]]></title>
    <link href="https://shogo82148.github.io/blog/2013/12/07/ark-view-datatable/"/>
    <updated>2013-12-07T20:11:00+09:00</updated>
    <id>https://shogo82148.github.io/blog/2013/12/07/ark-view-datatable</id>
    <content type="html"><![CDATA[<p>こんにちは、最近ログの解析をして遊んでいるいっちーです。
解析の結果は最終的にグラフに出すわけなのですが、
先輩方がよく使っているのもあって <a href="https://developers.google.com/chart/">Google Charts</a> を使ってます。</p>

<p>で、このグラフを他の人に見せると「その元データCSVでちょうだい！」と言われるんです&hellip;。</p>

<!-- More- -->


<p>もちろんcsvを作るなんてこと簡単にできるんですが、
今のプログラムにはグラフ用のテンプレートとHTMLで表出力するためのテンプレートとCSV用のテンプレートがあって、
グラフが追加されるたびにコピペして微妙に書き直し、
という不毛な作業が発生してしまうのです。つらい。</p>

<h2>Ark::View::DataTable</h2>

<p>使い回しの効かないテンプレートとかなんのためのテンプレートなのか。
データだけ用意してあとはそれぞれのテンプレートに入れるだけとなるのが理想的だよねー、と思い続けて早数ヶ月。
ようやく重い腰を上げて <a href="https://github.com/shogo82148/Ark-View-DataTable">Ark::View::DataTable</a>ってのを書きました。</p>

<h2>使い方</h2>

<p><a href="https://metacpan.org/pod/Data::Google::Visualization::DataTable">Data::Google::Visualization::DataTable</a> をレンダリングするための
ArkのViewです。</p>

<pre><code class="perl">use Ark::View::DataTable;
use Data::Google::Visualization::DataTable;

sub gvis :Local {
    my ($self, $c) = @_;
    my $datatable = Data::Google::Visualization::DataTable-&gt;new();

    $datatable-&gt;add_columns(
        { id =&gt; 'x',   label =&gt; "X", type =&gt; 'number' },
        { id =&gt; 'y',   label =&gt; "Y", type =&gt; 'number' },
    );

    # 〜〜〜〜正弦波を描きましょう〜〜〜〜
    $datatable-&gt;add_rows(
        map { [$_, sin(2*3.1415926535*$_/500)] } 1..1000,
    );
    $c-&gt;stash-&gt;{table} = $datatable;
    $c-&gt;forward( $c-&gt;view( 'DataTable' ) );
}
</code></pre>

<p>Controllerに感じでかくと使えます。
「/gvis?tqx=out:html」にアクセスするとHTMLの表が、
「/gvis?tqx=out:csv」にアクセスするとCSV形式のファイルが、
「/gvis?tqx=out:tsv-excel」にアクセスするとExcelで開けるファイルがそれぞれダウンロードできます。</p>

<h2>グラフを書く</h2>

<p>このViewは<a href="https://developers.google.com/chart/interactive/docs/dev/implementing_data_source">Chart Tools Datasource Protocol</a>に対応したレスポンスを返すので、
Google Charts からも簡単に扱えます。</p>

<p>``` html
<html>
<body>
<span id="linechart"></span></p>

<script src="https://www.google.com/jsapi"></script>


<script>
google.load("visualization", '1', {packages:['corechart']});
google.setOnLoadCallback(drawChart);
function drawChart() {
  var query = new google.visualization.Query('/gvis');
  query.send(handleQueryResponse);
}

function handleQueryResponse(response) {
  var data = response.getDataTable();
  var chart = new google.visualization.LineChart(document.getElementById('linechart'));
  chart.draw(data, null);
}
</script>


<p></body>
</html>
```</p>
]]></content>
  </entry>
  
</feed>
