<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CaboCha | Shogo's Blog]]></title>
  <link href="http://shogo82148.github.io/blog/categories/cabocha/atom.xml" rel="self"/>
  <link href="http://shogo82148.github.io/"/>
  <updated>2016-04-13T04:24:36+09:00</updated>
  <id>http://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PythonでCaboChaを美味しくいただく]]></title>
    <link href="http://shogo82148.github.io/blog/2012/11/01/cabocha/"/>
    <updated>2012-11-01T23:02:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2012/11/01/cabocha</id>
    <content type="html"><![CDATA[<p>日本語構文解析器<a href="http://code.google.com/p/cabocha/">CaboCha</a>をPythonから使ってみたメモ．</p>

<!-- More -->


<h2>インストール</h2>

<p><a href="http://code.google.com/p/cabocha/">CaboCha</a>自体のインストールは公式のドキュメントを参照．
ググれば他の人のレポートも出てくるはず．</p>

<p><a href="http://code.google.com/p/cabocha/">CaboCha</a>のソースコードを展開したディレクトリの中の
pythonディレクトリにPython-bindingが入ってます．
そこに移動した後，管理者権限で以下のコマンドを実行すればインストール完了．</p>

<p><code>bash
python setup.py install
</code></p>

<h2>食べ方</h2>

<h3>解析結果を文字列出力</h3>

<p>python/test.py に書いてあるとおり．</p>

<p>``` python test.py http://code.google.com/p/cabocha/source/browse/trunk/python/test.py</p>

<h1>!/usr/bin/python</h1>

<h1>-<em>- coding: utf-8 -</em>-</h1>

<p>import CaboCha</p>

<h1>c = CaboCha.Parser("");</h1>

<p>c = CaboCha.Parser()</p>

<p>sentence = "太郎はこの本を二郎を見た女性に渡した。"</p>

<p>print c.parseToString(sentence)</p>

<p>tree =  c.parse(sentence)</p>

<p>print tree.toString(CaboCha.FORMAT_TREE)
print tree.toString(CaboCha.FORMAT_LATTICE)
```</p>

<p>以下のような結果が得られれば成功．</p>

<p>``` plain
<PERSON>太郎</PERSON>は-----------D</p>

<pre><code>                 この-D       |
                   本を---D   |
                   二郎を-D   |
                       見た-D |
                       女性に-D
                       渡した。
</code></pre>

<p>EOS</p>

<p><PERSON>太郎</PERSON>は-----------D</p>

<pre><code>                 この-D       |
                   本を---D   |
                   二郎を-D   |
                       見た-D |
                       女性に-D
                       渡した。
</code></pre>

<p>EOS</p>

<ul>
<li>0 6D 0/1 2.909358
太郎  名詞,固有名詞,人名,名,<em>,</em>,太郎,タロウ,タロー   B-PERSON
は 助詞,係助詞,<em>,</em>,<em>,</em>,は,ハ,ワ    O</li>
<li>1 2D 0/0 1.257926
この  連体詞,<em>,</em>,<em>,</em>,*,この,コノ,コノ    O</li>
<li>2 4D 0/1 0.638994
本 名詞,一般,<em>,</em>,<em>,</em>,本,ホン,ホン O
を 助詞,格助詞,一般,<em>,</em>,*,を,ヲ,ヲ   O</li>
<li>3 4D 1/2 1.696047
二 名詞,数,<em>,</em>,<em>,</em>,二,ニ,ニ  O
郎 名詞,一般,<em>,</em>,<em>,</em>,郎,ロウ,ロー O
を 助詞,格助詞,一般,<em>,</em>,*,を,ヲ,ヲ   O</li>
<li>4 5D 0/1 0.000000
見 動詞,自立,<em>,</em>,一段,連用形,見る,ミ,ミ   O
た 助動詞,<em>,</em>,*,特殊・タ,基本形,た,タ,タ  O</li>
<li>5 6D 0/1 0.000000
女性  名詞,一般,<em>,</em>,<em>,</em>,女性,ジョセイ,ジョセイ  O
に 助詞,格助詞,一般,<em>,</em>,*,に,ニ,ニ   O</li>
<li>6 -1D 0/1 0.000000
渡し  動詞,自立,<em>,</em>,五段・サ行,連用形,渡す,ワタシ,ワタシ  O
た 助動詞,<em>,</em>,<em>,特殊・タ,基本形,た,タ,タ  O
。 記号,句点,</em>,<em>,</em>,*,。,。,。   O
EOS
```</li>
</ul>


<p><code>tree.toString(CaboCha.FORMAT_XML)</code>でXML形式の出力も可能です．</p>

<p><code>xml
&lt;sentence&gt;
 &lt;chunk id="0" link="6" rel="D" score="2.909358" head="0" func="1"&gt;
  &lt;tok id="0" feature="名詞,固有名詞,人名,名,*,*,太郎,タロウ,タロー" ne="B-PERSON"&gt;太郎&lt;/tok&gt;
  &lt;tok id="1" feature="助詞,係助詞,*,*,*,*,は,ハ,ワ" ne="O"&gt;は&lt;/tok&gt;
 &lt;/chunk&gt;
 &lt;chunk id="1" link="2" rel="D" score="1.257926" head="2" func="2"&gt;
  &lt;tok id="2" feature="連体詞,*,*,*,*,*,この,コノ,コノ" ne="O"&gt;この&lt;/tok&gt;
 &lt;/chunk&gt;
 &lt;chunk id="2" link="4" rel="D" score="0.638994" head="3" func="4"&gt;
  &lt;tok id="3" feature="名詞,一般,*,*,*,*,本,ホン,ホン" ne="O"&gt;本&lt;/tok&gt;
  &lt;tok id="4" feature="助詞,格助詞,一般,*,*,*,を,ヲ,ヲ" ne="O"&gt;を&lt;/tok&gt;
 &lt;/chunk&gt;
 &lt;chunk id="3" link="4" rel="D" score="1.696047" head="6" func="7"&gt;
  &lt;tok id="5" feature="名詞,数,*,*,*,*,二,ニ,ニ" ne="O"&gt;二&lt;/tok&gt;
  &lt;tok id="6" feature="名詞,一般,*,*,*,*,郎,ロウ,ロー" ne="O"&gt;郎&lt;/tok&gt;
  &lt;tok id="7" feature="助詞,格助詞,一般,*,*,*,を,ヲ,ヲ" ne="O"&gt;を&lt;/tok&gt;
 &lt;/chunk&gt;
 &lt;chunk id="4" link="5" rel="D" score="0.000000" head="8" func="9"&gt;
  &lt;tok id="8" feature="動詞,自立,*,*,一段,連用形,見る,ミ,ミ" ne="O"&gt;見&lt;/tok&gt;
  &lt;tok id="9" feature="助動詞,*,*,*,特殊・タ,基本形,た,タ,タ" ne="O"&gt;た&lt;/tok&gt;
 &lt;/chunk&gt;
 &lt;chunk id="5" link="6" rel="D" score="0.000000" head="10" func="11"&gt;
  &lt;tok id="10" feature="名詞,一般,*,*,*,*,女性,ジョセイ,ジョセイ" ne="O"&gt;女性&lt;/tok&gt;
  &lt;tok id="11" feature="助詞,格助詞,一般,*,*,*,に,ニ,ニ" ne="O"&gt;に&lt;/tok&gt;
 &lt;/chunk&gt;
 &lt;chunk id="6" link="-1" rel="D" score="0.000000" head="12" func="13"&gt;
  &lt;tok id="12" feature="動詞,自立,*,*,五段・サ行,連用形,渡す,ワタシ,ワタシ" ne="O"&gt;渡し&lt;/tok&gt;
  &lt;tok id="13" feature="助動詞,*,*,*,特殊・タ,基本形,た,タ,タ" ne="O"&gt;た&lt;/tok&gt;
  &lt;tok id="14" feature="記号,句点,*,*,*,*,。,。,。" ne="O"&gt;。&lt;/tok&gt;
 &lt;/chunk&gt;
&lt;/sentence&gt;
</code></p>

<p>しかし，このXML形式，<code>&amp;</code>や<code>"</code>，<code>&lt;</code>, <code>&gt;</code>などの特殊記号を置換してくれないので，
この結果をXMLのパーサに通す場合などは注意が必要．</p>

<p>そもそも標準の辞書ではこれらの文字を上手く扱えないので前処理を行ったほうがいいのかもしれない．
半角の<code>&amp;</code>は辞書に登録されていおらず，全角の＆にする必要がある．</p>

<h3>Treeの中身をいじってみる</h3>

<p>一度文字列に変換してしまうと色々面倒なことが起こりそうなので，Treeの中身を直接いじってみる．
ドキュメントが無いので<a href="http://code.google.com/p/cabocha/source/browse/trunk/src/cabocha.h">cabocha.h</a>
の中身を見ながら試してみました．</p>

<p>``` python</p>

<h1>!/usr/bin/python</h1>

<h1>-<em>- coding: utf-8 -</em>-</h1>

<p>import CaboCha
c = CaboCha.Parser()</p>

<p>sentence = "太郎はこの本を渡した。"</p>

<p>tree =  c.parse(sentence)</p>

<p>for i in range(tree.chunk_size()):</p>

<pre><code>chunk = tree.chunk(i)
print 'Chunk:', i
print ' Score:', chunk.score
print ' Link:', chunk.link
print ' Size:', chunk.token_size
print ' Pos:', chunk.token_pos
print ' Head:', chunk.head_pos # 主辞
print ' Func:', chunk.func_pos # 機能語
print ' Features:',
for j in range(chunk.feature_list_size):
    print chunk.feature_list(j),
print
print
</code></pre>

<p>for i in range(tree.token_size()):</p>

<pre><code>token = tree.token(i)
print 'Surface:', token.surface
print ' Normalized:', token.normalized_surface
print ' Feature:', token.feature
print ' NE:', token.ne # 固有表現
print ' Info:', token.additional_info
print ' Chunk:', token.chunk
print
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
