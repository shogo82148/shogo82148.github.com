<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shogo's Blog]]></title>
  <link href="http://shogo82148.github.io/atom.xml" rel="self"/>
  <link href="http://shogo82148.github.io/"/>
  <updated>2014-05-25T08:04:03+09:00</updated>
  <id>http://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C# でお手軽にMessagePack解析！]]></title>
    <link href="http://shogo82148.github.io/blog/2014/05/25/mini-message-pack/"/>
    <updated>2014-05-25T01:38:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/05/25/mini-message-pack</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/shogo82148/MiniMessagePack">MiniMessagePack.cs</a>ってのを作った。
C#のプロジェクトにファイルひとつ導入するだけで、お手軽にMessagePackの解析ができます。</p>

<!-- More -->


<h2>なんで作ったの？</h2>

<p><a href="https://gist.github.com/darktable/1411710">MiniJSON</a> の置き換えが目的です。
とあるUnityプロジェクトでMB単位のJSONをパースする箇所があってですね・・・
パースにはMiniJSONを使っているのですが、さすがに対象がでかすぎて重たい。
そこでMessagePackへの置き換えを検討してみたわけです。</p>

<p>もちろん C# で動く MessagePack のパーサはすでにあって、
<a href="https://github.com/msgpack/msgpack-cli">messagepack-cli</a>とか<a href="https://github.com/southwudang/msgpack-unity">messagepack-unity</a>とか見つけました。
しかし、Unityのちょっと古いMonoで動かすためにちょっとゴニョゴニョしないといけなかったり、
MiniJSON との互換性を取るためにもゴニョゴニョしないといけなかったり(実際やってみたらキャストが大量に失敗して辛かった・・・)、
今回の用途にはちょっと高機能かなーと思ったので作っちゃいました！</p>

<h2>つかいかた</h2>

<h3>デコードする</h3>

<p><code>byte</code>の配列を渡すとパースして返してくれます。
配列は<code>List&lt;object&gt;</code>で、マップは<code>Dictionary&lt;string, object&gt;</code>になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">MiniMessagePack</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// it means {&quot;compact&quot;:true,&quot;schema&quot;:0} in JSON</span>
</span><span class='line'><span class="kt">var</span> <span class="n">msgpack</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="p">[]</span> <span class="p">{</span>
</span><span class='line'>    <span class="m">0</span><span class="n">x82</span><span class="p">,</span> <span class="m">0</span><span class="n">xa7</span><span class="p">,</span> <span class="m">0</span><span class="n">x63</span><span class="p">,</span> <span class="m">0</span><span class="n">x6f</span><span class="p">,</span> <span class="m">0</span><span class="n">x6d</span><span class="p">,</span> <span class="m">0</span><span class="n">x70</span><span class="p">,</span> <span class="m">0</span><span class="n">x61</span><span class="p">,</span> <span class="m">0</span><span class="n">x63</span><span class="p">,</span> <span class="m">0</span><span class="n">x74</span><span class="p">,</span> <span class="m">0</span><span class="n">xc3</span><span class="p">,</span>
</span><span class='line'>  <span class="m">0</span><span class="n">xa6</span><span class="p">,</span> <span class="m">0</span><span class="n">x73</span><span class="p">,</span> <span class="m">0</span><span class="n">x63</span><span class="p">,</span> <span class="m">0</span><span class="n">x68</span><span class="p">,</span> <span class="m">0</span><span class="n">x65</span><span class="p">,</span> <span class="m">0</span><span class="n">x6d</span><span class="p">,</span> <span class="m">0</span><span class="n">x61</span><span class="p">,</span> <span class="m">0</span><span class="n">x00</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">packer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MiniMessagePacker</span> <span class="p">();</span>
</span><span class='line'><span class="kt">object</span> <span class="n">unpacked_data</span> <span class="p">=</span> <span class="n">packer</span><span class="p">.</span><span class="n">Unpack</span> <span class="p">(</span><span class="n">msgpack</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">unpacked_data = new Dictionary&lt;string, object&gt; {</span>
</span><span class='line'><span class="cm">    { &quot;compact&quot;, true },</span>
</span><span class='line'><span class="cm">    { &quot;schema&quot;, 0},</span>
</span><span class='line'><span class="cm">};</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h3>エンコードする</h3>

<p>オブジェクトを渡すと MessagePack にエンコードして返してくれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">MiniMessagePack</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">unpacked_data</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">{</span> <span class="s">&quot;compact&quot;</span><span class="p">,</span> <span class="k">true</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="s">&quot;schema&quot;</span><span class="p">,</span> <span class="m">0</span><span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">packer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MiniMessagePacker</span> <span class="p">();</span>
</span><span class='line'><span class="n">bytep</span><span class="p">[]</span> <span class="n">msgpack</span> <span class="p">=</span> <span class="n">packer</span><span class="p">.</span><span class="n">Pack</span> <span class="p">(</span><span class="n">unpacked_data</span><span class="p">);</span>
</span><span class='line'><span class="c1">// msgpack = new byte[] { 0x82, 0xa7, ...};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>制限事項</h2>

<p>MiniJSON との互換性を取るために、色々と制限事項があります。</p>

<ul>
<li>デコード時、整数型は全て<code>long</code>型

<ul>
<li>整数の大きさに関係なく全て<code>long</code>型になります</li>
<li>符号なし64bit整数型も<code>long</code>として扱われるので、表現できる範囲が狭くなっていることに注意してください</li>
</ul>
</li>
<li>デコード時、浮動小数点型は全て<code>double</code>型

<ul>
<li><code>float</code>も<code>double</code>として扱われます(拡張される方向への変換だから問題ないとは思うけど)</li>
</ul>
</li>
<li>デコード時、マップ型のキーは文字列にキャストされます

<ul>
<li>MessagePackの仕様にはキーの型に制限が無いっぽい(？)けど、扱えるのは文字列の場合のみです</li>
</ul>
</li>
<li>Extended は今のところ扱えません</li>
</ul>


<h2>ちょっとだけ使ってみた結果</h2>

<p>正確なベンチマークとかはとってないのですが、
実際のプロジェクトに組み込んでみた結果、MiniJSONとくらべて約2倍の速さでパースできました！</p>

<p>MiniJSON を使っているプロジェクトであれば簡単に導入できるはずなので、ぜひ試してみてみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[travis-ciでC++11のテストをする]]></title>
    <link href="http://shogo82148.github.io/blog/2014/05/22/use-cpp11-in-travis/"/>
    <updated>2014-05-22T23:34:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/05/22/use-cpp11-in-travis</id>
    <content type="html"><![CDATA[<p>今 C++ を書くなら C++11 だよね！と言うわけでC++11の新機能を使ってコードを書いたので、
<a href="https://travis-ci.org/">travis-cli</a>でテストしたらFAIL。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ g++ -std=gnu++0x hogehoge.cpp
</span><span class='line'>sorry, unimplemented: non-static data member initializers</span></code></pre></td></tr></table></div></figure>


<p>unimplemented・・・だと・・・。</p>

<p>頑張って動かしてみたのでメモ。</p>

<!-- More -->


<h2>autoconf の設定をする</h2>

<p>autotoolsを使っていたので、
C++11 に対応しているかのチェックを追加しておきます。</p>

<p><a href="https://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx_11.html">ax_cxx_compile_stdcxx_11.m4</a>をダウンロードし、
configure.ac でm4ファイルをダウンロードするようにしておきます。</p>

<figure class='code'><figcaption><span>configure.ac</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>m4_include([m4/ax_cxx_compile_stdcxx_11.m4])
</span><span class='line'>AX_CXX_COMPILE_STDCXX_11
</span><span class='line'>AC_LANG([C++])</span></code></pre></td></tr></table></div></figure>


<h2>travis.yaml を設定する</h2>

<p>ぐぐったら<a href="http://stackoverflow.com/questions/22111549/travis-ci-with-clang-3-4-and-c11">stackoverflowでやり方を見つけました</a>。
標準でテストに使われるコンパイラは古いようなので、新しいバージョンのものをインストールするように設定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>language: cpp
</span><span class='line'>
</span><span class='line'>compiler:
</span><span class='line'>  - clang
</span><span class='line'>  - gcc
</span><span class='line'>
</span><span class='line'>before_install:
</span><span class='line'>  # g++4.8.1
</span><span class='line'>  - if [ "$CXX" == "g++" ]; then sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test; fi
</span><span class='line'>
</span><span class='line'>  # clang 3.4
</span><span class='line'>  - if [ "$CXX" == "clang++" ]; then sudo add-apt-repository -y ppa:h-rayflood/llvm; fi
</span><span class='line'>
</span><span class='line'>  - sudo apt-get update -qq
</span><span class='line'>
</span><span class='line'>install:
</span><span class='line'>  # g++4.8.1
</span><span class='line'>  - if [ "$CXX" = "g++" ]; then sudo apt-get install -qq g++-4.8; fi
</span><span class='line'>  - if [ "$CXX" = "g++" ]; then export CXX="g++-4.8"; fi
</span><span class='line'>
</span><span class='line'>  # clang 3.4
</span><span class='line'>  - if [ "$CXX" == "clang++" ]; then sudo apt-get install --allow-unauthenticated -qq clang-3.4; fi
</span><span class='line'>  - if [ "$CXX" == "clang++" ]; then export CXX="clang++-3.4"; fi</span></code></pre></td></tr></table></div></figure>


<p>これで、clangとgccでテストが走るようになります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Test を使ってC++のテストしてみた]]></title>
    <link href="http://shogo82148.github.io/blog/2014/05/18/test-with-google-test/"/>
    <updated>2014-05-18T21:24:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/05/18/test-with-google-test</id>
    <content type="html"><![CDATA[<p>C++ なライブラリを書こうと思い、C++のテストってどうやるんだろうと調べたメモ。
テストフレームワークとして <a href="https://code.google.com/p/googletest/">Google C++ Testing Framework</a> を使用、
コンパイルにはautotoolを使ってtravis-ciでテストするところまでやってみました。</p>

<p>やってみた結果→
<a href="https://github.com/shogo82148/cpp-test">cpp-test</a></p>

<!-- More -->


<h2>Testを書く</h2>

<p>Google Test の<a href="http://opencv.jp/googletestdocs/primer.html">入門ガイド</a>に書いてあったテストをコピペしてきました。</p>

<figure class='code'><figcaption><span>test/factorial.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &quot;gtest/gtest.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">Factorial</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">TEST</span><span class="p">(</span><span class="n">FractionTest</span><span class="p">,</span> <span class="n">hoge</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">Factorial</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>    <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">Factorial</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>    <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="n">Factorial</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span>
</span><span class='line'>    <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="mi">40320</span><span class="p">,</span> <span class="n">Factorial</span><span class="p">(</span><span class="mi">8</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>テストの対象となる関数はこちら。</p>

<figure class='code'><figcaption><span>src/factorial.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// calculate 1 * 2 * 3 * ... * n</span>
</span><span class='line'><span class="kt">int</span> <span class="n">Factorial</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span> <span class="o">*</span> <span class="n">Factorial</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>テスト用実行ファイルのビルドをする</h2>

<p>せっかくならしっかりしたものをつくろうと、Autotoolsを使ってビルドしてみました。
<a href="http://www.spa.is.uec.ac.jp/~kinuko/slidemaker/autotools/">新しめの Autotools (Autoconf&amp;Automake) を使ってみよう</a> を参考に
Makefileのひな形を書いていきます。</p>

<p><a href="http://kikuchy.hatenablog.com/entry/2014/01/12/Google_Test_%E3%81%A8_Travice_CI_%E3%81%A7%E3%80%81C%E8%A8%80%E8%AA%9E%E3%81%A7%E6%9B%B8%E3%81%84%E3%81%9F%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E7%B6%99%E7%B6%9A%E7%9A%84%E3%82%A4">Google Test と Travice CI で、C言語で書いたライブラリの継続的インテグレーションをしてみた結果</a>
ではGoogle Testをシステムにインストールしていますが、
システムへのインストールは推奨されていないのと、手元で動かすのが面倒だったので
<a href="https://code.google.com/p/googletest/wiki/V1_6_AdvancedGuide#Fusing_Google_Test_Source_Files">Fused Source File</a>
を作ってGoogle Testを自分のプロジェクトに同梱しちゃいました。</p>

<p>Google Testのプロジェクトで<code>python fuse_gtest_files.py OUTPUT_DIR</code> を実行すると
<code>gtest/gtest.h</code> と <code>gtest/gtest-all.cc</code> が作られるので、
この２つのファイルを自分のプロジェクトにコピーしてきます。
あとは Makefile.am でこれらのファイルをコンパイル＆リンクするように設定します。
自分のプロジェクトでは使っていなくても、Google Test のコンパイルには pthread が必要なので忘れずに。
(clangでは無くても動くらしく、clangで試していたらgccで動かなくてちょっとはまった)</p>

<figure class='code'><figcaption><span>test/Makefile.am</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nv">TESTS</span> <span class="o">=</span> factorial_test
</span><span class='line'><span class="nv">check_PROGRAMS</span> <span class="o">=</span> factorial_test
</span><span class='line'><span class="nv">factorial_test_SOURCES</span> <span class="o">=</span> factorial.cpp gtest_main.cc gtest-all.cc
</span><span class='line'><span class="nv">factorial_test_LDADD</span> <span class="o">=</span> ../src/libfactorial.a
</span><span class='line'><span class="nv">factorial_test_LDFLAGS</span> <span class="o">=</span> -pthread
</span></code></pre></td></tr></table></div></figure>


<p><code>make check</code> でテストが走るようになります。
Google Test のソースがプロジェクトに含まれているので、
新しくプログラムをインストールしたり、特別な設定をしたりといったことは必要ありません。</p>

<h2>travis-ci でテストする</h2>

<p>travisのC++のテストは、標準で<code>./configure &amp;&amp; make &amp;&amp; make test</code>を実行してくれますが、
autotoolsで作ったMakefileだと上手く動かないので以下のように.travis.ymlを設定します。</p>

<figure class='code'><figcaption><span>.travis.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cpp</span>
</span><span class='line'><span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">autoreconf -fi &amp;&amp; ./configure &amp;&amp; make &amp;&amp; make check</span>
</span></code></pre></td></tr></table></div></figure>


<p>gnuなプロジェクトのお作法にしたがって、以下のように書き換えてあります。</p>

<ul>
<li>configureスクリプトはautotoolsで自動生成されるファイルなのでレポジトリには入れず、テスト前に生成する</li>
<li>make check でテストが走るのが普通らしい</li>
</ul>


<p>configureスクリプトを自動生成するのでautoconfのバージョンに注意してください。
autoconfは2014/05/18現在2.69が最新版ですが、travis-ciは2.68がインストールされているようです。
最新版のautoconfでconfigure.acのひな形を作ると<code>AC_PREREQ([2.69])</code>のように必要バージョンが設定されてしまい、
テストのときにconfigureファイルを作れなくて死にます。
バージョン指定を削除するか、古いバージョンに書き換えましょう。</p>

<p>C++のお作法がよくわかっていないですが、ちょっとずつ頑張っていきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis::Fast 0.07 をリリースしました！]]></title>
    <link href="http://shogo82148.github.io/blog/2014/05/17/redis-fast-0-dot-07-released/"/>
    <updated>2014-05-17T16:27:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/05/17/redis-fast-0-dot-07-released</id>
    <content type="html"><![CDATA[<p><a href="https://metacpan.org/release/Redis-Fast">Redis::Fast 0.07</a> をリリースしました。
現時点での最新バージョンである Redis.pm 1.974 とコンパチブルになります。</p>

<!-- More -->


<p>主な修正点は以下の通りです</p>

<ul>
<li>Redis Sentinel 対応</li>
<li>トランザクション内での再接続禁止</li>
<li>再接続にDB選択し直し</li>
</ul>


<h2>Redis Sentinel 対応</h2>

<p>Redis Sentinel というのは自動フェールオーバーの仕組みらしいです。
(ソースはコピペしたきただけで仕組みはあまり理解していない)
どんなものかは本家ドキュメントや実際に検証してみた人の記事をご参照ください。</p>

<ul>
<li><a href="http://redis.io/topics/sentinel">Redis Sentinel Documentation</a></li>
<li><a href="http://chrone.hatenablog.com/entry/2014/02/28/212616">Redis 2.8 の Sentinel の動きを検証してみた</a></li>
<li><a href="http://blog.kenjiskywalker.org/blog/2013/01/24/redis-sentiel-howto/">Redis Sentinelを動かしてみた</a></li>
</ul>


<p>前から移植作業は進めてたのですが、本家 Redis.pm でもテストがコケたりしてちょっと不安だったのでリリースを見送ってました。
今日 Redis.pm の安定版がリリースされたのでこっちも追従しますよ！！</p>

<p>コネクションを作るときに <code>sentinels</code> を渡すと Redis Sentinel から接続情報を取ってきてくれます。
一緒に <code>reconnect</code> を設定しておいてあげると、Masterに何かあった時に接続情報を再取得→
自動的に Slave へフェールオーバーしてくれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">Fast</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$redis</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Fast</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span>
</span><span class='line'>    <span class="n">sentinels</span> <span class="o">=&gt;</span> <span class="p">[</span> <span class="s">&#39;127.0.0.1:26379&#39;</span> <span class="p">],</span>
</span><span class='line'>  <span class="n">service</span> <span class="o">=&gt;</span> <span class="s">&#39;mymaster&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">reconnect</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>トランザクション内での再接続禁止</h2>

<p>Redisにも簡単な<a href="http://redis.io/topics/transactions">トランザクション機能</a>があって、
複数の命令を同時に実行することができます。
トランザクション中に再接続が発生するとトランザクションがリセットされてしまうので、
接続前の命令を再投入する必要があるのですが、Redis.pm/Redis::Fastの再接続処理はそこまで面倒を見てくれません。
以前のバージョンではそこの面倒を見てくれないのに適当に処理してしまい、
トランザクションが中途半端なまま実行されてしました。</p>

<p>0.07 からはトランザクション内では再接続を行わずに例外を吐きます。
トランザクションを最初からやり直すなど、よしなに対応してください。</p>

<h2>再接続時にDB選択し直し</h2>

<p>一つのRedis-Serverが複数のデータベースを持てるようになっていて、
<a href="http://redis.io/commands/select">SELECT</a>コマンドを使って切り替え可能です。
今までのバージョンでは、SELECTコマンドでデータベースを切り替えていても、
再接続時にリセットされてしまう問題がありました。
0.07では再接続の中でSELECTを実行し直すので、再接続を気にする必要はありません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Androidのバイナリファイルを解析するgoのライブラリ]]></title>
    <link href="http://shogo82148.github.io/blog/2014/05/07/androidbinary/"/>
    <updated>2014-05-07T13:29:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/05/07/androidbinary</id>
    <content type="html"><![CDATA[<p>Androidのアプリの実態はzipファイルなのでunzipすれば簡単に中身を見ることができるわけですが、
開いてもバイナリファイルが入っているだけでよくわかりません。
AndroidSDKに付属しているaaptというツールを使えば読めるんだけどインストールが大変で苦しんでいる人がいたので、
お手軽に解析できるgolangのライブラリを書いてみました。</p>

<!-- More -->


<h2>使い方</h2>

<h3>go getしてくる</h3>

<p><a href="https://github.com/shogo82148/androidbinary">githubのレポジトリ</a> からダウンロードしてきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>go get github.com/shogo82148/androidbinary
</span></code></pre></td></tr></table></div></figure>


<h3>AndroidManifest.xmlを解析する</h3>

<p><code>io.ReaderAt</code>インターフェースを満たすオブジェクトを<code>androidbinary.NewXMLFile</code>に渡すと解析してくれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">f</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;AndroidManifest.xml&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">xmlFile</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">androidbinary</span><span class="p">.</span><span class="nx">NewXMLFile</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span><span class='line'><span class="nx">reader</span> <span class="o">:=</span> <span class="nx">xmlFile</span><span class="p">.</span><span class="nx">Reader</span><span class="p">()</span>
</span><span class='line'><span class="c1">// reader を読むと普通のXMLファイルとして読める</span>
</span></code></pre></td></tr></table></div></figure>


<h3>resources.arscを解析する</h3>

<p>アプリ名などの設定はAndroidManifest.xmlには直接書かれておらず、
リソースファイルに書いてあることがほとんどです(開発者がよほどものぐさでなければ)。
リソースの情報はapk内のresources.arscに書かれているので、
このファイルを読む機能もついてます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">f</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;resources.arsc&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">tableFile</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">androidbinary</span><span class="p">.</span><span class="nx">NewTableFile</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ID 0x7F040000 に対応するリソースを読む</span>
</span><span class='line'><span class="nx">config</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">ResTableConfig</span><span class="p">{}</span>
</span><span class='line'><span class="nx">val</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">tableFile</span><span class="p">.</span><span class="nx">GetResource</span><span class="p">(</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">ResId</span><span class="p">(</span><span class="mh">0x7f040000</span><span class="p">),</span> <span class="nx">config</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>アプリ名はロケールによって変わったりするので、
<code>config</code>で設定できます。
例えば日本語の名前を取得したい場合はこんな感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// ID 0x7F040000 に対応するリソース(日本語)を読む</span>
</span><span class='line'><span class="nx">config</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">ResTableConfig</span><span class="p">{}</span>
</span><span class='line'><span class="nx">config</span><span class="p">.</span><span class="nx">Language</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="sc">&#39;j&#39;</span>
</span><span class='line'><span class="nx">config</span><span class="p">.</span><span class="nx">Language</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="sc">&#39;a&#39;</span>
</span><span class='line'><span class="nx">val</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">tableFile</span><span class="p">.</span><span class="nx">GetResource</span><span class="p">(</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">ResId</span><span class="p">(</span><span class="mh">0x7f040000</span><span class="p">),</span> <span class="nx">config</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>サンプルコード</h3>

<p>apkを解析してアプリの日本語名を取得する例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;archive/zip&quot;</span>
</span><span class='line'>  <span class="s">&quot;bytes&quot;</span>
</span><span class='line'>  <span class="s">&quot;encoding/xml&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/shogo82148/androidbinary&quot;</span>
</span><span class='line'>  <span class="s">&quot;io/ioutil&quot;</span>
</span><span class='line'>  <span class="s">&quot;strconv&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">XMLManifest</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">XMLName</span>      <span class="nx">xml</span><span class="p">.</span><span class="nx">Name</span>          <span class="s">`xml:&quot;manifest&quot;`</span>
</span><span class='line'>  <span class="nx">Applications</span> <span class="p">[]</span><span class="o">*</span><span class="nx">XMLApplication</span> <span class="s">`xml:&quot;application&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">XMLApplication</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">XMLName</span> <span class="nx">xml</span><span class="p">.</span><span class="nx">Name</span> <span class="s">`xml:&quot;application&quot;`</span>
</span><span class='line'>  <span class="nx">Label</span>   <span class="kt">string</span>   <span class="s">`xml:&quot;http://schemas.android.com/apk/res/android label,attr&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">r</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">zip</span><span class="p">.</span><span class="nx">OpenReader</span><span class="p">(</span><span class="s">&quot;sample.apk&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// read manifest and resource</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">xmlFile</span> <span class="o">*</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">XMLFile</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">tableFile</span> <span class="o">*</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">TableFile</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">f</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">r</span><span class="p">.</span><span class="nx">File</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Name</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;AndroidManifest.xml&quot;</span><span class="p">:</span>
</span><span class='line'>          <span class="nx">rc</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Open</span><span class="p">()</span>
</span><span class='line'>          <span class="nx">buf</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadAll</span><span class="p">(</span><span class="nx">rc</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">xmlFile</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">androidbinary</span><span class="p">.</span><span class="nx">NewXMLFile</span><span class="p">(</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">NewReader</span><span class="p">(</span><span class="nx">buf</span><span class="p">))</span>
</span><span class='line'>          <span class="nx">rc</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;resources.arsc&quot;</span><span class="p">:</span>
</span><span class='line'>          <span class="nx">rc</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Open</span><span class="p">()</span>
</span><span class='line'>          <span class="nx">buf</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadAll</span><span class="p">(</span><span class="nx">rc</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">tableFile</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">androidbinary</span><span class="p">.</span><span class="nx">NewTableFile</span><span class="p">(</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">NewReader</span><span class="p">(</span><span class="nx">buf</span><span class="p">))</span>
</span><span class='line'>          <span class="nx">rc</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// parse xml</span>
</span><span class='line'>  <span class="nx">decoder</span> <span class="o">:=</span> <span class="nx">xml</span><span class="p">.</span><span class="nx">NewDecoder</span><span class="p">(</span><span class="nx">xmlFile</span><span class="p">.</span><span class="nx">Reader</span><span class="p">())</span>
</span><span class='line'>  <span class="nx">xmlManifest</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">XMLManifest</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">decoder</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="nx">xmlManifest</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// get application label</span>
</span><span class='line'>  <span class="nx">labelId</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">ParseInt</span><span class="p">(</span><span class="nx">xmlManifest</span><span class="p">.</span><span class="nx">Applications</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Label</span><span class="p">[</span><span class="mi">3</span><span class="p">:],</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">config</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">ResTableConfig</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">config</span><span class="p">.</span><span class="nx">Language</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="sc">&#39;j&#39;</span>
</span><span class='line'>  <span class="nx">config</span><span class="p">.</span><span class="nx">Language</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="sc">&#39;a&#39;</span>
</span><span class='line'>  <span class="nx">label</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">tableFile</span><span class="p">.</span><span class="nx">GetResource</span><span class="p">(</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">ResId</span><span class="p">(</span><span class="nx">labelId</span><span class="p">),</span> <span class="nx">config</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Application Name:&quot;</span><span class="p">,</span> <span class="nx">label</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>エラー処理とか完全に省いているので上手く補ってください。</p>

<h2>制限事項</h2>

<p>GW中頑張ったけど途中で力尽きたので、今のところ以下のような制限があります。</p>

<ul>
<li>リソース名を扱えない

<ul>
<li>普通AndroidManifest.xmlにリソースを埋め込むときは<code>@string/app_name</code>みたいな名前を埋め込みますが、リソースファイルとの連携機能がないため<code>@0x7F04000000</code>のような数値を返します</li>
<li>resources.arsc からリソース名を読み取ったり、リソース名からリソースを取得する機能はありません</li>
</ul>
</li>
<li>configの設定が一部しか対応していない

<ul>
<li>ロケール、画面サイズ、SDKバージョン等にしか対応してません</li>
<li>IMEの設定や画面の細かいオプションとかも指定はできるけど、<code>GetResource</code>が解釈してくれないので誤った結果を返すかも</li>
</ul>
</li>
<li>リソースタイプ

<ul>
<li>文字列、整数、ブーリアン値にしか対応してません</li>
<li>string-array とかいうのとかあったりするけど、そんなの知らない</li>
</ul>
</li>
</ul>


<p>いろいろ制限はありますが、アプリ名を読み取ったり、パーミッションを解析するくらいはできるんじゃないですかね。
golang初心者なのでイケてないところがあったら教えて下さい。</p>

<h2>参考</h2>

<ul>
<li><a href="http://dsas.blog.klab.org/archives/52011424.html">エンコードされた AndroidManifest.xml を読む</a></li>
<li><a href="https://gist.github.com/cielavenir/4365521">ruby_apk Android::Resource can relate string pool (partially)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tweepyの2.3.0が出ました]]></title>
    <link href="http://shogo82148.github.io/blog/2014/04/27/tweepy-2-dot-3-0-released/"/>
    <updated>2014-04-27T21:51:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/04/27/tweepy-2-dot-3-0-released</id>
    <content type="html"><![CDATA[<p>Tweepyの2.3.0が出ました。
「<a href="http://shogo82148.github.io/blog/2014/04/18/tweepy-will-application-only-auth/">Tweepy が Application-only Authentication に対応します</a>」僕のprも取り込まれていて、
Application-only Authentication が標準で使えるようになりました。
というわけで、早速遊んでみます。</p>

<h2>Application-only Authenticationで遊ぶ</h2>

<p>使い方は「<a href="http://shogo82148.github.io/blog/2013/05/09/application-only-authentication-with-tweepy/">tweepyでApplication-only Authenticationしてみた</a>」のときとほぼ同じ。
Tweepy本体に取り込んでもらったので、名前空間がちょこっと変わったくらいです。
Consumer Key と Consumer Secretだけ設定すればいいので、簡単に使えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">tweepy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">codecs</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">stdin</span> <span class="o">=</span> <span class="n">codecs</span><span class="o">.</span><span class="n">getreader</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)(</span><span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="p">)</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">codecs</span><span class="o">.</span><span class="n">getwriter</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)(</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">CONSUMER_KEY</span> <span class="o">=</span> <span class="s">&#39;YOUR CONSUMER KEY&#39;</span>
</span><span class='line'><span class="n">CONSUMER_SECRET</span> <span class="o">=</span> <span class="s">&#39;YOUR CONSUMER SECRET&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">user_id</span> <span class="o">=</span> <span class="s">&quot;JO_RI&quot;</span>
</span><span class='line'>    <span class="n">auth</span> <span class="o">=</span> <span class="n">tweepy</span><span class="o">.</span><span class="n">AppAuthHandler</span><span class="p">(</span><span class="n">CONSUMER_KEY</span><span class="p">,</span> <span class="n">CONSUMER_SECRET</span><span class="p">)</span>
</span><span class='line'>    <span class="n">api</span> <span class="o">=</span> <span class="n">tweepy</span><span class="o">.</span><span class="n">API</span><span class="p">(</span><span class="n">auth</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">arg</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;id&#39;</span><span class="p">:</span> <span class="n">user_id</span><span class="p">,</span> <span class="s">&#39;include_rts&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>    <span class="n">user_statuses</span> <span class="o">=</span> <span class="n">tweepy</span><span class="o">.</span><span class="n">Cursor</span><span class="p">(</span><span class="n">api</span><span class="o">.</span><span class="n">user_timeline</span><span class="p">,</span> <span class="o">**</span><span class="n">arg</span><span class="p">)</span><span class="o">.</span><span class="n">items</span><span class="p">(</span><span class="mi">3200</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">user_status</span> <span class="ow">in</span> <span class="n">user_statuses</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">user_status</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tweepy が Application-only authentication に対応します]]></title>
    <link href="http://shogo82148.github.io/blog/2014/04/18/tweepy-will-application-only-auth/"/>
    <updated>2014-04-18T06:37:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/04/18/tweepy-will-application-only-auth</id>
    <content type="html"><![CDATA[<p>以前 「<a href="http://shogo82148.github.io/blog/2013/05/09/application-only-authentication-with-tweepy/">tweepyでApplication-only Authenticationしてみた</a>」で
書いたTweepyのAuthHandlerを本体に取り込んでもらいました。
リリースタイミングとかよくわかってないですが、次のリリースとかでApplication-only Authenticationを簡単に使えるようになります、たぶん。</p>

<p>(2014-04-27追記)
このprを取り込んだTweepy 2.3.0がリリースされました。早速遊んでみたのでこちらもどうぞ><a href="http://shogo82148.github.io/blog/2014/04/27/tweepy-2-dot-3-0-released/">Tweepyの2.3.0が出ました</a></p>

<!-- More -->


<h2>取り込まれるまでの経緯</h2>

<ul>
<li>「Application-only Authentication 対応しないの？」って質問は去年からあった(<a href="https://github.com/tweepy/tweepy/issues/318">tweepy#318</a>)</li>
<li>先日「ここに動くコード載ってるよ」と<a href="https://github.com/tweepy/tweepy/issues/318#issuecomment-40291735">僕の記事が紹介される</a></li>
<li>昨日の夕方「コントリビュートしてみない？」とブログやgithub経由で頼まれる</li>
<li>やるしか無い！と思って昨日のうちにpr作成</li>
<li>朝起きたら取り込まれてた</li>
</ul>


<p>日本語なんてマイナーな言語で記事が書いてあっても、読んでくれる人は読んでくれるんですね。
Tweepy は僕も何度か使ったことがあるので Issue とかみて開発状況をチェックしていたんですが、
見覚えのある名前が見えたときはびっくりしました。</p>

<p>ちょっとしたコードでも公開しておくといいことがあるよ、というお話でした。
最近ここも全然更新してないので、もっとアウトプットしていかないと・・・。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スパコンで約2時間36分かかったという、5×5の魔方陣の全解列挙を、おねえさんのコンピュータで試す]]></title>
    <link href="http://shogo82148.github.io/blog/2014/03/19/letscount-magic-square/"/>
    <updated>2014-03-19T18:26:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/03/19/letscount-magic-square</id>
    <content type="html"><![CDATA[<p>高校生がスパコンを使って5x5の魔方陣の全解を求めたというニュースをきっかけに、
魔方陣の全解列挙が流行っているようです。</p>

<ul>
<li><a href="http://www.ccs.tsukuba.ac.jp/pr/media/140228_press">高校生がスーパーコンピュータを使って5×5魔方陣の全解を求めることに成功(筑波大プレスリリース)</a></li>
<li><a href="http://blog.unfindable.net/archives/7179">スパコンで約2時間36分かかったという、5×5の魔方陣の全解列挙を、パソコンで試す（C++）</a></li>
</ul>


<p>「全解列挙」「数え上げ」「組み合わせ爆発」・・・そして整然とならんだこのマス目・・・
<a href="http://www.youtube.com/watch?v=Q4gTV4r0zRs">あのおねえさん</a>を思い出しますね。</p>

<!-- More -->


<p>と、いうわけで、「<a href="http://shogo82148.github.io/letscount">おねえさんのコンピュータ</a>」の魔方陣版を作ってみました。</p>

<ul>
<li><a href="http://shogo82148.github.io/letscount-magic-square">おねえさんのコンピュータ(魔方陣編)</a></li>
</ul>


<p>「全解列挙をパソコンで試す」の記事と同じような感じで、頭の悪いコードをずらずらと書いてあります。
以下の様な特徴があります。</p>

<ul>
<li>マスを埋める順番はスパコンで求めたものをベース

<ul>
<li>ただし、対称な位置にあるマスを優先(反転・回転の検索を早い段階で打ち切るため)</li>
</ul>
</li>
<li>asm.js による最適化！

<ul>
<li>firefoxで特に高速に動作します</li>
<li>わかってはいたけど、asm.jsは人間の書くものではない</li>
</ul>
</li>
<li>WebWorkerを使った並列計算</li>
</ul>


<p>実はまだ5x5の計算結果を見てないのですが、
途中までの計算スピードから推測すると十数時間程度で計算が終わるかと・・・。
(Mac Book Air Mid 2012, 4並列)</p>

<p>コンパイルの手間が無いのでお手軽に試せます。
もっと速いマシンでやればすぐに結果がでてくると思うので、みなさんのレポートお待ちしています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[githubのタブサイズを変えるChrome拡張を作った]]></title>
    <link href="http://shogo82148.github.io/blog/2014/02/10/github-tab-change/"/>
    <updated>2014-02-10T08:01:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/02/10/github-tab-change</id>
    <content type="html"><![CDATA[<p>にゃんぱすー。
最近 C# のコードを見ることが多くなってきました。
開発はVSやMonoDevelop等のIDEを使っているのですが、
diffの確認程度ならgithub上で行っています。
しかし、github上の表示は崩れて非常に読みづらい・・・。</p>

<!-- More -->


<p>githubのコードプレビューはタブストップが8文字幅で表示されます。
しかし、有名ドコロのIDEはデフォルトがタブインデント、4文字幅で設定されているので、
どうしても表示が狂ってしまいます。
タブインデントではなくスペースインデントを使えば解決☆
なのですが、スペースインデントの中にタブインデントを混入する場合が多々あるので、僕は疲れました・・・。
混在したときのコードなんて、読めたものじゃないですよ。</p>

<p>そこで、githubのタブサイズを変更する Chrome拡張を作ってみました。
ユーザスタイルシートでもできるんですが、まあ、勉強を兼ねて。</p>

<ul>
<li><a href="https://chrome.google.com/webstore/detail/github-tab-change/ljioaacdegnnenakodladamafjodehnd">GithubTabChange</a></li>
</ul>


<p>インストール後、github上のレポジトリを開くと≡みたいなマークがURLの横に表示されます。
それをクリックでタブサイズの設定変更が可能です。
githubのプレビューの一斉設定だけでなく、
レポジトリ単位でタブサイズを切り替えることができます。</p>

<p>アイコンとか設定画面のデザインとかちゃんとしたものを作る気力はなかったので、
皆さんのprをお待ちしております。</p>

<ul>
<li><a href="https://github.com/shogo82148/GithubTabChange">GithubTabChange on github</a></li>
</ul>


<p>(これ作ってるときに、githubのHTMLソースの中にtab-size-8というクラスを見つけたのですが、実はどこかに隠し機能としてあるんですかね？)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis::Fast 0.06 released]]></title>
    <link href="http://shogo82148.github.io/blog/2014/02/01/redis-fast-0-dot-06-released/"/>
    <updated>2014-02-01T21:36:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/02/01/redis-fast-0-dot-06-released</id>
    <content type="html"><![CDATA[<p>こんにちは、もうすぐ17才と100ヶ月を迎えるいっちーです。
今朝、<a href="https://metacpan.org/release/Redis-Fast">Redis::Fast 0.06</a>をリリースしました。
主な変更点はメモリーリークの修正と、エラー発生時にSegmentation Faltで落ちる問題の修正です。</p>

<!-- More -->


<h2>メモリーリーク</h2>

<p>Redis::Fastをサブスクライバーモードで動作させると、メモリを無限に食い続ける問題をついに！ついに！修正しました。
原因は、一言で言ってしまえば、Perlのリファレンスカウントの扱いの勉強不足です・・・。</p>

<p>XSの中でPerlのオブジェクトを作るとき、プログラマが手動でリファレンスカウントを制御する必要があります。
とはいうものの、全てのオブジェクトのリファレンスカウントを制御するのは大変なので、
XSには「揮発性」という考え方があります。
<code>sv_2motral</code>を使って変数を揮発性に設定しておけば、よしななタイミングでオブジェクトを解放してくれます。
<a href="http://d.hatena.ne.jp/gfx/20100519/1274247355">gfx先生のブログ</a>にもあるように、
オブジェクト作成したら原則<code>sv_2motral</code>をつけるようにすれば、
メモリーリークはほとんどなくなるはずです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">SV</span> <span class="o">*</span> <span class="n">s</span> <span class="o">=</span> <span class="n">newSVpv</span><span class="p">(</span><span class="s">&quot;Hello World&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>  <span class="c1">// Perl の文字列オブジェクト</span>
</span><span class='line'><span class="n">sv_2motral</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="c1">// 揮発性にすることで、使われなくなったら自動的に解放してくれる</span>
</span></code></pre></td></tr></table></div></figure>


<p>この「よしななタイミング」をよく理解していなかったのでリークしてました・・・。
XSからオブジェクトへアクセスできなくなったときでないとオブジェクトを解放できないので、
揮発性のオブジェクトが実際に解放されるのは「XSで書かれた関数が終了してPerlに戻るとき」です。
メッセージを待ち続ける<code>wait_for_messages</code>関数は
(タイムアウトをしない限り)ずっと終了しないので、
揮発性のオブジェクトを解放するタイミングが一切なかったのです。</p>

<p>不要になったら解放されるよう、揮発性オブジェクトの有効範囲を明示的に指定しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">sv_2motral</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'><span class="n">ENTER</span><span class="p">;</span>
</span><span class='line'><span class="n">SAVETMPS</span><span class="p">;</span>
</span><span class='line'><span class="n">sv_2motral</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="n">FREETMPS</span><span class="p">;</span>
</span><span class='line'><span class="n">LEAVE</span><span class="p">;</span>
</span><span class='line'><span class="c1">// v はココで解放される</span>
</span><span class='line'><span class="c1">// s は生き残ってる</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://perldoc.jp/docs/perl/5.18.1/perlcall.pod">perlcall</a>とかちゃんとドキュメントを読みましょう > 自分</p>

<h2>Segmentation Falt</h2>

<p>同期的にコマンドを実行してる最中にSIGNAL等で実行が中断されると、
Segmentation Faltが起こる問題を修正しました。
Redis::Fastは同期モードでコマンドを発行したときでも、
hiredisの非同期モードの機能を使って通信しています。
コマンド実行中にエラーが発生すると、
コールバック関数の呼び出しタイミングが変わってしまい、
メモリの確保・解放のタイミングが狂ってしまっていました。</p>

<p>このバグ、試した環境の中ではUbuntu+Perl5.14でしか再現しませんでした。
他の環境ではたまたま解放後もアクセスできてしまって、
正常に動作してしまっていたようです。
嫌なバグだ・・・。</p>

<h2>まとめ</h2>

<p>C言語でメモリ管理するコードは書くべきでない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unity Test Tools を使ってみる]]></title>
    <link href="http://shogo82148.github.io/blog/2013/12/21/unity-test-tools/"/>
    <updated>2013-12-21T21:02:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/12/21/unity-test-tools</id>
    <content type="html"><![CDATA[<p>みなさんこんにちは、
最近つらいことばかりで元気のないいっちーです。
少しでもつらいことを解消できないかと Unity Test Tools ってので遊んでみました。</p>

<!-- More -->


<h2>背景</h2>

<p>最近あったつらいことのひとつに「Unityで作ってるプロジェクトで、機能拡張したときに間違えて一行消しちゃった！！！」
ってのがあります。</p>

<p>もちろん僕が消したわけじゃないですよ！！！
僕サーバサイドエンジニアですから、Unityはいじりません。
でも、一応修正コミットは見ていたはずなので、気がつけなかったのは残念です・・・。</p>

<p>どんなにコード書く人が頑張っても、レビューする人が頑張っても、
人間誰だってミスします。
じゃあ、機械にやらせよう！テストコードだ！って話なんですが、
コードカバレッジが低く、今回のつらい事例でもテストがありませんでした。
一部書いてあるテストも、担当者が代わってからなんか怪しい・・・。</p>

<p>あと、自分も手元でテスト動かしてみたのですが、今のテスト面倒・・・。</p>

<ul>
<li>Unityのコンソールにドバッと流れる

<ul>
<li>テストが全部通ったのか、失敗したのかよくわからない</li>
</ul>
</li>
<li>ユニットテストを1項目だけやりたいとかどうやるんだろう

<ul>
<li>「テストの実行」が「シーンの再生」なので1項目とかどうすんの？</li>
</ul>
</li>
</ul>


<h2>Unity Test Tools</h2>

<p>つらいので解決方法を探るべくインターネットの海をさまよっていたら Unity Test Tools なるものを発見。</p>

<ul>
<li><a href="http://blogs.unity3d.com/2013/12/18/unity-test-tools-released/">Unity Test Tools Released</a></li>
</ul>


<p>これを書いてる時点で、3日前のリリースです！
タイムリーだ！！</p>

<p>英語でよくわかんないけど、スクリーンショットはわかりやすくてかっこいいぞ！
遊んでみよう！</p>

<h2>事前準備</h2>

<p>まず、Unity Testing Tools をダウンロードしてこよう！
Aseet Store に並んでるので、ダウンロードボタンを押してしばらく待ってれば Unity が勝手に使える状態にしてくれます。</p>

<h2>簡単なユニットテストを書いてみる</h2>

<p>以前れもんさんが書いた「<a href="http://tech.kayac.com/archive/merry_christmas_2012.html">#24 「Unityでコルーチンも単体テストしよう」 tech.kayac.com Advent Calendar 2012</a>」を
Unity Testing Tools でやってみました。</p>

<p>テストの対象はこんな感じのクラスです(短く書けそうな部分があったのでちょっと変えた)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">MyProject</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Plan</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">string</span> <span class="n">Title</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">string</span> <span class="n">Text</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="nf">Plan</span><span class="p">(</span><span class="kt">string</span> <span class="n">title</span><span class="p">,</span> <span class="kt">string</span> <span class="n">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Title</span> <span class="p">=</span> <span class="n">title</span><span class="p">;</span>
</span><span class='line'>            <span class="n">Text</span> <span class="p">=</span> <span class="n">text</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>れもんさんの記事ではSharpUnitを使っていましたが、
Unity Test Tools は NUnit というテストフレームワークを使うようです。
Plan のテストをNUnitを使って書きなおしてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">NUnit.Framework</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">MyProject.Tests</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">PlanTest</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'><span class="na">        [TestCase(&quot;Christmas&quot;, &quot;Let&#39;s play tennis!&quot;)]</span>
</span><span class='line'><span class="na">        [TestCase(&quot;Christmas&quot;, null)]</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Constractor</span> <span class="p">(</span><span class="kt">string</span> <span class="n">title</span><span class="p">,</span> <span class="kt">string</span> <span class="n">text</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Plan</span> <span class="n">plan</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Plan</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">text</span><span class="p">);</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">plan</span><span class="p">.</span><span class="n">Title</span><span class="p">,</span> <span class="n">title</span><span class="p">);</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">plan</span><span class="p">.</span><span class="n">Text</span><span class="p">,</span> <span class="n">text</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>TestCaseのお陰でずいぶんシンプルになりました。
(にわかC#erの僕はアトリビュートが出てきてドキドキです)</p>

<p>気をつけないといけないのは、このテストをEditorというフォルダの中に入れないといけないことです。
Editorってフォルダの中に入っていると、普段のプロジェクトとは別のプロジェクトに所属するようになります。
Unity Editor の動作を変更するようなスクリプトをかけるらしいので、その一つとして実装するってことですかね・・・？
(そのへんよくわかってない)</p>

<p>テストスクリプトを保存したら、あとはメニューから「Unity Test Tools」「Run all unit tests」をクリックするだけ！
テスト用シーンを追加する必要もありません。簡単！</p>

<p>「Unit Test Runner」を使えば、テストを1項目だけテストすることもできるし、
ファイルを右クリックしたときのメニューから「Load tests from this file」を選べばファイルごとにテストもできます。</p>

<h2>結合テストをやってみる</h2>

<p>次にネットワーク周りのテストをやってみます。
テストするのはこのクラスです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">MyProject</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">InternetPlanFactory</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="n">Plan</span> <span class="n">Plan</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 特定のURLにアクセスし、1行目をタイトル、2行目をテキストとしてオブジェクトを生成</span>
</span><span class='line'>        <span class="k">public</span> <span class="n">IEnumerator</span> <span class="nf">PlanFromUrl</span><span class="p">(</span><span class="kt">string</span> <span class="n">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">WWW</span> <span class="n">www</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WWW</span><span class="p">(</span><span class="n">url</span><span class="p">);</span>
</span><span class='line'>            <span class="k">yield</span> <span class="k">return</span> <span class="n">www</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">www</span><span class="p">.</span><span class="n">error</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// ノープランだ</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="n">Plan</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 適当にPlanつくる</span>
</span><span class='line'>                <span class="kt">string</span><span class="p">[]</span> <span class="n">lines</span> <span class="p">=</span> <span class="n">www</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">Split</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span><span class='line'>                <span class="kt">string</span> <span class="n">title</span> <span class="p">=</span> <span class="n">lines</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'>                <span class="kt">string</span> <span class="n">text</span> <span class="p">=</span> <span class="n">lines</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">1</span> <span class="p">?</span> <span class="n">lines</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">:</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="n">Plan</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Plan</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">text</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このクラスのテストには <code>GameObject</code> が必要みたいです。
<code>GameObject</code> って何者？とUnity情弱の僕は思うのですが、なにやらシーンから取ってこないといけないものらしいです。
ユニットテストでも頑張ればとってこれるのかもしれないけど、
結合テストとしてシーンの中で実行してみます。</p>

<p>結合テストを作るには、新しいシーンを追加し、
そのシーンを開いた状態で「Integration Test Runner」を開きます。
ここで緑の「＋」ボタンを押すとシーンに「TestRunner」と新しいテストが現れます。
さらにテストの子として新しい<code>GameObject</code>を追加しておきましょう。</p>

<p>次に以下の様なスクリプトを書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">MyProject</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Hoge</span> <span class="p">:</span> <span class="n">MonoBehaviour</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">void</span> <span class="nf">Start</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">StartCoroutine</span><span class="p">(</span><span class="n">TestPlanFromUrlOk</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">IEnumerator</span> <span class="nf">TestPlanFromUrlOk</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">InternetPlanFactory</span> <span class="n">factory</span> <span class="p">=</span> <span class="k">new</span> <span class="n">InternetPlanFactory</span><span class="p">();</span>
</span><span class='line'>        <span class="k">yield</span> <span class="k">return</span> <span class="nf">StartCoroutine</span><span class="p">(</span><span class="n">factory</span><span class="p">.</span><span class="n">PlanFromUrl</span><span class="p">(</span><span class="s">&quot;http://example.com&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">factory</span><span class="p">.</span><span class="n">Plan</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">&quot;Plan is null&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">factory</span><span class="p">.</span><span class="n">Plan</span><span class="p">.</span><span class="n">Title</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">&quot;Plan.Title is null&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">factory</span><span class="p">.</span><span class="n">Plan</span><span class="p">.</span><span class="n">Text</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">&quot;Plan.Text is null&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">IntegrationTest</span><span class="p">.</span><span class="n">Pass</span><span class="p">(</span><span class="n">gameObject</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// IntegrationTest.Fail(gameObject); // と書くとテスト失敗できる</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(アサーションの仕方が残念すぎるけど力尽きた)</p>

<p>このスクリプトをさっき作った<code>GameObject</code>にアタッチすれば準備完了です。
「Integration Test Runner」からテスト可能になります。</p>

<h2>おわり</h2>

<p>今日はここまで。
今までも一応テストあったけど、Unity Testing Tools使うともっと便利に書けそう。
きっとぴーちんとかがもっと便利な機能を見つけてくれる。</p>

<p>ちなみに <code>Plan("Christmas", null)</code> なので、
<code>Text != null</code> なURLを募集してます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ark-View-DataTable グラフや表やCSVを簡単に表示したい]]></title>
    <link href="http://shogo82148.github.io/blog/2013/12/07/ark-view-datatable/"/>
    <updated>2013-12-07T20:11:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/12/07/ark-view-datatable</id>
    <content type="html"><![CDATA[<p>こんにちは、最近ログの解析をして遊んでいるいっちーです。
解析の結果は最終的にグラフに出すわけなのですが、
先輩方がよく使っているのもあって <a href="https://developers.google.com/chart/">Google Charts</a> を使ってます。</p>

<p>で、このグラフを他の人に見せると「その元データCSVでちょうだい！」と言われるんです&#8230;。</p>

<!-- More- -->


<p>もちろんcsvを作るなんてこと簡単にできるんですが、
今のプログラムにはグラフ用のテンプレートとHTMLで表出力するためのテンプレートとCSV用のテンプレートがあって、
グラフが追加されるたびにコピペして微妙に書き直し、
という不毛な作業が発生してしまうのです。つらい。</p>

<h2>Ark::View::DataTable</h2>

<p>使い回しの効かないテンプレートとかなんのためのテンプレートなのか。
データだけ用意してあとはそれぞれのテンプレートに入れるだけとなるのが理想的だよねー、と思い続けて早数ヶ月。
ようやく重い腰を上げて <a href="https://github.com/shogo82148/Ark-View-DataTable">Ark::View::DataTable</a>ってのを書きました。</p>

<h2>使い方</h2>

<p><a href="https://metacpan.org/pod/Data::Google::Visualization::DataTable">Data::Google::Visualization::DataTable</a> をレンダリングするための
ArkのViewです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Ark::View::</span><span class="n">DataTable</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Data::Google::Visualization::</span><span class="n">DataTable</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">gvis</span> <span class="p">:Local {</span>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$self</span><span class="p">,</span> <span class="nv">$c</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$datatable</span> <span class="o">=</span> <span class="nn">Data::Google::Visualization::</span><span class="n">DataTable</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$datatable</span><span class="o">-&gt;</span><span class="n">add_columns</span><span class="p">(</span>
</span><span class='line'>        <span class="p">{</span> <span class="n">id</span> <span class="o">=&gt;</span> <span class="s">&#39;x&#39;</span><span class="p">,</span>   <span class="n">label</span> <span class="o">=&gt;</span> <span class="s">&quot;X&quot;</span><span class="p">,</span> <span class="n">type</span> <span class="o">=&gt;</span> <span class="s">&#39;number&#39;</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="n">id</span> <span class="o">=&gt;</span> <span class="s">&#39;y&#39;</span><span class="p">,</span>   <span class="n">label</span> <span class="o">=&gt;</span> <span class="s">&quot;Y&quot;</span><span class="p">,</span> <span class="n">type</span> <span class="o">=&gt;</span> <span class="s">&#39;number&#39;</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 〜〜〜〜正弦波を描きましょう〜〜〜〜</span>
</span><span class='line'>    <span class="nv">$datatable</span><span class="o">-&gt;</span><span class="n">add_rows</span><span class="p">(</span>
</span><span class='line'>        <span class="nb">map</span> <span class="p">{</span> <span class="p">[</span><span class="nv">$_</span><span class="p">,</span> <span class="nb">sin</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="mf">3.1415926535</span><span class="o">*</span><span class="nv">$_</span><span class="o">/</span><span class="mi">500</span><span class="p">)]</span> <span class="p">}</span> <span class="mi">1</span><span class="o">..</span><span class="mi">1000</span><span class="p">,</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">stash</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">table</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$datatable</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">forward</span><span class="p">(</span> <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">view</span><span class="p">(</span> <span class="s">&#39;DataTable&#39;</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Controllerに感じでかくと使えます。
「/gvis?tqx=out:html」にアクセスするとHTMLの表が、
「/gvis?tqx=out:csv」にアクセスするとCSV形式のファイルが、
「/gvis?tqx=out:tsv-excel」にアクセスするとExcelで開けるファイルがそれぞれダウンロードできます。</p>

<h2>グラフを書く</h2>

<p>このViewは<a href="https://developers.google.com/chart/interactive/docs/dev/implementing_data_source">Chart Tools Datasource Protocol</a>に対応したレスポンスを返すので、
Google Charts からも簡単に扱えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;linechart&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://www.google.com/jsapi&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="nx">google</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="s2">&quot;visualization&quot;</span><span class="p">,</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">packages</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;corechart&#39;</span><span class="p">]});</span>
</span><span class='line'><span class="nx">google</span><span class="p">.</span><span class="nx">setOnLoadCallback</span><span class="p">(</span><span class="nx">drawChart</span><span class="p">);</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">drawChart</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">visualization</span><span class="p">.</span><span class="nx">Query</span><span class="p">(</span><span class="s1">&#39;/gvis&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">query</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">handleQueryResponse</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">handleQueryResponse</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">getDataTable</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">chart</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">visualization</span><span class="p">.</span><span class="nx">LineChart</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;linechart&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="nx">chart</span><span class="p">.</span><span class="nx">draw</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISUCON3の本戦に参加してきた]]></title>
    <link href="http://shogo82148.github.io/blog/2013/11/09/isucon3/"/>
    <updated>2013-11-09T23:58:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/11/09/isucon3</id>
    <content type="html"><![CDATA[<p><a href="http://shogo82148.github.io/blog/2013/10/07/isucon3-qualify/">ISUCON3の予選</a>を何とか通過し、
本戦へと参戦してきました。</p>

<p>大会中の方針とか考えたこととかメモ。</p>

<h2>お題</h2>

<ul>
<li>Tw○tter&#8211;likeな画像投稿サービス

<ul>
<li>ユーザをフォローできる</li>
<li>フォローしたユーザが画像を投稿すると、タイムラインに画像が流れる</li>
<li>公開範囲を全員に公開・フォロワーのみに公開・自分だけに公開から選べる</li>
</ul>
</li>
<li>タイムラインはロングポーリングを使ってリアルタイム反映

<ul>
<li>JSON-APIが用意されていて、Javascriptから叩く</li>
</ul>
</li>
<li>使用できるサーバは5台</li>
</ul>


<p>画像を扱うお題と聞いて、会場がざわめきました。</p>

<h2>MySQLのクエリを見てみる</h2>

<p>開始直後、鍵を用意したり、gitのレポジトリを立てたりなんだりした後、
一回目の計測。</p>

<p>topコマンドで走っているプロセスを見ていると、大量のconvertが！！
プロセス名とお題から考えるに、こいつら確実にImage Magickだ・・・。
CPUのほとんどが画像の変換にくわれていたので、
まずは「どこかでキャッシュする」作戦をとることに。
キャッシュするならフロントに近いほうがいいだろうということで、
フロントのnginxでキャッシュする作戦をとることにしました
(アクセス制限があるimageは難しいかもしれないけど、全部publicなiconならすぐできるだろうとこのときは思ってました)。</p>

<p>僕はnginxがconvertを駆逐してくれると信じて、MySQLに投げているクエリを中心にPerlのコードを見てました。
役割分担はこんな感じ。</p>

<ul>
<li>サーバの設定とか(@mackee_wさん)</li>
<li>nginxでキャッシュする設定(@9reさん)</li>
<li>コード読む、主にMySQLに投げてるクエリとか(@shogo82148)</li>
</ul>


<p>毎回、ひどいクエリが仕込まれているようなイメージがあったけど、
今回はそこまでひどくない。
クエリチューニング全然効果なさそうと判断して、次の作戦を考えることにしました。</p>

<h2>No Image Magick, use Imager!</h2>

<p>やっぱり一番のボトルネックは画像変換。
nginxでキャッシュするとはいえ軽いほうがいいよね、ということで、
外部プロセスで実行している画像変換をImagerを使ってPerlと同じプロセスでやる作戦。</p>

<p>Imagerに置き換え後ベンチにかけたら、若干スコアが・・・上がった・・・ような・・・？
しかし、画像が変化していると怒られて、スコアは無効。
画像エラーを修正するコストと、スコアの上がり具合を見て、Image Magickのままにすることにしました。</p>

<p>予選でも同じように外部プロセス起動している部分をPerlのライブラリにしたけど、
その時はあっさり動いた。
あれは外部プロセス起動をやめたらスコア上がると思い込ませるための布石だったんだ・・・。
(今回の場合、プロセスの起動より画像の変換のほうが重いので、スコアが上がらないのは当たり前)</p>

<h2>いろいろ諦めてPerl側でファイルキャッシュ</h2>

<p>Imagerはテストを通らず、nginxの設定キャッシュ設定も上手く動作しなかったので、
Perlでファイルキャッシュする方針に変更。
convertの結果にmvで適当な場所にコピーして保存。
これだけでスコアが5倍くらいに跳ね上がり、一気に上位に浮上！
最初からやっておくべきだった・・・。
もうちょっと早ければ特別賞もらえたかもしれないのに。</p>

<h2>rsync! rsync!</h2>

<p>ファイルキャッシュの作業をやっている間に、@mackee_wさんがnfsの設定をやってくれたので、
アップロードされたファイルやキャッシュファイルの保存先をnfsに変更。</p>

<p>あとは物量作戦でいくしかないだろうということで、rsyncで他のサーバにコピーして調整を繰り返してた。
(並行してnginxのキャッシュ設定にも再チャレンジしてたけど、nginx力が足りなかった)</p>

<h2>最終結果</h2>

<p>テストFAILした!! No Score!!</p>

<p>なんかこんなの前もあった！</p>

<h2>反省点</h2>

<ul>
<li>画像変換をGETでやってたけど、POSTでやったほうがよかったかも</li>
<li>nginxについて勉強しよう</li>
<li>nfsについて勉強しよう</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第10回６さいカンファレンス「C言語のポインタ復習」]]></title>
    <link href="http://shogo82148.github.io/blog/2013/10/30/6saiconf-10/"/>
    <updated>2013-10-30T23:42:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/10/30/6saiconf-10</id>
    <content type="html"><![CDATA[<p>気づかぬ間に第10回６さいカンファレンスが開催されていました。</p>

<ul>
<li><a href="https://tes.so/snslog/index/3">第10回６さいカンファレンス「C言語のポインタ復習」</a></li>
</ul>


<p>くいなちゃんSNS上で行われ、ログも残っているのでそちらを参照。
「６さいカンファレンス」のカテゴリから辿れるように記事にしておきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis::NamespaceとRedis::Keyをリリースしました]]></title>
    <link href="http://shogo82148.github.io/blog/2013/10/18/redis-namespace-and-redis-key/"/>
    <updated>2013-10-18T23:21:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/10/18/redis-namespace-and-redis-key</id>
    <content type="html"><![CDATA[<p>こんばんは、最近シングルトン恐怖症になっているいっちーです。
<a href="https://metacpan.org/release/Redis-Namespace">Redis::Namespace</a>と
<a href="https://metacpan.org/release/Redis-Key">Redis::Key</a>をリリースしました。</p>

<!-- More -->


<h2>Redis::Namespace</h2>

<p>「<a href="http://shogo82148.github.io/blog/2013/09/14/redis-namespace-perl/">Redis::NamespaceのPerl版書いた</a>」
で紹介したモジュールをCPANizeしました。
コマンドのキー名に当たる部分に、自動にプレフィックスをつけてくれる賢い奴です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">Redis</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">Namespace</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$redis</span> <span class="o">=</span> <span class="n">Redis</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$ns</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Namespace</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">redis</span> <span class="o">=&gt;</span> <span class="nv">$redis</span><span class="p">,</span> <span class="n">namespace</span> <span class="o">=&gt;</span> <span class="s">&#39;fugu&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ns</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">,</span> <span class="s">&#39;bar&#39;</span><span class="p">);</span>    <span class="c1"># $redis-&gt;set(&#39;fugu:foo&#39;, &#39;bar&#39;);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$foo</span> <span class="o">=</span> <span class="nv">$ns</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">);</span> <span class="c1"># my $foo = $redis-&gt;get(&#39;fugu:foo&#39;);</span>
</span></code></pre></td></tr></table></div></figure>


<p>RedisにはKey-Value Storeなんてかっこいい名前が付いているけど、
結局はシステム全体で使えるグローバル変数なわけです。
グローバル変数は駆逐するべきです。
いちいちプレフィックスつけて名前の衝突を回避するなんて人間のやることとは思えません。</p>

<p>せめてモジュールローカルとか、クラスローカルとかある程度スコープを制限したいですよね。
Redis::Namespaceを使えば簡単に実現できます。</p>

<h2>Redis::Key</h2>

<p>Redis::Key は Redisのキーの簡単なラッパークラスです。
毎回毎回「接続先のRedisサーバ」と「キーの名前」を指定するのは面倒です。
この2つをセットにして、一つのオブジェクトとして扱うことができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">Redis</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">Key</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$redis</span> <span class="o">=</span> <span class="n">Redis</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$key</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Key</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">redis</span> <span class="o">=&gt;</span> <span class="nv">$redis</span><span class="p">,</span> <span class="n">key</span> <span class="o">=&gt;</span> <span class="s">&#39;hoge&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$key</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="s">&#39;fugu&#39;</span><span class="p">);</span> <span class="c1"># $redis-&gt;set(&#39;hoge&#39;, &#39;fuga&#39;);</span>
</span><span class='line'><span class="nv">$key</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">;</span>         <span class="c1"># $redis-&gt;get(&#39;hoge&#39;);</span>
</span></code></pre></td></tr></table></div></figure>


<p>普通に使っている限りは他のキーにアクセスすることができなくなるので、
Redis::Keyのオブジェクトを他のクラスに渡す、とかしても安心です。</p>

<p>あと、キーの名前の一部をプレースホルダーにして、あとから値を埋め込むこともできます。
キー名の一部に日付やIDを埋め込むっていうことが多いのでつけてみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$user_keys</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Key</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">redis</span> <span class="o">=&gt;</span> <span class="nv">$redis</span><span class="p">,</span> <span class="n">key</span> <span class="o">=&gt;</span> <span class="s">&#39;user:{id}&#39;</span><span class="p">,</span> <span class="n">need_bind</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$user_keys</span><span class="o">-&gt;</span><span class="nb">bind</span><span class="p">(</span><span class="n">id</span> <span class="o">=&gt;</span> <span class="mi">1001</span><span class="p">);</span>
</span><span class='line'><span class="nv">$user</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">;</span>  <span class="c1"># $redis-&gt;get(&#39;user:1001&#39;);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Key-Value Store はお手軽ではありますが、キーの名前に一定のルールを設けてあげないと
さすがに管理できなくなります。
Redis::Key を使ってルールを書くのが楽になるといいですね。</p>

<h2>Redis::Fast と Redis::Namespace と Redis::Key を組み合わせる</h2>

<p>Redis::Fast と Redis::Namespace は Redis.pm 互換なので組み合わせて使えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$redis</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Fast</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$ns1</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Namespace</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">redis</span> <span class="o">=&gt;</span> <span class="nv">$redis</span><span class="p">,</span> <span class="n">namespace</span> <span class="o">=&gt;</span> <span class="s">&#39;hoge&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$ns2</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Namespace</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">redis</span> <span class="o">=&gt;</span> <span class="nv">$ns1</span><span class="p">,</span> <span class="n">namespace</span> <span class="o">=&gt;</span> <span class="s">&#39;fuga&#39;</span><span class="p">);</span> <span class="c1"># Redis::Namespaceのネストもできる</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$key</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Key</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">redis</span> <span class="o">=&gt;</span> <span class="nv">$ns2</span><span class="p">,</span> <span class="n">key</span> <span class="o">=&gt;</span> <span class="s">&#39;key&#39;</span><span class="p">);</span> <span class="c1"># hoge:fuga:key という名前になる</span>
</span></code></pre></td></tr></table></div></figure>


<p>なんだか最近Redis関連のモジュールばかり書いてますが、
なんでもRedisに突っ込めばいいと思っているわけではありません。
Redisを使ったコードを読んでいたら目眩がしたからです。
ISUCON3の予選で使ったのはRedisを使いたかったらというより、
Redis::Fastを使いたかったからです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis::Fastをcpanize＆アップデートしました]]></title>
    <link href="http://shogo82148.github.io/blog/2013/10/13/cpanize-redis-fast/"/>
    <updated>2013-10-13T22:39:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/10/13/cpanize-redis-fast</id>
    <content type="html"><![CDATA[<p>Redis::Fastを<a href="https://metacpan.org/release/Redis-Fast">cpanizeしました！</a></p>

<p>さらに！早速不具合が見つかったので0.01から0.02にアップデートしました！</p>

<!-- More -->


<p>CPANに上げてから24時間も経たないうちにpull requestがやってきてCPAN怖いところです。</p>

<p>最初のバージョンである0.01ではタイムアウト処理をちゃんと書いていなかったので、
タイムアウト時に無限ループに陥る不具合がありました。
LinuxとMacとでコネクションを張るのに失敗したときの挙動が違うらしく、
Linuxでは問題なくテストが通るのに、Mac上でのテストでは再現するという面倒バグでした。
さらに面倒なことにRedisの起動のタイミングによって、
Macでもテストが通ったり通らなかったりするという・・・。</p>

<p>主に開発はLinux上でやって、Linux上でしかテスト動かしてなかったので全く気がついていませんでした。
CPANデビューのモジュールがネットワーク関連でXSで少しハードルを上げ過ぎた感じがします。
環境依存な部分が多くてつらいです。</p>

<p>pull requestを送ってくださったsyohexさん、実際にインストールを試みてテストが通らないことを教えてくださったみなさん、ありがとうございました。
アップデートした0.02では、タイムアウト時の処理を少し書きなおして、pull requestも取り込みました。
Mac上でも問題なくテストが通ってインストールできるはずです(きっとね)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISUCON3の予選に参加してきた]]></title>
    <link href="http://shogo82148.github.io/blog/2013/10/07/isucon3-qualify/"/>
    <updated>2013-10-07T13:03:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/10/07/isucon3-qualify</id>
    <content type="html"><![CDATA[<p>こんにちは、いつの間にかチームぽわわ2のメンバーになっていたいっちーです。</p>

<p><a href="https://twitter.com/9re">@9re</a>さんと
<a href="https://twitter.com/mackee_w">@mackee_w</a>さんとでISUCON3の予選に参加してきました。
主にアプリの書き換えを担当していたので、やったことを残しておきます。
チーム全体の方針とか役割分担とかはまこぴー先生の<a href="http://mackee.hatenablog.com/entry/2013/10/06/230412">#isucon 予選でとりあえず10位だった</a>を参照。</p>

<!-- More -->


<h2>お題</h2>

<p>gistみたいなWebアプリ。
<a href="http://shogo82148.github.io/blog/2013/04/13/isucon/">社内ISUCON</a>のときと似たようなお題ですね。
違いは&#8230;</p>

<ul>
<li>スターは無い</li>
<li>Recent Postsのサイドバーが無い代わりに、ページングしてたどっていけるページがある</li>
<li>privateな投稿ができる</li>
<li>Markdown形式で投稿できて、表示はHTMLでレンダリングされる</li>
</ul>


<p>詳しくは、れもんさんの<a href="http://isucon.net/archives/32853582.html">#isucon 2013年予選問題の解説など</a>を参照。</p>

<h2>やったこと</h2>

<p>一言で言えば、Redisにキャッシュするようにしました。</p>

<h3>RecentをRedisのリストで管理</h3>

<p>Recentの表示で日付順ソートしているのが重たそうだったので、
公開メモのソート結果をあらかじめRedisのリストに入れておく作戦。</p>

<p>Redisの<code>SORT</code>コマンドが高機能で面白いなーって思ってたので使ってみました。
リストにはメモのIDだけ入れておいて、メモの実体は別のキーを参照する、なんてことができます。
このコマンド、<code>SORT</code>って名前なのに「ソートしない」ってオプションあるところがいいですよね！</p>

<p>MySQLがボトルネックになっているのはこれで解消できました。</p>

<h3>bin/markdownを使わない＆レンダリング結果をキャッシュ</h3>

<p>Markdownのレンダリングを外部コマンド叩いてやっていたので、
<a href="https://metacpan.org/module/Text::Markdown::Discount">Text::Markdown::Discount</a>を使ってレンダリングするように変更。
qx{hoge}って記法はじめて見ました。Perlってやつはいろんな書き方があってよくわからないです。</p>

<p>Markdownの文法って亜種が結構あるので、レンダラをかえるのはちょっと怖かったんですが、全く問題なし。
スコアも3000くらい上がってかなり効果がありました。</p>

<p>さらにレンダリング結果をRedisに入れてキャッシュで+1000くらい。</p>

<h3>Recentのレンダリング結果をキャッシュ</h3>

<p>RecentをRedisでさばくようにしたけど、そもそも100要素もあるHTMLのレンダリングそうとう重いはず。
と、いうわけでここもRedisにキャッシュするようにしました。
公開メモが投稿されたらRecent/:pageのキャッシュを全部削除。
Postのたびにキャッシュクリアされるのであんまり効果ないかなーと思っていたけど、わりと効果あったみたい？
(正確なスコアよく見てなかった)</p>

<h3>Redis::Fast!!</h3>

<p>残り時間も少なくなり時間内にできることも限られれきたので、最後の最後で<a href="https://github.com/shogo82148/Redis-Fast">Redis::Fast</a>を投入。
これで+1000くらい上がったらしい。(正確なスコアよく見てなかった)</p>

<p>s/Redis/Redis::Fast/ するだけの簡単なお仕事の予定が、githubからのインストールに一番手間取った。
cpanfileにgitのレポジトリを書くと(非公式だけど)インストールできるよ！ってどこかで見た気がするけどなかなかうまく行かず、
自分で<code>git clone</code>してそのディレクトリを指定してインストール(したってまこぴー先生が言ってた)。
(<code>hiredis.h</code>が無い！って叫んでいたから、cartonがsubmoduleをうまく処理できていなかったと予想。
非公式の機能に頼るの良くないね。)</p>

<h2>できなかったこと</h2>

<ul>
<li>my.cnf？なにそれ美味しいの？</li>
<li>SQLクエリをいじる余裕がなかった

<ul>
<li>Newer/Olderのクエリが残念なのはわかってたけど、結局いじってない</li>
</ul>
</li>
<li>Nginxでキャッシュしたい</li>
<li>必要なモジュールは事前にCPANにあげておこう。</li>
</ul>


<h2>まとめ</h2>

<p>結果は13192.1点で10位でした。
特に問題がなければこのまま予選突破できるはず・・・！</p>

<p>ところで、魔王軍が学生枠を制圧していて恐ろしいですね。
てか、<a href="http://shiro-goma.hatenablog.com/entry/2013/10/07/202913">僕らのチームとの差、500点程度しか無いじゃないですか</a>。怖！！！
これ以上の侵攻はなんとしてでも食い止めなければ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis::Fastってモジュールを書いた]]></title>
    <link href="http://shogo82148.github.io/blog/2013/09/28/redis-fast/"/>
    <updated>2013-09-28T00:18:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/09/28/redis-fast</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/redis/hiredis">hiredis</a>をPerlから扱うためのライブラリとして
<a href="http://search.cpan.org/~neophenix/Redis-hiredis/lib/Redis/hiredis.pm">Redis::hiredis</a>ってのがあるけど、
なんだか微妙だって聞いたので自分でPerlのhiredisバインディング書いてみたよ。</p>

<ul>
<li><a href="https://github.com/shogo82148/Redis-Fast">https://github.com/shogo82148/Redis-Fast</a></li>
</ul>


<p>(READMEからRedis.pmをそのまま持ってきたことがまるわかりですね。なんとかしよう。)</p>

<!-- More -->


<h2>使い方</h2>

<p><a href="http://search.cpan.org/~melo/Redis-1.961/lib/Redis.pm">Redis.pm</a>と全く同じインターフェースなので、
そのまま置換できる、はず。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">Fast</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$redis</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Fast</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">### synchronize mode</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="s">&#39;hoge&#39;</span><span class="p">,</span> <span class="s">&#39;piyo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">print</span> <span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;hoge&#39;</span><span class="p">);</span>  <span class="c1"># piyo</span>
</span><span class='line'>
</span><span class='line'><span class="c1">### asynchronize mode</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;hoge&#39;</span><span class="p">,</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$result</span><span class="p">,</span> <span class="nv">$error</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="nv">$result</span><span class="p">;</span>  <span class="c1"># piyo</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">wait_all_responses</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">### pubsub</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">publish</span><span class="p">(</span><span class="s">&#39;fugu&#39;</span><span class="p">,</span> <span class="s">&#39;fuga&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">subscribe</span><span class="p">(</span><span class="s">&#39;fugu&#39;</span><span class="p">,</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$message</span><span class="p">,</span> <span class="nv">$topic</span><span class="p">,</span> <span class="nv">$subscribed_topic</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$timeout</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">wait_for_messages</span><span class="p">(</span><span class="nv">$timeout</span><span class="p">)</span> <span class="k">while</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>以前作った、<a href="https://github.com/shogo82148/Redis-Namepace">Redis::Namespace</a>にもそのまま使えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">Fast</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">Namespace</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$redis</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Fast</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$ns</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Namespace</span><span class="p">(</span><span class="n">redis</span> <span class="o">=&gt;</span> <span class="nv">$redis</span><span class="p">,</span> <span class="n">namespace</span> <span class="o">=&gt;</span> <span class="s">&#39;fugu&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ns</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">,</span> <span class="s">&#39;bar&#39;</span><span class="p">);</span>    <span class="c1"># $redis-&gt;set(&#39;fugu:foo&#39;, &#39;bar&#39;);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$foo</span> <span class="o">=</span> <span class="nv">$ns</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">);</span> <span class="c1"># my $foo = $redis-&gt;get(&#39;fugu:foo&#39;);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ベンチマーク</h2>

<h3>Redis.pm</h3>

<figure class='code'><figcaption><span>Redis.pm</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Benchmark: running 00_ping, 10_set, 11_set_r, 20_get, 21_get_r, 30_incr, 30_incr_r, 40_lpush, 50_lpop, 90_h_get, 90_h_set for at least 5 CPU seconds...
</span><span class='line'>   00_ping:  8 wallclock secs ( 0.69 usr +  4.77 sys =  5.46 CPU) @ 5538.64/s (n=30241)
</span><span class='line'>    10_set:  8 wallclock secs ( 1.07 usr +  4.01 sys =  5.08 CPU) @ 5794.09/s (n=29434)
</span><span class='line'>  11_set_r:  7 wallclock secs ( 0.42 usr +  4.84 sys =  5.26 CPU) @ 5051.33/s (n=26570)
</span><span class='line'>    20_get:  8 wallclock secs ( 0.69 usr +  4.82 sys =  5.51 CPU) @ 5080.40/s (n=27993)
</span><span class='line'>  21_get_r:  7 wallclock secs ( 2.21 usr +  3.09 sys =  5.30 CPU) @ 5389.06/s (n=28562)
</span><span class='line'>   30_incr:  7 wallclock secs ( 0.69 usr +  4.73 sys =  5.42 CPU) @ 5671.77/s (n=30741)
</span><span class='line'> 30_incr_r:  7 wallclock secs ( 0.85 usr +  4.31 sys =  5.16 CPU) @ 5824.42/s (n=30054)
</span><span class='line'>  40_lpush:  8 wallclock secs ( 0.60 usr +  4.77 sys =  5.37 CPU) @ 5832.59/s (n=31321)
</span><span class='line'>   50_lpop:  7 wallclock secs ( 1.24 usr +  4.17 sys =  5.41 CPU) @ 5112.75/s (n=27660)
</span><span class='line'>  90_h_get:  7 wallclock secs ( 0.63 usr +  4.65 sys =  5.28 CPU) @ 5716.29/s (n=30182)
</span><span class='line'>  90_h_set:  7 wallclock secs ( 0.65 usr +  4.74 sys =  5.39 CPU) @ 5593.14/s (n=30147)</span></code></pre></td></tr></table></div></figure>


<h3>Redis::hiredis</h3>

<figure class='code'><figcaption><span>Redis::hiredis</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Benchmark: running 00_ping, 10_set, 11_set_r, 20_get, 21_get_r, 30_incr, 30_incr_r, 40_lpush, 50_lpop for at least 5 CPU seconds...
</span><span class='line'>   00_ping: 10 wallclock secs ( 0.15 usr +  5.13 sys =  5.28 CPU) @ 8998.48/s (n=47512)
</span><span class='line'>    10_set:  9 wallclock secs ( 0.12 usr +  4.90 sys =  5.02 CPU) @ 8552.39/s (n=42933)
</span><span class='line'>  11_set_r:  9 wallclock secs ( 0.14 usr +  4.95 sys =  5.09 CPU) @ 8555.01/s (n=43545)
</span><span class='line'>    20_get:  9 wallclock secs ( 0.09 usr +  5.42 sys =  5.51 CPU) @ 8785.48/s (n=48408)
</span><span class='line'>  21_get_r:  9 wallclock secs ( 0.20 usr +  4.94 sys =  5.14 CPU) @ 8181.52/s (n=42053)
</span><span class='line'>   30_incr:  9 wallclock secs ( 0.12 usr +  5.29 sys =  5.41 CPU) @ 8622.55/s (n=46648)
</span><span class='line'> 30_incr_r:  8 wallclock secs ( 0.16 usr +  4.92 sys =  5.08 CPU) @ 8113.39/s (n=41216)
</span><span class='line'>  40_lpush:  9 wallclock secs ( 0.21 usr +  5.15 sys =  5.36 CPU) @ 8547.57/s (n=45815)
</span><span class='line'>   50_lpop:  8 wallclock secs ( 0.12 usr +  4.91 sys =  5.03 CPU) @ 9024.06/s (n=45391)</span></code></pre></td></tr></table></div></figure>


<h3>Redis::Fast</h3>

<p>Redis.pm の3〜5割増しくらいで速くなる。
Redis::hiredisと比べると1割〜2割くらい遅い。</p>

<figure class='code'><figcaption><span>Redis::Fast</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Benchmark: running 00_ping, 10_set, 11_set_r, 20_get, 21_get_r, 30_incr, 30_incr_r, 40_lpush, 50_lpop, 90_h_get, 90_h_set for at least 5 CPU seconds...
</span><span class='line'>   00_ping:  9 wallclock secs ( 0.18 usr +  4.84 sys =  5.02 CPU) @ 7939.24/s (n=39855)
</span><span class='line'>    10_set: 10 wallclock secs ( 0.31 usr +  5.40 sys =  5.71 CPU) @ 7454.64/s (n=42566)
</span><span class='line'>  11_set_r:  9 wallclock secs ( 0.31 usr +  4.87 sys =  5.18 CPU) @ 7993.05/s (n=41404)
</span><span class='line'>    20_get: 10 wallclock secs ( 0.27 usr +  4.84 sys =  5.11 CPU) @ 8350.68/s (n=42672)
</span><span class='line'>  21_get_r: 10 wallclock secs ( 0.32 usr +  5.17 sys =  5.49 CPU) @ 8238.62/s (n=45230)
</span><span class='line'>   30_incr:  9 wallclock secs ( 0.23 usr +  5.27 sys =  5.50 CPU) @ 8221.82/s (n=45220)
</span><span class='line'> 30_incr_r:  8 wallclock secs ( 0.28 usr +  4.91 sys =  5.19 CPU) @ 8092.29/s (n=41999)
</span><span class='line'>  40_lpush:  9 wallclock secs ( 0.18 usr +  5.06 sys =  5.24 CPU) @ 8312.02/s (n=43555)
</span><span class='line'>   50_lpop:  9 wallclock secs ( 0.20 usr +  4.84 sys =  5.04 CPU) @ 8010.12/s (n=40371)
</span><span class='line'>  90_h_get:  9 wallclock secs ( 0.19 usr +  5.51 sys =  5.70 CPU) @ 7467.72/s (n=42566)
</span><span class='line'>  90_h_set:  8 wallclock secs ( 0.28 usr +  4.83 sys =  5.11 CPU) @ 7724.07/s (n=39470)</span></code></pre></td></tr></table></div></figure>


<h3>pipeline mode</h3>

<p>毎回レスポンスを待っているとI/Oがボトルネックになってあんまり速度上がらないけど、
レスポンスを待たずにコマンドをどんどん送りつけると差が原著になります。</p>

<figure class='code'><figcaption><span>bench.pl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/perl</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nn">Time::</span><span class="n">HiRes</span> <span class="sx">qw/time/</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">Redis</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">Fast</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">hiredis</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$count</span> <span class="o">=</span> <span class="mi">100000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$r</span> <span class="o">=</span> <span class="n">Redis</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$start</span> <span class="o">=</span> <span class="nb">time</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">$count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$r</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="s">&#39;hoge&#39;</span><span class="p">,</span> <span class="s">&#39;fuga&#39;</span><span class="p">,</span> <span class="n">sub</span><span class="p">{});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$r</span><span class="o">-&gt;</span><span class="n">wait_all_responses</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">printf</span> <span class="s">&quot;Redis.pm:\n%.2f/s\n&quot;</span><span class="p">,</span> <span class="nv">$count</span> <span class="o">/</span> <span class="p">(</span><span class="nb">time</span> <span class="o">-</span> <span class="nv">$start</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$r</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">hiredis</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$r</span><span class="o">-&gt;</span><span class="nb">connect</span><span class="p">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="mi">6379</span><span class="p">);</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$start</span> <span class="o">=</span> <span class="nb">time</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">$count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$r</span><span class="o">-&gt;</span><span class="n">append_command</span><span class="p">(</span><span class="s">&#39;set hoge fuga&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">$count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$r</span><span class="o">-&gt;</span><span class="n">get_reply</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">printf</span> <span class="s">&quot;Redis::hiredis:\n%.2f/s\n&quot;</span><span class="p">,</span> <span class="nv">$count</span> <span class="o">/</span> <span class="p">(</span><span class="nb">time</span> <span class="o">-</span> <span class="nv">$start</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$r</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Fast</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$start</span> <span class="o">=</span> <span class="nb">time</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">$count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$r</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="s">&#39;hoge&#39;</span><span class="p">,</span> <span class="s">&#39;fuga&#39;</span><span class="p">,</span> <span class="n">sub</span><span class="p">{});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$r</span><span class="o">-&gt;</span><span class="n">wait_all_responses</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">printf</span> <span class="s">&quot;Redis::Fast:\n%.2f/s\n&quot;</span><span class="p">,</span> <span class="nv">$count</span> <span class="o">/</span> <span class="p">(</span><span class="nb">time</span> <span class="o">-</span> <span class="nv">$start</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>大体Redis.pmの4倍速い。でもRedis::hiredisと比べると2割ほど遅い。
Fastを名乗るのは早すぎた。</p>

<figure class='code'><figcaption><span>bench</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Redis.pm:
</span><span class='line'>22588.95/s
</span><span class='line'>Redis::hiredis:
</span><span class='line'>105159.88/s
</span><span class='line'>Redis::Fast:
</span><span class='line'>81098.01/s</span></code></pre></td></tr></table></div></figure>


<p>Perl API よくわからない。Socket通信まったくわからない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPCへ行ってきた(二日目)]]></title>
    <link href="http://shogo82148.github.io/blog/2013/09/24/yapc-second-day/"/>
    <updated>2013-09-24T07:52:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/09/24/yapc-second-day</id>
    <content type="html"><![CDATA[<p>前回のポストにつづいてYAPC二日目。
聞いたトークの内容を簡単にメモ。</p>

<h2>Perl で書く結合テスト</h2>

<p>前半はSWET(Software Engineer in Test), TE(Test Engineer)といった業種の話。
後半はテスト手法の分類(誰がする？テストの対象は？方法は？目的は？)について。</p>

<p>スライドはこちら→[Perlで書く結合テスト(]http://ikasama.hateblo.jp/entry/2013/09/22/234521)</p>

<h2>これからのPerlプロダクトのかたち</h2>

<p>世界一高速な処理系を目指して開発中の<a href="https://github.com/goccy/gperl">gperl</a>と、
その過程でできたツールの紹介。
PerlをLLVMにコンパイルすることがで、高速動作するらしい。
恐ろしい・・・。</p>

<p>Perlは文脈によってトークンの意味が変わってしまうから、トークナイザーを作るのに苦労したとのこと。
(例えば、<code>hoge * fuga</code> とあったときに、<code>*</code>が掛け算なのかブロブなのかわからない)
コンパイルの高速化のために文法を工夫しているKuinを見習って欲しいですね。</p>

<h2>Emacs実践入門 Perl編</h2>

<p>typester先生によるEmacs入門。
PerlCompletion とか helm とか便利そう。
あんまりEmacsカスタマイズできていないので、今度いろいろ入れて遊んでみよう。</p>

<h2>Perlでレコメンデーション</h2>

<p>登壇者はJubatusのPerlモジュールを書いたりしているらしい。
Jubatus に触ってみようと考え始めてからどれだけの月日が経っただろう・・・
そのうち触ってみます。そのうち。</p>

<h2>中規模チャットサービスの運用事例</h2>

<p>handlename先生のLobi運用のお話。
今日もcronのメールが迷惑メールフィルタによって闇に葬りさられる悲しいことがあったので、
cronの結果をIRCに飛ばすのとか参考にして何とかしたい。</p>

<h2>PhantomJSによる多岐にわたる広告枠の確実な表示テスト</h2>

<p>最近の広告はJavascriptを使った遅延読み込みをするので、
ちゃんと表示されるかを静的に判断することができない。
そこで PhantomJS を使ってテストするお話。</p>

<h2>フルテストも50msで終わらせたい 〜 FreakOutの取り組み 〜</h2>

<p>さすがにフルテストは50msで終わりません。
Ukigumoを使って複数台のサーバでテストを分散実行する取り組みを紹介。</p>

<p>スライド→http://yapcasia.org/2013/talk/show/767463b0-d8fd-11e2-971a-72936aeab6a4</p>

<h2>LT</h2>

<p>前日にアイデアだけLTで紹介したHTTP::Body::Builderが、別の人の手によって実現されていたのには驚いた。
YAPC恐ろしいところだ・・・。</p>

<h2>HUB</h2>

<p>懇親会参加しない組だったので、
@sasaplus1 さん, @kazuph さん, @aokcub とHUBで飲み会。
なぜ学内にHUBがあるんだ・・・？</p>

<p>NDS勢やNiigata.pm勢、あと何故かスタッフになっていた @jewel_x12 とも会えて楽しかったです！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPCへ行ってきた(一日目)]]></title>
    <link href="http://shogo82148.github.io/blog/2013/09/20/yapc-first-day/"/>
    <updated>2013-09-20T21:48:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/09/20/yapc-first-day</id>
    <content type="html"><![CDATA[<p>YAPCの一日目に行ってきたよ。</p>

<!-- More -->


<h2>いまどきのカジュアルなデータベース関連開発</h2>

<p>Songmu先生のセッション。</p>

<p>DBIx::Schema::DSL とか GitDDL::Migrator とかの説明や、
DBのスキーマ設計、Redisの紹介なんかがありました。
自分もMySQLやRedisを触る機会が増えて、DB周りでつらい思いをしたことが何度かあるので
(外部キー制約でデッドロック起こしたり、無駄なインデックスを必死に削除したり・・・)
大いに参考に参考にさせていただきます。</p>

<p>スライドはこちらから→<a href="http://songmu.github.io/slides/yapc-asia2013/">いまどきのカジュアルなデータベース関連開発</a></p>

<h2>学術分野におけるPerlの活用例</h2>

<p>Perlを使ったアンケートの結果と、PerCUDAの紹介。
GPGPUをPerlのコードで実現しようとのお話。</p>

<h2>大規模Perl初心者研修を支える技術</h2>

<p>:DeNAさんが行った研修の紹介です。
顔覚えられない、
研修生の状況把握が大変、
信頼関係を作るのが大変
といった問題をどうやって解決したかについてのお話がありました。</p>

<p>トークの中で紹介された本何冊か持っているけど、全然読んでない・・・。
というか研修生みんなこれ読んだんですか。</p>

<p>スライドはこちらから→<a href="http://www.slideshare.net/DaisukeTamada/perl-26371335">大規模Perl初心者研修を支える技術</a></p>

<h2>mod_perlの展望とApacheの超絶技巧</h2>

<p>最近僕の周辺ではあまり Apache の話題を聞かなくなってしまいましたね。
しかし、その知名度の高さからか、他のオープンソースのプロダクトはダメでも、
Apache はOKという案件があるらしい。
「Apache使いました！」っていうために、mod_perl で代替品を作ろう、というお話。
おそろしい・・・。</p>

<p>スライドはこちらから→<a href="http://www.slideshare.net/xtetsuji/apachemodperl-yapcasia">mod_perlの展望とApacheの超絶技巧</a></p>

<h2>0から学んだポストモダンPerl</h2>

<p>ルーティングとかORMはWAFにはいらない。
blessで十分！これぞ、ポスト・モダンPerl！とのことでした。</p>

<p>僕もフルスタックのフレームワークより、
各機能が別になっているほうが好きですね。
(でもblessよりはクラスを扱うためのライブラリ使ったほうがよいと思う)
まあ、あんまり大規模なWebアプリ作ったこと無いので、
実際に作ってみると意見が変わるかもしれませんが。</p>

<p>スライドはこちらから→<a href="http://www.slideshare.net/TasukuSuenaga/yapc2013">0から学んだポストモダンPerl</a></p>

<h2>Dist::Zilla</h2>

<p>英語のトークに紛れ込んでしまい、正直良くわからなかった。
英語能力全く向上していない。</p>

<p>モジュールを作成、テスト、アップロード等の管理をするためのプログラムらしい。
Redis::Namespace でつらい思いをしたので、
次モジュールを作りたくなったら試してみよう。</p>

<h2>perl な web application のためのテスト情報</h2>

<p>スライドの順番が正しいか、今使っているのは本当にマイクなのかのテストが必要ですね！
335さん自らテストの必要性を教えてくれました。
「なぜテストが必要か」言葉では語らず行動で示す335さんかっこいい。</p>

<p>Test::Deep は Redis::Namespace のテストでも一部使っていますが、これ便利ですね。
Test::More の is_deeply はちょっと不便だと思っていたので、今後も使っていこうと思います。</p>
]]></content>
  </entry>
  
</feed>
