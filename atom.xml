<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shogo's Blog]]></title>
  <link href="http://shogo82148.github.io/atom.xml" rel="self"/>
  <link href="http://shogo82148.github.io/"/>
  <updated>2015-12-16T23:46:09+09:00</updated>
  <id>http://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git-mergeの挙動をカスタマイズする]]></title>
    <link href="http://shogo82148.github.io/blog/2015/12/16/customize-git-merge/"/>
    <updated>2015-12-16T22:24:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/12/16/customize-git-merge</id>
    <content type="html"><![CDATA[<p>最近gitのコンフリクト解消職人みたいになっていてすごくつらいです。
普通のプログラムであれば順番が重要なので手動でのコンフリクト解消は避けられないのですが、
僕が相手にしているのは最終的にMySQLに食わせるデータなのでそこまで順番は重要ではありません。
順番に挿入したところで、MySQLが順番にかえしてくれるとは限りませんからね。
このようなケースではある程度機械的にマージできるのでは？と調べてみました。</p>

<!-- More -->


<h2>merge driver</h2>

<p>いろいろググってみると<a href="http://git-scm.com/docs/gitattributes">gitattributes</a>でファイル毎にマージの細かい挙動を制御できるようです。
通常マージの方法はgitがよしなに選択してくれますが、merge属性に以下の項目を指定することでマージの方法を強制することができます。</p>

<ul>
<li>text

<ul>
<li>テキストファイルとしてマージする。</li>
<li>コンフリクトすると <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>でコンフリクトした場所を教えてくれる。</li>
</ul>
</li>
<li>binary

<ul>
<li>バイナリファイルとしてマージする。</li>
<li>コンフリクトするとマージしようとしたファイルを残しておいてくれる。</li>
</ul>
</li>
<li>union

<ul>
<li>テキストファイルとしてマージする。</li>
<li>textと違ってコンフリクトしてもマーカを付けない。どちらの変更も残すように適当にマージしてくれる。</li>
<li>適当なので <strong>コンフリクト時の行の順番は保証されない</strong></li>
</ul>
</li>
</ul>


<p>text, binaryはコンフリクトしたときによく見る挙動ですね。
unionは初めて知ったので、簡単なレポジトリを作って挙動を確かめてみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="c"># masterブランチ上でmembers.txtにAliceを追加する</span>
</span><span class='line'><span class="nv">$ </span>git init
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>Alice &gt; members.txt
</span><span class='line'><span class="nv">$ </span>git add members.txt
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;add Alice&#39;</span>
</span><span class='line'><span class="o">[</span>master <span class="o">(</span>root-commit<span class="o">)</span> 8c39714<span class="o">]</span> add Alice
</span><span class='line'> 1 file changed, 1 insertion<span class="o">(</span>+<span class="o">)</span>
</span><span class='line'>  create mode 100644 members.txt
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="nv">$ </span><span class="c"># add-bobブランチ上でmembers.txtにBobを追加する</span>
</span><span class='line'><span class="nv">$ </span>git checkout -b add-bob
</span><span class='line'>Switched to a new branch <span class="s1">&#39;add-bob&#39;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;Bob&#39;</span> &gt;&gt; members.txt
</span><span class='line'><span class="nv">$ </span>git add members.txt
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;add Bob&#39;</span>
</span><span class='line'><span class="o">[</span>add-bob 9c406ae<span class="o">]</span> add Bob
</span><span class='line'> 1 file changed, 1 insertion<span class="o">(</span>+<span class="o">)</span>
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="nv">$ </span><span class="c"># masterブランチ上でmembers.txtにEveを追加する</span>
</span><span class='line'><span class="nv">$ </span>git checkout -
</span><span class='line'> Switched to branch <span class="s1">&#39;master&#39;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;Eve&#39;</span> &gt;&gt; members.txt
</span><span class='line'><span class="nv">$ </span>git add members.txt
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;add Eve&#39;</span>
</span><span class='line'><span class="o">[</span>master 9eabd8a<span class="o">]</span> add Eve
</span><span class='line'> 1 file changed, 1 insertion<span class="o">(</span>+<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>git merge add-bob
</span><span class='line'> Auto-merging members.txt
</span><span class='line'> CONFLICT <span class="o">(</span>content<span class="o">)</span>: Merge conflict in members.txt
</span><span class='line'> Automatic merge failed; fix conflicts and <span class="k">then </span>commit the result.
</span><span class='line'><span class="nv">$ </span>cat members.txt
</span><span class='line'> Alice
</span><span class='line'> <span class="o">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt; HEAD
</span><span class='line'> <span class="nv">Eve</span>
</span><span class='line'> <span class="o">=======</span>
</span><span class='line'> Bob
</span><span class='line'> &gt;&gt;&gt;&gt;&gt;&gt;&gt; add-bob
</span></code></pre></td></tr></table></div></figure>


<p>わざとコンフリクトを起こしてみるテストです。
ファイル末尾にEveとBobをそれぞれ別々のブランチで追加したためコンフリクトしてしまっています。</p>

<p>では次にgitattributeを追加して<code>merge=union</code>を指定した場合に挙動を確認してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="c"># merge=union属性を追加</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;members.txt merge=union&#39;</span> &gt; .gitattributes
</span><span class='line'><span class="nv">$ </span>git add -f .gitattributes
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;add gitattributes&#39;</span>
</span><span class='line'><span class="o">[</span>master 61d2cfc<span class="o">]</span> add gitattributes
</span><span class='line'> 1 file changed, 1 insertion<span class="o">(</span>+<span class="o">)</span>
</span><span class='line'>  create mode 100644 .gitattributes
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="nv">$ </span><span class="c"># もう一度マージしてみる</span>
</span><span class='line'><span class="nv">$ </span>git merge add-bob
</span><span class='line'>Auto-merging members.txt
</span><span class='line'>Merge made by the <span class="s1">&#39;recursive&#39;</span> strategy.
</span><span class='line'> members.txt | 1 +
</span><span class='line'>  1 file changed, 1 insertion<span class="o">(</span>+<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>cat members.txt
</span><span class='line'>Alice
</span><span class='line'>Eve
</span><span class='line'>Bob
</span></code></pre></td></tr></table></div></figure>


<p>通常はコンフリクトするケースですが、今度はうまくマージできました。</p>

<h2>merge driverをカスタマイズする</h2>

<p>デフォルトではtext, binary, unionしか用意されていないmerge driverですが、<code>.git/config</code>をいじることで自前のmerge driverを追加することができます。
unionでは行の順番が不定になって不便なので、試しに「必ずソートされており重複がないファイルをマージする」ためのmerge driverを作ってみます。
まずはマージするためのコマンド用意しましょう。</p>

<figure class='code'><figcaption><span>merge-sorted-set.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">A</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'><span class="nv">O</span><span class="o">=</span><span class="s2">&quot;$2&quot;</span>
</span><span class='line'><span class="nv">B</span><span class="o">=</span><span class="s2">&quot;$3&quot;</span>
</span><span class='line'><span class="nv">tmpfile</span><span class="o">=</span><span class="k">$(</span>mktemp temp.XXXXXX<span class="k">)</span>
</span><span class='line'>cp <span class="s2">&quot;$A&quot;</span> <span class="s2">&quot;$tmpfile&quot;</span>
</span><span class='line'>git merge-file -p -q --union <span class="s2">&quot;$tmpfile&quot;</span> <span class="s2">&quot;$O&quot;</span> <span class="s2">&quot;$B&quot;</span> | sort | uniq &gt; <span class="s2">&quot;$A&quot;</span>
</span><span class='line'>rm <span class="s2">&quot;$tmpfile&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>パスの通った場所にこのファイルを置き、<code>.git/config</code>にこれを呼び出す設定を書けば、gitattributeから使用できるようになります。</p>

<figure class='code'><figcaption><span>.git/config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[merge "zset"]
</span><span class='line'>        name = merge sorted set
</span><span class='line'>        driver = merge-sorted-set.sh %A %O %B</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>%A</code>: 現在のブランチの状態</li>
<li><code>%B</code>: マージしようとしているブランチの状態</li>
<li><code>%O</code>: 共通の祖先の状態</li>
<li><code>%L</code>: コンフリクトマーカの長さ。<a href="https://github.com/git/git/commit/23a64c9e771e3caf19cf2ee9a32c8942ddde4a81">1.7から使えるらしい</a></li>
<li><code>%P</code>: ファイルのパス。<a href="https://github.com/git/git/commit/ef45bb1f8156030446658d5bfb3983ce214a9e16">2.5.0から使えるらしい</a></li>
</ul>


<p>このmerge driverを使ってマージすると、先の例ではAlice, Bob, Eveの順番で並ぶようになります。</p>

<h2>theirs-oursの順番に並べてみる</h2>

<p>僕のケースではtheirs-oursの順番で並んでくれると都合が良いので、こんなスクリプトを書いてみました。</p>

<figure class='code'><figcaption><span>merge-theirs-ours.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">A</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'><span class="nv">O</span><span class="o">=</span><span class="s2">&quot;$2&quot;</span>
</span><span class='line'><span class="nv">B</span><span class="o">=</span><span class="s2">&quot;$3&quot;</span>
</span><span class='line'><span class="nv">tmpfile</span><span class="o">=</span><span class="k">$(</span>mktemp temp.XXXXXX<span class="k">)</span>
</span><span class='line'>cp <span class="s2">&quot;$A&quot;</span> <span class="s2">&quot;$tmpfile&quot;</span>
</span><span class='line'>git merge-file -p -q --union <span class="s2">&quot;$B&quot;</span> <span class="s2">&quot;$O&quot;</span> <span class="s2">&quot;$tmpfile&quot;</span> &gt; <span class="s2">&quot;$A&quot;</span>
</span><span class='line'>rm <span class="s2">&quot;$tmpfile&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>.git/config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[merge "theirsours"]
</span><span class='line'>        name = theirs first
</span><span class='line'>        driver = merge-theirs-ours.sh %A %O %B
</span><span class='line'>        recursive = text</span></code></pre></td></tr></table></div></figure>


<p>あとは勝手にコンフリクト解消して欲しいファイルに対して
.gitattributesで<code>merge=theirsours</code>を指定すれば通常はコンフリクトする場合でもマージしてくれます。</p>

<p>ただ、さすがに全自動だとちょっと怖いので、以下の様にコンフリクトするようであればユーザに確認(<code>exit 1</code>するとコンフリクトした扱いになる)
したほうが無難な気もしますね。</p>

<figure class='code'><figcaption><span>merge-theirs-ours.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">A</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'><span class="nv">O</span><span class="o">=</span><span class="s2">&quot;$2&quot;</span>
</span><span class='line'><span class="nv">B</span><span class="o">=</span><span class="s2">&quot;$3&quot;</span>
</span><span class='line'><span class="k">if </span>git merge-file -p -q <span class="s2">&quot;$A&quot;</span> <span class="s2">&quot;$O&quot;</span> <span class="s2">&quot;$B&quot;</span> &gt; /dev/null; <span class="k">then</span>
</span><span class='line'><span class="k">    </span>git merge-file <span class="s2">&quot;$A&quot;</span> <span class="s2">&quot;$O&quot;</span> <span class="s2">&quot;$B&quot;</span>;
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nv">tmpfile</span><span class="o">=</span><span class="k">$(</span>mktemp temp.XXXXXX<span class="k">)</span>
</span><span class='line'>    cp <span class="s2">&quot;$A&quot;</span> <span class="s2">&quot;$tmpfile&quot;</span>
</span><span class='line'>    git merge-file -p -q --union <span class="s2">&quot;$B&quot;</span> <span class="s2">&quot;$O&quot;</span> <span class="s2">&quot;$tmpfile&quot;</span> &gt; <span class="s2">&quot;$A&quot;</span>
</span><span class='line'>    rm <span class="s2">&quot;$tmpfile&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>gitattribute便利。
gitattributeを使って<a href="http://shogo82148.github.io/blog/2015/03/24/git-diff-csv/">Git Diffでcsvの差分を見やすく表示する</a>のもどうぞ。</p>

<p>ただmerge driverからはファイルのメタ情報に触れないので、「コミット日時が新しい方を残す」みたいなことができないのが残念です。
<a href="http://stackoverflow.com/questions/7607125/git-merge-conflict-to-always-take-the-newest-file">ブランチ決め打ちにする</a>のはちょっと怖いし、
merge strategyのカスタマイズは大変そう・・・
(一応 <code>git-merge-hogehoge</code> をいうコマンドを用意しておけば <code>git merge --strategy hogehoge</code> と使えるようです。が、<code>git-merge-hogehoge &lt;base&gt;... -- &lt;head&gt; &lt;remote&gt; ...</code> の形式で渡ってくるので、そこから再実装するのはつらい・・・)</p>

<h2>参考</h2>

<ul>
<li><a href="http://git-scm.com/docs/gitattributes">gitattributes</a></li>
<li><a href="http://stackoverflow.com/questions/23140240/git-how-do-i-add-a-custom-merge-strategy">git: How do I add a custom merge strategy?</a></li>
<li><a href="http://stackoverflow.com/questions/7607125/git-merge-conflict-to-always-take-the-newest-file">Git merge conflict to always take the newest file</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goでデプロイ神社書いてみた]]></title>
    <link href="http://shogo82148.github.io/blog/2015/12/13/go-deploy-shrine/"/>
    <updated>2015-12-13T10:51:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/12/13/go-deploy-shrine</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/advent-calendar/2015/go2">Go その2 Advent Calendar 2015</a>の13日目の記事です。</p>

<ul>
<li><a href="http://qiita.com/advent-calendar/2015/go">その1</a></li>
<li><a href="http://qiita.com/advent-calendar/2015/go2">その2</a></li>
<li><a href="http://qiita.com/advent-calendar/2015/go3">その3</a></li>
</ul>


<p>六曜を知ることができる便利コマンドを作ってみたお話です。</p>

<!-- More -->


<h2>Deploy神社とは</h2>

<p><a href="https://twitter.com/Maco_Tasu">Maco_Tasu</a>が作ったいつdeployしたら安全かを教えてくれる便利APIです。
詳しくは作者ブログ記事をどうぞ。(<a href="http://macotasu.hatenablog.jp/entry/2014/11/13/214337">Deploy神社APIを作った- 眠すぎて明日が見えない</a>)</p>

<p>便利APIなのですが、依存している外部APIが利用できなくなってしまったため、Deploy神社自体が利用できなくなっています。</p>

<h2>作ってみた</h2>

<p>デプロイする時間が分からないと不便なので、Go実装を作ってみました。</p>

<ul>
<li><a href="https://github.com/shogo82148/go-deploy-shrine">shogo82148/go-deploy-shrine</a></li>
</ul>


<p><code>go get</code>してきてお祈りを捧げればデプロイするべき時間を教えてくれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go get github.com/shogo82148/go-deploy-shrine/cli/pray
</span><span class='line'><span class="nv">$ </span>pray
</span><span class='line'>今日は旧暦の11月3日<span class="o">(</span>先勝<span class="o">)</span>です。deployは午前中に済ませましょう。
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.weblio.jp/content/%E5%85%88%E5%8B%9D">先勝 - Weblio</a></p>

<blockquote><p>六曜の一。急用や訴訟などによいとされ，早く事を行うのがよく，午前は吉，午後は凶という日。先勝日。せんかち。さきがち。</p></blockquote>

<p>今日12月13日は先勝で午前中にデプロイするのが良いようです。便利ですね。</p>

<h2>六曜とは</h2>

<p>むかしのカレンダーには暦注と呼ばれる「今日の運勢」みたいなものが記載されていたらしいです。
六曜はその暦注のひとつで、現在のカレンダーにも記載されることの多い影響力の大きなものです。</p>

<p>詳しくはWikipediaで。</p>

<ul>
<li><a href="https://ja.wikipedia.org/wiki/%E5%85%AD%E6%9B%9C">六曜 - Wikipedia</a></li>
</ul>


<p>旧暦の(月＋日)を6で割った余りから簡単に求めることができます。</p>

<ul>
<li>0: 大安</li>
<li>1: 赤口</li>
<li>2: 先勝</li>
<li>3: 友引</li>
<li>4: 先負</li>
<li>5: 仏滅</li>
</ul>


<h2>旧暦とは</h2>

<p>旧暦の月日を求めることができれば六曜は簡単に出せるのですが、
日本における旧暦である<a href="https://ja.wikipedia.org/wiki/%E5%A4%A9%E4%BF%9D%E6%9A%A6">天保暦</a>は月の満ち欠けと太陽の動きを元にした暦法であり、
月と太陽の動きを正確に予測する必要があります。</p>

<p>Go版デプロイ神社では「日の出・日の入りの計算―天体の出没時刻の求め方」で紹介されていた計算式を用いています</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=shogo82148-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4805206349" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<h2>2033年旧暦閏月問題</h2>

<p>天保暦をそのまま当てはめると2033年に月を決定できない問題が知られています。
日本カレンダー暦文化振興協会というところが「閏11月を推奨する」との見解を2015年8月に出しています。</p>

<ul>
<li><a href="http://www.rekibunkyo.or.jp/year2033problem.html">2033年旧暦閏月問題の見解</a></li>
</ul>


<p>Go版デプロイ神社では時憲暦方式を採用したつもりです。</p>

<h2>せめてGoっぽい話題を</h2>

<p>引数に日付を渡すとその日の六曜をかえしてくれます。
いろんな形式に対応していて、以下はすべて2006年1月2日の六曜を返します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pray 20060102
</span><span class='line'><span class="nv">$ </span>pray 1/2/2006
</span><span class='line'><span class="nv">$ </span>pray 2-Jan-06
</span><span class='line'><span class="nv">$ </span>pray 2-Jan-2006
</span><span class='line'><span class="nv">$ </span>pray 2/Jan/2006
</span><span class='line'><span class="nv">$ </span>pray <span class="s1">&#39;Jan 2 2006&#39;</span>
</span><span class='line'>2006-01-02は旧暦の12月3日<span class="o">(</span>友引<span class="o">)</span>です。昼のdeployはさけましょう。するなら朝晩が吉です。
</span></code></pre></td></tr></table></div></figure>


<p>引数の解析には <a href="https://github.com/tkuchiki/parsetime">tkuchiki/parsetime</a>を使っています。
たいていの日時フォーマットなら解析してくれる便利ライブラリです。</p>

<h2>最後に</h2>

<p>暦法とか天文学とかよくわかってない人間が作ったプログラムなので、結果の保証はできません。
今月の旧暦は<a href="http://keisan.casio.jp/exec/system/1186108192">六曜計算 - 高精度計算サイト</a>の計算結果と一致することは確認していますが、
他の日でも正しい結果を返すかどうかは未検証です。</p>

<p>Go版デプロイ神社を信じてのデプロイして事故っても、責任は負いかねますのでご了承ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl の DateTime 利用上の注意点]]></title>
    <link href="http://shogo82148.github.io/blog/2015/12/09/perl-datetime/"/>
    <updated>2015-12-09T00:00:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/12/09/perl-datetime</id>
    <content type="html"><![CDATA[<p>この投稿は <a href="http://qiita.com/advent-calendar/2015/perl5">Perl 5 Advent Calendar 2015</a> の 9日目の記事です。</p>

<p><a href="http://developer.hatenastaff.com/entry/2015/12/02/050000">Perl の Time::Piece 利用上の注意点</a>
という記事の最後に<a href="https://metacpan.org/release/DateTime">DateTime</a>への言及があったのですが、
DateTimeはDateTimeでいろいろとハマりどころがあるんですよね・・・。
僕も今年いくつか罠にハマりました。ちょうどアドベントカレンダーの季節ですし、この機会にハマりどころをまとめてみることにします。</p>

<!-- More -->


<h2>遅い</h2>

<p>いろんなところで言われていることですが <strong>遅い</strong> です。
試しに代表的な日付を扱うモジュールでベンチをとってみました。
(比較のために時間をとるためのPerlの組み込み関数も入れてあります)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># いろんな形式で今の時間を取得する</span>
</span><span class='line'><span class="k">use</span> <span class="n">Benchmark</span> <span class="sx">qw/ cmpthese /</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Time::</span><span class="n">HiRes</span> <span class="p">();</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Time::</span><span class="n">Moment</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Time::</span><span class="n">Piece</span> <span class="p">();</span>
</span><span class='line'><span class="k">use</span> <span class="n">DateTime</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cmpthese</span> <span class="mi">0</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;time&#39;</span>         <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="nb">time</span> <span class="p">},</span>
</span><span class='line'>  <span class="s">&#39;Time::HiRes&#39;</span>  <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="nn">Time::HiRes::</span><span class="n">time</span> <span class="p">},</span>
</span><span class='line'>    <span class="s">&#39;localtime&#39;</span>    <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="p">()</span> <span class="o">=</span> <span class="nb">localtime</span> <span class="p">},</span>
</span><span class='line'>    <span class="s">&#39;Time::Moment&#39;</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="nn">Time::</span><span class="n">Moment</span><span class="o">-&gt;</span><span class="n">now</span> <span class="p">},</span>
</span><span class='line'>    <span class="s">&#39;Time::Piece&#39;</span>  <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="nn">Time::</span><span class="n">Piece</span><span class="o">-&gt;</span><span class="nb">localtime</span> <span class="p">},</span>
</span><span class='line'>    <span class="s">&#39;DateTime&#39;</span>     <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="n">now</span><span class="p">(</span> <span class="n">time_zone</span><span class="o">=&gt;</span><span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">)</span> <span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">Rate</span> <span class="n">DateTime</span> <span class="nn">Time::</span><span class="n">Piece</span> <span class="nn">Time::</span><span class="n">Moment</span> <span class="nb">localtime</span> <span class="nn">Time::</span><span class="n">HiRes</span>  <span class="nb">time</span>
</span><span class='line'><span class="n">DateTime</span>         <span class="mi">5303</span><span class="o">/</span><span class="n">s</span>       <span class="o">--</span>        <span class="o">-</span><span class="mi">95</span><span class="nv">%</span>         <span class="err">-</span><span class="nv">98%</span>      <span class="err">-</span><span class="nv">99%</span>       <span class="err">-</span><span class="nv">100%</span> <span class="err">-</span><span class="nv">100%</span>
</span><span class='line'><span class="nn">Time::</span><span class="nv">Piece</span>    <span class="mi">103765</span><span class="o">/</span><span class="n">s</span>    <span class="mi">1857</span><span class="nv">%</span>          <span class="err">--</span>         <span class="err">-</span><span class="nv">67%</span>      <span class="err">-</span><span class="nv">71%</span>        <span class="err">-</span><span class="nv">98%</span>  <span class="err">-</span><span class="nv">99%</span>
</span><span class='line'><span class="nn">Time::</span><span class="nv">Moment</span>   <span class="mi">313599</span><span class="o">/</span><span class="n">s</span>    <span class="mi">5814</span><span class="nv">%</span>        <span class="nv">202%</span>           <span class="err">--</span>      <span class="err">-</span><span class="nv">11%</span>        <span class="err">-</span><span class="nv">93%</span>  <span class="err">-</span><span class="nv">98%</span>
</span><span class='line'><span class="nv">localtime</span>      <span class="mi">354215</span><span class="o">/</span><span class="n">s</span>    <span class="mi">6580</span><span class="nv">%</span>        <span class="nv">241%</span>          <span class="nv">13%</span>        <span class="err">--</span>        <span class="err">-</span><span class="nv">92%</span>  <span class="err">-</span><span class="nv">98%</span>
</span><span class='line'><span class="nn">Time::</span><span class="nv">HiRes</span>   <span class="mi">4706723</span><span class="o">/</span><span class="n">s</span>   <span class="mi">88658</span><span class="nv">%</span>       <span class="nv">4436%</span>        <span class="nv">1401%</span>     <span class="nv">1229%</span>          <span class="err">--</span>  <span class="err">-</span><span class="nv">72%</span>
</span><span class='line'><span class="nv">time</span>         <span class="mi">16536995</span><span class="o">/</span><span class="n">s</span>  <span class="mi">311751</span><span class="nv">%</span>      <span class="nv">15837%</span>        <span class="nv">5173%</span>     <span class="nv">4569%</span>        <span class="nv">251%</span>    <span class="err">--</span>
</span></code></pre></td></tr></table></div></figure>


<p>それにしてもTime::Moment速いですね。組み込みのlocaltimeと互角とは。</p>

<h2>演算は破壊的</h2>

<p>add, subtract等の演算を行うメソッドは破壊的です。
例えば、一時間後の日時を求めたい場合に以下のように書くと、
もとの日時が失われてしまいます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># 1時間後の日時を求める間違った例</span>
</span><span class='line'><span class="k">use</span> <span class="n">feature</span> <span class="s">&#39;say&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">DateTime</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$after_an_hour</span> <span class="o">=</span> <span class="nv">$dt</span><span class="o">-&gt;</span><span class="n">add</span><span class="p">(</span><span class="n">hours</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">say</span> <span class="nv">$dt</span><span class="p">;</span> <span class="c1"># 2015-12-09T01:00:00</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$after_an_hour</span><span class="p">;</span> <span class="c1"># 2015-12-09T01:00:00</span>
</span></code></pre></td></tr></table></div></figure>


<p>以下のようにcloneしてから演算することで防ぐことができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># 1時間後の日時を求める間違った例</span>
</span><span class='line'><span class="k">use</span> <span class="n">feature</span> <span class="s">&#39;say&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">DateTime</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$after_an_hour</span> <span class="o">=</span> <span class="nv">$dt</span><span class="o">-&gt;</span><span class="n">clone</span><span class="o">-&gt;</span><span class="n">add</span><span class="p">(</span><span class="n">hours</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">say</span> <span class="nv">$dt</span><span class="p">;</span> <span class="c1"># 2015-12-09T00:00:00</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$after_an_hour</span><span class="p">;</span> <span class="c1"># 2015-12-09T01:00:00</span>
</span></code></pre></td></tr></table></div></figure>


<h2>うるう秒の存在</h2>

<p>さて問題です。
「日本時間2015年7月1日午前9時の1秒前は何時何分何秒でしょう？」</p>

<p>簡単そうな問題ですが、一応DateTimeに計算してもらって確かめてもらいましょう。</p>

<figure class='code'><figcaption><span>datetime.pl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">feature</span> <span class="sx">qw(say)</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">DateTime</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">7</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">hour</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$dt</span><span class="o">-&gt;</span><span class="n">subtract</span><span class="p">(</span><span class="n">seconds</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを現時点での最新バージョンであるDateTime-1.21を使って実行してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>perl datetime.pl
</span><span class='line'>2015-07-01T08:59:60
</span></code></pre></td></tr></table></div></figure>


<p>はい、正解は <strong>「8時59分60秒」</strong> です。
「60秒はおかしい。8時59分59秒では？？？」という声が聞こえてきそうですが、60秒が正解です。
今年の7月1日は<a href="http://gigazine.net/news/20150701-leap-second-insert/">3年ぶりにうるう秒が挿入された日</a>でした。
そのため <strong>通常は存在しない60秒がこの日だけ存在します。</strong>
うるう秒についてはWikipediaの<a href="https://ja.wikipedia.org/wiki/%E9%96%8F%E7%A7%92">閏秒</a>の項目どうぞ。
インフラを担当されているかたは対応に苦労したかたも多いのではないでしょうか。</p>

<p>うるう秒は存在だけでも厄介ですが、さらに厄介なことに <strong>うるう秒調整のタイミングは実施される半年前になるまでわかりません</strong> 。
次調整が入るとすれば2016年7月1日ですが、2015年の現時点では調整が入るのか入らないのか確かなことは言えません(今までの傾向からないとは思いますが)。
事前に分からないものに対してDateTimeがどう対処しているかというと、<strong>うるう秒の調整が行われることがわかった時点でバージョンアップして対応</strong> しています。
そのため、2015年7月1日のうるう秒の存在を知らないバージョン(具体的には1.17以前)で先ほどのコードを実行すると、
最新版とは異なった結果が帰ってきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cpanm DateTime@1.17
</span><span class='line'><span class="nv">$ </span>perl datetime.pl
</span><span class='line'>2015-07-01T08:59:59
</span></code></pre></td></tr></table></div></figure>


<p>さて、うるう秒を正確に扱いたい場合は便利な機能ですが、
DateTimeモジュール以外のプログラムがうるう秒を正しく扱えるとは限らないので無視したいケースも多いと思います。
パッと思いつくのは以下のような対応でしょうか・・・。</p>

<ul>
<li>タイムゾーンに <code>floating</code> を指定する

<ul>
<li>「タイムゾーン情報を持っていない」ことを表す特殊なタイムゾーンです</li>
<li>うるう秒の調整のようなタイムゾーン情報が必要な機能はすべて無効になります</li>
<li>タイムゾーンを扱えるのがDateTimeの利点だったのに・・・</li>
</ul>
</li>
<li>うるう秒に関する定義を削除した自前ビルドを用意する

<ul>
<li>DateTimeのレポジトリに<a href="https://github.com/autarch/DateTime.pm/blob/master/leaptab.txt">うるう秒の挿入タイミング一覧</a>が定義されているので、これを削除した自前ビルドを用意する方法</li>
<li>なお、この一覧はビルド時にXSのコードの一部として組み込まれるようなので、ランタイムに何とかすることはできない模様</li>
</ul>
</li>
<li>一度DateTimeをインストールしたら絶対にバージョンアップを行わない。インストールした日時よりも半年以上未来の日時だけ扱う

<ul>
<li>通常半年前にうるう秒の調整は決定されるので、DateTimeはリリース後半年以上未来のうるう秒は知りません</li>
<li>そのため、半年以上未来の日時を扱う限りはうるう秒とは無縁でいられます</li>
</ul>
</li>
</ul>


<p>どれもBK臭溢れる対応なので、もっとスマートな対応方法をご存知のかたはご教授いただけると幸いです。</p>

<h2>ある日からある日までの日数を知りたい</h2>

<p>DateTimeは演算子オーバーロードされているため、通常の数値を同じように引き算が可能です。
引き算を使ったほうが手軽にできるからと以下のように書いてしまうとハマります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># 日数計算の間違った例</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt1</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">25</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt2</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dur</span> <span class="o">=</span> <span class="nv">$dt1</span> <span class="o">-</span> <span class="nv">$dt2</span><span class="p">;</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$dur</span><span class="o">-&gt;</span><span class="n">in_units</span><span class="p">(</span><span class="s">&#39;days&#39;</span><span class="p">);</span> <span class="c1"># 16</span>
</span></code></pre></td></tr></table></div></figure>


<p>一見動いているように見えますが、期間が一ヶ月を超えるような場合に間違った結果を返します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># 日数計算の間違った例</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt1</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">25</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt2</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">11</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dur</span> <span class="o">=</span> <span class="nv">$dt1</span> <span class="o">-</span> <span class="nv">$dt2</span><span class="p">;</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$dur</span><span class="o">-&gt;</span><span class="n">in_units</span><span class="p">(</span><span class="s">&#39;days&#39;</span><span class="p">);</span> <span class="c1"># 16</span>
</span></code></pre></td></tr></table></div></figure>


<p>引き算で帰ってくるDateTime::Durationオブジェクトは「1ヶ月と16日」という情報を持っているのですが、
「1ヶ月」の日数が月によってことなるため計算ができないのです。
以下のように差分を求める時点で日数を計算するように伝えるのが正しいやり方です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># 正しいやりかた</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt1</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">25</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt2</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">11</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dur</span> <span class="o">=</span> <span class="nv">$dt1</span><span class="o">-&gt;</span><span class="n">delta_days</span><span class="p">(</span><span class="nv">$dt2</span><span class="p">);</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$dur</span><span class="o">-&gt;</span><span class="n">in_units</span><span class="p">(</span><span class="s">&#39;days&#39;</span><span class="p">);</span> <span class="c1"># 46</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ある日時からある日時までの秒数を知りたい</h2>

<p>日数がわかったところで、次は秒数を求めてみましょう。
これも演算子オーバーロードを使うとハマります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># 秒数計算の間違った例</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt1</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt2</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span>  <span class="mi">9</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dur</span> <span class="o">=</span> <span class="nv">$dt1</span><span class="o">-</span><span class="nv">$dt2</span><span class="p">;</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$dur</span><span class="o">-&gt;</span><span class="n">in_units</span><span class="p">(</span><span class="s">&#39;seconds&#39;</span><span class="p">);</span> <span class="c1"># 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>$durには「1日」という情報が入っているはずなので、普通に考えるとこれから秒数は求められそうです。
1分は60秒で、1時間は60分で、1日は24時間なので、「1日=60×60×24秒」ですよね。
なぜ求められないのでしょう？</p>

<p>・・・そう、<strong>うるう秒</strong> です。
うるう秒が存在するため、1分は59秒の場合もあれば、61秒の場合もあります。
日数を求めるときと同じように、差分を求める時点で秒数の計算を行うように伝えるとうまくいきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># 正しいやりかた</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt1</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt2</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span>  <span class="mi">9</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dur</span> <span class="o">=</span> <span class="nv">$dt1</span><span class="o">-&gt;</span><span class="n">subtract_datetime_absolute</span><span class="p">(</span><span class="nv">$dt2</span><span class="p">);</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$dur</span><span class="o">-&gt;</span><span class="n">in_units</span><span class="p">(</span><span class="s">&#39;seconds&#39;</span><span class="p">);</span> <span class="c1"># 86400</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに今年はうるう秒の挿入があったので、 <strong>DateTimeの最新版で今年の秒数を計算すると 365×24×60×60秒よりも1秒だけ長くなります</strong> 。
そして今年のうるう秒の挿入を知らない <strong>DateTime1.17では365×24×60×60秒</strong>が帰ってきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$dt1</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2016</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt2</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dur</span> <span class="o">=</span> <span class="nv">$dt1</span><span class="o">-&gt;</span><span class="n">subtract_datetime_absolute</span><span class="p">(</span><span class="nv">$dt2</span><span class="p">);</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$dur</span><span class="o">-&gt;</span><span class="n">in_units</span><span class="p">(</span><span class="s">&#39;seconds&#39;</span><span class="p">);</span> <span class="c1"># 31536001 or 31536000 (DateTimeのバージョンによって異なります)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>epoch</code>は1970年1月1日午前0時(UTC)からの経過秒数を返すメソッドですが、
これは実際の経過時間ではなく形式的な経過秒数(つまりうるう秒を考慮しない)を返します。
そのため、以下のように秒数を求めるとどのバージョンでも同じ結果が帰ってくるはずです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$dt1</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2016</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt2</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$dt1</span><span class="o">-&gt;</span><span class="n">epoch</span><span class="p">()</span> <span class="o">-</span> <span class="nv">$dt2</span><span class="o">-&gt;</span><span class="n">epoch</span><span class="p">();</span> <span class="c1"># 31536000</span>
</span></code></pre></td></tr></table></div></figure>


<p>もうDateTimeなんか使うのやめて<code>epoch</code>使おうぜ！！
(もちろん実際の経過時間はうるう秒の+1があるのが正しいので、ケースバイケースですが)</p>

<h2>まとめ</h2>

<p>DateTimeは日時をしっかり扱ってくれる素晴らしいモジュールです。
きっと <strong>あなたが思っている以上に日時を正確に厳密に扱ってくれます</strong> 。
そこまで厳密にやるか・・・というところまでしっかり扱ってくれるので、
日時計算に潜んだ様々な闇に触れることになるでしょう。
使う側もそれらのことについてしっかりと理解しておく必要があります。</p>

<p>まあ、具体的に言うと <strong>うるう秒</strong> とか <strong>うるう秒</strong> とかですね！
廃止論とかありましたけど、<a href="http://internet.watch.impress.co.jp/docs/news/20151120_731707.html">とりあえず2023年までは調整がはいる</a>そうです・・・。</p>

<p>他にもいろいろ罠がありそう・・・知っているかたがいれば教えて下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go言語でGraceful Restartをするときに取りこぼしを少なくする]]></title>
    <link href="http://shogo82148.github.io/blog/2015/11/23/golang-graceful-restart-2nd/"/>
    <updated>2015-11-23T20:51:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/11/23/golang-graceful-restart-2nd</id>
    <content type="html"><![CDATA[<p>少し前に<a href="https://github.com/kazuho/Starlet">Starlet</a>にGraceful Restartが時たま上手く動かない問題を修正する<a href="https://github.com/kazuho/Starlet/pull/21">pullreq</a>を投げました。
原因は割り込みハンドラ内でexitを呼んでいたからでした。
「割り込みハンドラ内ではフラグを建てるだけ」
「メインのプログラム内でそのフラグを見て分岐する」という原則があるのですが、それを守るのは難しいということですね。
(しかし新たな問題を産んでしまい<a href="https://github.com/kazuho/Starlet/pull/23">revertされてしまいましたが・・・</a>
まあ修正後のコードも考え方は一緒です。割り込みホント難しい・・・)</p>

<p>このpullreqを取り込んでもらうときに再現実験をやってみたのですが、
Goでもちゃんと動くのかな？と気になったので
<a href="http://shogo82148.github.io/blog/2015/05/03/golang-graceful-restart/">Go言語でGraceful Restartをする</a>で紹介した
プログラムに同じテストをやってみました。</p>

<!-- More -->


<h2>mannersでテストしてみる</h2>

<p>前回の記事では<a href="https://github.com/braintree/manners">manners</a>と<a href="https://github.com/lestrrat/go-server-starter">go-server-starter</a>の
組み合わせが良さそうとの結論になったので、この組み合わせでテストしてみます。
以下テストに使用したコードです。
(今回の内容とは直接関係は無いですが、go-server-starterに変更が入ってFallbackのやり方が前回から少し変わってます)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>        <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>        <span class="s">&quot;log&quot;</span>
</span><span class='line'>        <span class="s">&quot;net&quot;</span>
</span><span class='line'>        <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>        <span class="s">&quot;os&quot;</span>
</span><span class='line'>        <span class="s">&quot;os/signal&quot;</span>
</span><span class='line'>        <span class="s">&quot;syscall&quot;</span>
</span><span class='line'>        <span class="s">&quot;time&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="s">&quot;github.com/braintree/manners&quot;</span>
</span><span class='line'>        <span class="s">&quot;github.com/lestrrat/go-server-starter/listener&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">now</span> <span class="p">=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;start pid %d\n&quot;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">signal_chan</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">signal</span><span class="p">.</span><span class="nx">Notify</span><span class="p">(</span><span class="nx">signal_chan</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span><span class='line'>        <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">s</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">signal_chan</span>
</span><span class='line'>                        <span class="k">if</span> <span class="nx">s</span> <span class="o">==</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span> <span class="p">{</span>
</span><span class='line'>                                <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;SIGTERM!!!!\n&quot;</span><span class="p">)</span>
</span><span class='line'>                                <span class="nx">manners</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">listeners</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ListenAll</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ErrNoListeningTarget</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">l</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listener</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ErrNoListeningTarget</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// Fallback if not running under Server::Starter</span>
</span><span class='line'>                <span class="nx">l</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listen</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="s">&quot;:8080&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nb">panic</span><span class="p">(</span><span class="s">&quot;Failed to listen to port 8080&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">l</span> <span class="p">=</span> <span class="nx">listeners</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">manners</span><span class="p">.</span><span class="nx">Serve</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span> <span class="nx">newHandler</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">newHandler</span><span class="p">()</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">mux</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">NewServeMux</span><span class="p">()</span>
</span><span class='line'>        <span class="nx">mux</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span>
</span><span class='line'>                        <span class="nx">w</span><span class="p">,</span>
</span><span class='line'>                        <span class="s">&quot;from pid %d.\n&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">(),</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">mux</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>1秒毎にgraceful restartを行いながら負荷をかけます。
以下のコマンドを別々のターミナルから実行します。
<code>go run main.go</code>だと自分で書いたプログラムがシグナルを受け取れなくなってしまうので、
<code>go build main.go</code>とコンパイルしてから実行するところがポイントです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>start_server --port 8080 --pid app.pid -- ./main
</span><span class='line'><span class="nv">$ </span><span class="k">while </span><span class="nb">true</span>; <span class="k">do </span><span class="nb">kill</span> -HUP <span class="sb">`</span>cat app.pid<span class="sb">`</span>; sleep 1; <span class="k">done</span>
</span><span class='line'><span class="nv">$ </span>ab -r -n 1000000 -c 10 http://localhost:8080/
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://gist.github.com/shogo82148/a1524f31292202ec34f3#file-manners">mannersを使った場合の実験結果</a>へのリンクを貼っておきます。
「Failed requests:        122」となっており、残念ながら取りこぼしが発生してしまいました。
負荷をかけた時間は72.437秒なので、70回ほどリスタートをかけたことになります。
github-flowを採用しているようなところだと毎日数回デプロイをするということも珍しくないので、
1〜2ヶ月も運用していれば一度くらいはこの現象に遭遇することになります(秒間1万リクエストさばく必要のあるようなサービスの場合ですが)。
ちょっと気になりますね。</p>

<h2>自分で書いてみた</h2>

<p>mannersの改造、難しそうだったので、自分で書いてみました。</p>

<ul>
<li>https://github.com/shogo82148/go-gracedown</li>
</ul>


<p>mannersと全く同じインタフェースなので、s/manners/gracedown/するだけです。
これを使って実験してみた結果がこちら https://gist.github.com/shogo82148/a1524f31292202ec34f3#file-gracedown
「Failed requests:        0」やったね！</p>

<h2>その他メモ</h2>

<p>これ書くのに色々しらべたのでメモとして残しておきます。</p>

<h3>acceptの直後にcloseされた場合の挙動について</h3>

<p>Starletで起こっていた不具合の原因は、
acceptから処理が帰ってきてからcanExitフラグを落とすまでにわずかな期間があるのが問題でした。
この期間にシグナルを受け取ると間違えてサーバを終了させてしまいます。
GoでもacceptしてからステートがStateNewになるまでの間に若干の時間差があるので、
ここが問題にならないか少し気になっていました。</p>

<p>net/httpの処理を追ってみると、acceptとStateNewは<code>Serve(net.Listener)</code>を実行したのと同じgoroutineで実行されているようです。
したがって、サーバシャットダウンの判定も<code>Serve(net.Listener)</code>と同じgoroutineで行えば、
誤ってacceptしてからステートがStateNewになるまでの間にサーバをシャットダウンしてしまうことは防げるということがわかりました。</p>

<h3>Acceptがブロックしているのを解除する方法について</h3>

<p><a href="http://qiita.com/hiratara/items/0f0b6103a0dc9280cea9">UnixListener.Closeでソケットファイルが消えて困っている</a> という記事に</p>

<blockquote><p>POSIX では Close() を呼んだからといって Accept() が制御を戻してくれる保証はないといことでしょうか。</p></blockquote>

<p>という一文が書いてありました。</p>

<p>これについて実際はどうなんだろうと調べてみたところ<a href="net.Listener">https://golang.org/pkg/net/#Listener</a>のコメントに</p>

<blockquote><p>Close closes the listener.
Any blocked Accept operations will be unblocked and return errors.</p></blockquote>

<p>とありました。
このコメントを読む限りGo言語では「<code>Close()</code> を呼んだら<code>Accept()</code>が制御を戻す」と考えて良さそうです。
POSIXでどう規定されているかまでは調査しきれていませんが、
たとえどう規定されていようとも互換性を保つために裏で色々やってくれていると信じています。</p>

<p>この記事の主題である「UnixListener.Closeでソケットファイルが消えて困っている」件についても調べてはみたのですが、
結論は出ませんでした・・・。
たしかにソケットファイルは使い終わったらunlinkすることが推奨されているということがわかったくらいです。
nameが「@」で始まっていると「abstract socket address」と見なされて削除されなくなるから、「@」をテキトウにつけるとか・・・？</p>

<h3>keep-aliveの挙動について</h3>

<p>mannersはKeep-Aliveなコネクションがあった場合でも、それがIdle状態であればシャットダウンしてしまいます。
それに対してgo-gracedownは全部のコネクションがClosedになるまでまちます。
終了処理に入った段階でKeep-Aliveは無効にしているので、
go-gracedown側で特に操作しなくてもnet/httpがそのうちクローズしてくれるだろうとの考えからです。</p>

<p>Keep-Aliveはクライアントからリクエストがないと切断できない(レスポンスに「Connection: Close」ヘッダを含める必要があるため)ので
リクエストがないと永遠にシャットダウンできません。
それでは困るので一応タイムアウトも入れてあります。</p>

<p>この挙動のおかげで<a href="https://github.com/rakyll/boom">boom</a>(http benchで検索したら一番上にきた)でのベンチでも
<a href="https://gist.github.com/shogo82148/a1524f31292202ec34f3#file-gracedown-boom">エラー無しで処理できています</a>。
ちなみにApache Benchでも-kオプションでKeep-Aliveを有効にできるのですが、
HTTP/1.0だと「Connection: Close」を送る方法が使えないので、<a href="https://gist.github.com/shogo82148/a1524f31292202ec34f3#file-gracedown-keep-alive">残念ながらエラーが出てしまいました</a>。</p>

<h2>まとめ</h2>

<ul>
<li>実験の結果<a href="https://github.com/braintree/manners">manners</a>はときどきGraceful Shutdownに失敗する場合があることがわかった</li>
<li><a href="https://github.com/shogo82148/go-gracedown">go-gracedown</a>というのを書いてみた

<ul>
<li>今回行った再現実験ではすべてのリクエストを正常に処理できました</li>
</ul>
</li>
<li>Graceful Restartむずかしい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goオールスターズで登壇してきました]]></title>
    <link href="http://shogo82148.github.io/blog/2015/10/14/go-all-stars/"/>
    <updated>2015-10-14T08:11:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/10/14/go-all-stars</id>
    <content type="html"><![CDATA[<p>先週の日曜日に登壇してきました。</p>

<iframe src="https://www.slideshare.net/slideshow/embed_code/key/gC0o0V8Vx7tI9z" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/shogo82148/go-go-53787565" title="過去に自作したGoプロダクトの紹介 - Goオールスターズ" target="_blank">過去に自作したGoプロダクトの紹介 - Goオールスターズ</a> </strong> from <strong><a href="http://www.slideshare.net/shogo82148" target="_blank">Shogo Ichinose</a></strong> </div></p>

<ul>
<li><a href="http://www.slideshare.net/shogo82148/go-go-53787565">過去に自作したGoプロダクトの紹介 - Goオールスタース</a></li>
</ul>


<!-- More -->


<p>発表の10日くらい前にsongmuさんがKAYACのIRCに現われオールスターを募集に来てくださったものの、
弊社スターの都合がつかないため僕が代わりに発表してきました。</p>

<p>KAYACではGoプロダクトたくさん動いていますが説明は作者にお任せしたほうがいいかなと思い、
自作のGoプロダクトをメインに発表してきました。</p>

<ul>
<li><a href="https://github.com/shogo82148/go-rgba4444">go-rgba4444</a></li>
<li><a href="https://github.com/shogo82148/androidbinary">androidbinary</a> - <a href="http://shogo82148.github.io/blog/2014/05/07/androidbinary/">Androidのバイナリファイルを解析するgoのライブラリ</a></li>
<li><a href="https://github.com/shogo82148/go-sql-proxy">go-sql-proxy</a> - <a href="http://shogo82148.github.io/blog/2015/05/13/golang-sql-proxy/">Go言語でSQLのトレースをする</a></li>
<li><a href="https://github.com/shogo82148/go-dithering">go-dithering</a> - <a href="http://shogo82148.github.io/blog/2015/04/25/quantize-image-in-golang/">Go言語で画像の減色を行う</a></li>
<li><a href="https://github.com/shogo82148/go-prove">go-prove</a>/<a href="https://github.com/shogo82148/go-tap">go-tap</a> - <a href="http://shogo82148.github.io/blog/2015/09/19/faster-perl-test-with-go-lang/">Go言語でPerlのテストを早くする</a></li>
<li><a href="https://github.com/shogo82148/go-webtail">go-webtail</a>/<a href="https://github.com/shogo82148/go-tail">go-webtail</a> - <a href="http://shogo82148.github.io/blog/2015/06/21/go-webtail/">Go-webtailってのを書いた</a></li>
</ul>


<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">go-prove、CPANに上げればいいんじゃない？w <a href="https://twitter.com/hashtag/eventdots?src=hash">#eventdots</a></p>&mdash; songmu (@songmu) <a href="https://twitter.com/songmu/status/653100524296736768">October 11, 2015</a></blockquote>


<script async src="http://shogo82148.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Perl Archive Network とはいったい・・・</p>

<p>KAYACではいろんなGoプロダクトが動いているのでこちらもどうぞ。</p>

<ul>
<li><a href="https://github.com/kayac/go-katsubushi">go-katsubushi</a> snowﬂake-likeなIDジェネレータ</li>
<li><a href="https://github.com/fujiwara/stretcher">stretcher</a> Consul/Surfと連携したデプロイツール</li>
<li><a href="https://github.com/fujiwara/Rin">rin</a> AWS-S3に出力されたログをRedshiftへインポートするツール</li>
<li><a href="https://github.com/acidlemon/mirage">mirage</a> Dockerを使ったテスト用環境構築</li>
<li><a href="https://github.com/kayac/alphawing">alphawing</a> Android/iOSアプリの社内配信ツール</li>
</ul>


<p>スライドにちょこちょこ修正いれててGopherくん人形もらうの忘れてたけどもらっておけばよかった。</p>

<p>他の人の発表はこちら。</p>

<ul>
<li><a href="http://eventdots.jp/event/571126">Goオールスターズ</a></li>
<li><a href="http://togetter.com/li/885585">GoオールスターズToggetterまとめ</a></li>
<li><a href="http://www.songmu.jp/riji/entry/2015-10-12-go-all-stars.html">Goオールスターズで登壇してきました - おそらくはそれさえも平凡な日々</a></li>
<li><a href="http://ymotongpoo.hatenablog.com/entry/2015/10/13/104247">Goオールスターズでpackage managementについて話してきました - YAMAGUCHI::weblog</a></li>
<li><a href="http://www.slideshare.net/takuyaueda967/go-53785408">Goだけでモバイルアプリを作ろう</a></li>
<li><a href="http://bokko.hatenablog.com/entry/2015/10/12/151641">Goオールスターズ - 考える人、コードを書く人</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AnySan::Provider::Slackとape-slackを書いた]]></title>
    <link href="http://shogo82148.github.io/blog/2015/09/28/anysan-provider-slack-and-ape-slack/"/>
    <updated>2015-09-28T22:11:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/09/28/anysan-provider-slack-and-ape-slack</id>
    <content type="html"><![CDATA[<p>先週、今のプロジェクトでのメインのコミュニケーションツールをIRCからSlack切り替えました。
それにともないIRCに済んでいたボットたちもお引越しする必要があったので、
ボットとSlackをつなぐためのライブラリを書きました。</p>

<ul>
<li><a href="https://metacpan.org/release/AnySan-Provider-Slack">AnySan::Provider::Slack</a></li>
<li><a href="https://github.com/shogo82148/ape-slack">ape-slack</a></li>
</ul>


<p>Perlとgoのボットが住んでいるのでそれぞれの言語で実装してあります。</p>

<!-- More -->


<h2>AnySan::Provider::Slack</h2>

<p>Perlの<a href="https://metacpan.org/pod/AnySan">AnySan</a>用のモジュールです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">AnySan</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">AnySan::Provider::</span><span class="n">Slack</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$slack</span> <span class="o">=</span> <span class="n">slack</span>
</span><span class='line'>    <span class="n">token</span> <span class="o">=&gt;</span> <span class="s">&#39;YOUR SLACK API TOKEN&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">channels</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;general&#39;</span> <span class="o">=&gt;</span> <span class="p">{},</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="nv">$slack</span><span class="o">-&gt;</span><span class="n">send_message</span><span class="p">(</span><span class="s">&#39;slack message&#39;</span><span class="p">,</span> <span class="n">channel</span> <span class="o">=&gt;</span> <span class="s">&#39;C024BE91L&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">AnySan</span><span class="o">-&gt;</span><span class="n">run</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>AnySanを使うだけでも便利なんですが、
今のプロジェクトではAnySanを対話形式で使いやすくするように<a href="http://www.songmu.jp/riji/entry/2013-09-09-unazusan.html">UnazuSan</a>を使っています。
UnazuSanはIRC前提で書かれていて、AnySan::Provider::Slackをインストールしてもそのままは使えません。</p>

<p>UnazuSanを置き換えるもの面倒なので、イベントの名前を書き換えて投げ直すことで、
SlackのメッセージをIRCに見せかける方法をとっています。
また<a href="https://beatsync.net/main/log20150926.html">SlackのOutgoing Webhookで@つきのmentionを捕まえる</a>にもあるように、
Slackのメンションは &lt;@U08DGJVJ7&gt;のような形式になってしまい、UnazuSanは自分へのメッセージとして扱ってくれません。
これをUnazuSanが解釈できる形式に置き換えるのがポイントです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="mf">5.010</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">Encode</span> <span class="sx">qw/encode_utf8/</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">UnazuSan</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">AnySan</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">AnySan::Provider::</span><span class="n">Slack</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$unazu_san</span> <span class="o">=</span> <span class="n">UnazuSan</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span>
</span><span class='line'>    <span class="n">host</span>       <span class="o">=&gt;</span> <span class="s">&#39;example.com&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">password</span>   <span class="o">=&gt;</span> <span class="s">&#39;xxxxxxxxxxx&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">enable_ssl</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">join_channels</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="sx">qw/arcade/</span><span class="p">],</span>
</span><span class='line'>    <span class="n">respond_all</span>   <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$slack</span> <span class="o">=</span> <span class="n">slack</span><span class="p">(</span>
</span><span class='line'>    <span class="n">token</span>    <span class="o">=&gt;</span> <span class="s">&#39;YOUR SLACK TOKEN&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">channels</span> <span class="o">=&gt;</span> <span class="p">{},</span>
</span><span class='line'>    <span class="n">as_user</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">AnySan</span><span class="o">-&gt;</span><span class="n">register_listener</span><span class="p">(</span>
</span><span class='line'>    <span class="n">slack</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">event</span> <span class="o">=&gt;</span> <span class="s">&#39;message&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">cb</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>            <span class="k">my</span> <span class="nv">$receive</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>            <span class="c1"># fake irc privmsg</span>
</span><span class='line'>            <span class="nv">$receive</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">event</span><span class="p">}</span> <span class="o">=</span> <span class="s">&#39;privmsg&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$receive</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">message</span><span class="p">}</span> <span class="o">=~</span> <span class="sr">s/&lt;\@xxxxx&gt;:/unazusan:/</span><span class="p">;</span>
</span><span class='line'>            <span class="n">AnySan</span><span class="o">-&gt;</span><span class="n">broadcast_message</span><span class="p">(</span><span class="nv">$receive</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$unazu_san</span><span class="o">-&gt;</span><span class="n">on_command</span><span class="p">(</span>
</span><span class='line'>    <span class="n">help</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="p">(</span><span class="nv">$receive</span><span class="p">,</span> <span class="nv">@args</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$receive</span><span class="o">-&gt;</span><span class="n">reply</span><span class="p">(</span><span class="s">&#39;help &#39;</span><span class="o">.</span> <span class="p">(</span><span class="nv">$args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">||</span> <span class="s">&#39;&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$unazu_san</span><span class="o">-&gt;</span><span class="n">run</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ape-slack</h2>

<p><a href="https://github.com/m0t0k1ch1/ape">ape</a>のSlack対応版です。
SlackRTM APIを使ってイベントを受け取ります。</p>

<p>GoはWebSocketも比較的カンタンに使えるので、実はape-slackを使わなくても以下のようなコードだけでSlackRTM APIを使えてしまいます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/url&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;golang.org/x/net/websocket&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">resp</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">PostForm</span><span class="p">(</span><span class="s">&quot;https://slack.com/api/rtm.start&quot;</span><span class="p">,</span> <span class="nx">url</span><span class="p">.</span><span class="nx">Values</span><span class="p">{</span><span class="s">&quot;token&quot;</span><span class="p">:</span> <span class="p">{</span><span class="s">&quot;YOUR SLACK TOKEN&quot;</span><span class="p">}})</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">r</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Url</span>   <span class="kt">string</span> <span class="s">`json:&quot;url&quot;`</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">json</span><span class="p">.</span><span class="nx">NewDecoder</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">).</span><span class="nx">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">r</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">ws</span> <span class="o">:=</span> <span class="nx">websocket</span><span class="p">.</span><span class="nx">Dial</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">Url</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="s">&quot;https://slack.com/&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">data</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}</span>
</span><span class='line'>    <span class="nx">websocket</span><span class="p">.</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">Receive</span><span class="p">(</span><span class="nx">ws</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Outgoing Webhookを使うとSlackから呼んでもらえるようセキュリティの設定が必要で面倒ですが、
WebSocketならインターネッツに繋がった環境なら大抵そのままつながります。
Outgoing WebhookならチャンネルにJOINしていなくてもイベントを受け取れたりして便利ですが、
ちょっとしたボットならこちらの方がお手軽ですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISUCON5の予選に参加して惨敗してきた]]></title>
    <link href="http://shogo82148.github.io/blog/2015/09/28/isucon5-qualifying/"/>
    <updated>2015-09-28T06:16:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/09/28/isucon5-qualifying</id>
    <content type="html"><![CDATA[<p>こんにちは、チームぽわわ4 feat. ネコトーストラボです。
<a href="http://isucon.net/archives/45166636.html">ISUCON5</a>の予選に参加してきて見事に惨敗してきました。</p>

<!-- More -->


<h2>お題</h2>

<p>「ISUxi」という名前の「高負荷に耐えられるSNSコミュニティサイト」。
日記やコメントの投稿ができて、ホーム画面には「あしあと」「あなたへのコメント」「あなたの友だちの日記エントリ」「あなたの友だちのコメント」が表示されています。
日記にはprivateとpublicの公開範囲があって、これの出し分けも必要です。
やることおおい・・・。</p>

<h2>やったこと</h2>

<h3>〜開始</h3>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">時間余裕でしょと思ったら全くそんなことなかった</p>&mdash; ひさいち (@hisaichi5518) <a href="https://twitter.com/hisaichi5518/status/647559828068413442">September 25, 2015</a></blockquote>


<script async src="http://shogo82148.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">時間余裕でしょと思ったら全くそんなことなかった</p>&mdash; Ichinose Shogo (@shogo82148) <a href="https://twitter.com/shogo82148/status/647560930629279744">September 25, 2015</a></blockquote>


<script async src="http://shogo82148.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">5時間で決着をつける <a href="https://t.co/AbnnSyHuZ8">https://t.co/AbnnSyHuZ8</a></p>&mdash; Ichinose Shogo (@shogo82148) <a href="https://twitter.com/shogo82148/status/647574277529583616">September 26, 2015</a></blockquote>


<script async src="http://shogo82148.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">バッテリ残量との戦いがすでに始まっている <a href="https://twitter.com/hashtag/ISUCON?src=hash">#ISUCON</a> <a href="https://twitter.com/hashtag/%E3%82%A2%E3%83%80%E3%83%97%E3%82%BF%E5%BF%98%E3%82%8C%E3%81%9F?src=hash">#アダプタ忘れた</a></p>&mdash; Ichinose Shogo (@shogo82148) <a href="https://twitter.com/shogo82148/status/647579466898608128">September 26, 2015</a></blockquote>


<script async src="http://shogo82148.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h3>〜午前中</h3>

<p>ソースコードをgit管理下に置くとか準備したあと、ソースコードを眺めてスキーマやクエリの改善ができないかを見てました。
主にインデックスに不足は無いか、ループクエリは無いかを見てみました。
インデックスに関しては必要そうなところにはすでに貼ってあって、これ以上することなさそうな感じ。
ループクエリに関しては、ホーム画面の「あなたの友だちのコメント」の部分で、エントリ情報や、関連するユーザの情報を取ってくるところで見つけたので、JOINに書き換えられないか着手。
しかし、実行計画が大きく変わって極端に遅くなってしまい、なんだこれーってなってました。</p>

<h3>〜14時</h3>

<p>SQLじゃ無理だってことで、Redisに切り替え。
エントリやコメントをRedisのリストで管理して、
エントリやコメントを投稿したときに友だち全員に配信する形式に変更しました。</p>

<p>ある程度書けてこれで動くのでは！ってとこまで書けたんだけど、
「投稿した時に友だちに配信」形式だと、友だち関係があとから変化するケースに対応できないという気がつく。
いろいろ考えてみたものの、友だち関係が変化した場合は元の実装を使うしか思いつきませんでした。</p>

<p>そしてここでバッテリー切れ・・・</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">あと3%…(ヽ´ω`)</p>&mdash; Ichinose Shogo (@shogo82148) <a href="https://twitter.com/shogo82148/status/647648583173275648">September 26, 2015</a></blockquote>


<script async src="http://shogo82148.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h3>〜16時</h3>

<p>アダプタを借りることができて延命しました。ありがとうございます！</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">アダプター貸していただけました。ありがとうございます！m(__)m <a href="https://twitter.com/hashtag/isucon?src=hash">#isucon</a></p>&mdash; Ichinose Shogo (@shogo82148) <a href="https://twitter.com/shogo82148/status/647650705411473409">September 26, 2015</a></blockquote>


<script async src="http://shogo82148.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>コメント部分のキャッシュが一応は動いたので、エントリ部分についてもRedisを使ったキャッシュ化を進めてました。
200位スコアはあがるものの劇的な改善にはならず・・・(ヽ´ω`)</p>

<h3>〜19時</h3>

<p>コメントや日記部分これ以上の改善案を思いつけなかったので、諦めてあしあとの改善に着手。
DATE()関数をGROUP BY句に使っていてインデックスが使えない感じだったので、
カラムにしてインデックスが効くように書き換え。
しかし、ベンチが最後まで通らず、この修正は断念・・・。</p>

<p>ユーザのIDとかニックネームとかは書き換わらないので、
perlのコードにユーザ情報を埋め込んでループクエリを削除みたいな姑息な手段で足掻いたりしましたが、
コメントやエントリの一覧を取ってくるところがボトルネックなのでほとんど効果なしでした。</p>

<h2>まとめ</h2>

<p>忘れ物するし、全くスコア上がらないし、いいとこなしのまま終わってしまいました。
毎回、Redisでの置き換えを頑張るけど元の実装を完全に置き換えることができずそこがボトルネックになって全然スコア上がらない、
というパターンになってしまうので、実装能力を上げていきたい・・・。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[テストでも:ok_maopy:したい人へ]]></title>
    <link href="http://shogo82148.github.io/blog/2015/09/19/ok-macopy/"/>
    <updated>2015-09-19T23:44:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/09/19/ok-macopy</id>
    <content type="html"><![CDATA[<ul>
<li><a href="https://github.com/shogo82148/p5-Acme-OkMacopy">shogo82148/p5-Acme-OkMacopy</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">More</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Acme::</span><span class="n">OkMacopy</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ok_macopy</span> <span class="s">&quot;macopy is cool&quot;</span><span class="p">,</span> <span class="s">&quot;ok_macopy&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">done_testing</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">様子です <a href="http://t.co/sA96GmqKmQ">pic.twitter.com/sA96GmqKmQ</a></p>&mdash; 倫理的unexpected (@mackee_w) <a href="https://twitter.com/mackee_w/status/644463858338295808">September 17, 2015</a></blockquote>


<script async src="http://shogo82148.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><code>:ok_macopy:</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go言語でPerlのテストを早くする]]></title>
    <link href="http://shogo82148.github.io/blog/2015/09/19/faster-perl-test-with-go-lang/"/>
    <updated>2015-09-19T21:49:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/09/19/faster-perl-test-with-go-lang</id>
    <content type="html"><![CDATA[<p><a href="http://shogo82148.github.io/blog/2015/06/20/test-mysqld-multi/">Test::mysqld::Multiというモジュールを書いてみた</a>みたいな涙ぐましい努力により5分で終わるようになったテストですが、
プロジェクトのコードも増えて人も増えた影響で、
テスト時間が約7分まで伸び、テストのキューに10個近く並んで順番待ちさせられるという状況になってしまいした。</p>

<p>この状況を解決すべく <a href="https://github.com/shogo82148/go-prove">go-prove</a> というものを書いてみたので、そのご紹介です。</p>

<h2>proveが遅い理由</h2>

<p>proveがテストの結果を読むところがブロッキングI/Oになっているらしく、そのせいで遅くなっているらしいです。</p>

<ul>
<li><a href="https://github.com/Perl-Toolchain-Gang/Test-Harness/issues/30">Perl-Toolchain-Gang/Test-Harness#30</a></li>
</ul>


<p>実際に<a href="https://github.com/Perl-Toolchain-Gang/Test-Harness/blob/a278e504794c649c61f2c362841eec1a9735a3d0/lib/TAP/Parser/Iterator/Process.pm#L245">結果読んでいるところ</a>はこの辺ですかね。
selectとか使っていてなるべくブロッキングしないような作りにはなっていそうですが、どこかでブロッキングしてしまっているようです。
今のプロジェクトだと32コアのCPUで32並列で動かしてもCPUを100%使い切ることができませんでした。</p>

<h2>Shunme</h2>

<p>ググるとShunmeというプロジェクトでproveの問題を解決しようという試みが行われているようです。</p>

<ul>
<li><a href="http://code-stylistics.net/archives/shunme.html">Shunmeというperl用のテストハーネスモジュールを書き始めました</a></li>
<li><a href="https://github.com/magnolia-k/p5-Shunme">magnolia-k/p5-Shunme</a></li>
</ul>


<p>しかし残念ながらproveのプラグイン機構はサポートしておらず、Formatterの指定オプションもないようです。
今のプロジェクトではプラグインでMySQLを立てたり、JUnitでテスト結果をフォーマットしたりということをしているので、そのままは使えなさそう。
ちょっと改造するにはソースコードの理解が大変そうなので断念。
「(逆に遅くなるときも有ります)」というところも気になりますね・・・。</p>

<h2>go-prove</h2>

<p>いろいろテストの実行方法を調べてはみましたが、どの方法も並行処理に苦労している模様。
テストファイル自体はただのPerlのスクリプトなので、実行して集計する部分は別にPerlにこだわる必要ないのでは？
並行処理といえば今ならGolangでしょ！ってことでproveのGo実装を書いてみました。</p>

<ul>
<li><a href="https://github.com/shogo82148/go-prove">go-prove</a></li>
</ul>


<p>例えば以下のようなテストをかいて、</p>

<figure class='code'><figcaption><span>t/macopy.t</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">More</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ok</span> <span class="s">&quot;macopy&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">done_testing</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>go-proveコマンドと実行すると、JUnit形式でテスト結果が出力されます。</p>

<figure class='code'><figcaption><span>t/macopy.t</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nv">$</span> <span class="nv">go</span><span class="o">-</span><span class="n">prove</span>
</span><span class='line'><span class="mi">2015</span><span class="sr">/09/</span><span class="mi">19</span> <span class="mi">21</span><span class="p">:</span><span class="mi">45</span><span class="p">:</span><span class="mi">44</span> <span class="n">start</span> <span class="n">t</span><span class="o">/</span><span class="n">macopy</span><span class="o">.</span><span class="n">t</span>
</span><span class='line'><span class="mi">2015</span><span class="sr">/09/</span><span class="mi">19</span> <span class="mi">21</span><span class="p">:</span><span class="mi">45</span><span class="p">:</span><span class="mi">44</span> <span class="n">finish</span> <span class="n">t</span><span class="o">/</span><span class="n">macopy</span><span class="o">.</span><span class="n">t</span>
</span><span class='line'><span class="sr">&lt;testsuites&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">testsuite</span> <span class="n">tests</span><span class="o">=</span><span class="s">&quot;1&quot;</span> <span class="n">failures</span><span class="o">=</span><span class="s">&quot;0&quot;</span> <span class="nb">time</span><span class="o">=</span><span class="s">&quot;0.225&quot;</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;t_macopy_t&quot;</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="sr">&lt;properties&gt;&lt;/properties&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="n">testcase</span> <span class="n">classname</span><span class="o">=</span><span class="s">&quot;t_macopy_t&quot;</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="nb">time</span><span class="o">=</span><span class="s">&quot;0.225&quot;</span><span class="o">&gt;</span><span class="sr">&lt;/testcase&gt;</span>
</span><span class='line'>      <span class="sr">&lt;/testsuite&gt;</span>
</span><span class='line'><span class="sr">&lt;/testsuites&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>go-prove -j 32</code>とするとgoroutineを32個生成して、32並列でテストを実行してくれます。
I/Oの処理をGolangのランタイムがよしなにやってくれるので、楽ちんです。</p>

<p>また、今のプロジェクトではApp::Prove::Plugin::MySQLPoolを使っているので、それ相当の機能を<code>go-prove -plugin mysqld</code>で使えるようにしました。
プラグインを有効にするとMySQLサーバを立ち上げて、その接続先情報を<code>GO_PROVE_MYSQLD</code>環境変数に設定してくれます。</p>

<p>実際にプロジェクトのコードで試してみたところ7分かかっていたテストが4分を切るようになりました。
CPUの使用率も100%近くになって、有効活用できているようです。</p>

<h2>まとめ</h2>

<ul>
<li>Perl製のproveは並列実行に弱い</li>
<li>Goで書きなおしてCPUをフル活用できるようになった</li>
</ul>


<p>早くはなるものの、既存のテストコードに手を加える必要があってちょっと怖いかなと思ったので、プロジェクトへの組み込みはやってません。
まあ本番環境で走るものではないので、ある程度動くことが確認できたら置き換えてみたいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PerlからGolangを呼び出す]]></title>
    <link href="http://shogo82148.github.io/blog/2015/08/30/golang-to-perl-xs-converter/"/>
    <updated>2015-08-30T22:52:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/08/30/golang-to-perl-xs-converter</id>
    <content type="html"><![CDATA[<p>GoのコードをPerlから呼び出せるようにする<a href="https://github.com/shogo82148/go2xs">go2xs</a>を書いてみました。</p>

<!-- More -->


<h2>使い方</h2>

<p>Perlから使いたい関数に以下のようにgo2xsで始まるコメントを付けておきます。</p>

<figure class='code'><figcaption><span>hoge</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//go2xs hello</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">hello</span><span class="p">(</span><span class="nx">str</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">&quot;Hello &quot;</span> <span class="o">+</span> <span class="nx">str</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/shogo82148/go2xs">go2xs</a>をgo getして、xsのグルーコードを作成。
その後通常のPerlモジュールと同じ手順でコンパイルします。
Go 1.5から入ったShared Libraryの機能を使っているのでGo 1.5が必要です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>go get https://github.com/shogo82148/go2xs/cli/go2xs
</span><span class='line'>go2xs -name hoge hoge.go
</span><span class='line'>perl Makefile.PL
</span><span class='line'>make
</span></code></pre></td></tr></table></div></figure>


<p>あとは普通に呼び出すだけ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>perl -Mblib -Mhoge -e <span class="s1">&#39;print hoge::hello(&quot;World&quot;)&#39;</span>
</span><span class='line'>Hello World
</span></code></pre></td></tr></table></div></figure>


<h2>制限事項</h2>

<p>今はまだ、整数・浮動小数点型・文字列しか扱えません。</p>

<p>あとGoのShared Libraryを複数回読み込むことができないっぽい？ (ref. https://github.com/golang/go/issues/11100 )
ので、go2xsを使ったコードを二つ以上useすると死にます。</p>

<h2>FFI::Rawを使う方法</h2>

<p>go2xsはGoをShared Libraryとしてコンパイルしているだけなので、go2xsを使わなくても頑張れば呼び出すことができます。
<a href="http://qiita.com/yanolab/items/1e0dd7fd27f19f697285">Golang で Shared Library を出力する。</a>で紹介されているこちらのコードで試してみます。</p>

<figure class='code'><figcaption><span>libgofib.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;C&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//export fib</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">fib</span><span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="p">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">n</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">fib</span><span class="p">(</span><span class="nx">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="nx">fib</span><span class="p">(</span><span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Loaded!!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ビルドしてShared Libraryを作ってみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>build -buildmode<span class="o">=</span>c-shared -o libgofib.so libgofib.go
</span></code></pre></td></tr></table></div></figure>


<p>PerlからShared Libraryを呼び出すには<a href="https://metacpan.org/pod/FFI::Raw">FFI::Raw</a>を使うのがお手軽のようです。</p>

<figure class='code'><figcaption><span>test.pl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">FFI::</span><span class="n">Raw</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$fib</span> <span class="o">=</span> <span class="nn">FFI::</span><span class="n">Raw</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;libfib.so&#39;</span><span class="p">,</span> <span class="s">&#39;fib&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nn">FFI::Raw::</span><span class="n">int</span><span class="p">,</span> <span class="c1"># 戻り値</span>
</span><span class='line'>  <span class="nn">FFI::Raw::</span><span class="n">int</span><span class="p">,</span> <span class="c1"># 引数</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nv">$format</span><span class="o">-&gt;</span><span class="n">call</span><span class="p">(</span><span class="mi">32</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>文字列の受け渡しをしてみる</h2>

<p>FFI::Rawを使った方法はお手軽ですが、文字列の受け渡しをしようとすると色々と面倒です。</p>

<h3>素朴に実装してみる</h3>

<p>Golangの<code>string</code>はPerlでそのまま扱えないので、<code>C.GoString</code>と<code>C.CString</code>を使い一度C言語の文字列形式を経由してから相互変換する必要があります。</p>

<figure class='code'><figcaption><span>libgofmt.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">import</span> <span class="s">&quot;C&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">f</span> <span class="s">&quot;go/format&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//export format</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">format</span><span class="p">(</span><span class="nx">src</span> <span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">char</span><span class="p">)</span> <span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">char</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">gosrc</span> <span class="o">:=</span> <span class="nx">C</span><span class="p">.</span><span class="nx">GoString</span><span class="p">(</span><span class="nx">src</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">dst</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Source</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">gosrc</span><span class="p">))</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">C</span><span class="p">.</span><span class="nx">CString</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">dst</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>test.pl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">FFI::</span><span class="n">Raw</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$format</span> <span class="o">=</span> <span class="nn">FFI::</span><span class="n">Raw</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;libgofmt.so&#39;</span><span class="p">,</span> <span class="s">&#39;format&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nn">FFI::Raw::</span><span class="n">str</span><span class="p">,</span> <span class="c1"># 戻り値</span>
</span><span class='line'>  <span class="nn">FFI::Raw::</span><span class="n">str</span><span class="p">,</span>  <span class="c1"># 引数1</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nv">$format</span><span class="o">-&gt;</span><span class="n">call</span><span class="p">(</span><span class="o">&lt;&lt;</span><span class="s">&quot;EOF&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">package</span> <span class="n">main</span>
</span><span class='line'><span class="nb">import</span>   <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="n">func</span> <span class="n">main</span><span class="p">(</span>   <span class="p">)</span>   <span class="p">{</span>
</span><span class='line'><span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;hogehoge&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="n">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>なんとなく動いてよさ気な感じがしますが、
実はこのコード、メモリーリークしてます。
<code>C.CString</code>で作ったC言語の文字列はGolangの管理から外れるのでGCで回収されません。
そのため、どこかで<code>free</code>を実行して開放する必要があります。</p>

<h3>strcpyで頑張る</h3>

<p>Golang側でバッファを確保するとPerlに戻った時にバッファ開放ができないので、
Perl側で結果を格納するバッファを確保してみます。</p>

<figure class='code'><figcaption><span>libgofmt.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cm">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;C&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">f</span> <span class="s">&quot;go/format&quot;</span>
</span><span class='line'>  <span class="s">&quot;unsafe&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//export format</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">format</span><span class="p">(</span><span class="nx">dst</span> <span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">char</span><span class="p">,</span> <span class="nx">src</span> <span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">char</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">gosrc</span> <span class="o">:=</span> <span class="nx">C</span><span class="p">.</span><span class="nx">GoString</span><span class="p">(</span><span class="nx">src</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">godst</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Source</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">gosrc</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">cs</span> <span class="o">:=</span> <span class="nx">C</span><span class="p">.</span><span class="nx">CString</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">godst</span><span class="p">))</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">C</span><span class="p">.</span><span class="nx">free</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">(</span><span class="nx">cs</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">C</span><span class="p">.</span><span class="nx">strcpy</span><span class="p">(</span><span class="nx">dst</span><span class="p">,</span> <span class="nx">cs</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>test.pl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">FFI::</span><span class="n">Raw</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$format</span> <span class="o">=</span> <span class="nn">FFI::</span><span class="n">Raw</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span>
</span><span class='line'>  <span class="s">&#39;libgofmt.so&#39;</span><span class="p">,</span> <span class="s">&#39;format&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nn">FFI::Raw::</span><span class="n">void</span><span class="p">,</span> <span class="c1"># 戻り値</span>
</span><span class='line'>  <span class="nn">FFI::Raw::</span><span class="n">str</span><span class="p">,</span>
</span><span class='line'>  <span class="nn">FFI::Raw::</span><span class="n">ptr</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">my</span> <span class="nv">$hoge</span><span class="p">;</span>
</span><span class='line'>  <span class="k">my</span> <span class="nv">$coderef</span> <span class="o">=</span> <span class="k">sub </span><span class="p">{</span> <span class="nv">$hoge</span> <span class="o">=</span> <span class="nb">shift</span> <span class="p">};</span>
</span><span class='line'>  <span class="k">my</span> <span class="nv">$callback</span> <span class="o">=</span> <span class="nn">FFI::Raw::</span><span class="n">callback</span><span class="p">(</span><span class="nv">$coderef</span><span class="p">,</span> <span class="nn">FFI::Raw::</span><span class="n">void</span><span class="p">,</span> <span class="nn">FFI::Raw::</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$format</span><span class="o">-&gt;</span><span class="n">call</span><span class="p">(</span><span class="o">&lt;&lt;</span><span class="s">&quot;EOF&quot;</span><span class="p">,</span> <span class="nv">$callback</span><span class="p">);</span>
</span><span class='line'><span class="nb">package</span> <span class="n">main</span>
</span><span class='line'><span class="nb">import</span>   <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="n">func</span> <span class="n">main</span><span class="p">(</span>   <span class="p">)</span>   <span class="p">{</span>
</span><span class='line'><span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;hogehoge&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="n">EOF</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この方式なら作ったShared Libraryを他の言語からも呼びやすいので無難かも？
ただし、まだまだ実装が不十分で、このコードはバッファオーバーランの危険があります。
しっかり実装するなら、最初の一回でバッファのサイズだけ計算、次の呼び出しで結果取得・・・のようなフローを踏む必要があります。</p>

<h3>コールバック</h3>

<p>結果の保存をコールバック関数の呼び出しで行えば、Golang側でfreeを実行するタイミングが分かるので、メモリーリークを防ぐことができます。
ただし、Goからは関数ポインタを呼び出すことはできないので、gcoでグルーコードを書いてあげる必要があります。</p>

<figure class='code'><figcaption><span>libgofmt.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cm">typedef void (*callbackFunc) (const char*);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">void bridge_callback(callbackFunc f, const char* str);</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;C&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">f</span> <span class="s">&quot;go/format&quot;</span>
</span><span class='line'>  <span class="s">&quot;unsafe&quot;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//export format</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">format</span><span class="p">(</span><span class="nx">src</span> <span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">char</span><span class="p">,</span> <span class="nx">dstCallback</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">gosrc</span> <span class="o">:=</span> <span class="nx">C</span><span class="p">.</span><span class="nx">GoString</span><span class="p">(</span><span class="nx">src</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">godst</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Source</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">gosrc</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">cs</span> <span class="o">:=</span> <span class="nx">C</span><span class="p">.</span><span class="nx">CString</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">godst</span><span class="p">))</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">C</span><span class="p">.</span><span class="nx">free</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">(</span><span class="nx">cs</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">C</span><span class="p">.</span><span class="nx">bridge_callback</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">callbackFunc</span><span class="p">(</span><span class="nx">dstCallback</span><span class="p">),</span> <span class="nx">cs</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>libgofmt.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="nf">void</span> <span class="p">(</span><span class="o">*</span><span class="n">callbackFunc</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">bridge_callback</span><span class="p">(</span><span class="n">callbackFunc</span> <span class="n">f</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">f</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>test.pl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">FFI::</span><span class="n">Raw</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$format</span> <span class="o">=</span> <span class="nn">FFI::</span><span class="n">Raw</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;libgofmt.so&#39;</span><span class="p">,</span> <span class="s">&#39;format&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nn">FFI::Raw::</span><span class="n">void</span><span class="p">,</span> <span class="c1"># 戻り値</span>
</span><span class='line'>  <span class="nn">FFI::Raw::</span><span class="n">str</span><span class="p">,</span> <span class="nn">FFI::Raw::</span><span class="n">ptr</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$hoge</span><span class="p">;</span>
</span><span class='line'>  <span class="k">my</span> <span class="nv">$coderef</span> <span class="o">=</span> <span class="k">sub </span><span class="p">{</span> <span class="nv">$hoge</span> <span class="o">=</span> <span class="nb">shift</span> <span class="p">};</span>
</span><span class='line'>  <span class="k">my</span> <span class="nv">$callback</span> <span class="o">=</span> <span class="nn">FFI::Raw::</span><span class="n">callback</span><span class="p">(</span><span class="nv">$coderef</span><span class="p">,</span> <span class="nn">FFI::Raw::</span><span class="n">void</span><span class="p">,</span> <span class="nn">FFI::Raw::</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$format</span><span class="o">-&gt;</span><span class="n">call</span><span class="p">(</span><span class="o">&lt;&lt;</span><span class="s">&quot;EOF&quot;</span><span class="p">,</span> <span class="nv">$callback</span><span class="p">);</span>
</span><span class='line'><span class="nb">package</span> <span class="n">main</span>
</span><span class='line'><span class="nb">import</span>   <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="n">func</span> <span class="n">main</span><span class="p">(</span>   <span class="p">)</span>   <span class="p">{</span>
</span><span class='line'><span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;hogehoge&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="n">EOF</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>GoのShared Libraryの呼び出しは数値型だけを相手にしていれば比較的簡単ですが、文字列を扱おうとすると少し面倒です。
go2xsを使うとそこら辺が簡単になります。
あんましライブラリ作ったことないですが、文字列の受け渡しをするときには、一般的にはどんな感じのインターフェースにするべきなんですかね？</p>

<p>GoのShared Libraryまだまだ出たばかりで、複数回読み込めなかったりと問題はありますが、
Goの機能を他の言語から呼び出せるのは便利ですね。
今後に期待です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPC::Asia2015へ行ってきた]]></title>
    <link href="http://shogo82148.github.io/blog/2015/08/23/yapc-asia-2015/"/>
    <updated>2015-08-23T00:48:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/08/23/yapc-asia-2015</id>
    <content type="html"><![CDATA[<p><a href="http://yapcasia.org/2015/">YAPC::Asia2015</a>へ行ってきましました。
Blogを書くまでがYAPCらしいので、簡単に</p>

<!-- More -->


<p>今年の会場は<a href="http://www.bigsight.jp/">東京ビッグサイト</a>です。
▼▼みたいになってるところの中にはじめて潜入してきました。
あの中って会議室なんですね。</p>

<p>去年は毎回立ち見ですごく大変だったけど、今年はかなり会場が広くなったおかけで、
大体席を確保できて楽にトークを聴けました。
しかし会場が東京ビッグサイトであっても、人気トークは立ち見になってしまうのがYAPCのすごいところ・・・。
それでも、前の人の頭でスライドが全く見えないみたいなことはなかったので、広い会場は便利です。</p>

<p>以下、今年見たトークです。</p>

<ul>
<li><a href="http://yapcasia.org/2015/talk/show/b355fa20-122e-11e5-8ba5-d9f87d574c3a">言語開発の現場</a></li>
<li><a href="http://yapcasia.org/2015/talk/show/f5aa5054-12fd-11e5-b4c9-d9f87d574c3a">はてなブックマークのトピックページの裏側</a></li>
<li><a href="http://yapcasia.org/2015/talk/show/7d62caf8-12f4-11e5-881c-d9f87d574c3a">技術ブログを書くことについて語るときに僕の語ること</a>

<ul>
<li>タイトルが9割</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2015/talk/show/9ec2791c-05e5-11e5-81fa-79c97d574c3a">世界展開する大規模ウェブサービスのデプロイを支える技術</a>

<ul>
<li>全サーバで一斉にgit pullするつらい話だった</li>
<li>と、思ったら途中から<a href="https://github.com/fujiwara/stretcher">stretcher</a>の話になった</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2015/talk/show/dead6890-09b7-11e5-998a-67dc7d574c3a">HTTP/2時代のウェブサイト設計</a>

<ul>
<li>CSSスプライトみたいなファイルを一つにまとめてリクエストを減らす技術はHTTP/2ではオワコンになる</li>
<li>何よりもデータ量を減らすことが大事</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2015/talk/show/e14c5ae0-12f7-11e5-a909-d9f87d574c3a">【sponsored contents】若手エンジニア達の生存戦略</a></li>
<li><a href="http://yapcasia.org/2015/talk/show/c5ea5428-fac9-11e4-88c1-8ab37d574c3a">Google Cloud Platformの謎テクノロジーを掘り下げる</a>

<ul>
<li>朝寝坊して途中からの参加でした(=_=)</li>
<li>Googleのコンテナ技術BorgやGoogleのネットワークについての話</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2015/talk/show/f2816038-10ec-11e5-89bf-d7f07d574c3a">我々はどのように冗長化を失敗したのか</a></li>
<li><a href="http://yapcasia.org/2015/talk/show/0af26fe4-0b7b-11e5-a29c-67dc7d574c3a">MySQLで2億件のシリアルデータと格闘したチューニングの話</a></li>
<li><a href="http://yapcasia.org/2015/talk/show/dd8ce20e-fad2-11e4-b6e7-8ab37d574c3a">データ分析基盤を支える技術</a>

<ul>
<li>いろいろなツールの比較についてのお話でした</li>
<li>なんか色々なオープンソースのソフトウェアを紹介していたけど、「自分で構築しようとするな」とのこと</li>
<li>D言語みんな使ってね</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2015/talk/show/22f59fb8-0fad-11e5-98ef-43ec7d574c3a">Parallelism, Concurrency, and Asynchrony in Perl 6</a>

<ul>
<li>Perl6では並列・並行・非同期処理が簡単に書けるらしいので、その紹介</li>
<li>Promiseやawaitみたいな他の言語で取り入れられている概念がPerlでも使えるらしい</li>
<li>来年Perl6でドローンが飛んでいるのを期待してます</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2015/talk/show/6bde6c69-187a-11e5-aca1-525412004261">Profiling &amp; Optimizing in Go</a>

<ul>
<li>Goのプロファイリングと最適化のデモでした</li>
<li><code>sync.Pool</code> 存在は知っていたけど実際に使っているコード始めて見た気がする。<code>bytes.Buffer</code>の作成に使っていたんだけど、メモリアロケート程度なら同期コストの方が高いのでは〜って思っていた。</li>
</ul>
</li>
</ul>


<p>改めて見返してみるとPerlについての話がPerl6の並列・並行・非同期処理くらいしかないきがする。
(YAPCのPとは一体)</p>

<hr />

<p>最後に、呪いを掛けられたのでMySQL5.7の罠についてリンクを貼っておきますね。
http://yoku0825.blogspot.jp/2015/08/yapcasia-mysql-57lt.html
Passwordの有効期限のデフォルトがいつの間にか360日になるのは話題になってたのを知っていたけど、他にも罠満載でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go-webtailってのを書いた]]></title>
    <link href="http://shogo82148.github.io/blog/2015/06/21/go-webtail/"/>
    <updated>2015-06-21T23:28:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/06/21/go-webtail</id>
    <content type="html"><![CDATA[<p>Rubyで書かれた<a href="https://github.com/r7kamura/webtail">webtail</a>のGo移植を書いてみました。</p>

<ul>
<li><a href="https://github.com/shogo82148/go-webtail">go-webtail</a></li>
</ul>


<!-- More -->


<p>オリジナルのwebtailはRubyなので、Rubyistではない僕が使おうとするとまずRubyの実行環境からそろえないといけなくてつらい。
ワンバイナリでダウンロードするだけで使えるやつが欲しいなあと常々思っていたのでGolangです。
htmlやjavasctiptの部分もバイナリに含まれているので、インストールも簡単です。</p>

<p>引数無しで実行すると8080ポートで待ち受けて、標準入力から読み込んだ結果をWebsocketで読めるようにしてくれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>go get github.com/shogo82148/go-webtail/cmd/webtail <span class="c"># インストール</span>
</span><span class='line'><span class="nb">echo </span>hogehoge | webtail
</span></code></pre></td></tr></table></div></figure>


<p>ファイルもtailできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>webtail hoge.log fuga.log
</span></code></pre></td></tr></table></div></figure>


<p>それぞれ、<code>http://localhost:8080/hoge.log</code>と<code>http://localhost:8080/fuga.log</code>で見れるようになります。</p>

<h1>mirageと一緒につかう</h1>

<p><a href="https://github.com/acidlemon/mirage">mirage</a>は待ち受けポートを複数設定できます。
(SEE ALSO <a href="http://tech.kayac.com/archive/mirage_for_docker.html">Dockerで非エンジニアでも開発環境を上げ下げできる、mirageというツールを作りました</a>)
その一つをwebtailに割り当てて以下のようにDockerfileに書いておけば、非(サーバサイド)エンジニアでも開発環境のログが見れるようになります。
(見れても理解できるのか？って疑問もあるけど、まあ、全く見れないよりは・・・)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ADD webtail /
</span><span class='line'>CMD ./docker_run.sh 2&gt;&amp;1 | /webtail --prefix webtail
</span><span class='line'>
</span><span class='line'><span class="c"># ブラウザで見れる代わりにdocker logsで見れなくなるのでこっちのほうがいいかも</span>
</span><span class='line'>CMD ./docker_run.sh 2&gt;&amp;1 | tee hoge.log | /webtail --prefix webtail
</span></code></pre></td></tr></table></div></figure>


<p>残念ながらwebsocket対応はしていないので、<a href="https://github.com/shogo82148/mirage/tree/feature/websocket">websoket対応にしたmirage</a>が必要です。
<code>httputil.NewSingleHostReverseProxy</code>互換の<a href="github.com/methane/rproxy">rproxy</a>ってのを使ったら簡単にwebsocket対応ができて素晴らしいですね。
(mirage自身に手を加える必要があるなら、mirageにこういう機能をつけるべきだったのでは説はある)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test::mysqld::Multiというモジュールを書いてみた]]></title>
    <link href="http://shogo82148.github.io/blog/2015/06/20/test-mysqld-multi/"/>
    <updated>2015-06-20T10:41:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/06/20/test-mysqld-multi</id>
    <content type="html"><![CDATA[<p><a href="https://metacpan.org/pod/Test::mysqld">Test::mysqld</a>のインスタンスを一度に大量に作りたい人向けに
Test::mysqld::Multiというモジュールを書いてみました。</p>

<!-- More -->


<h2>背景</h2>

<p>先日<a href="http://tkuchiki.hatenablog.com/entry/2015/04/24/192851">Jenkins EC2 Plugin で Spot Instance を使ってテストを回す</a>というのを、
tkuchikiさんにお願いして僕の関わっているプロジェクトでやっていただきました。
CPUのたくさん載ったインスタンスを安く使えるようになったので、
8並列で動いてたテストを24並列で動かせるようになりました。やった3倍速だ！！！
9分程かかってたテストが7分で終わるようになりました！！！
あれ・・・思ったほど早くなってない・・・。</p>

<p>ログを眺めているとproveコマンドが立ち上がってから、実際にテストが走り始めるまで数分の時間がありました。
<a href="http://maaash.jp/2013/03/perl-app-prove-plugin-mysqlpool/">App::Prove::Plugin::MySQLPool</a>を使っているのですが、
ここで時間がかかっているようです。</p>

<p>App::Prove::Plugin::MySQLPoolはテストの並列度分だけMySQLのインスタンスを立ち上げますが、
一個インスタンスを立ち上げたら、それにアクセスできるようになるまでずっと待っているようです。
MySQLの起動に5秒かかるとして24並列で動かしたら2分かかるわけで無視できない長さになります。</p>

<h2>作ったもの</h2>

<p>n個一度に立ち上げて全部にアクセスできるまで待つ実装にすれば速くなるのでは！ってことでTest::mysqld::Multiというのを書いて、
App::Prove::Plugin::MySQLPoolからそれを使うようにしました。
とりあえず<a href="https://github.com/mash/App-Prove-Plugin-MySQLPool/compare/master...shogo82148:test-mysqld-multi">test-mysql-multiブランチ</a>にコミットしてあります。
App::Prove::Plugin::MySQLPoolに取り込んでもらうか別のモジュールとして分離するか、後々のことは未定。
今のプロジェクトで使ってみてちょっとの間様子見してみます。
7分かかってたテストが5分程度で終わるようになったので、効果はあるようです。</p>

<p>ちなみに、並列度が24と半端なのはそれ以上並列度を上げても速くならなかったため。
32コアあるマシンなんだけど使い切れてません。
どこにボトルネックがあるんだろうな・・・。</p>

<h2>まとめ</h2>

<p>プロセス一覧にmysqldが24個並ぶの楽しい</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MeCabをPython3から使う(中間報告)]]></title>
    <link href="http://shogo82148.github.io/blog/2015/06/02/mecab-in-python3/"/>
    <updated>2015-06-02T23:12:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/06/02/mecab-in-python3</id>
    <content type="html"><![CDATA[<p>先日このようなツイートを見かけて、
「Python3になってGCの挙動変わったのかな？」と疑問に思ったので調査してみました。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">MeCabをPythonから使う注意点とか - Shogo&#39;s Blog <a href="http://t.co/vJnOqZfUd7">http://t.co/vJnOqZfUd7</a> <a href="https://twitter.com/shogo82148">@shogo82148</a>さんから python3だと変数に代入しなくても動くのだけど2.xでは留意しないといけない</p>&mdash; NOKUBI Takatsugu野首貴嗣 (@knok) <a href="https://twitter.com/knok/status/605197292086263808">June 1, 2015</a></blockquote>


<script async src="http://shogo82148.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<!-- More -->


<h2>Python3へのMeCabインストール</h2>

<p>手元のPython3.4.3にMeCab Bindingをインストールします。
MeCabの公式(Google Codeサービス停止にともない<a href="https://taku910.github.io/mecab/">github pageへ移行している模様</a>)から落とせる
Python BindingはPython2.x向けのため、setup.pyがそのままでは動きません。
Python3.xでは非互換な文法の変更が入ったので以下のように書き換える必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/setup.py.org b/setup.py</span>
</span><span class='line'><span class="gh">index 4486cbb..657945a 100644</span>
</span><span class='line'><span class="gd">--- a/setup.py.org</span>
</span><span class='line'><span class="gi">+++ b/setup.py</span>
</span><span class='line'><span class="gu">@@ -7,7 +7,7 @@ def cmd1(str):</span>
</span><span class='line'>     return os.popen(str).readlines()[0][:-1]
</span><span class='line'>
</span><span class='line'> def cmd2(str):
</span><span class='line'><span class="gd">-    return string.split (cmd1(str))</span>
</span><span class='line'><span class="gi">+    return cmd1(str).split()</span>
</span><span class='line'>
</span><span class='line'> setup(name = &quot;mecab-python&quot;,
</span><span class='line'>        version = cmd1(&quot;mecab-config --version&quot;),
</span></code></pre></td></tr></table></div></figure>


<p>あとは <code>python setup.py install</code> で入ります。</p>

<h2>動かしてみる</h2>

<p>以前書いた「<a href="http://shogo82148.github.io/blog/2012/12/15/mecab-python/">MeCabをPythonから使う注意点とか</a>」を見返しながら、
GCされて上手く動かない例 をPython3.4.3で動かしてみます。
文字列の扱いが変わったり、print文の扱いが変わったりしているので、その部分だけ書き換えが必要です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">MeCab</span>
</span><span class='line'><span class="n">tagger</span> <span class="o">=</span> <span class="n">MeCab</span><span class="o">.</span><span class="n">tagger</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="s">u&#39;MeCabで遊んでみよう！&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">node</span> <span class="o">=</span> <span class="n">tagger</span><span class="o">.</span><span class="n">parseToNode</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="c"># Python2.x ではencode必須だったのが要らなくなった！</span>
</span><span class='line'><span class="c"># node = tagger.parseToNode(text.encode(&#39;utf-8&#39;))</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="n">node</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">surface</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">node</span><span class="o">.</span><span class="n">feature</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># printは文ではなくなったのでカッコで囲う必要がある</span>
</span><span class='line'>  <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">next</span>
</span></code></pre></td></tr></table></div></figure>


<p>さて、動かしてみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BOS/EOS,*,*,*,*,*,*,*,*
</span><span class='line'>名詞,一般,*,*,*,*,*
</span><span class='line'>助詞,格助詞,一般,*,*,*,で,デ,デ
</span><span class='line'>動詞,自立,*,*,五段・バ行,連用タ接続,遊ぶ,アソン,アソン
</span><span class='line'>助詞,接続助詞,*,*,*,*,で,デ,デ
</span><span class='line'>Traceback (most recent call last):
</span><span class='line'>  File "m.py", line 10, in &lt;module&gt;
</span><span class='line'>print( node.surface + '\t' + node.feature )
</span><span class='line'>UnicodeDecodeError: 'utf-8' codec can't decode byte 0xa3 in position 1: invalid start byt</span></code></pre></td></tr></table></div></figure>


<p>surfaceが全く読み取れていない・・・。
最後にはutf-8のデコードができず死んでしまっています。
全然変わってないじゃないか！</p>

<p>変わってないどころか、状況はさらに悪くなっています。
解決方法は以前の記事の通り「エンコード済みtext」を変数に保存・・・なのですが、
Python3.x(+SWIG)ではエンコードが自動的に行われてしまうので <strong>ユーザが「エンコード済みtext」にアクセスすることができません！ </strong></p>

<p><a href="http://samurait.hatenablog.com/entry/Mecab-python3">python3対応 Mecabの紹介</a>や
<a href="https://github.com/taku910/mecab/pull/16">SWIG 3.0.5で作りなおしたPR</a>等を試してみましたが、
同様の症状でした。</p>

<h2>まとめ</h2>

<ul>
<li>Python3.xでもPython2.xと同様で、元テキストがGCで回収されてしまう</li>
<li>Python3.xになって回避策が無くなった</li>
</ul>


<p>ぱっと思いつく回避策は以下のような感じでしょうか・・・。</p>

<ul>
<li>諦めて <code>parseToNode</code> を使わず、<code>parse</code>の結果を頑張って解析する</li>
<li>SWIGの設定やC++側の書き方で頑張る(具体策は未調査)</li>
</ul>


<p>インターフェースを変えずに後者の方法で何とかならないか、
引き続きいじってみようと思います。</p>

<h2>参考</h2>

<ul>
<li><a href="https://github.com/taku910/mecab">taku910/MeCab</a></li>
<li><a href="https://taku910.github.io/mecab/">MeCab</a></li>
<li><a href="http://shogo82148.github.io/blog/2012/12/15/mecab-python/">MeCabをPythonから使う注意点とか</a></li>
<li><a href="http://www.trifields.jp/how-to-use-mecab-in-ubuntu-14-04-and-python-3-1196">Ubuntu14.04とPython3でMeCabを使う方法</a></li>
<li><a href="http://samurait.hatenablog.com/entry/Mecab-python3">python3対応 Mecabの紹介</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[各ブランチの最後にコミットした人を知る]]></title>
    <link href="http://shogo82148.github.io/blog/2015/05/21/branch-committer/"/>
    <updated>2015-05-21T00:50:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/05/21/branch-committer</id>
    <content type="html"><![CDATA[<p>ブランチが大量にあるので整理したい、けど大人数で開発しているから誰がどのブランチいじってるか分からない、
ということがあったので、出し方のメモ。</p>

<!-- More -->


<p>githubのbranch一覧も見ればいいじゃん！っていう意見もあると思うんだけど、
「自分のbranch一覧」は見れるんですが「特定のだれかのbranch一覧」が見れない・・・。</p>

<p>git-for-each-refを使うと各ブランチに対していろいろ操作できるようです。
各ブランチの最後にコミットした人一覧を出すには以下のコマンド。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git <span class="k">for</span>-each-ref --format<span class="o">=</span><span class="s1">&#39;%(authordate:short) %(authorname) %(refname)&#39;</span> --sort<span class="o">=</span>-committerdate refs/remotes/origin/
</span></code></pre></td></tr></table></div></figure>


<p>formatは自由にいじれるのでいろいろ遊べます。
例えば、ブランチをたくさん抱え込んでいる人の一覧を表示する例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git <span class="k">for</span>-each-ref --format<span class="o">=</span><span class="s2">&quot;%(authorname)&quot;</span> refs/remotes/origin/ | sort | uniq -c | sort -nr
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="http://git-scm.com/docs/git-for-each-ref">git-for-each-ref - Output information on each ref</a></li>
<li><a href="http://d.hatena.ne.jp/syohex/20131225/1387948682">リモートブランチも含め更新日時が新しい順番にソートする</a></li>
<li><a href="http://shuzo-kino.hateblo.jp/entry/2014/07/03/232310">ブランチ一覧を更新時刻つきで表示したい場合、gitのfor-each-refが使える。</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go言語でSQLのトレースをする]]></title>
    <link href="http://shogo82148.github.io/blog/2015/05/13/golang-sql-proxy/"/>
    <updated>2015-05-13T01:22:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/05/13/golang-sql-proxy</id>
    <content type="html"><![CDATA[<p>ぴっぴ先輩が「Go言語で発行したクエリを確認したい」って言ってて、
「MySQL使っているならGeneral Logを吐けばよいのでは？」と返したんだけども、
もっと汎用的な方法はないものかと考えてみました。</p>

<!-- More -->


<p>Golangの <code>database/sql</code> はどんなDBでも対応できるよう、ドライバを自由に入れ替えることができます。
ドライバは単に<code>database/sql/driver</code>にあるインターフェースを満たしている何かなので、
ユーザが自由に作ることができるし、<code>interface</code>を経由して直接呼び出すことも可能です。
この仕組を使って、別のドライバにそのまま渡すプロキシを作れば、ログを吐けるのでは？ということでやってみました。</p>

<ul>
<li><a href="https://github.com/shogo82148/go-sql-proxy">go-sql-proxy</a></li>
</ul>


<h2>使い方</h2>

<p>まず最初にgo-sql-proxyをドライバとして登録します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">hooks</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">proxy</span><span class="p">.</span><span class="nx">Hooks</span><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Hook functions here(Open, Exec, Query, etc.)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">sql</span><span class="p">.</span><span class="nx">Register</span><span class="p">(</span><span class="s">&quot;new-proxy-name&quot;</span><span class="p">,</span> <span class="nx">proxy</span><span class="p">.</span><span class="nx">NewProxy</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">another</span><span class="p">.</span><span class="nx">Driver</span><span class="p">{},</span> <span class="nx">hooks</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとは登録したドライバと使って新しいDBハンドラを開くだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">db</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sql</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;new-proxy-name&quot;</span><span class="p">,</span> <span class="nx">dataSourceName</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>このハンドラを使ってクエリ実行を行うと、Hooksで登録した関数が呼び出されます。
元のドライバを直接使った場合と同じように振る舞うので、既存のコードを一切変えること無くHookを差し込めて便利！</p>

<h2>トレーサの例</h2>

<p>簡単なトレーサを書いてみるとこんな感じ。
発行したSQLのクエリをログに吐き出します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">proxy</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;database/sql&quot;</span>
</span><span class='line'>  <span class="s">&quot;database/sql/driver&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/mattn/go-sqlite3&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/shogo82148/txmanager&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">sql</span><span class="p">.</span><span class="nx">Register</span><span class="p">(</span><span class="s">&quot;sqlite3-proxy&quot;</span><span class="p">,</span> <span class="nx">NewProxy</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">sqlite3</span><span class="p">.</span><span class="nx">SQLiteDriver</span><span class="p">{},</span> <span class="o">&amp;</span><span class="nx">Hooks</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Open</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">conn</span> <span class="o">*</span><span class="nx">Conn</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Open&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">Exec</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">stmt</span> <span class="o">*</span><span class="nx">Stmt</span><span class="p">,</span> <span class="nx">args</span> <span class="p">[]</span><span class="nx">driver</span><span class="p">.</span><span class="nx">Value</span><span class="p">,</span> <span class="nx">result</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">Result</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Exec: %s; args = %v\n&quot;</span><span class="p">,</span> <span class="nx">stmt</span><span class="p">.</span><span class="nx">QueryString</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">Query</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">stmt</span> <span class="o">*</span><span class="nx">Stmt</span><span class="p">,</span> <span class="nx">args</span> <span class="p">[]</span><span class="nx">driver</span><span class="p">.</span><span class="nx">Value</span><span class="p">,</span> <span class="nx">rows</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">Rows</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Query: %s; args = %v\n&quot;</span><span class="p">,</span> <span class="nx">stmt</span><span class="p">.</span><span class="nx">QueryString</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">Begin</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">conn</span> <span class="o">*</span><span class="nx">Conn</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Begin&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">Commit</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">tx</span> <span class="o">*</span><span class="nx">Tx</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Commit&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">Rollback</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">tx</span> <span class="o">*</span><span class="nx">Tx</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Rollback&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>  <span class="p">}))</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">db</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sql</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;sqlite3-proxy&quot;</span><span class="p">,</span> <span class="s">&quot;:memory:&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatalf</span><span class="p">(</span><span class="s">&quot;Open filed: %v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">db</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span>
</span><span class='line'>      <span class="s">&quot;CREATE TABLE t1 (id INTEGER PRIMARY KEY)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>おまけ機能</h2>

<p><code>proxy.NewTraceProxy</code> を使うと上記のコードと同様のプロキシを簡単につくれます。
<code>db.Exec</code>, <code>db.Query</code> 等の呼び出しもとを報告するという便利機能付き。
ただ、<code>logger.Output(6, "Begin")</code> みたいな感じで「6個スタックトレースをさかのぼってログに表示」という実装をしているので、
<code>database/sql</code>のアップデートと共にすぐに壊れそう。(<code>database/sql</code>で何回関数呼び出しがあったかに強く依存している)
一応、Go1.1から1.4までで同じ結果を返すことは確認はしてるんだけど、将来のことまではちょっと分からない・・・。
あんまり信用はしないほうがいいかも。</p>

<p>こういう情報を知りたい場合どうするのがいいんだろうね。
この前作った<a href="http://shogo82148.github.io/blog/2015/05/09/go-txmanager/">txmanger</a>のレベルでプロキシを作ったほうがいいのかなあ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goのトランザクションマネージャ作った]]></title>
    <link href="http://shogo82148.github.io/blog/2015/05/09/go-txmanager/"/>
    <updated>2015-05-09T15:17:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/05/09/go-txmanager</id>
    <content type="html"><![CDATA[<p>Golangの<code>database/sql</code>はBeginとCommitでトランザクションの制御を行うことができます。
クエリの実行が確実に成功するのであれば難しくは無いのですが、
トランザクション内でエラーが発生場合、確実にトランザクションを終了させるのは少し面倒です。
また、ネストができないので、「トランザクションの中から呼び出しても外から呼び出しても、関数の中はトランザクション内」みたいなことができません。
Perlには<a href="https://metacpan.org/release/DBIx-TransactionManager">DBIx-TransactionManager</a>というものがあるのですが、
このGolang版が欲しくなったので作ってみました。</p>

<ul>
<li><a href="https://github.com/shogo82148/txmanager">txmanager</a></li>
</ul>


<!-- More -->


<h2>簡単な使い方</h2>

<p><code>sql.DB</code> をラップした <code>txmanager.DB</code> を使います。
<code>Begin</code>, <code>Commit</code> する代わりに <code>TxBegin</code>, <code>TxCommit</code> を使ってトランザクションを開始・終了すると
txmanagerの管理下になります。
確実にトランザクションが終了させるために、トランザクションを開始したら<code>defer tx.TxFinish()</code>を忘れないように。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;database/sql&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/shogo82148/txmanager&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Example</span><span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">sql</span><span class="p">.</span><span class="nx">DB</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">dbm</span> <span class="o">:=</span> <span class="nx">txmanager</span><span class="p">.</span><span class="nx">NewDB</span><span class="p">(</span><span class="nx">db</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// トランザクション開始</span>
</span><span class='line'>  <span class="nx">tx</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">dbm</span><span class="p">.</span><span class="nx">TxBegin</span><span class="p">()</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">TxFinish</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// INSERTはトランザクションの中で実行される</span>
</span><span class='line'>  <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span><span class="s">&quot;INSERT INTO t1 (id) VALUES(1)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">tx</span><span class="p">.</span><span class="nx">TxRollback</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">tx</span><span class="p">.</span><span class="nx">TxCommit</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実際にはこれに加えてエラー処理も必要です。
<code>txmanager.Do</code> を使うと、トランザクションの開始処理・終了をtxmangerがやってくれるので少し楽になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;database/sql&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/shogo82148/txmanager&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Example</span><span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">sql</span><span class="p">.</span><span class="nx">DB</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">dbm</span> <span class="o">:=</span> <span class="nx">txmanager</span><span class="p">.</span><span class="nx">NewDB</span><span class="p">(</span><span class="nx">db</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">txmanager</span><span class="p">.</span><span class="nx">Do</span><span class="p">(</span><span class="nx">dbm</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">tx</span> <span class="nx">txmanager</span><span class="p">.</span><span class="nx">Tx</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// INSERTはトランザクションの中で実行される</span>
</span><span class='line'>      <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span><span class="s">&quot;INSERT INTO t1 (id) VALUES(1)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>トランザクションをネストする</h2>

<p>以下のようにトランザクションをネストすることができます。
ネストした内側のトランザクションは<code>TxCommit</code>しても特に何もしません。
一番外側のトランザクションで<code>TxCommit</code>が実行されたときにコミットが行われます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;database/sql&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/shogo82148/txmanager&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//トランザクションの外からでも中からでもFooを呼び出すことができる</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">Example</span><span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">sql</span><span class="p">.</span><span class="nx">DB</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">dbm</span> <span class="o">:=</span> <span class="nx">txmanager</span><span class="p">.</span><span class="nx">NewDB</span><span class="p">(</span><span class="nx">db</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">txmanager</span><span class="p">.</span><span class="nx">Do</span><span class="p">(</span><span class="nx">dbm</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">tx</span> <span class="nx">txmanager</span><span class="p">.</span><span class="nx">Tx</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">txmanager</span><span class="p">.</span><span class="nx">Do</span><span class="p">(</span><span class="nx">tx</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">tx</span> <span class="nx">txmanager</span><span class="p">.</span><span class="nx">Tx</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// INSERTはトランザクションの中で実行される</span>
</span><span class='line'>          <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span><span class="s">&quot;INSERT INTO t1 (id) VALUES(1)&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>      <span class="c1">// この時点ではまだコミットされていない</span>
</span><span class='line'>      <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span><span class="s">&quot;INSERT INTO t1 (id) VALUES(2)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="c1">// 全部のトランザクションが終了した時点ではじめてコミットされる</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>トランザクションの中で実行するべき処理を、関数に切り出すときなどに便利ですね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;database/sql&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/shogo82148/txmanager&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Foo</span><span class="p">(</span><span class="nx">dbm</span> <span class="o">*</span><span class="nx">txmanager</span><span class="p">.</span><span class="nx">DB</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// この時点ではトランザクションの中にいるのか、外にいるのか分からない</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">txmanager</span><span class="p">.</span><span class="nx">Do</span><span class="p">(</span><span class="nx">dbm</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">tx</span> <span class="nx">txmanager</span><span class="p">.</span><span class="nx">Tx</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// INSERTを確実にトランザクションの中で実行する</span>
</span><span class='line'>      <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span><span class="s">&quot;INSERT INTO t1 (id) VALUES(1)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//トランザクションの外からでも中からでもFooを呼び出すことができる</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">Example</span><span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">sql</span><span class="p">.</span><span class="nx">DB</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">dbm</span> <span class="o">:=</span> <span class="nx">txmanager</span><span class="p">.</span><span class="nx">NewDB</span><span class="p">(</span><span class="nx">db</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Foo</span><span class="p">(</span><span class="nx">dbm</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">txmanager</span><span class="p">.</span><span class="nx">Do</span><span class="p">(</span><span class="nx">dbm</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">tx</span> <span class="nx">txmanager</span><span class="p">.</span><span class="nx">Tx</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Foo</span><span class="p">(</span><span class="nx">tx</span><span class="p">)</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>コミットしたら何かする</h2>

<p><a href="https://github.com/soh335/DBIx-TransactionManager-EndHook">DBIx::TransactionManager::EndHook</a>相当の機能も追加してみました。</p>

<p>トランザクションはネスト可能なため、<code>TxCommit</code>でコミットを行ったからと言って、その場でコミットが行われるとは限りません。
後からROLLBACKされてしまう可能性があります。
例えば、以下のコードではINSERTした行はロールバックされたにもかかわらず「INSERTに成功したよ！！」というログが流れてしまいます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;database/sql&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/shogo82148/txmanager&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Foo</span><span class="p">(</span><span class="nx">dbm</span> <span class="o">*</span><span class="nx">txmanager</span><span class="p">.</span><span class="nx">DB</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">err</span> <span class="o">:=</span> <span class="nx">txmanager</span><span class="p">.</span><span class="nx">Do</span><span class="p">(</span><span class="nx">dbm</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">tx</span> <span class="nx">txmanager</span><span class="p">.</span><span class="nx">Tx</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span><span class="s">&quot;INSERT INTO t1 (id) VALUES(1)&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;INSERTに成功したよ！！&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Example</span><span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">sql</span><span class="p">.</span><span class="nx">DB</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">dbm</span> <span class="o">:=</span> <span class="nx">txmanager</span><span class="p">.</span><span class="nx">NewDB</span><span class="p">(</span><span class="nx">db</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">txmanager</span><span class="p">.</span><span class="nx">Do</span><span class="p">(</span><span class="nx">dbm</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">tx</span> <span class="nx">txmanager</span><span class="p">.</span><span class="nx">Tx</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">Foo</span><span class="p">(</span><span class="nx">tx</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">// ...その他トランザクション内で実行しないといけない処理...</span>
</span><span class='line'>      <span class="c1">// エラーが発生するとロールバックされる</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;何かのエラー！&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>TxAddEndHook</code>を使うと全てのトランザクションが正常に終了した場合にのみ処理を実行することができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">Foo</span><span class="p">(</span><span class="nx">dbm</span> <span class="o">*</span><span class="nx">txmanager</span><span class="p">.</span><span class="nx">DB</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">txmanager</span><span class="p">.</span><span class="nx">Do</span><span class="p">(</span><span class="nx">dbm</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">tx</span> <span class="nx">txmanager</span><span class="p">.</span><span class="nx">Tx</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span><span class="s">&quot;INSERT INTO t1 (id) VALUES(1)&quot;</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">tx</span><span class="p">.</span><span class="nx">TxAddEndHook</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 全てのトランザクションが正常に終了した場合にのみ呼ばれる</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;INSERTに成功したよ！！&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go言語でGraceful Restartをする]]></title>
    <link href="http://shogo82148.github.io/blog/2015/05/03/golang-graceful-restart/"/>
    <updated>2015-05-03T12:10:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/05/03/golang-graceful-restart</id>
    <content type="html"><![CDATA[<p>とあるHTTPサーバをGolangで立てようって話になったんだけど、
止まると困るので無停止でサーバ再起動をしたい。
Perlには<a href="https://metacpan.org/pod/Server::Starter">Server::Starter</a>という有名モジュールがあるんだけど、
Golangはどうなってるの？ってことで調べてみました。</p>

<!-- More -->


<h2>gracefulじゃないバージョン</h2>

<p>Golangの標準ライブラリを使ってHTTPサーバを立ててみる例。
レスポンスが一瞬で終わってしまうとよくわからないので、sleepするhandlerを追加しておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">now</span> <span class="p">=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;start pid %d\n&quot;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">())</span>
</span><span class='line'>  <span class="nx">s</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span><span class="nx">Addr</span><span class="p">:</span> <span class="s">&quot;:8080&quot;</span><span class="p">,</span> <span class="nx">Handler</span><span class="p">:</span> <span class="nx">newHandler</span><span class="p">()}</span>
</span><span class='line'>  <span class="nx">s</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// https://github.com/facebookgo/grace/blob/master/gracedemo/demo.go から一部拝借</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">newHandler</span><span class="p">()</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">mux</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">NewServeMux</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">mux</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/sleep/&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">duration</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">ParseDuration</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">FormValue</span><span class="p">(</span><span class="s">&quot;duration&quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">http</span><span class="p">.</span><span class="nx">Error</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">Error</span><span class="p">(),</span> <span class="mi">400</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="nx">duration</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span>
</span><span class='line'>          <span class="nx">w</span><span class="p">,</span>
</span><span class='line'>          <span class="s">&quot;started at %s slept for %d nanoseconds from pid %d.\n&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">now</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">duration</span><span class="p">.</span><span class="nx">Nanoseconds</span><span class="p">(),</span>
</span><span class='line'>          <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">(),</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">mux</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以下のような感じで実行してみる。
(それぞれのコマンドは処理が終わるまでブロックするので、コンソールを3つ程開いて実行してね！)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go run main.go
</span><span class='line'>2015/05/03 12:04:08 start pid 69046
</span><span class='line'>$ curl 'http://localhost:8080/sleep/?duration=20s'
</span><span class='line'>$ kill -TERM 69046</span></code></pre></td></tr></table></div></figure>


<p>curlからのリクエストをさばく前に終了してしまい
<code>curl: (52) Empty reply from server</code> といわれてしまいます。</p>

<h2>facebookgo/grace</h2>

<p>facebook製の<a href="https://github.com/facebookgo/grace/gracehttp">grace</a>は
gracefulな終了と再起動をしてくれるライブラリ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/facebookgo/grace/gracehttp&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">now</span> <span class="p">=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;start pid %d\n&quot;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">())</span>
</span><span class='line'>  <span class="nx">s</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span><span class="nx">Addr</span><span class="p">:</span> <span class="s">&quot;:8080&quot;</span><span class="p">,</span> <span class="nx">Handler</span><span class="p">:</span> <span class="nx">newHandler</span><span class="p">()}</span>
</span><span class='line'>  <span class="c1">// s.ListenAndServe()</span>
</span><span class='line'>  <span class="nx">gracehttp</span><span class="p">.</span><span class="nx">Serve</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// newHanderは一緒なので、以下省略。適当に補完して実行して</span>
</span></code></pre></td></tr></table></div></figure>


<p>さっきと同じように実行してみるとリクエストを捌き切るまで終了しなくなります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go run main.go
</span><span class='line'>2015/05/03 12:04:08 start pid 69046
</span><span class='line'>2015/05/03 12:04:08 Serving [::]:8080 with pid 69046
</span><span class='line'>$ curl 'http://localhost:8080/sleep/?duration=20s'
</span><span class='line'>started at 2015-05-04 12:04:08.562569712 +0900 JST slept for 20000000000 nanoseconds from pid
</span><span class='line'>$ kill -TERM 69046</span></code></pre></td></tr></table></div></figure>


<p>TERMの代わりにUSR2シグナルを送るとgracefulに再起動できる。
ただ、再起動すると最初のプロセスは死んでしまうので、daemontoolsみたいなデーモン管理ツールと一緒には使えない。
そのためデーモン化に必要なもろもろ(PID・標準出力・標準エラー等をファイルに書き出す等)は全部自前でやる必要があります。
<a href="https://github.com/facebookgo/cmdctrl">cmdctrl</a>を使うとそこら辺の処理をやってくれる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/facebookgo/cmdctrl&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/facebookgo/grace/gracehttp&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">now</span> <span class="p">=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">cmdctrl</span><span class="p">.</span><span class="nx">SimpleStart</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;start pid %d\n&quot;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">())</span>
</span><span class='line'>  <span class="nx">s</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span><span class="nx">Addr</span><span class="p">:</span> <span class="s">&quot;:8080&quot;</span><span class="p">,</span> <span class="nx">Handler</span><span class="p">:</span> <span class="nx">newHandler</span><span class="p">()}</span>
</span><span class='line'>  <span class="nx">gracehttp</span><span class="p">.</span><span class="nx">Serve</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// newHanderは一緒なので、以下省略。適当に補完して実行して</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go run main.go -c hoge.conf -pidfile hoge.pid start
</span><span class='line'>2015/05/03 12:04:08 start pid 69046
</span><span class='line'>2015/05/03 12:04:08 Serving [::]:8080 with pid 69046
</span><span class='line'>$ curl 'http://localhost:8080/sleep/?duration=20s'
</span><span class='line'>started at 2015-05-04 12:04:08.562569712 +0900 JST slept for 20000000000 nanoseconds from pid
</span><span class='line'>$ go run main.go stop</span></code></pre></td></tr></table></div></figure>


<p>ただ、デーモン化はされないみたいなので、実際に使うには他にもいろいろ工夫しないといけないっぽい。</p>

<h2>go-server-starter-listener</h2>

<p>牧さん作の<a href="https://github.com/lestrrat/go-server-starter-listener">go-server-starter-listener</a>。
Perlの<a href="https://metacpan.org/pod/Server::Starter">Server::Starter</a>と一緒に使える。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/lestrrat/go-server-starter-listener&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">now</span> <span class="p">=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;start pid %d\n&quot;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">l</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ss</span><span class="p">.</span><span class="nx">NewListener</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">l</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Fallback if not running under Server::Starter</span>
</span><span class='line'>      <span class="nx">l</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listen</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="s">&quot;:8080&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">panic</span><span class="p">(</span><span class="s">&quot;Failed to listen to port 8080&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">s</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span><span class="nx">Handler</span><span class="p">:</span> <span class="nx">newHandler</span><span class="p">()}</span>
</span><span class='line'>  <span class="nx">s</span><span class="p">.</span><span class="nx">Serve</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// newHanderは一緒なので、以下省略。適当に補完して実行して</span>
</span></code></pre></td></tr></table></div></figure>


<p>以下のようにstart_serverコマンドと組み合わせて起動することで、
Server::Starterの管理下で実行されるようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ start_server --port=8080 ./main
</span><span class='line'>start_server (pid:6941) starting now...
</span><span class='line'>starting new worker 6942
</span><span class='line'>2015/05/03 08:27:54 start pid 6942
</span><span class='line'>$ kill -HUP 6941</span></code></pre></td></tr></table></div></figure>


<p>ただ、<a href="https://github.com/lestrrat/go-server-starter-listener">go-server-starter-listener</a>自体はgracefulなシャットダウンに対応していないので、
再起動の途中のコネクションは破棄されてしまいます。
これを避けるには<a href="https://github.com/braintree/manners">manners</a>を使うといいようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;os/signal&quot;</span>
</span><span class='line'>  <span class="s">&quot;syscall&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/braintree/manners&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/lestrrat/go-server-starter-listener&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">now</span> <span class="p">=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;start pid %d\n&quot;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">signal_chan</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">signal</span><span class="p">.</span><span class="nx">Notify</span><span class="p">(</span><span class="nx">signal_chan</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">s</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">signal_chan</span>
</span><span class='line'>          <span class="k">if</span> <span class="nx">s</span> <span class="o">==</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">manners</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">l</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ss</span><span class="p">.</span><span class="nx">NewListener</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">l</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Fallback if not running under Server::Starter</span>
</span><span class='line'>      <span class="nx">l</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listen</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="s">&quot;:8080&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">panic</span><span class="p">(</span><span class="s">&quot;Failed to listen to port 8080&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">manners</span><span class="p">.</span><span class="nx">Serve</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span> <span class="nx">newHandler</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// newHanderは一緒なので、以下省略。適当に補完して実行して</span>
</span></code></pre></td></tr></table></div></figure>


<p>manners自体はシグナルの扱いをやってくれないみたいなので、
そこだけ自分で書く必要がありますが、
今回調べた中ではこれがベストっぽい。
自前でデーモン化はできませんが、daemontoolsが使えるのでそれで十分でしょう。</p>

<p>ちなみに、Server::StarterのGo版<a href="https://github.com/lestrrat/go-server-starter">go-server-starter</a>もあるので、
デーモン化以外はGo化できそう。</p>

<h2>2015-05-07 追記</h2>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">やーやー、ドキュメント書いてなくてごめん。「こっちみんな」的なコメント書いておいた <a href="https://t.co/T9Dx3EmBmo">https://t.co/T9Dx3EmBmo</a> <a href="https://twitter.com/hashtag/golang?src=hash">#golang</a></p>&mdash; Daisuke Maki (@lestrrat) <a href="https://twitter.com/lestrrat/status/596154619740303360">May 7, 2015</a></blockquote>


<script async src="http://shogo82148.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>こっち見んな！
作者の方によると、<a href="https://github.com/lestrrat/go-server-starter-listener">go-server-starter-listener</a>は非推奨らしいです。
<a href="https://github.com/lestrrat/go-server-starter">go-server-starter</a> にlistenerも一緒に入っているのでこちらを使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;os/signal&quot;</span>
</span><span class='line'>  <span class="s">&quot;syscall&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/braintree/manners&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/lestrrat/go-server-starter/listener&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">now</span> <span class="p">=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;start pid %d\n&quot;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">signal_chan</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">signal</span><span class="p">.</span><span class="nx">Notify</span><span class="p">(</span><span class="nx">signal_chan</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">s</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">signal_chan</span>
</span><span class='line'>          <span class="k">if</span> <span class="nx">s</span> <span class="o">==</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;SIGTERM!!!!\n&quot;</span><span class="p">)</span>
</span><span class='line'>              <span class="nx">manners</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">listeners</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ListenAll</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">l</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listener</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">listeners</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Fallback if not running under Server::Starter</span>
</span><span class='line'>      <span class="nx">l</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listen</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="s">&quot;:8080&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">panic</span><span class="p">(</span><span class="s">&quot;Failed to listen to port 8080&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">l</span> <span class="p">=</span> <span class="nx">listeners</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">manners</span><span class="p">.</span><span class="nx">Serve</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span> <span class="nx">newHandler</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// newHanderは一緒なので、以下省略。適当に補完して実行して</span>
</span></code></pre></td></tr></table></div></figure>


<p>こっちのほうが複数ポートの読み込みにも対応していて高機能みたいなので、
<a href="https://github.com/lestrrat/go-server-starter">go-server-starter</a> を使いましょう！</p>

<h3>2015-05-09 追記</h3>

<p>検証が不十分で、<a href="https://github.com/lestrrat/go-server-starter">go-server-starter</a>を使った上記のコード
Server::Starterから起動されなかった場合のフォールバックが正しく機能しません。
現状では自前で<code>SERVER_STARTER_PORT</code>環境変数が定義されているのを確認するしかなさそうです。
handlename先輩が<a href="https://github.com/lestrrat/go-server-starter/pull/3">PR</a>を出しているので、これがマージされたら状況が変わるかも。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go言語で画像の減色を行う]]></title>
    <link href="http://shogo82148.github.io/blog/2015/04/25/quantize-image-in-golang/"/>
    <updated>2015-04-25T21:49:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/04/25/quantize-image-in-golang</id>
    <content type="html"><![CDATA[<p>ちょっとGIFアニメを作りたくなって、最近Go触ってるしGoでやってみよう！とやってみたメモ。
ImageMagikでいいじゃん説もあるけど、最終的にツールとして配布したいなってことでGoです。</p>

<p>主に減色まわりについて。</p>

<!-- More -->


<h2>何はともあれ実装してみる</h2>

<p>以前、「<a href="http://d.hatena.ne.jp/sugyan/20140719/1405729672">ターミナル操作の記録(ttyrec)からGIFアニメを生成するツールを作った</a>」という記事を見たので、
これを参考に実装してみる。</p>

<figure class='code'><figcaption><span>naive.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;image&quot;</span>
</span><span class='line'>  <span class="s">&quot;image/color/palette&quot;</span>
</span><span class='line'>  <span class="s">&quot;image/gif&quot;</span>
</span><span class='line'>  <span class="nx">_</span> <span class="s">&quot;image/png&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;Lenna.png&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">reader</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">img</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">image</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="nx">reader</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">paletted</span> <span class="o">:=</span> <span class="nx">image</span><span class="p">.</span><span class="nx">NewPaletted</span><span class="p">(</span><span class="nx">img</span><span class="p">.</span><span class="nx">Bounds</span><span class="p">(),</span> <span class="nx">palette</span><span class="p">.</span><span class="nx">WebSafe</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">y</span> <span class="o">:=</span> <span class="nx">img</span><span class="p">.</span><span class="nx">Bounds</span><span class="p">().</span><span class="nx">Min</span><span class="p">.</span><span class="nx">Y</span><span class="p">;</span> <span class="nx">y</span> <span class="p">&lt;</span> <span class="nx">img</span><span class="p">.</span><span class="nx">Bounds</span><span class="p">().</span><span class="nx">Max</span><span class="p">.</span><span class="nx">Y</span><span class="p">;</span> <span class="nx">y</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">x</span> <span class="o">:=</span> <span class="nx">img</span><span class="p">.</span><span class="nx">Bounds</span><span class="p">().</span><span class="nx">Min</span><span class="p">.</span><span class="nx">X</span><span class="p">;</span> <span class="nx">x</span> <span class="p">&lt;</span> <span class="nx">img</span><span class="p">.</span><span class="nx">Bounds</span><span class="p">().</span><span class="nx">Max</span><span class="p">.</span><span class="nx">X</span><span class="p">;</span> <span class="nx">x</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">paletted</span><span class="p">.</span><span class="nx">Set</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">img</span><span class="p">.</span><span class="nx">At</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">))</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">f</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Create</span><span class="p">(</span><span class="s">&quot;naive.gif&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">opts</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">gif</span><span class="p">.</span><span class="nx">GIF</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Image</span><span class="p">:</span>     <span class="p">[]</span><span class="o">*</span><span class="nx">image</span><span class="p">.</span><span class="nx">Paletted</span><span class="p">{</span><span class="nx">paletted</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">Delay</span><span class="p">:</span>     <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">0</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">LoopCount</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">gif</span><span class="p">.</span><span class="nx">EncodeAll</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="nx">opts</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>画像用意するの面倒だったので静止画になちゃったけど、
<code>gif.GIF.Image</code> に複数枚画像を渡すとアニメーションGIFになります。
みんなだいすきLenaさんをGIFに変換してみます。</p>

<p>元画像:
<img src="http://upload.wikimedia.org/wikipedia/en/2/24/Lenna.png" alt="Lena" /></p>

<p>変換後:
<img src="http://shogo82148.github.io/images/2015-04-25-naive.gif" alt="naive.gif" /></p>

<p>あれ、なんか肌の色とか全然違う・・・</p>

<h2>誤差拡散法でディザリングする</h2>

<p>皆さんご存知の通りGIFはインデックスカラー方式で色を指定するので、一枚の画像で256色までしか扱えません。
少ない色数でより多い色数を表現するためにディザリングがよく行われます。
Goの標準ライブラリのimage/drawに<a href="http://ja.wikipedia.org/wiki/%E3%83%95%E3%83%AD%E3%82%A4%E3%83%89-%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%B3%E3%83%90%E3%83%BC%E3%82%B0%E3%83%BB%E3%83%87%E3%82%A3%E3%82%B6%E3%83%AA%E3%83%B3%E3%82%B0">フロイド-スタインバーグ・ディザリング</a>を実装してものがあるので、
それを使ってみます。</p>

<p><code>gif.Encode</code> を使って静止画GIFを作るときにデフォルトでこの方法が使われるみたいですが、
アニメーションGIFを作るときにはディザリング処理の呼び出しを自分でやらないといけないようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;image&quot;</span>
</span><span class='line'>  <span class="s">&quot;image/color/palette&quot;</span>
</span><span class='line'>  <span class="s">&quot;image/draw&quot;</span>
</span><span class='line'>  <span class="s">&quot;image/gif&quot;</span>
</span><span class='line'>  <span class="nx">_</span> <span class="s">&quot;image/png&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;Lenna.png&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">reader</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">img</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">image</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="nx">reader</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">paletted</span> <span class="o">:=</span> <span class="nx">image</span><span class="p">.</span><span class="nx">NewPaletted</span><span class="p">(</span><span class="nx">img</span><span class="p">.</span><span class="nx">Bounds</span><span class="p">(),</span> <span class="nx">palette</span><span class="p">.</span><span class="nx">WebSafe</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">draw</span><span class="p">.</span><span class="nx">FloydSteinberg</span><span class="p">.</span><span class="nx">Draw</span><span class="p">(</span><span class="nx">paletted</span><span class="p">,</span> <span class="nx">img</span><span class="p">.</span><span class="nx">Bounds</span><span class="p">(),</span> <span class="nx">img</span><span class="p">,</span> <span class="nx">image</span><span class="p">.</span><span class="nx">ZP</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">f</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Create</span><span class="p">(</span><span class="s">&quot;floyd_steinberg.gif&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">opts</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">gif</span><span class="p">.</span><span class="nx">GIF</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Image</span><span class="p">:</span>     <span class="p">[]</span><span class="o">*</span><span class="nx">image</span><span class="p">.</span><span class="nx">Paletted</span><span class="p">{</span><span class="nx">paletted</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">Delay</span><span class="p">:</span>     <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">0</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">LoopCount</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">gif</span><span class="p">.</span><span class="nx">EncodeAll</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="nx">opts</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果:
<img src="http://shogo82148.github.io/images/2015-04-25-floyd_steinberg.gif" alt="floyd_steinberg.gif" /></p>

<p>最初よりはかなり良くなったものの、なんだかざらついた感じがします。
昔はこんな感じの画像よく見ましたね・・・すごく20世紀な感じがします。</p>

<h2>メディアンカットで減色してみる</h2>

<p>20世紀感の原因は<a href="http://www.htmq.com/color/websafe216.shtml">Webセーフカラー</a>(この言葉ってもはや死語なのでは)を使ってるからです。
21世紀の現在においてはWebセーフカラーでない色を使っても、色が変わることはほとんど無いので、
24bitカラーで表現可能な1677万色の中から自由に256色を選択できます。</p>

<p>で、問題はその256色をどうやって選択するかなんですが、
Goの標準ライブラリにはインターフェースは定義されているものの実装が存在しない(？)みたいです。
いろいろ探しまわって<a href="https://github.com/soniakeys/quant">soniakeys/quant</a>というパッケージを見つけたのでこれを使ってみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;github.com/soniakeys/quant/median&quot;</span>
</span><span class='line'>  <span class="s">&quot;image&quot;</span>
</span><span class='line'>  <span class="s">&quot;image/gif&quot;</span>
</span><span class='line'>  <span class="nx">_</span> <span class="s">&quot;image/png&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;Lenna.png&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">reader</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">img</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">image</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="nx">reader</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">q</span> <span class="o">:=</span> <span class="nx">median</span><span class="p">.</span><span class="nx">Quantizer</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">paletted</span> <span class="o">:=</span> <span class="nx">q</span><span class="p">.</span><span class="nx">Image</span><span class="p">(</span><span class="nx">img</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">f</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Create</span><span class="p">(</span><span class="s">&quot;median.gif&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">opts</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">gif</span><span class="p">.</span><span class="nx">GIF</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Image</span><span class="p">:</span>     <span class="p">[]</span><span class="o">*</span><span class="nx">image</span><span class="p">.</span><span class="nx">Paletted</span><span class="p">{</span><span class="nx">paletted</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">Delay</span><span class="p">:</span>     <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">0</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">LoopCount</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">gif</span><span class="p">.</span><span class="nx">EncodeAll</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="nx">opts</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://shogo82148.github.io/images/2015-04-25-median.gif" alt="median.gif" /></p>

<h2>メディアンカットで減色してディザリングもやってみる</h2>

<p>減色前の画像を渡すと減色したあとの画像を返してくれる<a href="https://github.com/soniakeys/quant">soniakeys/quant</a>の便利メソッドを
使って実装してみましたが、
ディザリングをしてくれないのでグラデーション部分があまりキレイではありません。</p>

<p><a href="https://github.com/soniakeys/quant">soniakeys/quant</a>を使うのはパレットの作成だけにして、
draw.FloydSteinbergでディザリングを行ってみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;github.com/soniakeys/quant/median&quot;</span>
</span><span class='line'>  <span class="s">&quot;image&quot;</span>
</span><span class='line'>  <span class="s">&quot;image/color&quot;</span>
</span><span class='line'>  <span class="s">&quot;image/draw&quot;</span>
</span><span class='line'>  <span class="s">&quot;image/gif&quot;</span>
</span><span class='line'>  <span class="nx">_</span> <span class="s">&quot;image/png&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;Lenna.png&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">reader</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">img</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">image</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="nx">reader</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">q</span> <span class="o">:=</span> <span class="nx">median</span><span class="p">.</span><span class="nx">Quantizer</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">p</span> <span class="o">:=</span> <span class="nx">q</span><span class="p">.</span><span class="nx">Quantize</span><span class="p">(</span><span class="nb">make</span><span class="p">(</span><span class="nx">color</span><span class="p">.</span><span class="nx">Palette</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">),</span> <span class="nx">img</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">paletted</span> <span class="o">:=</span> <span class="nx">image</span><span class="p">.</span><span class="nx">NewPaletted</span><span class="p">(</span><span class="nx">img</span><span class="p">.</span><span class="nx">Bounds</span><span class="p">(),</span> <span class="nx">p</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">draw</span><span class="p">.</span><span class="nx">FloydSteinberg</span><span class="p">.</span><span class="nx">Draw</span><span class="p">(</span><span class="nx">paletted</span><span class="p">,</span> <span class="nx">img</span><span class="p">.</span><span class="nx">Bounds</span><span class="p">(),</span> <span class="nx">img</span><span class="p">,</span> <span class="nx">image</span><span class="p">.</span><span class="nx">ZP</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">f</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Create</span><span class="p">(</span><span class="s">&quot;median-floyd-steinberg.gif&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">opts</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">gif</span><span class="p">.</span><span class="nx">GIF</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Image</span><span class="p">:</span>     <span class="p">[]</span><span class="o">*</span><span class="nx">image</span><span class="p">.</span><span class="nx">Paletted</span><span class="p">{</span><span class="nx">paletted</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">Delay</span><span class="p">:</span>     <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">0</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">LoopCount</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">gif</span><span class="p">.</span><span class="nx">EncodeAll</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="nx">opts</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果:
<img src="http://shogo82148.github.io/images/2015-04-25-median-floyd-steinberg.gif" alt="median-floyd-steinberg.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go言語でshuffleする話]]></title>
    <link href="http://shogo82148.github.io/blog/2015/04/25/shuffle-in-golang/"/>
    <updated>2015-04-25T18:07:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/04/25/shuffle-in-golang</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle">Fisher-Yates shuffle</a>を使ってシャッフルライブラリ作ってみました。</p>

<ul>
<li>https://github.com/shogo82148/go-shuffle</li>
</ul>


<p>標準ライブラリのsortと似たような感じで使えます。
デフォルトでintとfloat64とstringのシャッフルに対応していて、
他の型をシャッフルしたい場合はインターフェースを実装してね、って感じです。
実装が簡単なので、インターフェース定義する手間とシャッフルのアルゴリズム自前で書く手間ほとんど一緒ではという気もするけど、
まあライブラリ作成の練習ってことで。</p>

<p>で、ここからが本題。
Fisher-Yates shuffleの名前は以前から知ってたけど、
この前某プロジェクトで以下のようなshuffleの実装を発見。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;math/rand&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">shuffle</span><span class="p">(</span><span class="nx">a</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">a</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">j</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nx">Intn</span><span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">a</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fisher-Yates shuffleと似ているけど、なにかが違う。
ちゃんとシャッフルされているのか気になったので検証してみました。</p>

<!-- More -->


<h2>検証</h2>

<p>n個の数列をシャッフルすることを考えます。
シャッフルの後i番目の要素がj番目に移動する確率を <script type="math/tex">P_n(i, j)</script> と定義します(golangのコードにあわせて0-originで考えます)。</p>

<p>完全にランダムにシャッフルされていれば、
元の数列のどの要素も0からn-1の範囲に一様分布するはずです。
つまり、以下の式がなりたてば「シャッフルされている」と言えそうです。</p>

<script type="math/tex; mode=display">
P_n(i, j) = \frac{1}{n}　　　(i, j = 0, \dots, n - 1)
</script>


<h3>n=1の場合</h3>

<p>n=1の場合は、必ず0番目と0番目の入れ替え(つまり順番変わらない)になります。
上で定義した確率を計算すると<script type="math/tex">P_1(0, 0) = 1/1</script>となるので、シャッフルされていると言えます。</p>

<h3>n=k+1の場合</h3>

<p>ループがk回周ったあと0&#8230;k-1の要素はシャッフルされていると仮定して、
最後のn=k+1回目のループが周ったあと正しくシャッフルされているかを検証します。
全てのi, jの組み合わせについて考えるのは大変なので、いくつか場合分け。</p>

<p>i=n-1の場合。
n-1番目の要素と交換されるのは、0&#8230;n-1番目の中からランダムに一つなので、以下のことはすぐに分かりますね。</p>

<script type="math/tex; mode=display">
P_n(n-1, j) = \frac{1}{n}　　　(j = 0, \dots, n - 1)
</script>


<p>i,j &lt; n-1 の場合。
n回目のループでi番目の要素がj番目に来る確率＝i番目の要素がn-1回のループでj番目に来る確率×最後のループでj番目が入れ替え対象にならない確率なので、
以下のようになります。</p>

<script type="math/tex; mode=display">
P_n(i, j) = P_{n-1}(i,j) \times \frac{n-1}{n} = \frac{1}{n-1} \times \frac{n-1}{n} = \frac{1}{n}
</script>


<p>i&lt;n-1, j=n-1の場合。
n回目のループでi番目の要素がj番目に来る確率＝i番目の要素がn-1回のループでj番目に来る確率×最後のループでj番目が入れ替え対象になる確率です。</p>

<script type="math/tex; mode=display">
P_n(i, n-1) = \sum_{j=0}^{n-2}P_{n-1}(i,j)\times\frac{1}{n} = \frac{1}{n}
</script>


<p>これで全ての場合について</p>

<script type="math/tex; mode=display">
P_n(i, j) = \frac{1}{n}　　　(i, j = 0, \dots, n - 1)
</script>


<p>が成り立ち、シャッフルされているということがわかりました。
数学的帰納法により、1以上の全ての自然数についてシャッフルが行われることになります。</p>

<h2>ループの中でaの値を書き換えるていることについて</h2>

<p><code>for i := range a</code>でイテレーションしている最中に
元のコレクションを書き換える操作をしているのが気になって逆アセンブルしてみた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--- prog list "shuffle" ---
</span><span class='line'>0000 (/Users/shogo/shuffle.go:5) TEXT    shuffle+0(SB),$40-24
</span><span class='line'>0001 (/Users/shogo/shuffle.go:5) FUNCDATA $0,gcargs·0+0(SB)
</span><span class='line'>0002 (/Users/shogo/shuffle.go:5) FUNCDATA $1,gclocals·0+0(SB)
</span><span class='line'>0003 (/Users/shogo/shuffle.go:5) TYPE    a+0(FP){[]int},$24
</span><span class='line'>0004 (/Users/shogo/shuffle.go:5) TYPE    i+-16(SP){int},$8
</span><span class='line'>0005 (/Users/shogo/shuffle.go:5) TYPE    autotmp_0001+-24(SP){int},$8
</span><span class='line'>0006 (/Users/shogo/shuffle.go:5) TYPE    autotmp_0002+-8(SP){int},$8
</span><span class='line'>0007 (/Users/shogo/shuffle.go:5) TYPE    autotmp_0003+0(SP){int},$8
</span><span class='line'>0008 (/Users/shogo/shuffle.go:6) MOVQ    a+8(FP),BX
</span><span class='line'>0009 (/Users/shogo/shuffle.go:6) MOVQ    $0,DI
</span><span class='line'>0010 (/Users/shogo/shuffle.go:6) MOVQ    BX,autotmp_0002+-8(SP)
</span><span class='line'>0011 (/Users/shogo/shuffle.go:6) JMP     ,13
</span><span class='line'>0012 (/Users/shogo/shuffle.go:6) INCQ    ,DI
</span><span class='line'>0013 (/Users/shogo/shuffle.go:6) MOVQ    autotmp_0002+-8(SP),BP
</span><span class='line'>0014 (/Users/shogo/shuffle.go:6) CMPQ    DI,BP
</span><span class='line'>0015 (/Users/shogo/shuffle.go:6) JGE     $0,60
</span><span class='line'>0016 (/Users/shogo/shuffle.go:6) MOVQ    DI,autotmp_0001+-24(SP)
</span><span class='line'>0017 (/Users/shogo/shuffle.go:7) MOVQ    DI,BX
</span><span class='line'>0018 (/Users/shogo/shuffle.go:7) MOVQ    DI,i+-16(SP)
</span><span class='line'>0019 (/Users/shogo/shuffle.go:7) INCQ    ,BX
</span><span class='line'>0020 (/Users/shogo/shuffle.go:7) MOVQ    BX,(SP)
</span><span class='line'>0021 (/Users/shogo/shuffle.go:7) CALL    ,rand.Intn+0(SB)
</span><span class='line'>0022 (/Users/shogo/shuffle.go:7) MOVQ    i+-16(SP),R9
</span><span class='line'>0023 (/Users/shogo/shuffle.go:7) MOVQ    autotmp_0001+-24(SP),DI
</span><span class='line'>0024 (/Users/shogo/shuffle.go:7) MOVQ    a+8(FP),DX
</span><span class='line'>0025 (/Users/shogo/shuffle.go:7) MOVQ    a+0(FP),AX
</span><span class='line'>0026 (/Users/shogo/shuffle.go:7) MOVQ    8(SP),CX
</span><span class='line'>0027 (/Users/shogo/shuffle.go:8) MOVQ    AX,BX
</span><span class='line'>0028 (/Users/shogo/shuffle.go:8) MOVQ    R9,BP
</span><span class='line'>0029 (/Users/shogo/shuffle.go:8) CMPQ    R9,DX
</span><span class='line'>0030 (/Users/shogo/shuffle.go:8) JCS     $1,33
</span><span class='line'>0031 (/Users/shogo/shuffle.go:8) CALL    ,runtime.panicindex+0(SB)
</span><span class='line'>0032 (/Users/shogo/shuffle.go:8) UNDEF   ,
</span><span class='line'>0033 (/Users/shogo/shuffle.go:8) LEAQ    (BX)(BP*8),BX
</span><span class='line'>0034 (/Users/shogo/shuffle.go:8) MOVQ    (BX),SI
</span><span class='line'>0035 (/Users/shogo/shuffle.go:8) MOVQ    AX,BX
</span><span class='line'>0036 (/Users/shogo/shuffle.go:8) MOVQ    R9,BP
</span><span class='line'>0037 (/Users/shogo/shuffle.go:8) CMPQ    R9,DX
</span><span class='line'>0038 (/Users/shogo/shuffle.go:8) JCS     $1,41
</span><span class='line'>0039 (/Users/shogo/shuffle.go:8) CALL    ,runtime.panicindex+0(SB)
</span><span class='line'>0040 (/Users/shogo/shuffle.go:8) UNDEF   ,
</span><span class='line'>0041 (/Users/shogo/shuffle.go:8) LEAQ    (BX)(BP*8),BX
</span><span class='line'>0042 (/Users/shogo/shuffle.go:8) MOVQ    AX,BP
</span><span class='line'>0043 (/Users/shogo/shuffle.go:8) MOVQ    CX,R8
</span><span class='line'>0044 (/Users/shogo/shuffle.go:8) CMPQ    CX,DX
</span><span class='line'>0045 (/Users/shogo/shuffle.go:8) JCS     $1,48
</span><span class='line'>0046 (/Users/shogo/shuffle.go:8) CALL    ,runtime.panicindex+0(SB)
</span><span class='line'>0047 (/Users/shogo/shuffle.go:8) UNDEF   ,
</span><span class='line'>0048 (/Users/shogo/shuffle.go:8) LEAQ    (BP)(R8*8),BP
</span><span class='line'>0049 (/Users/shogo/shuffle.go:8) MOVQ    (BP),R8
</span><span class='line'>0050 (/Users/shogo/shuffle.go:8) MOVQ    R8,(BX)
</span><span class='line'>0051 (/Users/shogo/shuffle.go:8) MOVQ    AX,BX
</span><span class='line'>0052 (/Users/shogo/shuffle.go:8) MOVQ    CX,BP
</span><span class='line'>0053 (/Users/shogo/shuffle.go:8) CMPQ    CX,DX
</span><span class='line'>0054 (/Users/shogo/shuffle.go:8) JCS     $1,57
</span><span class='line'>0055 (/Users/shogo/shuffle.go:8) CALL    ,runtime.panicindex+0(SB)
</span><span class='line'>0056 (/Users/shogo/shuffle.go:8) UNDEF   ,
</span><span class='line'>0057 (/Users/shogo/shuffle.go:8) LEAQ    (BX)(BP*8),BX
</span><span class='line'>0058 (/Users/shogo/shuffle.go:8) MOVQ    SI,(BX)
</span><span class='line'>0059 (/Users/shogo/shuffle.go:6) JMP     ,12
</span><span class='line'>0060 (/Users/shogo/shuffle.go:10) RET     ,</span></code></pre></td></tr></table></div></figure>


<p>アセンブル読めてないけど、ループの最初で<code>len(a)</code>を<code>autotmp_0002+-8(SP)</code>に保存しているっぽいのを感じる。
自動的に<code>size := len(a) for i := 0; i &lt; size; i++ {</code> みたいな処理に書き換えているみたい。</p>
]]></content>
  </entry>
  
</feed>
