<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shogo's Blog]]></title>
  <link href="https://shogo82148.github.io/atom.xml" rel="self"/>
  <link href="https://shogo82148.github.io/"/>
  <updated>2017-10-28T21:15:36+09:00</updated>
  <id>https://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Go言語の浮動小数点数のお話]]></title>
    <link href="https://shogo82148.github.io/blog/2017/10/28/golang-floating-point-number/"/>
    <updated>2017-10-28T20:12:48+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/10/28/golang-floating-point-number</id>
    <content type="html"><![CDATA[<p>元ネタ:</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[JavaScriptの問題]<br>var a = 0.3 - 0.2;<br>var b = 0.2 - 0.1;<br>var c = a==b;<br><br>cの中身はどれ？</p>&mdash; RAO(らお) (@RIORAO) <a href="https://twitter.com/RIORAO/status/922871767147749376?ref_src=twsrc%5Etfw">October 24, 2017</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">正確な実数計算をやらされるJavaScriptくん <a href="https://twitter.com/hashtag/%E6%93%AC%E7%AB%9C%E6%88%AF%E7%94%BB?src=hash&amp;ref_src=twsrc%5Etfw">#擬竜戯画</a> <a href="https://t.co/ipE56C2YbV">pic.twitter.com/ipE56C2YbV</a></p>&mdash; RAO(らお) (@RIORAO) <a href="https://twitter.com/RIORAO/status/923599110262874112?ref_src=twsrc%5Etfw">October 26, 2017</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>コンピューターで浮動小数点数を扱ったことのある人なら一度は経験する、
数学上の計算とコンピューター上の計算が合わない計算の一例ですね。</p>

<p>この件に関して、Go言語では正しく(=数学的な結果と同じように)計算できるとの情報が。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">おそらくGoはコンパイラがa=0.1とb=0.1に変換していると思われます。<br>添付した画像のコードだとtrueになりますが、constをvarに変更するとfalseになります。constはコンパイル時に計算されますが、varは実行時に計算されるためです。 <a href="https://t.co/LpKZF2kOjH">pic.twitter.com/LpKZF2kOjH</a></p>&mdash; morikuni (@inukirom) <a href="https://twitter.com/inukirom/status/923721661408411650?ref_src=twsrc%5Etfw">October 27, 2017</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>しかしながら、inukiromさんのこの推察、半分はあってますが、半分は間違っていると思います。
なぜGo言語でこのような結果になったのか、検証してみました。</p>

<!-- More -->


<h2>Goの数値定数の型について</h2>

<p>以前<a href="https://shogo82148.github.io/blog/2017/02/19/golang-compile-time-fib/">Go言語でコンパイル時フィボナッチ数列計算</a>で紹介した
<a href="https://qiita.com/sonatard/items/464a9d45c689386edfe1">Better C - Go言語と整数 #golang</a>にもあるように、
Goの定数には「型がない(場合がある)」「任意の精度で計算してくれる」という特徴があります。</p>

<p>このため、普通はどう考えてもオーバーフローしそうなこんな演算も・・・</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">i</span> <span class="kt">uint64</span> <span class="p">=</span> <span class="mi">31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679</span> <span class="o">%</span> <span class="mi">1000000007</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://play.golang.org/p/FkMVpY2Fa3">play.golang.org/p/FkMVpY2Fa3</a></li>
</ul>


<p>型がない定数同士の演算は 162132938 と正しい答えを出してくれます。</p>

<p>しかし、明示的に型を指定すると、今度はオーバーフローしてしまいます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">i</span> <span class="kt">uint64</span> <span class="p">=</span> <span class="nb">uint64</span><span class="p">(</span><span class="mi">31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679</span><span class="p">)</span> <span class="o">%</span> <span class="mi">1000000007</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox436519650</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">8</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span> <span class="nx">constant</span> <span class="mi">31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679</span> <span class="nx">overflows</span> <span class="kt">uint64</span>
</span></code></pre></td></tr></table></div></figure>


<h2>問題の計算</h2>

<p>さて、最初の問題に戻りましょう。
以下のコードで、0.1, 0.2, 0.3 は「型のない定数」なので、「任意の精度で計算して」くれます。
その計算結果を <code>float64</code> に変換すると全く同じ数値になるので、 <code>c</code> は <code>true</code> になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">a</span> <span class="o">:=</span> <span class="mf">0.3</span> <span class="o">-</span> <span class="mf">0.2</span>
</span><span class='line'>  <span class="nx">b</span> <span class="o">:=</span> <span class="mf">0.2</span> <span class="o">-</span> <span class="mf">0.1</span>
</span><span class='line'>  <span class="nx">c</span> <span class="o">:=</span> <span class="nx">a</span> <span class="o">==</span> <span class="nx">b</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://play.golang.org/p/X36rciE8by">play.golang.org/p/X36rciE8by</a></li>
</ul>


<p>一方、以下のように明示的に型を与えると、 <code>float64</code> の精度でしか計算してくれません。
この場合は他のほとんどの言語同様、 <code>c</code> は <code>false</code> となります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">a</span> <span class="o">:=</span> <span class="nb">float64</span><span class="p">(</span><span class="mf">0.3</span><span class="p">)</span> <span class="o">-</span> <span class="nb">float64</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">b</span> <span class="o">:=</span> <span class="nb">float64</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span> <span class="o">-</span> <span class="nb">float64</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">c</span> <span class="o">:=</span> <span class="nx">a</span> <span class="o">==</span> <span class="nx">b</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://play.golang.org/p/9_jKFfc5Hy">play.golang.org/p/9_jKFfc5Hy</a></li>
</ul>


<blockquote><p>おそらくGoはコンパイラがa=0.1とb=0.1に変換していると思われます。</p></blockquote>

<p>というわけで、先程のinukiromさんのこの推察ツイートのこの部分は正解です。</p>

<h2>計算されるのは実行時？コンパイル時？</h2>

<p>次にこんな二つのコードを用意して <code>GOSSAFUNC=main go run main.go</code> を実行し、
<a href="https://shinpei.github.io/blog/2016/08/13/what-ssa-brings-to-go-17">SSA</a>による最適化の様子を見てみます。
違いは <code>x</code>, <code>y</code>, <code>z</code> が <code>const</code> で宣言されているか、<code>var</code> で宣言されているか、だけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="p">(</span>
</span><span class='line'>      <span class="nx">x</span> <span class="p">=</span> <span class="mf">0.3</span>
</span><span class='line'>      <span class="nx">y</span> <span class="p">=</span> <span class="mf">0.2</span>
</span><span class='line'>      <span class="nx">z</span> <span class="p">=</span> <span class="mf">0.1</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  <span class="nx">a</span> <span class="o">:=</span> <span class="nx">x</span> <span class="o">-</span> <span class="nx">y</span>
</span><span class='line'>  <span class="nx">b</span> <span class="o">:=</span> <span class="nx">y</span> <span class="o">-</span> <span class="nx">z</span>
</span><span class='line'>  <span class="nx">c</span> <span class="o">:=</span> <span class="nx">a</span> <span class="o">==</span> <span class="nx">b</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">const</span> <span class="p">(</span>
</span><span class='line'>      <span class="nx">x</span> <span class="p">=</span> <span class="mf">0.3</span>
</span><span class='line'>      <span class="nx">y</span> <span class="p">=</span> <span class="mf">0.2</span>
</span><span class='line'>      <span class="nx">z</span> <span class="p">=</span> <span class="mf">0.1</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  <span class="nx">a</span> <span class="o">:=</span> <span class="nx">x</span> <span class="o">-</span> <span class="nx">y</span>
</span><span class='line'>  <span class="nx">b</span> <span class="o">:=</span> <span class="nx">y</span> <span class="o">-</span> <span class="nx">z</span>
</span><span class='line'>  <span class="nx">c</span> <span class="o">:=</span> <span class="nx">a</span> <span class="o">==</span> <span class="nx">b</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果は以下のツイートの通り。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">varのときは 0.09999999999999998 と 0.1 の比較に<br>const のときは 0.1 と 0.1 の比較になった ( go version go1.9.2 darwin/amd64 ) <a href="https://t.co/1obA95RzBC">pic.twitter.com/1obA95RzBC</a></p>&mdash; Ichinose Shogo (@shogo82148) <a href="https://twitter.com/shogo82148/status/924156133522120705?ref_src=twsrc%5Etfw">October 28, 2017</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>最適化の結果コンパイル時に計算が行われ、(計算結果に多少の誤差はありますが)
<code>var</code> の場合でも <code>const</code> の場合でも <code>x</code>, <code>y</code>, <code>z</code> は消えてしまいました。</p>

<blockquote><p>constはコンパイル時に計算されますが、varは実行時に計算されるためです。</p></blockquote>

<p>そういうわけで、この部分は間違いです。
Goのコンパイラは賢いので、 <code>var</code> であってもコンパイル時に計算可能ならば計算してくれます。
(比較演算子は範囲外？みたいだけど・・・)</p>

<h2>任意の精度で計算の限界に迫る</h2>

<p>ここまでは <code>a</code> や <code>b</code> は <code>float64</code> という型を持っていました。
次に以下のように書き換えて <code>a</code> も <code>b</code> も「型の無い定数」にしてみましょう。
すると少し面白い結果が得られます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">const</span> <span class="nx">a</span> <span class="p">=</span> <span class="mf">0.3</span> <span class="o">-</span> <span class="mf">0.2</span>
</span><span class='line'>  <span class="kd">const</span> <span class="nx">b</span> <span class="p">=</span> <span class="mf">0.2</span> <span class="o">-</span> <span class="mf">0.1</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">c</span> <span class="p">=</span> <span class="nx">a</span> <span class="o">==</span> <span class="nx">b</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%e\n&quot;</span><span class="p">,</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://play.golang.org/p/T26lQ0Ajvw">play.golang.org/p/T26lQ0Ajvw</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kc">false</span>
</span><span class='line'><span class="mf">9.322926e-156</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>c</code> が <code>false</code> になってしまいました。
「任意の精度で計算」と言ってもコンピューター上の計算である以上、有効桁数には限界があります。
<code>a</code> と <code>b</code> の差が <code>9.322926e-156</code> になったことから、おそらく有効桁数150桁程度で計算していると考えられます。</p>

<p>ここでちょっとソースコードを覗いてみると・・・</p>

<ul>
<li><a href="https://github.com/golang/go/blob/master/src/cmd/compile/internal/gc/mpfloat.go#L18">mpfloat.go</a></li>
</ul>


<p>512bitの精度で計算しているようです。</p>

<script type="math/tex">512 \times \log 2 = 154.1273577...</script>


<p> なので、有効桁数150桁程度という予想通りです。</p>

<h2>まとめ</h2>

<p>何事にも限界ってものがある。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ACMのドメイン検証をシミュレートするやつ書いた]]></title>
    <link href="https://shogo82148.github.io/blog/2017/10/22/aws-certification-manager-validation/"/>
    <updated>2017-10-22T15:45:02+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/10/22/aws-certification-manager-validation</id>
    <content type="html"><![CDATA[<p>始まりは一件のメールから。</p>

<blockquote><p>Title: Action Required - Your certificate renewal</p>

<p>Greetings from Amazon Web Services,</p>

<p>You have an AWS Certificate Manager (ACM) provided SSL/TLS certificate in your AWS account that expires on Nov 04, 2017 at 12:00:00 UTC. That certificate has the following domains:
example.com, *.example.com</p>

<p>AWS account ID: xxxxxx
AWS Region name: us-east-1
Certificate identifier: arn:aws:acm:us-east-1:xxxxxx:certificate/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</p>

<p>Therefore, ACM has initiated the process to renew this certificate. You must take the action below before Nov 04, 2017 at 12:00:00 UTC to avoid certificate expiration, which might cause your website to become unreachable.
To complete the renewal of this certificate, the domain owners must use the approval link that was sent in separate validation request emails. Those emails were last sent on Sep 20, 2017 at 12:11:48 UTC.
以下略</p></blockquote>

<p>要約すると、AWS Certificate Manager (以下ACM)で管理している証明書の自動更新に失敗したので、
手動更新をしてくれとのこと。</p>

<p>このメールの対応方法についてのメモと、次回から自動更新に成功するようおこなった設定について書きます。
ついでに確認用のツールも作ったので、その紹介も。</p>

<ul>
<li><a href="https://github.com/shogo82148/go-acm-checker">shogo82148/go-acm-checker</a></li>
</ul>


<!-- More -->


<h2>手動での対応方法</h2>

<p>メール以下のページへのリンクが貼られているので、これに従えば基本的にはOK。</p>

<ul>
<li><a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/resend-email-ssl/">I didn&rsquo;t receive a validation email for the SSL certificate I requested through AWS Certificate Manager</a></li>
</ul>


<p>日本語だと Developers.IO さんの記事が詳しいです。</p>

<ul>
<li><a href="https://dev.classmethod.jp/etc/acm-expire-cation/">ACMで管理されているSSL/TLS証明書の自動更新失敗について</a></li>
</ul>


<blockquote><ol>
<li>AWSマネジメントコンソールにログイン</li>
<li>Certificate Managerを選択</li>
<li>更新対象の証明書チェックボタンを選択</li>
<li>[アクション]-[検証Eメールの再送信]を選択</li>
<li>検証メールアドレスに送信された「Certificate approval for &lt;ドメイン名>」に記載されている「Amazon Certificate Approvals」を選択</li>
<li>承認ページが表示されますので、ドメイン名・AWSアカウントID・証明書識別子に相違がないことを確認して「I Approve」を選択</li>
<li>「Success」が表示されることを確認</li>
<li>Certificate Managerに戻って頂き、証明書の更新ステータスが「成功」になっていることを確認</li>
</ol>
</blockquote>

<h2>頑張って自動更新を有効にする</h2>

<p>しかしまあ、更新作業が面倒でACMを使っているというのに、
13ヶ月ごとに更新作業をするのは面倒です。</p>

<p>以下のドキュメントを参考に、自動更新が有効になるよう設定しましょう。</p>

<ul>
<li><a href="http://docs.aws.amazon.com/ja_jp/acm/latest/userguide/configure-domain-for-automatic-validation.html">自動検証のためにドメインを設定する</a></li>
</ul>


<blockquote><ul>
<li>ACM によって証明書の各ドメインと HTTPS 接続を確立できる必要があります。</li>
<li>各接続では、返される証明書が ACM が更新している証明書と一致する必要があります。</li>
</ul>
</blockquote>

<h2>証明書のシリアル番号チェッカーを書いてみた</h2>

<p>HTTPS接続の確立は <code>curl</code> を使って一発ですが、
「返される証明書が ACM が更新している証明書と一致する」のを確認するのはなかなか骨です。
一応、Chromeのデベロッパーコンソール→Securityタブ→View Certificate→詳細な情報→シリアル番号と辿っていけば、
ACMに表示されているシリアル番号との一致を確認できます。
コンソールから確認できないものかと少しググったのですが、見つけられませんでした。</p>

<p>ということで、Go言語でシリアル番号を表示するツールをサクッと書いてみました。
<code>go run main.go https://example.com</code> で実行できます。
こういうのがすぐに書けるのがGoのいいところですね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;strings&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">DefaultClient</span><span class="p">.</span><span class="nx">CheckRedirect</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">req</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">via</span> <span class="p">[]</span><span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ErrUseLastResponse</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Get</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">serial</span> <span class="o">:=</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">TLS</span><span class="p">.</span><span class="nx">PeerCertificates</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">SerialNumber</span><span class="p">.</span><span class="nx">Bytes</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">s</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">serial</span><span class="p">))</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">b</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">serial</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">s</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;%02x&quot;</span><span class="p">,</span> <span class="nx">b</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">strings</span><span class="p">.</span><span class="nx">Join</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="s">&quot;:&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>自動検証シミュレーター</h2>

<p>複数のドメインを管理しているとシリアル番号の確認をするのも面倒になってきたので、
ACMに登録されている証明書を検証するシミュレーターを書いてみました。</p>

<ul>
<li><a href="https://github.com/shogo82148/go-acm-checker">shogo82148/go-acm-checker</a></li>
</ul>


<p>Go製のツールなので、おなじみの<code>go get</code>でインストールできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>go get -u github.com/shogo82148/go-acm-checker</span></code></pre></td></tr></table></div></figure>


<p>実行するとACMで管理されている証明書の情報を全リージョンから取ってきて、
検証を試みます。
検証に成功すると以下のようなメッセージが表示されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go-acm-checker
</span><span class='line'>2017/10/21 14:30:04 success to validate example.com(arn:aws:acm:us-east-1:1234567890:certificate/00000000-0000-0000-0000-000000000000)</span></code></pre></td></tr></table></div></figure>


<p>検証に失敗すると、どのドメインの検証に失敗したかを教えてくれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go-acm-checker
</span><span class='line'>2017/10/21 14:30:05 failed to validate example.com
</span><span class='line'>2017/10/21 14:30:05 failed to validate *.example.com
</span><span class='line'>2017/10/21 14:30:05 failed to validate example.com(arn:aws:acm:us-east-1:1234567890:certificate/00000000-0000-0000-0000-000000000000)</span></code></pre></td></tr></table></div></figure>


<p>検証に失敗した場合、「<a href="http://docs.aws.amazon.com/ja_jp/acm/latest/userguide/configure-domain-for-automatic-validation.html">自動検証のためにドメインを設定する</a>」を参考に、
<code>https://example.com/</code> や <code>https://www.example.com/</code> に正常にアクセスできる状態にしてください。</p>

<h2>まとめ</h2>

<p>AMCの手動更新の方法と、自動更新を有効化するための方法を簡単にまとめてみました。
なお、 <a href="https://github.com/shogo82148/go-acm-checker">shogo82148/go-acm-checker</a> で検証成功したからといって、
ACMの検証が必ず成功するとは限りません。
自動更新だからと油断せずに、こまめにメールはチェックしましょうね。</p>

<p>(ちなみに今回メールが来たドメインは自動更新できるように設定し直したけど、自動更新のタイミングがよくわからないので、いつ手動更新をやるかチキンレースの真っ最中です・・・)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl 5.26 & Unicode 9.0 で変わる書記素クラスタ(grapheme Cluster)のお話]]></title>
    <link href="https://shogo82148.github.io/blog/2017/08/25/unicode9-grapheme-cluster/"/>
    <updated>2017-08-25T07:08:44+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/08/25/unicode9-grapheme-cluster</id>
    <content type="html"><![CDATA[<p><a href="http://gihyo.jp/magazine/wdpress/archive/2017/vol100">WEB+DB PRESS Vol.100</a>が発売されましたね。
記念すべき Vol.100 おめでとうございます！</p>

<p><a href="https://www.amazon.co.jp/WEB-DB-PRESS-Vol-100-%E6%B2%B3%E5%8E%9F/dp/4774191299/ref=as_li_ss_il?_encoding=UTF8&psc=1&refRID=KWT48YN41EFBHYXPM8YQ&linkCode=li2&tag=shogo82148-22&linkId=c41e466f8dad4ea5b2c2287f1e6c5efc" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=4774191299&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=shogo82148-22" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=shogo82148-22&l=li2&o=9&a=4774191299" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>WEB+DB PRESS の連載「Perl Hackers Hub」今回のテーマは「【第46回】Perl 5.26で変わること」です。
Perl 5.26 で追加になった機能、アップグレードの際に気をつけなければならないところ( 特に @INC 問題とか )などに触れられているので、
Perl Monger の方はぜひ読むとよいと思います。</p>

<p>追加された機能のひとつとして Unicode 9.0 サポートが挙げられているのですが、以下のような簡単な紹介に留まっています。</p>

<blockquote><p>Unicode 9.0にはオリンピックで活躍するであろう金銀 銅メダルの絵文字などが追加されました。</p></blockquote>

<p>Unicode 9.0 で変わるのはそれだけではありません！
Unicode 9.0 での <strong>書記素クラスタ(grapheme cluster)</strong> の扱いを少し前に調査したので紹介します。</p>

<!-- More -->


<h2>書記素クラスタ(grapheme cluster)とは</h2>

<p>書記素クラスタ(grapheme cluster)とは、人間にとって自然な1文字を表すものです。</p>

<p>たとえば &ldquo;é&rdquo; という文字は一見1文字に見えますが、 <code>length</code> で文字数をカウントすると2文字としてカウントされます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ perl -Mutf8 -E 'say length "é"'
</span><span class='line'>2</span></code></pre></td></tr></table></div></figure>


<p>これは <code>length</code> がUnicodeのコードポイント数を数えており、
&ldquo;é"が"e&rdquo;(U+0065) + アクセント記号(U+0301) の2つのコードポイントで構成されているためです。</p>

<p>他にも<a href="https://ja.wikipedia.org/wiki/%E7%95%B0%E4%BD%93%E5%AD%97%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF">異字体セレクタ</a>というのがあったり、
<a href="http://qiita.com/_sobataro/items/47989ee4b573e0c2adfc#%E7%B5%B5%E6%96%87%E5%AD%97%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9">絵文字シーケンス</a>というのがあったりして、
コードポイントの数＝文字数とは限りません。</p>

<p>これらの文字たちを1文字として数えるための概念が書記素クラスタ(grapheme cluster)です。</p>

<h2>Unicode 9.0での変更点</h2>

<p>Unicode 8.0以前も書記素クラスタはあるのですが、
&ldquo;👨‍👨‍👦"のような家族の絵文字が3文字とカウントされてしまったり、
"🇯🇵🇯🇵🇯🇵"のように国旗が連続していると1文字にカウントされてしまったりと、
問題がありました。
Unicode 9.0からはこれらの問題が解決されています。</p>

<p>詳しくは<a href="http://qiita.com/_sobataro/items/47989ee4b573e0c2adfc#%E6%9B%B8%E8%A8%98%E7%B4%A0%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B-unicode-90-%E4%BB%A5%E9%99%8D%E3%81%A8-80-%E4%BB%A5%E5%89%8D%E3%81%AE%E9%81%95%E3%81%84">書記素クラスタに関する Unicode 9.0 以降と 8.0 以前の違い</a>を参照してください。</p>

<h2>Perlでの書記素クラスタ</h2>

<h3>書記素クラスタの使い方</h3>

<p>Perlでは正規表現<code>\X</code>が書記素クラスタにマッチします
(<a href="https://perldoc.perl.org/perlrebackslash.html#Misc">Misc in perlrebackslash</a>)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="mf">5.24.1</span><span class="p">;</span>
</span><span class='line'><span class="nb">binmode</span><span class="p">(</span><span class="bp">STDOUT</span><span class="p">,</span> <span class="s">&quot;:utf8&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$str</span> <span class="o">=</span> <span class="s">&quot;eé&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">@characters</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">@characters</span> <span class="o">=</span> <span class="nb">split</span> <span class="sr">//</span><span class="p">,</span> <span class="nv">$str</span><span class="p">;</span>
</span><span class='line'><span class="n">say</span> <span class="s">&quot;splitを使った場合: &quot;</span><span class="p">,</span> <span class="nb">join</span> <span class="s">&quot; &quot;</span><span class="p">,</span> <span class="nv">@characters</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 書記素クラスタ</span>
</span><span class='line'><span class="nv">@characters</span> <span class="o">=</span> <span class="nv">$str</span> <span class="o">=~</span><span class="sr"> /\X/g</span><span class="p">;</span>
</span><span class='line'><span class="n">say</span> <span class="s">&quot;書記素クラスタを使った場合: &quot;</span><span class="p">,</span> <span class="nb">join</span> <span class="s">&quot; &quot;</span><span class="p">,</span> <span class="nv">@characters</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://wandbox.org/permlink/ImSQW7QAkadczlqt">[Wandbox]三へ( へ՞ਊ ՞)へ ﾊｯﾊｯ</a></li>
</ul>


<p>文字数をカウントは「<a href="https://shogo82148.github.io/blog/2015/04/09/count-substrings-in-perl/">Perlで文字列の出現回数を調べる</a>」の
方法が使えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="mf">5.24.1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$str</span> <span class="o">=</span> <span class="s">&quot;eé&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$length</span> <span class="o">=</span><span class="p">()</span><span class="o">=</span> <span class="nv">$str</span> <span class="o">=~</span><span class="sr"> /\X/g</span><span class="p">;</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$length</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(後から知ったことですが、この <code>=()=</code> を使ったハックには <a href="https://metacpan.org/pod/distribution/perlsecret/lib/perlsecret.pod#Goatse">画像検索してはいけない名前</a> がついているらしいです)</p>

<h3>Perl5.24とPerl5.26の違い</h3>

<p>Perl 5.26 は Unicode 8.0 をサポートしているので、書記素クラスタの問題点が改善されています。
たとえば、Perl 5.24では &ldquo;🇯🇵🇯🇵🇯🇵"が1文字としてカウントされてしまいますが・・・</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="mf">5.24.1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$length</span> <span class="o">=</span><span class="p">()</span><span class="o">=</span> <span class="s">&quot;🇯🇵🇯🇵🇯🇵&quot;</span> <span class="o">=~</span><span class="sr"> /\X/g</span><span class="p">;</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$length</span><span class="p">;</span> <span class="c1"># =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://wandbox.org/permlink/QKl5K45F8BvvPMfz">[Wandbox]三へ( へ՞ਊ ՞)へ ﾊｯﾊｯ</a></li>
</ul>


<p>Perl 5.26 では3文字としてカウントされます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="mf">5.26.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$length</span> <span class="o">=</span><span class="p">()</span><span class="o">=</span> <span class="s">&quot;🇯🇵🇯🇵🇯🇵&quot;</span> <span class="o">=~</span><span class="sr"> /\X/g</span><span class="p">;</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$length</span><span class="p">;</span> <span class="c1"># =&gt; 3</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://wandbox.org/permlink/s05vJF33MlCj9Qvl">[Wandbox]三へ( へ՞ਊ ՞)へ ﾊｯﾊｯ</a></li>
</ul>


<h2>FYI: 他の言語の対応状況</h2>

<h3>Ruby</h3>

<p><a href="http://qiita.com/_sobataro/items/47989ee4b573e0c2adfc">Unicode 絵文字にまつわるあれこれ (絵文字の標準とプログラム上でのハンドリング)</a>で紹介されているように、
<a href="https://github.com/ruby/ruby/blob/17c2828581a4dcd9babb5c754f240aa86523c673/NEWS#L133-L143">Ruby 2.4.0</a>から対応してます。
Ruby 2.4.0は2016年12月25日に正式リリースされているので、この記事を書いている現在(2017年8月25日)は安心して使えます。</p>

<h3>Python</h3>

<p>残念ながら標準の正規表現ライブラリ <a href="https://docs.python.jp/3/library/re.html">re</a> は書記素クラスタに対応していません。
サードパーティーの<a href="https://pypi.python.org/pypi/regex/">reqex</a>がUnicode 10に対応しているらしいので、
そちらを使うと書記素クラスタを扱えるようです。</p>

<h3>Golang</h3>

<blockquote><p><a href="https://github.com/google/re2/wiki/Syntax">https://github.com/google/re2/wiki/Syntax</a>
extended Unicode sequence (NOT SUPPORTED)</p></blockquote>

<p>正規表現は対応していません、残念・・・</p>

<ul>
<li><a href="https://github.com/golang/go/issues/14820">https://github.com/golang/go/issues/14820</a></li>
</ul>


<p><code>x/text</code> に書記素クラスタを扱う機能を追加しようというIssueはありますが、今のところ進捗はないようです。</p>

<h2>参考</h2>

<ul>
<li><a href="https://hydrocul.github.io/wiki/blog/2015/1025-unicode-grapheme-clusters.html">Unicodeのgrapheme cluster (書記素クラスタ)</a></li>
<li><a href="http://qiita.com/_sobataro/items/47989ee4b573e0c2adfc">Unicode 絵文字にまつわるあれこれ (絵文字の標準とプログラム上でのハンドリング)</a></li>
<li><a href="https://engineering.linecorp.com/ja/blog/detail/52">文字数をカウントする7つの方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go1.9から使える Monotonic Clocks を試してみた]]></title>
    <link href="https://shogo82148.github.io/blog/2017/06/26/go19-monotonic-clock/"/>
    <updated>2017-06-26T09:21:42+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/06/26/go19-monotonic-clock</id>
    <content type="html"><![CDATA[<p>先日Go1.9beta1がリリースされました。</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Go 1.9 Beta 1 is released!<br><br>Announcement:<a href="https://t.co/lV5nvXwOoR">https://t.co/lV5nvXwOoR</a><br><br>Get it!<a href="https://t.co/2LhlOo2EtX">https://t.co/2LhlOo2EtX</a><a href="https://twitter.com/hashtag/golang?src=hash">#golang</a> <a href="https://t.co/zm09DwX93q">pic.twitter.com/zm09DwX93q</a></p>&mdash; Go (@golang) <a href="https://twitter.com/golang/status/875117556595515392">June 14, 2017</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<ul>
<li><a href="https://tip.golang.org/doc/go1.9">Go 1.9 Release Notes</a></li>
</ul>


<p>型エイリアスのサポート、<a href="https://tip.golang.org/pkg/math/bits/">math/bits</a>パッケージ、
<a href="https://tip.golang.org/pkg/sync/#Map">sync.Map</a>型など、
今回のアップデートでも便利そうな機能が追加されます。
詳しくは<a href="https://twitter.com/tenntenn">tenntenn</a>さんの<a href="https://www.slideshare.net/takuyaueda967/gopher-fest-2017">Gopher Fest 2017参加レポート</a>をどうぞ。</p>

<p>今回のリリースノートを見て、個人的に注目しているのは<strong>Monotonic Clocksのサポート</strong>です。
他の機能追加はTwitterとかで見かけるけど、
Monotonic Clocksはなぜかあまり見ない・・・。
beta1がでて手軽に試せるようになったので、試してみました。</p>

<h2>Monotonic Clocks</h2>

<p>Go1.8以前で取得していた時刻は「wall clock」といい、<strong>現在の正しい時刻</strong>を知るために使います。
一方「monotonic clock」は、<strong>時間を計る</strong>ために使うものです。
Go1.9からは<code>time.Now</code>で取得できる時刻に「wall clock」と「monotonic clock」が含まれるようになります。</p>

<p><a href="https://tip.golang.org/pkg/time/#hdr-Monotonic_Clocks">timeパッケージのドキュメント</a>から
コード片を引用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>t := time.Now()
</span><span class='line'>... operation that takes 20 milliseconds ...
</span><span class='line'>u := time.Now()
</span><span class='line'>elapsed := t.Sub(u)</span></code></pre></td></tr></table></div></figure>


<p>上のコードで <code>elapsed</code> は 20ms となるはずですが、
実際はそうはならないケースがあります。
具体的には以下のようなケースです。</p>

<ul>
<li>ntpdなどによってOSの時刻が変更された場合</li>
<li>うるう秒が挿入・削除された場合</li>
</ul>


<p>Go1.9からはこのようなケースでも正しく時間を計ることができます。</p>

<h2>うるう秒を入れてみた</h2>

<p>うるう秒が入ったときの挙動が気になったので実際にやってみました。
セットアップが簡単になるよう<a href="http://jjy.nict.go.jp/tsp/link/leap.html">NICTのPerl版SNTP</a>のGolangポートを作ったので、
それを使って偽物のうるう秒を挿入してみます。</p>

<ul>
<li><a href="https://github.com/shogo82148/fakentpd">shogo82148/fakentpd</a></li>
</ul>


<p>インストールはいつものように<code>go get</code>です。
<code>-p</code>オプションで正のうるう秒挿入、<code>-n</code>オプションで負のうるう秒削除です(ほんとうは月末だけだけど、雑な実装のため毎日その日の終わりに挿入・削除されます)。
引数にRFC3339形式で日時を指定すると、その日時を起動時の日時として扱います。</p>

<p>たとえば今月末に正のうるう秒を挿入するには以下のように指定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 上位ntpd側</span>
</span><span class='line'><span class="nv">$ </span>go get github.com/shogo82148/fakentpd
</span><span class='line'><span class="nv">$ </span>sudo fakentpd -p 2017-06-30T23:00:00Z <span class="c"># well known portを使うのでroot権限が必要</span>
</span></code></pre></td></tr></table></div></figure>


<p>このSNTPサーバーを上位ntpdとして参照したクライアントを用意し、<code>date</code>コマンドで様子を確認してみましょう。
(ntpdの設定などの詳細は<a href="http://tkuchiki.hatenablog.com/entry/2015/06/19/083025">tkuchikiさんのうるう秒検証記事</a> を参照)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 下位ntpd側</span>
</span><span class='line'><span class="nv">$ </span><span class="k">while</span> :<span class="p">;</span> <span class="k">do</span> date +<span class="s1">&#39;%Y-%m-%d %H:%M:%S.%3N&#39;</span><span class="p">;</span> usleep 100000<span class="p">;</span> <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(前略)
</span><span class='line'>2017-06-30 23:59:59.040
</span><span class='line'>2017-06-30 23:59:59.141
</span><span class='line'>2017-06-30 23:59:59.243
</span><span class='line'>2017-06-30 23:59:59.344
</span><span class='line'>2017-06-30 23:59:59.445
</span><span class='line'>2017-06-30 23:59:59.547
</span><span class='line'>2017-06-30 23:59:59.648
</span><span class='line'>2017-06-30 23:59:59.749
</span><span class='line'>2017-06-30 23:59:59.851
</span><span class='line'>2017-06-30 23:59:59.952 #
</span><span class='line'>2017-06-30 23:59:59.053 # うるう秒挿入！
</span><span class='line'>2017-06-30 23:59:59.155
</span><span class='line'>2017-06-30 23:59:59.256
</span><span class='line'>2017-06-30 23:59:59.357
</span><span class='line'>2017-06-30 23:59:59.458
</span><span class='line'>2017-06-30 23:59:59.559
</span><span class='line'>2017-06-30 23:59:59.661
</span><span class='line'>2017-06-30 23:59:59.762
</span><span class='line'>2017-06-30 23:59:59.863
</span><span class='line'>2017-06-30 23:59:59.964
</span><span class='line'>2017-07-01 00:00:00.066</span></code></pre></td></tr></table></div></figure>


<p>うるう秒が挿入されたため、59.952から59.053へ時間が巻き戻っていることが確認できます。</p>

<p>これと同等のプログラムをGoで書いて挙動を確認します。
monotonic clockの確認をするために、一緒に起動時からの経過時間も表示するようにしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">start</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">now</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">now</span><span class="p">,</span> <span class="nx">now</span><span class="p">.</span><span class="nx">Sub</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span><span class='line'>      <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>date</code>コマンドで検証したときと同様の条件で、
このプログラムを<strong>Go1.8で実行</strong>すると以下のような結果になりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(前略)
</span><span class='line'>2017-06-30 23:59:59.038281905 +0000 UTC 32m42.970735711s
</span><span class='line'>2017-06-30 23:59:59.138469005 +0000 UTC 32m43.070922811s
</span><span class='line'>2017-06-30 23:59:59.238662875 +0000 UTC 32m43.171116681s
</span><span class='line'>2017-06-30 23:59:59.338835875 +0000 UTC 32m43.271289681s
</span><span class='line'>2017-06-30 23:59:59.439025825 +0000 UTC 32m43.371479631s
</span><span class='line'>2017-06-30 23:59:59.539213666 +0000 UTC 32m43.471667472s
</span><span class='line'>2017-06-30 23:59:59.63940551 +0000 UTC 32m43.571859316s
</span><span class='line'>2017-06-30 23:59:59.739603502 +0000 UTC 32m43.672057308s
</span><span class='line'>2017-06-30 23:59:59.839783301 +0000 UTC 32m43.772237107s
</span><span class='line'>2017-06-30 23:59:59.939980591 +0000 UTC 32m43.872434397s #
</span><span class='line'>2017-06-30 23:59:59.043820722 +0000 UTC 32m42.976274528s # うるう秒挿入！
</span><span class='line'>2017-06-30 23:59:59.143987505 +0000 UTC 32m43.076441311s
</span><span class='line'>2017-06-30 23:59:59.244160716 +0000 UTC 32m43.176614522s
</span><span class='line'>2017-06-30 23:59:59.344336707 +0000 UTC 32m43.276790513s
</span><span class='line'>2017-06-30 23:59:59.444546067 +0000 UTC 32m43.376999873s
</span><span class='line'>2017-06-30 23:59:59.544717014 +0000 UTC 32m43.47717082s
</span><span class='line'>2017-06-30 23:59:59.644876123 +0000 UTC 32m43.577329929s
</span><span class='line'>2017-06-30 23:59:59.745050732 +0000 UTC 32m43.677504538s
</span><span class='line'>2017-06-30 23:59:59.845230425 +0000 UTC 32m43.777684231s
</span><span class='line'>2017-06-30 23:59:59.945421532 +0000 UTC 32m43.877875338s
</span><span class='line'>2017-07-01 00:00:00.045595155 +0000 UTC 32m43.978048961s</span></code></pre></td></tr></table></div></figure>


<p>うるう秒が挿入されたため、59.9から59.0に時刻が巻き戻っていることが確認できます。
それと同時に経過時刻も32m43.87sから32m42.97sと巻き戻ってしまいました。</p>

<p>おなじプログラムをGo1.9で実行してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(前略)
</span><span class='line'>2017-06-30 23:59:59.038322917 +0000 UTC m=+1962.019889237 32m42.01969158s
</span><span class='line'>2017-06-30 23:59:59.138507805 +0000 UTC m=+1962.120074107 32m42.11987645s
</span><span class='line'>2017-06-30 23:59:59.238704422 +0000 UTC m=+1962.220270727 32m42.22007307s
</span><span class='line'>2017-06-30 23:59:59.338875317 +0000 UTC m=+1962.320441617 32m42.32024396s
</span><span class='line'>2017-06-30 23:59:59.439066666 +0000 UTC m=+1962.420632996 32m42.420435339s
</span><span class='line'>2017-06-30 23:59:59.539255964 +0000 UTC m=+1962.520822264 32m42.520624607s
</span><span class='line'>2017-06-30 23:59:59.639446597 +0000 UTC m=+1962.621012897 32m42.62081524s
</span><span class='line'>2017-06-30 23:59:59.739644525 +0000 UTC m=+1962.721210832 32m42.721013175s
</span><span class='line'>2017-06-30 23:59:59.839827168 +0000 UTC m=+1962.821393501 32m42.821195844s
</span><span class='line'>2017-06-30 23:59:59.94003045 +0000 UTC m=+1962.921596780 32m42.921399123s #
</span><span class='line'>2017-06-30 23:59:59.043859649 +0000 UTC m=+1963.025425981 32m43.025228324s # うるう秒挿入！
</span><span class='line'>2017-06-30 23:59:59.144008957 +0000 UTC m=+1963.125575282 32m43.125377625s
</span><span class='line'>2017-06-30 23:59:59.244196844 +0000 UTC m=+1963.225763148 32m43.225565491s
</span><span class='line'>2017-06-30 23:59:59.344388476 +0000 UTC m=+1963.325954758 32m43.325757101s
</span><span class='line'>2017-06-30 23:59:59.444598162 +0000 UTC m=+1963.426164679 32m43.425967022s
</span><span class='line'>2017-06-30 23:59:59.54473741 +0000 UTC m=+1963.526303708 32m43.526106051s
</span><span class='line'>2017-06-30 23:59:59.644895019 +0000 UTC m=+1963.626461309 32m43.626263652s
</span><span class='line'>2017-06-30 23:59:59.745084175 +0000 UTC m=+1963.726650464 32m43.726452807s
</span><span class='line'>2017-06-30 23:59:59.845264185 +0000 UTC m=+1963.826830509 32m43.826632852s
</span><span class='line'>2017-06-30 23:59:59.94546352 +0000 UTC m=+1963.927029829 32m43.926832172s
</span><span class='line'>2017-07-01 00:00:00.04563023 +0000 UTC m=+1964.027196518 32m44.026998861s</span></code></pre></td></tr></table></div></figure>


<p>うるう秒が挿入されるとwall clockは59.9から59.0に時刻が巻き戻っています。
しかし経過時刻は32m42.9から32m43.0と巻き戻りは発生していません。</p>

<p>Go1.9から<code>t.String()</code>がmonotonic clockの情報を返すようになるので、今回の検証ログにも表示されています。
monotonic clockも m=+1962.921596780 から m=+1963.025425981 と巻き戻りは発生していません。
(mの意味はよくわかってないけどプロセスの起動時間？)</p>

<h2>時刻を変えてみた</h2>

<p>検証用のfakentpdを止めて本物の上位ntpdを復活させると、
時刻の差が大きいため元の時刻に一気に修正されます。
この場合についても試してみました。</p>

<p>Go1.8で実行した場合。
時刻が戻ると同時に経過時間が-144hとおかしな値になってしまいました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(前略)
</span><span class='line'>2017-07-01 00:30:20.802110381 +0000 UTC 4m52.493894502s
</span><span class='line'>2017-07-01 00:30:20.9022538 +0000 UTC 4m52.594037921s
</span><span class='line'>2017-07-01 00:30:21.002404752 +0000 UTC 4m52.694188873s #
</span><span class='line'>2017-06-24 23:41:17.694698679 +0000 UTC -144h44m10.6135172s # 正しい時刻に戻った
</span><span class='line'>2017-06-24 23:41:17.794881161 +0000 UTC -144h44m10.513334718s
</span><span class='line'>2017-06-24 23:41:17.895024223 +0000 UTC -144h44m10.413191656s</span></code></pre></td></tr></table></div></figure>


<p>Go1.9で実行した場合です。
wall clockは正しい時刻に戻りましたが、monotonic clockはその影響を受けず、
経過時間も正しく計算できています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2017-07-01 00:30:20.802071152 +0000 UTC m=+289.102414299 4m49.102265199s
</span><span class='line'>2017-07-01 00:30:20.902234666 +0000 UTC m=+289.202577610 4m49.20242851s
</span><span class='line'>2017-07-01 00:30:21.00238566 +0000 UTC m=+289.302728596 4m49.302579496s #
</span><span class='line'>2017-06-24 23:41:17.694655753 +0000 UTC m=+289.402903206 4m49.402754106s # 正しい時刻に戻った
</span><span class='line'>2017-06-24 23:41:17.794841932 +0000 UTC m=+289.503089435 4m49.502940335s
</span><span class='line'>2017-06-24 23:41:17.895004891 +0000 UTC m=+289.603252211 4m49.603103111s</span></code></pre></td></tr></table></div></figure>


<h2>ドリフトしてみた</h2>

<p>monotonic time は ntpd の干渉を全く受けないわけではなく、
ドリフトの補正は受けます。
せっかくなのでこれも確認してみました。</p>

<p>以下のコマンドで500PPM(Parts-per-Million)早く時刻が進むntpdとして動作します。
1PPMは100万分の1の誤差なので、500PPMでは2000秒(約33分)で1秒ズレます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo fakentpd -d 500
</span></code></pre></td></tr></table></div></figure>


<p>(ほんとうは2倍速！とかやってみたかったけど、さすがに偽ntpdだとバレて同期対象から外された)</p>

<p>起動からの経過時間を返すサーバーと、
サーバーとの時刻を比較するクライアントを用意します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">start</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">req</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 起動からの経過時間を返す</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;%.6f&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Since</span><span class="p">(</span><span class="nx">start</span><span class="p">).</span><span class="nx">Seconds</span><span class="p">())</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%.6f&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Since</span><span class="p">(</span><span class="nx">start</span><span class="p">).</span><span class="nx">Seconds</span><span class="p">())</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:8080&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;io/ioutil&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;strconv&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// サーバー側の経過時間を取得する</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">get</span><span class="p">(</span><span class="nx">u</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">resp</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Get</span><span class="p">(</span><span class="nx">u</span><span class="p">)</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">data</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadAll</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">ParseFloat</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">data</span><span class="p">),</span> <span class="mi">64</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">t</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">start</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">startRemote</span> <span class="o">:=</span> <span class="nx">get</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">end</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">endRemote</span> <span class="o">:=</span> <span class="nx">get</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Args</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;local:  %.6f&quot;</span><span class="p">,</span> <span class="nx">end</span><span class="p">.</span><span class="nx">Sub</span><span class="p">(</span><span class="nx">start</span><span class="p">).</span><span class="nx">Seconds</span><span class="p">())</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;remote: %.6f&quot;</span><span class="p">,</span> <span class="nx">endRemote</span><span class="o">-</span><span class="nx">startRemote</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ドリフト補正が反映されるよう数時間同期状態を保ったあと、
検証用プログラムを走らせると以下のような結果になりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(前略)
</span><span class='line'>2017/06/25 08:34:27 local:  1997.178992
</span><span class='line'>2017/06/25 08:34:27 remote: 1998.176471
</span><span class='line'>2017/06/25 08:34:28 local:  1998.179892
</span><span class='line'>2017/06/25 08:34:28 remote: 1999.177970
</span><span class='line'>2017/06/25 08:34:29 local:  1999.180993
</span><span class='line'>2017/06/25 08:34:29 remote: 2000.179569
</span><span class='line'>2017/06/25 08:34:30 local:  2000.182062
</span><span class='line'>2017/06/25 08:34:30 remote: 2001.181200</span></code></pre></td></tr></table></div></figure>


<p>起動から2000秒で1秒のズレ＝500PPMのドリフトがかかっていることが確認できました。</p>

<h2>まとめ</h2>

<p>Go1.9からサポートされるmonotonic clockについて検証を行いました。
うるう秒や時刻変更の影響を受けず、正しく経過時間を測定できることが確認できました。
また、ドリフトの調整は受けることも確認できました。</p>

<p>monotonic clockになると、methaneさんが紹介している<a href="http://dsas.blog.klab.org/archives/2016-09-20/isucon5q.html">zero time cache</a>の
実用性があがって利用しやすくなりますね。
さらに<a href="https://blog.cloudflare.com/how-and-why-the-leap-second-affected-cloudflare-dns/">Cloudflare DNSがうるう秒にやられる</a>
こともなくなるので安心です。</p>

<p>注意点としては<code>t.String()</code>がmonotonic clockの情報を返すので、
時刻の出力を雑に<code>fmt.Println(t)</code>とかしていると出力が変わってしまうことくらいでしょうか。
(皆さんちゃんとFormatしてますよね？)</p>

<p>もうすぐ来年1月1日のうるう秒の有無が発表される時期です。
それまでにはGo1.9の正式版がリリースされているはずなので、
変な罠に引っかからないよう皆さんアップデートしましょう！</p>

<h2>参考</h2>

<ul>
<li><a href="http://tech.mercari.com/entry/gopherfest2017_report">Gopher Fest 2017参加レポート</a></li>
<li><a href="https://www.slideshare.net/takuyaueda967/gopher-fest-2017">Gopher Fest 2017参加レポート(スライド)</a></li>
</ul>


<iframe src="https://www.slideshare.net/slideshow/embed_code/key/ebzs4FaAdpQVst" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/takuyaueda967/gopher-fest-2017" title="Gopher Fest 2017参加レポート" target="_blank">Gopher Fest 2017参加レポート</a> </strong> from <strong><a target="_blank" href="https://www.slideshare.net/takuyaueda967">Takuya Ueda</a></strong> </div></p>

<ul>
<li><a href="http://jjy.nict.go.jp/tsp/link/leap.html">うるう秒とコンピュータクロック | NICT</a></li>
<li><a href="http://d.hatena.ne.jp/incarose86/20110505/1312522379">NTP設定</a></li>
<li><a href="http://tkuchiki.hatenablog.com/entry/2015/06/19/083025">2015年うるう秒の検証方法と検証結果 (Amazon Linux, CentOS)</a></li>
<li><a href="https://access.redhat.com/ja/node/1362753">Leap Second Insertion フラグを受信後にそのフラグを削除する</a></li>
<li><a href="http://www.geocities.co.jp/SiliconValley/6876/rfc2030j.htm">RFC2030 参考訳 IPv4・IPv6・OSI用簡易ネットワーク時刻プロトコル（SNTP）Version 4</a></li>
<li><a href="https://tools.ietf.org/html/rfc2030">RFC2030  Simple Network Time Protocol (SNTP) Version 4 for IPv4, IPv6 and OSI</a></li>
<li><a href="http://dsas.blog.klab.org/archives/2016-09-20/isucon5q.html">ISUCON6予選をトップ通過しました</a>

<ul>
<li>zero time cache について紹介されています</li>
</ul>
</li>
<li><a href="https://blog.cloudflare.com/how-and-why-the-leap-second-affected-cloudflare-dns/">How and why the leap second affected Cloudflare DNS</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ぼくのかんがえたさいきょうのcontext対応版go-mysql-driverをマージしてもらった]]></title>
    <link href="https://shogo82148.github.io/blog/2017/06/16/mysql-driver-and-context/"/>
    <updated>2017-06-16T07:11:15+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/06/16/mysql-driver-and-context</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/go-sql-driver/mysql">go-sql-driver</a>に<code>context.Context</code>対応するプルリクエスト
<a href="https://github.com/go-sql-driver/mysql/pull/608">go-sql-driver/mysql#608</a>
を送って取り込んでもらいました！！
現時点ではまだ正式リリースされていませんが、次のリリース(version 1.4)から使えるようにはずです。
masterブランチではすでに使えるようになっているので、引き続き人柱募集中です。</p>

<p>コネクションプーリングを実装していて、自分も「<code>context.Context</code>サポートしたい！」というかたのために、
実装の概要をメモとして残しておきます。</p>

<!-- More -->


<h2>おおまかな仕組み</h2>

<ul>
<li>「<strong>contextの監視のみを行うgoroutine</strong>(以下、watcher goroutine)」をあらかじめ起動しておく</li>
<li>「<strong>やりたい処理を実際に実行するgoroutine</strong>(以下、executor goritune)」とchannelを経由して<code>context.Context</code>をやり取りする</li>
</ul>


<p>watcher goroutineがこの実装で一番重要な部分です。</p>

<h3>watcher goroutine の実装</h3>

<p>一番重要な watcher goroutine の実装例から見てみましょう
(実際には細かい最適化などが入るため、マージされたコードとは異なります)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">mc</span> <span class="o">*</span><span class="nx">mysqlConn</span><span class="p">)</span> <span class="nx">startWatcher</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// executor goritune と `context.Context` のやり取りをするための channel</span>
</span><span class='line'>  <span class="nx">watcher</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">mc</span><span class="p">.</span><span class="nx">watcher</span> <span class="p">=</span> <span class="nx">watcher</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// executor goritune で処理が完了したことを知るための channel</span>
</span><span class='line'>  <span class="nx">finished</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span><span class='line'>  <span class="nx">mc</span><span class="p">.</span><span class="nx">finished</span> <span class="p">=</span> <span class="nx">finished</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// コネクションがCloseされたことを知らせるための channel</span>
</span><span class='line'>  <span class="nx">mc</span><span class="p">.</span><span class="nx">closech</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ここから watcher goroutine 本体</span>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// executor goritune から `context.Context` を待ち受ける</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span>
</span><span class='line'>          <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="nx">ctx</span> <span class="p">=</span> <span class="o">&lt;-</span><span class="nx">watcher</span><span class="p">:</span>
</span><span class='line'>          <span class="k">case</span> <span class="o">&lt;-</span><span class="nx">mc</span><span class="p">.</span><span class="nx">closech</span><span class="p">:</span>
</span><span class='line'>              <span class="c1">// コネクションが Close されたので watcher gorutine を終了する</span>
</span><span class='line'>              <span class="k">return</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// `context.Context` を監視する</span>
</span><span class='line'>          <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nx">Done</span><span class="p">():</span>
</span><span class='line'>              <span class="c1">// executor goritune を強制終了する</span>
</span><span class='line'>              <span class="nx">mc</span><span class="p">.</span><span class="nx">cancel</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.</span><span class="nx">Err</span><span class="p">())</span>
</span><span class='line'>          <span class="k">case</span> <span class="o">&lt;-</span><span class="nx">finished</span><span class="p">:</span>
</span><span class='line'>              <span class="c1">// 正常に処理が終了したので何もしない</span>
</span><span class='line'>          <span class="k">case</span> <span class="o">&lt;-</span><span class="nx">mc</span><span class="p">.</span><span class="nx">closech</span><span class="p">:</span>
</span><span class='line'>              <span class="c1">// コネクションが Close されたので watcher gorutine を終了する</span>
</span><span class='line'>              <span class="k">return</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>watcher</code>, <code>finished</code>, <code>closech</code> の3つの channel を経由して
executor goroutine と通信を行います。</p>

<h3>executor goroutine の実装</h3>

<p>executor goritune の実装例は以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// 何かやる</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">mc</span> <span class="o">*</span><span class="nx">mysqlConn</span><span class="p">)</span> <span class="nx">DoSomething</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// watcher gorutineにctxを渡して監視してもらう</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mc</span><span class="p">.</span><span class="nx">watchCancel</span><span class="p">(</span><span class="nx">ctx</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// doSomthing()が実際に行いたい処理</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mc</span><span class="p">.</span><span class="nx">doSomthing</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// キャンセルされたのか、ネットワークエラーで切断されたのか、を確認する</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">cerr</span> <span class="o">:=</span> <span class="nx">mc</span><span class="p">.</span><span class="nx">canceled</span><span class="p">();</span> <span class="nx">cerr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">cerr</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// watcher gorutineに処理が終了したことを通知する</span>
</span><span class='line'>  <span class="nx">mc</span><span class="p">.</span><span class="nx">finish</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>mc.doSomthing()</code> が実際に行いたい処理なのですが、これに <code>ctx</code> を渡していないのがポイントです。
watcher goroutine に <code>ctx</code> の監視を任せているので、executor goroutine 側では監視しなくてもいいのです。</p>

<h3>executor goritune と watcher goroutine 間の通信</h3>

<p>executor goritune と watcher goroutine 間の通信は主に
<code>watcher</code> channel と <code>finished</code> channel が担当します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">mc</span> <span class="o">*</span><span class="nx">mysqlConn</span><span class="p">)</span> <span class="nx">watchCancel</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 実際の処理が始まるまえに、 `ctx` が終了していないか確認</span>
</span><span class='line'>  <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">default</span><span class="p">:</span>
</span><span class='line'>  <span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nx">Done</span><span class="p">():</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">Err</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// watcher goroutineに渡す</span>
</span><span class='line'>  <span class="nx">mc</span><span class="p">.</span><span class="nx">watcher</span> <span class="o">&lt;-</span> <span class="nx">ctx</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">mc</span> <span class="o">*</span><span class="nx">mysqlConn</span><span class="p">)</span> <span class="nx">finish</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nx">mc</span><span class="p">.</span><span class="nx">finished</span> <span class="o">&lt;-</span> <span class="kd">struct</span><span class="p">{}{}:</span>
</span><span class='line'>  <span class="k">case</span> <span class="o">&lt;-</span><span class="nx">mc</span><span class="p">.</span><span class="nx">closech</span><span class="p">:</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>キャンセルの実装</h3>

<p><code>context.Context</code>がキャンセルされたときに、executor goroutineを強制終了する処理は、
コネクションを強制的に <code>Close</code> することで行っています。
ちょっと強引な気はしますが、キャンセルされるような状況に陥った時点で正常な通信なんて出来ていないので、
まあいいかと、このような実装になっています。
もっと賢いキャンセルの方法があるかもしれませんが、キャンセルされない場合のほうが圧倒的に多いので、
余計なオーバーヘッドは避けたいというのもあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// キャンセルを実行する</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">mc</span> <span class="o">*</span><span class="nx">mysqlConn</span><span class="p">)</span> <span class="nx">cancel</span><span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// **コネクションを実際にCloseする前** にエラー内容を記録する</span>
</span><span class='line'>  <span class="nx">mc</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nx">Lock</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">mc</span><span class="p">.</span><span class="nx">canceledErr</span> <span class="p">=</span> <span class="nx">err</span>
</span><span class='line'>  <span class="nx">mc</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 強制切断</span>
</span><span class='line'>  <span class="nx">mc</span><span class="p">.</span><span class="nx">cleanup</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// キャンセルされたか確認用</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">mc</span> <span class="o">*</span><span class="nx">mysqlConn</span><span class="p">)</span> <span class="nx">canceled</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">mc</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nx">Lock</span><span class="p">()</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">mc</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">mc</span><span class="p">.</span><span class="nx">canceledErr</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">mc</span> <span class="o">*</span><span class="nx">mysqlConn</span><span class="p">)</span> <span class="nx">cleanup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// closeが2回以上実行されないようガード</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">atomic</span><span class="p">.</span><span class="nx">SwapInt32</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">mc</span><span class="p">.</span><span class="nx">closed</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// (executor|watcher) goroutineに終了を通知</span>
</span><span class='line'>  <span class="nb">close</span><span class="p">(</span><span class="nx">mc</span><span class="p">.</span><span class="nx">closech</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// コネクションを切断</span>
</span><span class='line'>  <span class="nx">mc</span><span class="p">.</span><span class="nx">netConn</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これらの関数は (executor|watcher) 両方の goroutine から呼ばれる可能性があるため、
以下の二点が非常に重要です。</p>

<ul>
<li>cancelでは <strong>コネクションを実際にCloseする前</strong> にエラー内容を記録する

<ul>
<li>これが逆だと executor がキャンセルを見逃してしまう場合がある</li>
</ul>
</li>
<li>sync package や sync/atomic package を使って <strong>goroutine-safe に書く</strong></li>
</ul>


<h2>FAQ(よくあるであろう質問)</h2>

<p>こっちの実装の方がいいんじゃないの？と実装中に自問自答した内容を
FAQと称して残しておきます。</p>

<h3>close(watcher)していないのはなぜ？</h3>

<p>最初は watcher goroutine の実装は以下のようになっていて、
<code>close(watcher)</code> で watcher goroutine を終了させようかと考えてました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">for</span> <span class="nx">ctx</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">watcher</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// context.Context監視処理</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>しかしこの実装では <code>mc.watcher &lt;- ctx</code> のところで <code>close</code> されていないかを毎回確認する必要があり、
channelを使うメリットが薄れてしまうので廃案となりました。</p>

<h3>close(finished)していないのはなぜ？</h3>

<p>監視の終了に <code>close(finished)</code> を使うという案も考えました。
しかしこの実装が廃案になったのには大きく二つの理由があります。</p>

<p>一つ目は「監視の終了は同期していなければならない」からです。
<code>close(finished)</code> を使った方法では executor goroutine が監視の終了を通知しても、
watcher goroutine が実際に監視を終了するタイミングは goroutine スケジューラの気分次第で遅れてしまう可能性があります。
すると watcher goroutine がクエリキャンセルしたときには、 executor goroutine では既に次のクエリが実行さており、
間違ったクエリをキャンセルしてしまうという事故が起こりえます。</p>

<p><code>finished &lt;- struct{}{}</code> を使った方法ならこれは起こりません。
executor goroutine が監視の終了を通知するのと、
watcher goroutine が実際に監視を終了するのとが同期しているので、
確実にキャンセルしたいクエリだけをキャンセルできます。</p>

<p>実際、PostgreSQLのGo driver実装は、最初 <code>close(finished)</code> で実装されていたものが、
<code>finished &lt;- struct{}{}</code> に置き換えられています(実装時には知らなくて、この記事を書いているときに知った)。</p>

<ul>
<li><a href="https://github.com/lib/pq/pull/535">Add context methods lib/pq#535</a></li>
<li><a href="https://github.com/lib/pq/pull/578">Fix race condition in query cancellation lib/pq#578</a></li>
</ul>


<p>二つ目は「channelの再利用ができない」という理由です。
一度 <code>close</code> した channel は <code>open</code> することはできないので、新規に channel を作る必要があります。
これにはメモリ確保が必要になるので、パフォーマンス面で不利になります。</p>

<h3>QueryContextの中でfinishを直接呼んでいないのはなぜ？</h3>

<p>QueryContext の実装をよく見てみると <code>rows.finish = mc.finish</code> しているだけで、
QueryContext の中では <code>finish</code> を呼んでいません。</p>

<ul>
<li><a href="https://github.com/go-sql-driver/mysql/blob/a825be04c652d01442384e9dcdf2cdc3f1eda67f/connection_go18.go#L87">QueryContext</a></li>
</ul>


<p>これはなぜかというと <code>QueryContext</code> の実行が終了した後、
rows の読み取り中に、<code>context.Context</code> がキャンセルされる場合があるからです。
たとえば以下のコードで、<code>rows.Err()</code> は <code>context.Canceled</code> になっているべきです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">WithCancel</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Background</span><span class="p">())</span>
</span><span class='line'><span class="nx">rows</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">dbt</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">QueryContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="s">&quot;SELECT v FROM test&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">rows</span><span class="p">.</span><span class="nx">Next</span><span class="p">()</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rows</span><span class="p">.</span><span class="nx">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">v</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">cancel</span><span class="p">()</span>
</span><span class='line'><span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">rows</span><span class="p">.</span><span class="nx">Next</span><span class="p">()</span>
</span><span class='line'><span class="c1">// rows.Err() は context.Canceled になっているべき</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rows</span><span class="p">.</span><span class="nx">Err</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Canceled</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この挙動は net/http を参考にしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;context&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;io/ioutil&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http/httptest&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">SetFlags</span><span class="p">(</span><span class="nx">log</span><span class="p">.</span><span class="nx">LstdFlags</span> <span class="p">|</span> <span class="nx">log</span><span class="p">.</span><span class="nx">Lshortfile</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 1秒わざとレスポンスを返さないサーバー</span>
</span><span class='line'>  <span class="nx">ts</span> <span class="o">:=</span> <span class="nx">httptest</span><span class="p">.</span><span class="nx">NewServer</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Context-Type&quot;</span><span class="p">,</span> <span class="s">&quot;text/plain&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprint</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;Hello, &quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.(</span><span class="nx">http</span><span class="p">.</span><span class="nx">Flusher</span><span class="p">).</span><span class="nx">Flush</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprint</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;client\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}))</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">ts</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">req</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">NewRequest</span><span class="p">(</span><span class="s">&quot;GET&quot;</span><span class="p">,</span> <span class="nx">ts</span><span class="p">.</span><span class="nx">URL</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 0.5秒後にキャンセル</span>
</span><span class='line'>  <span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">WithTimeout</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Background</span><span class="p">(),</span> <span class="mi">500</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">500</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">cancel</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">cancel</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">req</span> <span class="p">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">WithContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">DefaultClient</span><span class="p">.</span><span class="nx">Do</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ioutil.ReadAll は &quot;context canceled&quot; か &quot;context deadline exceeded&quot; で失敗する</span>
</span><span class='line'>  <span class="nx">greeting</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadAll</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="nx">greeting</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>BeginTxの中ではfinishを直接呼んでいるのはなぜ？</h3>

<p><code>BeginTx</code> では <code>finish()</code> を呼んでいます。
<code>BeginTx</code>終了後にトランザクションがキャンセルされる場合を考えると、
<code>QueryContext</code> と同様に <code>tx.finish = mc.finish</code> となりそうですが、そうはなっていません。</p>

<p>これは database/sql が代わりに監視してくれていて、
<code>context.Context</code> がキャンセルされると自動的にRollbackしてくれるからです。</p>

<ul>
<li><a href="https://github.com/golang/go/blob/go1.8.3/src/database/sql/sql.go#L1435-L1447">Tx.awaitDone() (database/sql)</a></li>
</ul>


<p>実は rows にも同様の監視処理が入っているので勝手に <code>Close</code> してくれます。
しかし、packetの読み書きを <code>context.Context</code> 対応にする必要があり、
実装コスト・実行コストが大きそうだったので手を付けていません。</p>

<h2>まとめ</h2>

<p>executor goroutine と watcher goroutine を使った <code>context.Context</code> 対応の実装例を紹介しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Re: GoとPythonとGrumpyの速度ベンチマーク]]></title>
    <link href="https://shogo82148.github.io/blog/2017/05/30/grumpy/"/>
    <updated>2017-05-30T17:53:32+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/05/30/grumpy</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/kotauchisunsun/items/db28d14f7f13fb29e5f9">GoとPythonとGrumpyの速度ベンチマーク ～Googleのトランスパイラはどれくらい速い？～</a>という記事を拝読したのですが、
もう一歩踏み込んで検証して欲しい・・・。</p>

<blockquote><p>並列処理性能が優れているほか、PythonコードからGoのパッケージをPythonモジュールのように呼び出して利用することもできるという特徴がある。</p></blockquote>

<p>と<a href="http://news.mynavi.jp/news/2017/01/06/110/">Google、すごくスケールするPython実行環境をGoで開発</a>から引用しているのに、
この件に全く触れていないんですよね。
Twitterに呟いたってどうせ誰もやってくれない気がするので、自分で試してみました。</p>

<!-- More -->


<h2>環境</h2>

<p>この記事を書いている2017年5月30日現在の最新バージョンで検証しました。</p>

<ul>
<li>go version go1.8.3 darwin/amd64</li>
<li>CPython 2.7.13</li>
<li>Grumpy <a href="https://github.com/google/grumpy/tree/d8d01899f5eedf99602887567aaeb39a9154bf68">d8d01899f5</a></li>
</ul>


<p>Grumpyのインストール方法はREADMEにある通り。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>make
</span><span class='line'><span class="nb">export </span><span class="nv">GOPATH</span><span class="o">=</span><span class="nv">$PWD</span>/build
</span><span class='line'><span class="nb">export </span><span class="nv">PYTHONPATH</span><span class="o">=</span><span class="nv">$PWD</span>/build/lib/python2.7/site-packages
</span></code></pre></td></tr></table></div></figure>


<p>ただ個人的な環境問題としてPythonのバージョン管理に利用しているpyenvとの相性が悪いらしく、
pyenvが管理しているPythonへのパスを直接通す必要がありました。
(これがないとPythonスクリプトがなぜかbashに処理される。なんかこの問題最近Twitterで見たような・・・)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$HOME</span>/.pyenv/versions/2.7.13/bin:<span class="nv">$PATH</span>
</span></code></pre></td></tr></table></div></figure>


<h2>モンテカルロ法を並列実行してみる</h2>

<p>まず、並列処理性能について検証してみましょう。
モンテカルロ法の各試行は独立しているので、並列実行にするのは容易です。
Python2のthreadingモジュールを使って並列実行してみましょう。</p>

<h3>コード</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#coding:utf-8</span>
</span><span class='line'><span class="c"># モンテカルロ法 Pure Python 並列版</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">threading</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyThread</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">MyThread</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">c</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">r</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">Random</span><span class="p">()</span>
</span><span class='line'>        <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>            <span class="n">x</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">random</span><span class="p">()</span>
</span><span class='line'>            <span class="n">y</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">random</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span> <span class="o">&lt;=</span> <span class="mf">1.0</span><span class="p">:</span>
</span><span class='line'>                <span class="n">c</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">c</span> <span class="o">=</span> <span class="n">c</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="n">para</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">threads</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">para</span><span class="p">):</span>
</span><span class='line'>        <span class="n">t</span> <span class="o">=</span> <span class="n">MyThread</span><span class="p">()</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>        <span class="n">threads</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'>        <span class="n">c</span> <span class="o">+=</span> <span class="n">t</span><span class="o">.</span><span class="n">c</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="mf">4.0</span><span class="o">*</span><span class="n">c</span><span class="o">/</span><span class="p">(</span><span class="n">num</span><span class="o">*</span><span class="n">para</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>並列度に比例した計算負荷がかかるようになってます。
理想的な並列処理が行えていれば、並列度に関わらず同じ実時間で実行されるはずです。</p>

<h3>CPythonでの結果</h3>

<p>CPythonでtimeを使って雑に測定した結果です。
並列度を4倍にしたら実行時間も4倍になっています。
また、実時間と実行時間が大体おなじで、まったく並列実行できていません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 並列度1で実行した場合(CPython)
</span><span class='line'>$ time python con_monte.py 300000 1
</span><span class='line'>3.14529333333
</span><span class='line'>real    0m0.358s
</span><span class='line'>user    0m0.279s
</span><span class='line'>sys 0m0.032s
</span><span class='line'>
</span><span class='line'># 並列度4で実行した場合(CPython)
</span><span class='line'>$ time python con_monte.py 300000 4
</span><span class='line'>3.14382666667
</span><span class='line'>real    0m1.261s
</span><span class='line'>user    0m1.124s
</span><span class='line'>sys 0m0.441s</span></code></pre></td></tr></table></div></figure>


<p>CPythonを利用しているひとにはおなじみの<a href="https://ja.wikipedia.org/wiki/%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%97%E3%83%AA%E3%82%BF%E3%83%AD%E3%83%83%E3%82%AF">グローバルインタプリタロック(GIL: Global Interpreter Lock)</a>の影響ですね。
CPythonのスレッドはI/Oの並列化には向いていますが、計算の並列化には向いていません。</p>

<h3>Grumpyでの結果</h3>

<p>次にGrumpyで測定した結果です。
並列度を4倍にしたところ、実行時間は2倍程度になりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 並列度1で実行した場合(Grumpy)
</span><span class='line'>$ time ./con_monte_darwin_amd64 300000 1
</span><span class='line'>3.1441733333333333
</span><span class='line'>real    0m16.129s
</span><span class='line'>user    0m16.787s
</span><span class='line'>sys 0m0.125s
</span><span class='line'>
</span><span class='line'># 並列度4で実行した場合(Grumpy)
</span><span class='line'>$ time ./con_monte_darwin_amd64 300000 4
</span><span class='line'>3.1401766666666666
</span><span class='line'>real    0m33.935s
</span><span class='line'>user    1m45.979s
</span><span class='line'>sys 0m0.654s</span></code></pre></td></tr></table></div></figure>


<p>実時間4倍までは行かなかったので、理想的な並列計算には及ばないものの、
CPythonよりは並列化の効果が出ていそうです。
実のところ、Goも計算の並列化よりI/Oの並列化・並行処理のほうが得意なんですよね(GILよりはまし)。</p>

<p>手元の4コアのMBAで試した結果なので、コア数が多いとまた結果が変わってくるかもしれません。</p>

<h2>PythonからGoのライブラリを直接呼び出す</h2>

<p>次にGoのパッケージを呼び出す機能を試してみます。
Pythonのrandomパッケージではなく、Goのmath/randパッケージを使ってモンテカルロ法を実行してみます。</p>

<h3>コード</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#coding:utf-8</span>
</span><span class='line'><span class="c"># モンテカルロ法 Python+Go 並列版</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">threading</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">__go__.time</span> <span class="kn">import</span> <span class="n">Now</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">__go__.math.rand</span> <span class="kn">import</span> <span class="n">New</span><span class="p">,</span> <span class="n">NewSource</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyThread</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">MyThread</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">c</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">r</span> <span class="o">=</span> <span class="n">New</span><span class="p">(</span><span class="n">NewSource</span><span class="p">(</span><span class="n">Now</span><span class="p">()</span><span class="o">.</span><span class="n">UnixNano</span><span class="p">()))</span>
</span><span class='line'>        <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>            <span class="n">x</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">Float64</span><span class="p">()</span>
</span><span class='line'>            <span class="n">y</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">Float64</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span> <span class="o">&lt;=</span> <span class="mf">1.0</span><span class="p">:</span>
</span><span class='line'>                <span class="n">c</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">c</span> <span class="o">=</span> <span class="n">c</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="n">para</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">threads</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">para</span><span class="p">):</span>
</span><span class='line'>        <span class="n">t</span> <span class="o">=</span> <span class="n">MyThread</span><span class="p">()</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>        <span class="n">threads</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'>        <span class="n">c</span> <span class="o">+=</span> <span class="n">t</span><span class="o">.</span><span class="n">c</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="mf">4.0</span><span class="o">*</span><span class="n">c</span><span class="o">/</span><span class="p">(</span><span class="n">num</span><span class="o">*</span><span class="n">para</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Grumpyでの結果</h3>

<p>Grumpyでの実行結果です。
CPythonには遠く及ばないものの、もとのコードの8倍速くらいにはなりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 並列度1で実行した場合(Grumpy)
</span><span class='line'>$ time ./con_monte_go_darwin_amd64 300000 1
</span><span class='line'>3.1388133333333332
</span><span class='line'>real    0m1.921s
</span><span class='line'>user    0m2.006s
</span><span class='line'>sys 0m0.029s
</span><span class='line'>
</span><span class='line'># 並列度4で実行した場合(Grumpy)
</span><span class='line'>$ time ./con_monte_go_darwin_amd64 300000 4
</span><span class='line'>3.143743333333333
</span><span class='line'>real    0m4.115s
</span><span class='line'>user    0m12.855s
</span><span class='line'>sys 0m0.096s</span></code></pre></td></tr></table></div></figure>


<h2>竹内関数を並列実行してみる</h2>

<p>竹内関数を並列実行した場合も試してみました。</p>

<h3>コード</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#coding:utf-8</span>
</span><span class='line'><span class="c"># 竹内関数 Pure Python 並列版</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">threading</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">tak</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="n">y</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">y</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">tak</span><span class="p">(</span><span class="n">tak</span><span class="p">((</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="n">y</span> <span class="p">,</span> <span class="n">z</span><span class="p">),</span> <span class="n">tak</span><span class="p">((</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="n">z</span> <span class="p">,</span> <span class="n">x</span><span class="p">),</span> <span class="n">tak</span><span class="p">((</span><span class="n">z</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyThread</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">MyThread</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">b</span> <span class="o">=</span> <span class="n">b</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">c</span> <span class="o">=</span> <span class="n">c</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">result</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">result</span> <span class="o">=</span> <span class="n">tak</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">a</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">b</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
</span><span class='line'>    <span class="n">para</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">threads</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">para</span><span class="p">):</span>
</span><span class='line'>        <span class="n">t</span> <span class="o">=</span> <span class="n">MyThread</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>        <span class="n">threads</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">t</span><span class="o">.</span><span class="n">result</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>モンテカルロ法と同様に、理想的な並列処理が行えていれば、並列度に関わらず同じ実時間で実行されるはずです。</p>

<h3>CPythonでの結果</h3>

<p>CPythonでの結果です。
モンテカルロ法の場合と同様に、
並列度を4倍にしたら実行時間も4倍になっています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 並列度1で実行した場合(CPython)
</span><span class='line'>$ time python con_take.py 11 10 0 1
</span><span class='line'>11
</span><span class='line'>real    0m1.529s
</span><span class='line'>user    0m1.498s
</span><span class='line'>sys 0m0.028s
</span><span class='line'>
</span><span class='line'># 並列度4で実行した場合(CPython)
</span><span class='line'>$ time python con_take.py 11 10 0 4
</span><span class='line'>11
</span><span class='line'>11
</span><span class='line'>11
</span><span class='line'>11
</span><span class='line'>real    0m7.333s
</span><span class='line'>user    0m6.620s
</span><span class='line'>sys 0m2.565s</span></code></pre></td></tr></table></div></figure>


<h3>Grumpyでの結果</h3>

<p>Grumpyでの結果です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 並列度1で実行した場合(Grumpy)
</span><span class='line'>$ time ./con_take_darwin_amd64 11 10 0 1
</span><span class='line'>11
</span><span class='line'>real    0m0.988s
</span><span class='line'>user    0m0.988s
</span><span class='line'>sys 0m0.018s
</span><span class='line'>
</span><span class='line'># 並列度4で実行した場合(Grumpy)
</span><span class='line'>$ time ./con_take_darwin_amd64 11 10 0 4
</span><span class='line'>11
</span><span class='line'>11
</span><span class='line'>11
</span><span class='line'>11
</span><span class='line'>real    0m2.031s
</span><span class='line'>user    0m7.135s
</span><span class='line'>sys 0m0.031s</span></code></pre></td></tr></table></div></figure>


<p><strong>(なんかCPythonより早くなったぞ？？？？)</strong></p>

<p>最初に紹介した記事でも、
モンテカルロ法のベンチマークではCPythonがGrumpyの数十倍の速度で圧倒的勝利でしたが、
竹内関数のベンチマークではその差は縮まっています。
この程度であれば並列度を上げて物理で殴れば容易にGrumpyが逆転するでしょう。</p>

<p>(この検証で並列度1のときもGrumpy勝ったの謎だけど・・・)</p>

<h2>考察</h2>

<p>モンテカルロ法はCPythonのほうが圧倒的に速かったのに、
竹内関数ではGrumpyのほうが速かった(あるいは差が縮まった)という結果から、
「<strong>GrumpyからGoの関数を呼び出すオーバーヘッドが大きい</strong>」のではと推測しています。
モンテカルロ法のPure Python版でも圧倒的差が付いたのは、
<a href="https://github.com/google/grumpy/blob/d8d01899f5eedf99602887567aaeb39a9154bf68/lib/_random.py">Grumpyのrandomパッケージの実装が内部でGoのmath/randを呼んでいる</a>からです。</p>

<p>純粋なPure Pythonなコードであれば、Grumpyのシングルスレッド性能はCPythonより数倍遅い程度です。
最近のCPUコアたくさんなマシンであれば、GILのなくマルチスレッドを活かせるGrumpyが有利になると思います。
このことはグーグルのブログ記事「<a href="https://opensource.googleblog.com/2017/01/grumpy-go-running-python.html">Grumpy: Go running Python!</a>」でも触れられていますね。</p>

<h2>まとめ</h2>

<ul>
<li>Grumpyが非常に遅い<strong>のではなく</strong>、「GrumpyからGoの関数を呼び出すオーバーヘッドが大きい」(推測)</li>
<li>Grumpyのシングルスレッド性能はCPythonより数倍遅い程度</li>
<li>並列処理性能ではGrumpyが有利</li>
<li>そもそもGrumpyの目的は計算速度を上げることではないので、計算速度向上を求めている人は他の手法を模索しましょう</li>
</ul>


<p>今回の検証に使用したソースコード、Grumpyによるトランスパイルの結果、各種プラットフォームのバイナリをGithubにあげておきました。</p>

<ul>
<li><a href="https://github.com/shogo82148/grumpy-test">shogo82148/grumpy-test</a></li>
</ul>


<p>さらに検証を進めたい方は参考にどうぞ。</p>

<h2>参考</h2>

<ul>
<li><a href="https://opensource.googleblog.com/2017/01/grumpy-go-running-python.html">Grumpy: Go running Python!</a></li>
<li><a href="http://news.mynavi.jp/news/2017/01/06/110/">Google、すごくスケールするPython実行環境をGoで開発</a></li>
<li><a href="http://qiita.com/kmry2045/items/998250b3d430d82594c2">Grumpy(Go running Python)を試してみた。</a></li>
<li><a href="http://qiita.com/kotauchisunsun/items/db28d14f7f13fb29e5f9">GoとPythonとGrumpyの速度ベンチマーク ～Googleのトランスパイラはどれくらい速い？～</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String::RandomのGo移植を書いてみた]]></title>
    <link href="https://shogo82148.github.io/blog/2017/05/04/go-rerand/"/>
    <updated>2017-05-04T10:57:37+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/05/04/go-rerand</id>
    <content type="html"><![CDATA[<p>golangkyotoで<a href="http://blog.yux3.net/entry/2017/05/01/014200">String::RandomのGo移植についての発表</a>があったと聞き、
これに対抗して以前途中まで書いていたString::RandomのGo移植をちょっといじって公開しました。</p>

<ul>
<li><a href="https://github.com/shogo82148/go-rerand">shogo82148/go-rerand</a></li>
</ul>


<!-- More -->


<h2>背景</h2>

<h3>ナイーブな実装の問題点</h3>

<p>実はgolangkyoto以前にもGoの正規表現エンジンを使ってランダムな文字列を生成する試みはあって、
たしかにこれは面白そうだと記事を読んでいました。</p>

<ul>
<li>「<a href="http://ymotongpoo.hatenablog.com/entry/2014/12/21/192304">Goの正規表現エンジンを使ってファジング用ツールを書いてみる</a>」</li>
</ul>


<p>しかし、gocha同様、この実装では文字列の長さが幾何分布に従うため、短い文字が多めにでてしまいます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% gocha -n 100000 'a*' | sort | uniq -c
</span><span class='line'>50054
</span><span class='line'>24894 a
</span><span class='line'>12633 aa
</span><span class='line'>6278 aaa
</span><span class='line'>2994 aaaa
</span><span class='line'>1517 aaaaa
</span><span class='line'> 809 aaaaaa
</span><span class='line'> 400 aaaaaaa
</span><span class='line'> 206 aaaaaaaa
</span><span class='line'> 109 aaaaaaaaa
</span><span class='line'>  54 aaaaaaaaaa
</span><span class='line'>  22 aaaaaaaaaaa
</span><span class='line'>  15 aaaaaaaaaaaa
</span><span class='line'>   7 aaaaaaaaaaaaa
</span><span class='line'>   4 aaaaaaaaaaaaaa
</span><span class='line'>   3 aaaaaaaaaaaaaaa
</span><span class='line'>   1 aaaaaaaaaaaaaaaa</span></code></pre></td></tr></table></div></figure>


<h3>正規表現のパターンを数え上げとその問題点</h3>

<p>この問題を解決するために
「この先何パターンあるかを調べておけば、正規表現が表す文字列の集合からランダムに文字列を取り出せるのでは？」
と考え、golangkyoto以前からちょこちょこ実装を進め、不完全ながらも一応動作するところまでは書いていたのです。
有向グラフの経路数えあげ問題なので、メモ化再帰を使って頑張れば解けます。
少々面倒ですが、<a href="https://www.youtube.com/watch?v=Q4gTV4r0zRs">おねえさんの問題</a>と比べれば簡単です。</p>

<p>パターンを数え上げる都合上、組み合わせが無限にある <code>a*</code> ような正規表現は扱えません。
<code>a{1,10}</code> のように明示的に範囲を指定する必要があります。
たとえば <code>a{1,10}</code> は10パターン組み合わせがあるので、20万個ランダムに生成すると、それぞれのパターンがおおよそ2万個ずつ生成されます。
(<code>-d</code> オプションについては後述)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rerand -d -n 200000 'a{1,10}' | sort | uniq -c
</span><span class='line'>20153 a
</span><span class='line'>19863 aa
</span><span class='line'>19899 aaa
</span><span class='line'>19908 aaaa
</span><span class='line'>19975 aaaaa
</span><span class='line'>20000 aaaaaa
</span><span class='line'>20081 aaaaaaa
</span><span class='line'>20021 aaaaaaaa
</span><span class='line'>20072 aaaaaaaaa
</span><span class='line'>20028 aaaaaaaaaa</span></code></pre></td></tr></table></div></figure>


<p><code>[ab]{1,3}</code>のような正規表現でも、それぞれのパターンがおおよそ同じ数だけ生成されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rerand -d -n 200000 '[ab]{1,3}' | sort | uniq -c
</span><span class='line'>14299 a
</span><span class='line'>14249 aa
</span><span class='line'>14215 aaa
</span><span class='line'>14257 aab
</span><span class='line'>14192 ab
</span><span class='line'>14340 aba
</span><span class='line'>14317 abb
</span><span class='line'>14209 b
</span><span class='line'>14213 ba
</span><span class='line'>14332 baa
</span><span class='line'>14228 bab
</span><span class='line'>14355 bb
</span><span class='line'>14634 bba
</span><span class='line'>14160 bbb</span></code></pre></td></tr></table></div></figure>


<p>これはこれで意図した挙動なのですが、
1文字のパターン数に比べて、3文字のパターン数が非常に多いため、相対的に短い文字列が出現しにくくなってしまいます。
「これは本当にユーザーが望んだものなのだろうか・・・？」と疑問に思ってしまい、
うまい解決策が思いつかないままずっと放置していました。</p>

<h2>文字グループの同一視</h2>

<p>ここまで実装では正規表現の定義に厳密に従い「<code>[ab]</code>は<code>a</code>と<code>b</code>にマッチするので2パターン」と解釈していましたが、
「<code>[ab]</code>のような1文字にマッチするパターンは全部1パターン」と緩い解釈にするようにしました。
<code>-d</code>オプションはこの挙動を制御するためのオプションです。</p>

<p>デフォルトの挙動は「1文字にマッチするパターンは全部1パターン」です。
さきほどと同じ<code>[ab]{1,3}</code>で、<code>-d</code>オプションを外しデフォルトの設定で文字列生成すると以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rerand -n 200000 '[ab]{1,3}' | sort | uniq -c
</span><span class='line'>33463 a
</span><span class='line'>16432 aa
</span><span class='line'>8392 aaa
</span><span class='line'>8206 aab
</span><span class='line'>16806 ab
</span><span class='line'>8334 aba
</span><span class='line'>8403 abb
</span><span class='line'>33242 b
</span><span class='line'>16549 ba
</span><span class='line'>8393 baa
</span><span class='line'>8372 bab
</span><span class='line'>16644 bb
</span><span class='line'>8376 bba
</span><span class='line'>8388 bbb</span></code></pre></td></tr></table></div></figure>


<p><code>a</code>や<code>b</code>が多めに出ているような気がしますが、
文字列長別に集計するとおおよそ同じ回数だけ出現していることが確認できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rerand -n 200000 '[ab]{1,3}' | perl -nE 'chomp; say length' | sort -n | uniq -c
</span><span class='line'>66769 1
</span><span class='line'>67036 2
</span><span class='line'>66195 3</span></code></pre></td></tr></table></div></figure>


<p>これで少しはユーザーフレンドリーになったはず(？)</p>

<h2>ベンチマーク</h2>

<p>ベンチマークの結果も貼っておきます。
coffeescriptは <a href="https://cho45.stfuawsc.com/String_random.js/demo.html#%5B%E3%82%AB%E3%82%B3%E3%83%B5%E3%81%8B%5D%5B%E3%83%83%E3%83%BC%5D%7B1%2C3%7D%3F%5B%E3%83%95%E3%83%92%E3%81%B5%E3%81%B2%5D%7B1%2C3%7D%5B%E3%82%A3%E3%82%A7%E3%83%BC%5D%7B1%2C3%7D%5B%E3%82%BA%E3%82%B9%5D%5B%E3%83%89%E3%82%AF%E3%82%B0%E3%83%A5%5D%5B%E3%83%AA%E3%82%A4%5D%5B%E3%83%97%E3%83%96%E3%81%B7%E3%81%B6%5D%7B1%2C3%7D%5B%E3%83%88%E3%83%89%E3%82%A9%5D%7B1%2C2%7D">コーフィースクリップトの発音を生成する</a>ベンチマーク、
telephoneは<code>\d{2,3}-\d{3,4}-\d{3,4}</code>で電話番号っぽい文字列を生成するベンチです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go test -run none -bench . -benchmem ./...
</span><span class='line'>BenchmarkGenerator/coffeescript-4              1000000          1737 ns/op          81 B/op          2 allocs/op
</span><span class='line'>BenchmarkGenerator/[あ-お]{10}-4                 2000000           845 ns/op          80 B/op          2 allocs/op
</span><span class='line'>BenchmarkGenerator/[[:alpha:]]-4               5000000           274 ns/op          36 B/op          2 allocs/op
</span><span class='line'>BenchmarkGenerator/\S-4                        5000000           292 ns/op          40 B/op          2 allocs/op
</span><span class='line'>BenchmarkGenerator/\S{10}-4                    1000000          1568 ns/op          80 B/op          2 allocs/op
</span><span class='line'>BenchmarkGenerator/\pN-4                       5000000           304 ns/op          39 B/op          2 allocs/op
</span><span class='line'>BenchmarkGenerator/\p{Greek}-4                 5000000           299 ns/op          39 B/op          2 allocs/op
</span><span class='line'>BenchmarkGenerator/telephone-4                 2000000           886 ns/op          48 B/op          2 allocs/op
</span><span class='line'>BenchmarkRuneGenerator/[a]-4                  300000000            4.24 ns/op        0 B/op          0 allocs/op
</span><span class='line'>BenchmarkRuneGenerator/[a-z]-4                30000000            42.7 ns/op         0 B/op          0 allocs/op
</span><span class='line'>BenchmarkRuneGenerator/[a-zA-Z0-9]-4          10000000           118 ns/op           0 B/op          0 allocs/op
</span><span class='line'>PASS
</span><span class='line'>ok    github.com/shogo82148/go-rerand 20.013s
</span><span class='line'>?     github.com/shogo82148/go-rerand/cmd/rerand  [no test files]
</span><span class='line'>BenchmarkGocha/coffeescript-4               300000          3967 ns/op        1090 B/op         34 allocs/op
</span><span class='line'>BenchmarkGocha/[あ-お]{10}-4                 1000000          1951 ns/op         328 B/op         15 allocs/op
</span><span class='line'>BenchmarkGocha/[[:alpha:]]-4               5000000           323 ns/op          64 B/op          4 allocs/op
</span><span class='line'>BenchmarkGocha/\S-4                        5000000           394 ns/op         128 B/op          5 allocs/op
</span><span class='line'>BenchmarkGocha/\S{10}-4                     500000          3353 ns/op        1288 B/op         35 allocs/op
</span><span class='line'>BenchmarkGocha/\pN-4                       1000000          1988 ns/op        4096 B/op         10 allocs/op
</span><span class='line'>BenchmarkGocha/\p{Greek}-4                 1000000          1122 ns/op        2048 B/op          9 allocs/op
</span><span class='line'>BenchmarkGocha/telephone-4                 1000000          1998 ns/op         288 B/op         14 allocs/op
</span><span class='line'>PASS
</span><span class='line'>ok    github.com/shogo82148/go-rerand/gocha_test  14.405s
</span><span class='line'>BenchmarkStrRand/coffeescript-4            1000000          1828 ns/op         262 B/op         11 allocs/op
</span><span class='line'>BenchmarkStrRand/[あ-お]{10}-4               1000000          1189 ns/op         208 B/op          9 allocs/op
</span><span class='line'>BenchmarkStrRand/\S-4                     20000000            72.9 ns/op         0 B/op          0 allocs/op
</span><span class='line'>BenchmarkStrRand/\S{10}-4                  1000000          1097 ns/op          64 B/op          9 allocs/op
</span><span class='line'>BenchmarkStrRand/telephone-4               1000000          1409 ns/op          58 B/op         10 allocs/op
</span><span class='line'>PASS
</span><span class='line'>ok    github.com/shogo82148/go-rerand/strrand_test    7.136s</span></code></pre></td></tr></table></div></figure>


<p>テストケースにもよりますが、Songmuさんのstrrandと同等かちょっと速い程度の性能です(シンプルな正規表現ではstrrandが速いこともある)。
Twitterには「Gocha速い！」みたいなことが流れてましたが、僕の手元での検証ではstrrandの方が高速でした。
どうも<a href="https://github.com/t-mrt/gocha/pull/3">ベンチマークの使い方間違っていた</a>っぽいですね・・・。</p>

<p>ちなみにこのベンチマークには正規表現をパースする処理は入っていません。
(どう考えてもstrrandに負けるのは目に見えている)
たいていのケースで初期化一回なので気にしない気にしない。</p>

<h2>グローバルなmath/rand関数の扱い</h2>

<p>go-rerandを作る際、他の実装も参考にしたのですが、
Seedの初期化のタイミングがまちまちで、少し気になりました。</p>

<ul>
<li>fuzzingo: <code>rand.Intn</code>を使う直前(！)</li>
<li>strrand: init関数内</li>
<li>gocha: Newの中</li>
</ul>


<p>Seedの初期化は本来一回だけでいいので、「<code>rand.Intn</code>を使う直前」や「Newの中」で行うのは無駄です。
init関数内でやる方法がベターですが、<code>math/rand</code>を使うライブラリを複数importしている場合、
結局何度もSeedの初期化が行われてしまいます。
ライブラリ利用者の手間は増えますが、ライブラリの中ではなく<code>main.go</code>の中でやってほしい！というのが僕の意見です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// main.goの中でやってほしい！</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">rand</span><span class="p">.</span><span class="nx">Seed</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">UnixNano</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ベストなのは <strong>ライブラリではグローバルなmath/rand関数を使わない！</strong> ことです。
rerandでは以下のように<code>rand.New</code>を使って、グローバルな関数は使っていません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">r</span> <span class="p">=</span> <span class="nx">rand</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="nx">rand</span><span class="p">.</span><span class="nx">NewSource</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">UnixNano</span><span class="p">()))</span>
</span></code></pre></td></tr></table></div></figure>


<p>goroutine-unsafeになってしまうので、同期処理を自前で書く必要があるのが難点です。
その代わり、ロックの粒度が細かく調整できるので、並列処理の効率は上がるはずです(たぶん)。</p>

<p>また、テストの際にSeedを固定できるので便利です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">r</span> <span class="p">=</span> <span class="nx">rand</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="nx">rand</span><span class="p">.</span><span class="nx">NewSource</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>gocha互換オプション</h2>

<p><code>-prob 0.5</code>でGochaと同じ挙動になるはずです。
<code>a*</code>のような無限長の正規表現も扱えます。
数値をいじることで文字列の長さの分布を調整可能です。</p>

<h2>まとめ</h2>

<ul>
<li>Go版String::Randomを作った</li>
<li><strong>ライブラリではグローバルなmath/rand関数をなるべく使わないでほしい！</strong></li>
</ul>


<h2>参考</h2>

<ul>
<li><a href="http://ymotongpoo.hatenablog.com/entry/2014/12/21/192304">Goの正規表現エンジンを使ってファジング用ツールを書いてみる</a></li>
<li><a href="https://github.com/ymotongpoo/fuzzingo">ymotongpoo/fuzzingo</a></li>
<li><a href="http://www.songmu.jp/riji/entry/2015-03-28-strrand.html">String::Randomのgolang移植書いた</a></li>
<li><a href="https://github.com/Songmu/strrand">Songmu/strrand</a></li>
<li><a href="http://blog.yux3.net/entry/2017/05/01/014200">golangkyoto 「そうだ、 Go 京都」で「Go に String::Random を移植した話」というタイトルで発表した</a></li>
<li><a href="https://github.com/t-mrt/gocha">t-mrt/gocha</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Re: PostgreSQLで排他制約がめっちゃ便利！！]]></title>
    <link href="https://shogo82148.github.io/blog/2017/04/22/postgresql-exclusion-constraint/"/>
    <updated>2017-04-22T19:10:21+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/04/22/postgresql-exclusion-constraint</id>
    <content type="html"><![CDATA[<p><a href="http://soudai.hatenablog.com/entry/2017/04/16/152905">PostgreSQLで排他制約がめっちゃ便利！！</a>を拝見したのですが、
とても些細なミスがあるのに気がついてしまいました。
本題とは関係ない重箱の隅をつつくような話なので、わざわざコメントするほどのことでもないかと考えていたのですが、
どうしても試してみたいクエリを思いつき、
偶然にも<a href="http://shogo82148.github.io/blog/2017/03/28/database-gis/">Redis、PostgreSQL、MySQLで近傍検索</a>したときに
セットアップしたPostgreSQL環境が残っていたのでやってみました。</p>

<!-- More -->


<h2>試したかったこと</h2>

<p>そーだいさんの記事からSQLの実行結果を一部引用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>demo=# SELECT * FROM schedule;
</span><span class='line'>
</span><span class='line'> schedule_id |  room_name  |               reservation_time
</span><span class='line'>-------------+-------------+-----------------------------------------------
</span><span class='line'>           1 | soudai_room | ["2017-04-16 11:30:00","2017-04-16 12:00:00")
</span><span class='line'>           4 | soudai_room | ["2017-04-16 12:00:00","2017-04-16 12:30:00")
</span><span class='line'>           5 | soudai_room | ("2017-04-16 12:30:00","2017-04-16 12:40:00")
</span><span class='line'>           8 | soudai_room | ["2017-04-16 14:30:00","2017-04-16 16:00:00")
</span><span class='line'>(4 行)</span></code></pre></td></tr></table></div></figure>


<p><code>schedule_id</code>の<strong>5</strong>をよく見て下さい。
他のスケジュールは<strong>半開区間</strong><code>[)</code>(開始時刻は期間に<strong>含む</strong>が、終了時刻は期間に<strong>含まない</strong>)になっているのですが、
<code>schedule_id</code>の5だけ<strong>開区間</strong><code>()</code>(開始時刻も終了時刻も期間に<strong>含まない</strong>)になっています。
つまり 2017-04-16 12:30:00 ジャストに空き時間があるのです。</p>

<p><strong>ここに予約を入れてみたい！！！</strong></p>

<h2>試してみた</h2>

<h3>環境再現</h3>

<p>以下のSQLを実行して、そーだいさんの記事と同じ内容を含んだテーブルを作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">schedule</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>    <span class="n">schedule_id</span> <span class="nb">SERIAL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>    <span class="n">room_name</span> <span class="nb">TEXT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>    <span class="n">reservation_time</span> <span class="n">tsrange</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">schedule</span> <span class="p">(</span><span class="n">schedule_id</span><span class="p">,</span> <span class="n">room_name</span><span class="p">,</span> <span class="n">reservation_time</span><span class="p">)</span> <span class="k">VALUES</span>
</span><span class='line'>    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;soudai_room&#39;</span><span class="p">,</span> <span class="s1">&#39;[&quot;2017-04-16 11:30:00&quot;,&quot;2017-04-16 12:00:00&quot;)&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="s1">&#39;soudai_room&#39;</span><span class="p">,</span> <span class="s1">&#39;[&quot;2017-04-16 12:00:00&quot;,&quot;2017-04-16 12:30:00&quot;)&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;soudai_room&#39;</span><span class="p">,</span> <span class="s1">&#39;(&quot;2017-04-16 12:30:00&quot;,&quot;2017-04-16 12:40:00&quot;)&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="s1">&#39;soudai_room&#39;</span><span class="p">,</span> <span class="s1">&#39;[&quot;2017-04-16 14:30:00&quot;,&quot;2017-04-16 16:00:00&quot;)&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- schedule_idが1から始まってしまい、INSERTした内容と重複してしまうので調整</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">setval</span> <span class="p">(</span><span class="s1">&#39;schedule_schedule_id_seq&#39;</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>SELECTを実行すると同じ内容になっていることを確認できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>demo=# SELECT * FROM schedule;
</span><span class='line'> schedule_id |  room_name  |               reservation_time
</span><span class='line'>-------------+-------------+-----------------------------------------------
</span><span class='line'>           1 | soudai_room | ["2017-04-16 11:30:00","2017-04-16 12:00:00")
</span><span class='line'>           4 | soudai_room | ["2017-04-16 12:00:00","2017-04-16 12:30:00")
</span><span class='line'>           5 | soudai_room | ("2017-04-16 12:30:00","2017-04-16 12:40:00")
</span><span class='line'>           8 | soudai_room | ["2017-04-16 14:30:00","2017-04-16 16:00:00")
</span><span class='line'>(4 rows)</span></code></pre></td></tr></table></div></figure>


<p>さて、ちょうど 2017-04-16 12:30:00 は空き時間になっているので、
以下のクエリは0件になるはずです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">schedule</span>
</span><span class='line'>          <span class="k">WHERE</span> <span class="n">reservation_time</span> <span class="o">@&gt;</span> <span class="s1">&#39;2017-04-16 12:30:00&#39;</span><span class="p">::</span><span class="k">timestamp</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> schedule_id | room_name | reservation_time
</span><span class='line'>-------------+-----------+------------------
</span><span class='line'>(0 rows)</span></code></pre></td></tr></table></div></figure>


<p>予想通り検索結果は0件になりましたね。</p>

<p>そして、2017-04-16 12:30:00の直前と直後はスケジュールが埋まっています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>demo=# SELECT * FROM schedule
</span><span class='line'>          WHERE reservation_time @&gt; '2017-04-16 12:29:59.999999'::timestamp;
</span><span class='line'> schedule_id |  room_name  |               reservation_time
</span><span class='line'>-------------+-------------+-----------------------------------------------
</span><span class='line'>           4 | soudai_room | ["2017-04-16 12:00:00","2017-04-16 12:30:00")
</span><span class='line'>(1 row)
</span><span class='line'>
</span><span class='line'>demo=# SELECT * FROM schedule
</span><span class='line'>          WHERE reservation_time @&gt; '2017-04-16 12:30:00.000001'::timestamp;
</span><span class='line'> schedule_id |  room_name  |               reservation_time
</span><span class='line'>-------------+-------------+-----------------------------------------------
</span><span class='line'>           5 | soudai_room | ("2017-04-16 12:30:00","2017-04-16 12:40:00")
</span><span class='line'>(1 row)</span></code></pre></td></tr></table></div></figure>


<h3>排他制約を有効にする</h3>

<p>予約を入れるまえに排他制約を有効にしておきましょう。
すでにテーブルを作成しているので、<code>ALTER TABLE</code>文でテーブルの定義を変更します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">schedule</span> <span class="k">ADD</span> <span class="n">EXCLUDE</span> <span class="k">USING</span> <span class="n">GIST</span> <span class="p">(</span><span class="n">reservation_time</span> <span class="k">WITH</span> <span class="o">&amp;&amp;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>排他制約が有効になっているか、そーだいさんの記事と同じクエリを実行してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">schedule</span>
</span><span class='line'>  <span class="p">(</span><span class="n">room_name</span><span class="p">,</span> <span class="n">reservation_time</span><span class="p">)</span>
</span><span class='line'>     <span class="k">VALUES</span>
</span><span class='line'>  <span class="p">(</span><span class="s1">&#39;soudai_room&#39;</span><span class="p">,</span> <span class="s1">&#39;[2017-04-16 15:30, 2017-04-16 17:00)&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>demo=# INSERT INTO schedule
</span><span class='line'>demo-#   (room_name, reservation_time)
</span><span class='line'>demo-#      VALUES
</span><span class='line'>demo-#   ('soudai_room', '[2017-04-16 15:30, 2017-04-16 17:00)');
</span><span class='line'>ERROR:  conflicting key value violates exclusion constraint "schedule_reservation_time_excl"
</span><span class='line'>DETAIL:  Key (reservation_time)=(["2017-04-16 15:30:00","2017-04-16 17:00:00")) conflicts with existing key (reservation_time)=(["2017-04-16 14:30:00","2017-04-16 16:00:00")).</span></code></pre></td></tr></table></div></figure>


<p>期待通り排他制約により実行に失敗してくれました。</p>

<h3>予約を入れてみる</h3>

<p>さあ、ここからが本題です。
ちょうど 2017-04-16 12:30:00 の時間に予約を入れてみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">schedule</span>
</span><span class='line'>  <span class="p">(</span><span class="n">room_name</span><span class="p">,</span> <span class="n">reservation_time</span><span class="p">)</span>
</span><span class='line'>     <span class="k">VALUES</span>
</span><span class='line'>  <span class="p">(</span><span class="s1">&#39;soudai_room&#39;</span><span class="p">,</span> <span class="s1">&#39;[2017-04-16 12:30:00, 2017-04-16 12:30:00]&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>demo=# INSERT INTO schedule
</span><span class='line'>demo-#   (room_name, reservation_time)
</span><span class='line'>demo-#      VALUES
</span><span class='line'>demo-#   ('soudai_room', '[2017-04-16 12:30:00, 2017-04-16 12:30:00]');
</span><span class='line'>INSERT 0 1</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>demo=# SELECT * FROM schedule;
</span><span class='line'> schedule_id |  room_name  |               reservation_time
</span><span class='line'>-------------+-------------+-----------------------------------------------
</span><span class='line'>           1 | soudai_room | ["2017-04-16 11:30:00","2017-04-16 12:00:00")
</span><span class='line'>           4 | soudai_room | ["2017-04-16 12:00:00","2017-04-16 12:30:00")
</span><span class='line'>           5 | soudai_room | ("2017-04-16 12:30:00","2017-04-16 12:40:00")
</span><span class='line'>           8 | soudai_room | ["2017-04-16 14:30:00","2017-04-16 16:00:00")
</span><span class='line'>          10 | soudai_room | ["2017-04-16 12:30:00","2017-04-16 12:30:00"]
</span><span class='line'>(5 rows)</span></code></pre></td></tr></table></div></figure>


<p><strong>やった予約成功！</strong></p>

<p>PostreSQLのドキュメントによるとtimestamp型の精度は1マイクロ秒らしいので、
部屋を利用できるのは1マイクロ秒だけですが・・・。</p>

<h2>インデックスの使われ方について</h2>

<p>インデックスの使われ方について気になったので、少し検証を続行してみます。
僕自身はMySQLを扱う事が多いのですが、MySQLではユニーク制約を設定すると、設定したカラムに自動的にインデックスが張られて、
それが検索時にも使用されます。
PostreSQLの排他制約でもそうなのかな？と疑問に思ったので、実行計画を確認してみました。</p>

<p>今回用意したテーブルだと行数が少なすぎて、
インデックスが利用可能な場合でもフルスキャンが選択されてしまいます。
データを大量に用意するのも面倒ですし、どうやらフルスキャンを無効化するオプション(厳密には、フルスキャン以外に選択肢がない場合があるので、なるべく使わない)があるらしいので、
その状態で実行計画を確認してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>demo=# SET enable_seqscan = OFF;
</span><span class='line'>SET
</span><span class='line'>demo=# EXPLAIN SELECT * FROM schedule
</span><span class='line'>          WHERE reservation_time @&gt; '2017-04-16 12:30:00'::timestamp;
</span><span class='line'>                                           QUERY PLAN
</span><span class='line'>------------------------------------------------------------------------------------------------
</span><span class='line'> Index Scan using schedule_reservation_time_excl on schedule  (cost=0.13..8.15 rows=1 width=68)
</span><span class='line'>   Index Cond: (reservation_time @&gt; '2017-04-16 12:30:00'::timestamp without time zone)
</span><span class='line'>(2 rows)</span></code></pre></td></tr></table></div></figure>


<p>(読み方よくわかってないけど)Index Scanとあるので、きっとインデックスを使ってくれているのでしょう。</p>

<p>排他制約に<code>room_name</code>を入れた場合も試してみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">btree_gist</span><span class="p">;</span>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">schedule</span> <span class="k">ADD</span> <span class="n">EXCLUDE</span> <span class="k">USING</span> <span class="n">GIST</span> <span class="p">(</span><span class="n">room_name</span> <span class="k">WITH</span> <span class="o">=</span><span class="p">,</span> <span class="n">reservation_time</span> <span class="k">WITH</span> <span class="o">&amp;&amp;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>demo=# SET enable_seqscan = OFF;
</span><span class='line'>SET
</span><span class='line'>demo=# EXPLAIN SELECT * FROM schedule
</span><span class='line'>          WHERE room_name = 'soudai_room' AND reservation_time @&gt; '2017-04-16 12:30:00'::timestamp;
</span><span class='line'>                                                           QUERY PLAN
</span><span class='line'>--------------------------------------------------------------------------------------------------------------------------------
</span><span class='line'> Index Scan using schedule_room_name_reservation_time_excl on schedule  (cost=0.14..8.16 rows=1 width=68)
</span><span class='line'>   Index Cond: ((room_name = 'soudai_room'::text) AND (reservation_time @&gt; '2017-04-16 12:30:00'::timestamp without time zone))
</span><span class='line'>(2 rows)</span></code></pre></td></tr></table></div></figure>


<p>(やっぱり読み方よくわかってないけど)Index Scanとあるので、きっとインデックスを使ってくれているのでしょう。</p>

<p>今回はフルスキャンを手動で無効化しましたが、大量にデータがあれば自動的にインデックスを使ってくれそうです。</p>

<h2>再発防止策を考えてみる</h2>

<p>試したいことを試せたのでここで終わりでもいいんですが、
エンジニアとしてはやはり再発防止策を入れておきたいところです。
色々な範囲関数があるので、それを使えばCHECK制約をかけられるのでは、と書いてみたのがこちら。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">btree_gist</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">schedule</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>    <span class="n">schedule_id</span> <span class="nb">SERIAL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>    <span class="n">room_name</span> <span class="nb">TEXT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>    <span class="n">reservation_time</span> <span class="n">tsrange</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>    <span class="k">CHECK</span> <span class="p">(</span>    <span class="n">lower_inc</span><span class="p">(</span><span class="n">reservation_time</span><span class="p">)),</span>
</span><span class='line'>    <span class="k">CHECK</span> <span class="p">(</span><span class="k">NOT</span> <span class="n">upper_inc</span><span class="p">(</span><span class="n">reservation_time</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">EXCLUDE</span> <span class="k">USING</span> <span class="n">GIST</span> <span class="p">(</span><span class="n">room_name</span> <span class="k">WITH</span> <span class="o">=</span><span class="p">,</span> <span class="n">reservation_time</span> <span class="k">WITH</span> <span class="o">&amp;&amp;</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>さあ、データを投入してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">schedule</span> <span class="p">(</span><span class="n">room_name</span><span class="p">,</span> <span class="n">reservation_time</span><span class="p">)</span> <span class="k">VALUES</span>
</span><span class='line'>    <span class="p">(</span><span class="s1">&#39;soudai_room&#39;</span><span class="p">,</span> <span class="s1">&#39;[&quot;2017-04-16 11:30:00&quot;,&quot;2017-04-16 12:00:00&quot;)&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">schedule</span> <span class="p">(</span><span class="n">room_name</span><span class="p">,</span> <span class="n">reservation_time</span><span class="p">)</span> <span class="k">VALUES</span>
</span><span class='line'>    <span class="p">(</span><span class="s1">&#39;soudai_room&#39;</span><span class="p">,</span> <span class="s1">&#39;(&quot;2017-04-16 12:30:00&quot;,&quot;2017-04-16 12:40:00&quot;)&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>期間が半区間<code>[)</code>になっている最初のクエリは成功しますが、
開区間<code>()</code>になっている二番目のクエリは以下のようなエラーを吐いて挿入に失敗します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>demo=# INSERT INTO schedule (room_name, reservation_time) VALUES
</span><span class='line'>demo-#     ('soudai_room', '("2017-04-16 12:30:00","2017-04-16 12:40:00")');
</span><span class='line'>ERROR:  new row for relation "schedule" violates check constraint "schedule_reservation_time_check"
</span><span class='line'>DETAIL:  Failing row contains (2, soudai_room, ("2017-04-16 12:30:00","2017-04-16 12:40:00")).</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>制約はユニーク制約くらいしか使ったことがないのですが、いろんな制約があって便利ですね。
(と書いたところで外部キー制約を使った経験を思い出したけど、<a href="http://songmu.github.io/slides/fk-night/#0">MySQLユーザにはいろいろ事情があってね・・・</a>)</p>

<p>特に、時間指定が半区間<code>[)</code>か閉区間<code>[]</code>かで苦しめられた身からすると、これを制約に入れられるのは非常に魅力的です(ちなみに僕は半区間<code>[)</code>推進派です)。
PostgreSQLを利用することがあれば使っていきたい機能ですね(使う機会あるかな・・・)。</p>

<h2>参考文献</h2>

<ul>
<li><a href="http://soudai.hatenablog.com/entry/2017/04/16/152905">PostgreSQLで排他制約がめっちゃ便利！！</a></li>
<li><a href="https://www.postgresql.jp/document/9.6/html/datatype-datetime.html">8.5. 日付/時刻データ型  - PostgreSQL 9.6.2文書</a></li>
<li><a href="https://www.postgresql.jp/document/9.6/html/rangetypes.html">8.17. 範囲型 - PostgreSQL 9.6.2文書</a></li>
<li><a href="https://www.postgresql.jp/document/9.6/html/sql-altertable.html">ALTER TABLE - PostgreSQL 9.6.2文書</a></li>
<li><a href="https://www.postgresql.jp/document/9.6/html/functions-range.html">9.19. 範囲関数と演算子 - PostgreSQL 9.6.2文書</a></li>
<li><a href="https://www.postgresql.jp/document/9.6/html/using-explain.html">14.1. EXPLAINの利用 - PostgreSQL 9.6.2文書</a></li>
<li><a href="https://www.postgresql.jp/document/9.6/html/runtime-config-query.html#runtime-config-query-enable">19.7. 問い合わせ計画 - PostgreSQL 9.6.2文書</a></li>
<li><a href="http://songmu.github.io/slides/fk-night/#0">我々(主語が大きい)は何故MySQLで外部キーを使わないのか</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl+List::Utilの64bit整数の罠にはまった話]]></title>
    <link href="https://shogo82148.github.io/blog/2017/04/13/perl-int64/"/>
    <updated>2017-04-13T19:52:13+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/04/13/perl-int64</id>
    <content type="html"><![CDATA[<p>先日 <a href="https://code.google.com/codejam/contest/3264486/dashboard">Google Code Jam Qualification Round 2017</a> が開催されました
(って何？というひとは<a href="https://code.google.com/codejam/about">About</a>のページを確認。本題では無いので説明略)。</p>

<p>僕もこれに参加して、D以外の問題A,B,Cを解いて、無事Round1へ進むことができました。
しかしPerlで解いたC-largeだけ何故か間違いの判定。
原因を探ってみたところ、PerlおよびList::Utilの64bit整数の罠にはまっていたことに気が付いたので、その備忘録として残しておきます。</p>

<!-- More -->


<h2>問題が発生したコード</h2>

<p>問題が発生するのは以下の計算をするコードです。</p>

<ul>
<li>max: 250000000000000000と249999999999999999で大きい方を返す</li>
<li>div: 249999999999999999を2で割った商を求める</li>
</ul>


<p>この計算をそれぞれ二通りの計算方法で実装してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="mf">5.24.0</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">List::</span><span class="n">Util</span> <span class="sx">qw(max)</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">say</span> <span class="s">&quot;max:&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">say</span> <span class="n">max</span><span class="p">(</span><span class="mi">250000000000000000</span><span class="p">,</span> <span class="mi">249999999999999999</span><span class="p">);</span>
</span><span class='line'><span class="n">say</span> <span class="n">max</span><span class="p">(</span><span class="mi">249999999999999999</span><span class="p">,</span> <span class="mi">250000000000000000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">say</span> <span class="s">&quot;div:&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">say</span> <span class="nb">int</span><span class="p">(</span><span class="mi">249999999999999999</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="n">say</span> <span class="mi">249999999999999999</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>max: 順番を変えただけなので、同じ結果をになるはず</li>
<li>div: 割り算と等価なビットシフトに置き換えたので、同じ結果になるはず</li>
</ul>


<p>僕は「同じ結果になるはず」と期待していました。
しかし、これを実行してみると以下のようになります。</p>

<ul>
<li>[Wandbox]三へ( へ՞ਊ ՞)へ ﾊｯﾊｯ <a href="https://wandbox.org/permlink/5fUBzLmBCRKUo4xZ">https://wandbox.org/permlink/5fUBzLmBCRKUo4xZ</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>max:
</span><span class='line'>249999999999999999
</span><span class='line'>250000000000000000
</span><span class='line'>div:
</span><span class='line'>125000000000000000
</span><span class='line'>124999999999999999</span></code></pre></td></tr></table></div></figure>


<h2>原因</h2>

<p>250000000000000000は大体2<sup>57</sup>.8なので、64bitの整数で十分表現できます。
しかし倍精度浮動小数点数として扱われると、精度が53bit分しかないので正確に表現できないのです。</p>

<p>例えば以下のコードは"true"を出力します(ここだけ何故かGo)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">float64</span><span class="p">(</span><span class="mi">250000000000000000</span><span class="p">)</span> <span class="o">==</span> <span class="nb">float64</span><span class="p">(</span><span class="mi">250000000000000000</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>いわゆる<a href="https://ja.wikipedia.org/wiki/%E8%AA%A4%E5%B7%AE#.E6.83.85.E5.A0.B1.E8.90.BD.E3.81.A1">情報落ち</a>ってやつです。
Perlが演算の途中で倍精度浮動小数点数に変換してしまうので、250000000000000000と249999999999999999を区別できないんですね。</p>

<h2>maxの解決策1 Reduceを使う</h2>

<p>最大値を求める<code>max</code>は<code>reduce</code>を使っても簡単に作ることが出来ます。
この実装方だと、順番にかかわらず同じ結果を返します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="mf">5.24.0</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">List::</span><span class="n">Util</span> <span class="sx">qw(reduce)</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">say</span> <span class="s">&quot;reduce:&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">say</span> <span class="n">reduce</span> <span class="p">{</span> <span class="nv">$a</span> <span class="o">&gt;</span> <span class="nv">$b</span> <span class="p">?</span> <span class="nv">$a</span> <span class="p">:</span> <span class="nv">$b</span> <span class="p">}</span> <span class="mi">250000000000000000</span><span class="p">,</span> <span class="mi">249999999999999999</span><span class="p">;</span>
</span><span class='line'><span class="n">say</span> <span class="n">reduce</span> <span class="p">{</span> <span class="nv">$a</span> <span class="o">&gt;</span> <span class="nv">$b</span> <span class="p">?</span> <span class="nv">$a</span> <span class="p">:</span> <span class="nv">$b</span> <span class="p">}</span> <span class="mi">249999999999999999</span><span class="p">,</span> <span class="mi">250000000000000000</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>[Wandbox]三へ( へ՞ਊ ՞)へ ﾊｯﾊｯ <a href="https://wandbox.org/permlink/lzKkOXzqx2fXlr69">https://wandbox.org/permlink/lzKkOXzqx2fXlr69</a></li>
</ul>


<p>個人的には<code>max</code>を使っても<code>reduce</code>を使っても同じ結果が変えるのが正しいのでは、と思うのですがどうでしょう？</p>

<ul>
<li><a href="https://rt.cpan.org/Public/Bug/Display.html?id=95902">Bug #95902 for Scalar-List-Utils: sum, min, and max use NV, truncating integers on 64-bit machines</a></li>
</ul>


<p>(なんかそれっぽいチケットを見つけたけど、英語の議論についていける気がしないので、静かに見守る・・・)</p>

<h2>maxの解決策2 bigintを使う</h2>

<p><code>max</code>の引数に<code>bigint</code>を渡してやると、正しい結果を返してくれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="mf">5.24.0</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">bigint</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">List::</span><span class="n">Util</span> <span class="sx">qw(max)</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">say</span> <span class="s">&quot;max:&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">say</span> <span class="n">max</span><span class="p">(</span><span class="mi">250000000000000000</span><span class="p">,</span> <span class="mi">249999999999999999</span><span class="p">);</span>
</span><span class='line'><span class="n">say</span> <span class="n">max</span><span class="p">(</span><span class="mi">249999999999999999</span><span class="p">,</span> <span class="mi">250000000000000000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>[Wandbox]三へ( へ՞ਊ ՞)へ ﾊｯﾊｯ <a href="https://wandbox.org/permlink/QTnEkQJ2698VWkgG">https://wandbox.org/permlink/QTnEkQJ2698VWkgG</a></li>
</ul>


<p>ただし、今回の僕のケースでは「ハッシュのキーの中で一番大きいものを取得する」処理が必要だったので、<code>bigint</code>だけでは解決しません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="mf">5.24.0</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">bigint</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">List::</span><span class="n">Util</span> <span class="sx">qw(max)</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">%h</span> <span class="o">=</span> <span class="p">(</span><span class="mi">250000000000000000</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">249999999999999999</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">say</span> <span class="n">max</span><span class="p">(</span><span class="nb">keys</span> <span class="nv">%h</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>[Wandbox]三へ( へ՞ਊ ՞)へ ﾊｯﾊｯ <a href="https://wandbox.org/permlink/af0YXdjRlVzYvm0u">https://wandbox.org/permlink/af0YXdjRlVzYvm0u</a></li>
</ul>


<p>Perlのハッシュは文字列しか使えないので、強制的に文字列にされてしまうんですね。
さらにややこしいことに<a href="http://akiym.hateblo.jp/entry/2013/05/22/122438">hash randomization</a>によって、
時々正しい結果を返すというのも面倒なところです。</p>

<p>そのため今回のケースでは、<code>bigint</code>に戻す操作を明示的に書いてあげる必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="mf">5.24.0</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">bigint</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">List::</span><span class="n">Util</span> <span class="sx">qw(max)</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">%h</span> <span class="o">=</span> <span class="p">(</span><span class="mi">250000000000000000</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">249999999999999999</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">say</span> <span class="n">max</span><span class="p">(</span><span class="nb">map</span> <span class="p">{</span><span class="nv">$_</span><span class="o">+</span><span class="mi">0</span><span class="p">}</span> <span class="nb">keys</span> <span class="nv">%h</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>[Wandbox]三へ( へ՞ਊ ՞)へ ﾊｯﾊｯ <a href="https://wandbox.org/permlink/zeKfT7TrYaogz00g">https://wandbox.org/permlink/zeKfT7TrYaogz00g</a></li>
</ul>


<h2>divの解決策1: bignumを使う</h2>

<p><code>bignum</code>を使った方法は割り算の計算でも有効です。
ちなみに影響範囲はスコープで制限できるので、全体への影響を避けたい時は<code>{}</code>で囲ってあげましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="mf">5.24.0</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">use</span> <span class="n">bigint</span><span class="p">;</span>
</span><span class='line'>    <span class="n">say</span> <span class="mi">249999999999999999</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">say</span> <span class="mi">249999999999999999</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>[Wandbox]三へ( へ՞ਊ ՞)へ ﾊｯﾊｯ <a href="https://wandbox.org/permlink/yIGEXqwtuG9CmR0h">https://wandbox.org/permlink/yIGEXqwtuG9CmR0h</a></li>
</ul>


<h2>divの解決策2: integerを使う</h2>

<p>64bit環境で動くことがわかっているときは<code>bignum</code>の代わりに<code>integer</code>が使えます
(扱えるbit数以外にも違いがあるので、詳細は<a href="http://perldoc.jp/docs/modules/bignum-0.23/bigint.pod">bigintのpod</a>を参照)。
<code>bignum</code>と同様に影響範囲はスコープ内に限定されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="mf">5.24.0</span><span class="p">;</span>
</span><span class='line'><span class="n">say</span> <span class="k">do</span> <span class="p">{</span> <span class="k">use</span> <span class="n">integer</span><span class="p">;</span> <span class="mi">249999999999999999</span><span class="o">/</span><span class="mi">2</span> <span class="p">};</span>
</span><span class='line'><span class="n">say</span> <span class="mi">249999999999999999</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>[Wandbox]三へ( へ՞ਊ ՞)へ ﾊｯﾊｯ <a href="https://wandbox.org/permlink/P0ijy2i9qVcY614L">https://wandbox.org/permlink/P0ijy2i9qVcY614L</a></li>
</ul>


<p>Pythonみたいに <code>249999999999999999 // 2</code> と書かせて欲しい・・・
(しかし <code>//</code> は既に別の用途で使われているのであった)</p>

<h2>まとめ</h2>

<ul>
<li>Perlで64bitの整数を扱うときは割り算と<code>min</code>と<code>max</code>と<code>sum</code>に注意</li>
<li>次のRound1ではPerlは使わない</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go言語のヒープに確保するデータの初期化コストについて調べてみた(Go1.8.1版)]]></title>
    <link href="https://shogo82148.github.io/blog/2017/04/13/go1-8-allocation/"/>
    <updated>2017-04-13T08:23:08+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/04/13/go1-8-allocation</id>
    <content type="html"><![CDATA[<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">golangで<br>    p := new(Type)<br>と<br>    p := &amp;Type{}<br>の使い分けってどうするべきだろう?</p>&mdash; MURAOKA Taro (@kaoriya) <a href="https://twitter.com/kaoriya/status/851983856966283265">April 12, 2017</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>こちらのツイートに対して、以下のベンチ結果が紹介されていました。</p>

<ul>
<li><a href="http://ryochack.hatenablog.com/entry/2014/06/08/225606">Go言語のヒープに確保するデータの初期化コストについて調べてみた</a></li>
</ul>


<p>しかし<a href="https://twitter.com/hnakamur2">hnakamur2</a>さんも言及しているように、
これはGo1.2.2時の結果。
その後、GoのコンパイラがGo実装になったり、SSAが導入されたりと、
今のコンパイラの実装は当時とは全く違うものになっています。</p>

<p>というわけで、現時点での最新のバージョン(Go1.8.1)で、同様の検証をおこなってみました。</p>

<!-- More -->


<h2>検証コード</h2>

<p>検証に使用したコードはGo1.2.2のときと全く同じものです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// alloc_overhead.go</span>
</span><span class='line'>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">container</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">v</span> <span class="p">[</span><span class="mi">64</span><span class="p">]</span><span class="kt">byte</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">MakeContainer</span><span class="p">()</span> <span class="o">*</span><span class="nx">container</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">c</span> <span class="o">:=</span> <span class="nx">container</span><span class="p">{}</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&amp;</span><span class="nx">c</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">MakeContainerOneLine</span><span class="p">()</span> <span class="o">*</span><span class="nx">container</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&amp;</span><span class="nx">container</span><span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">MakeContainerNew</span><span class="p">()</span> <span class="o">*</span><span class="nx">container</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">new</span><span class="p">(</span><span class="nx">container</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">_</span> <span class="p">=</span> <span class="nx">MakeContainer</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">_</span> <span class="p">=</span> <span class="nx">MakeContainerOneLine</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">_</span> <span class="p">=</span> <span class="nx">MakeContainerNew</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// alloc_overhead_test.go</span>
</span><span class='line'>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;testing&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">BenchmarkMakeContainer</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">_</span> <span class="p">=</span> <span class="nx">MakeContainer</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">BenchmarkMakeContainerOneLine</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">_</span> <span class="p">=</span> <span class="nx">MakeContainerOneLine</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">BenchmarkMakeContainerNew</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">_</span> <span class="p">=</span> <span class="nx">MakeContainerNew</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ベンチマーク結果</h2>

<p>Go1.8.1でベンチマークを実行した結果がこちら。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go test -bench . -benchmem
</span><span class='line'>BenchmarkMakeContainer-4              1000000000           2.79 ns/op        0 B/op          0 allocs/op
</span><span class='line'>BenchmarkMakeContainerOneLine-4       1000000000           2.84 ns/op        0 B/op          0 allocs/op
</span><span class='line'>BenchmarkMakeContainerNew-4           1000000000           2.83 ns/op        0 B/op          0 allocs/op
</span><span class='line'>PASS
</span><span class='line'>ok    _/Users/shogo/workspace/tmp/2017-04-13-alloc    9.345s</span></code></pre></td></tr></table></div></figure>


<p>ベンチマークの結果、ほとんど速度の差はありませんでした。</p>

<p>しかし、「ヒープに置かれるデータの初期化」を検証したかったのに、アロケーションが0なのはおかしいですね？
どうやら最適化の結果、スタックに置かれるようになってしまったようです。</p>

<h2>再検証</h2>

<p>Go1.7から追加された<a href="https://golang.org/pkg/runtime/#KeepAlive">runtime.KeepAlive</a>を使ってベンチマークを修正しました。
<code>runtime.KeepAlive</code>が呼ばれるまで確保した領域は解放されることが無いので、
データがヒープに乗ってくれるはずです(たぶん)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// alloc_overhead_test.go</span>
</span><span class='line'>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;runtime&quot;</span>
</span><span class='line'>  <span class="s">&quot;testing&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">BenchmarkMakeContainer</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">runtime</span><span class="p">.</span><span class="nx">KeepAlive</span><span class="p">(</span><span class="nx">MakeContainer</span><span class="p">())</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">BenchmarkMakeContainerOneLine</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">runtime</span><span class="p">.</span><span class="nx">KeepAlive</span><span class="p">(</span><span class="nx">MakeContainerOneLine</span><span class="p">())</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">BenchmarkMakeContainerNew</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">runtime</span><span class="p">.</span><span class="nx">KeepAlive</span><span class="p">(</span><span class="nx">MakeContainerNew</span><span class="p">())</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>修正版のベンチマークはこちら。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go test -bench . -benchmem
</span><span class='line'>BenchmarkMakeContainer-4              50000000            34.7 ns/op        64 B/op          1 allocs/op
</span><span class='line'>BenchmarkMakeContainerOneLine-4       30000000            34.4 ns/op        64 B/op          1 allocs/op
</span><span class='line'>BenchmarkMakeContainerNew-4           50000000            35.9 ns/op        64 B/op          1 allocs/op
</span><span class='line'>PASS
</span><span class='line'>ok    _/Users/shogo/workspace/tmp/2017-04-13-alloc    4.690s</span></code></pre></td></tr></table></div></figure>


<p>意図したとおりアロケーションが発生しています。
速度差もほとんどありません。</p>

<h2>最適化の結果を見てみる</h2>

<p><a href="http://shinpei.github.io/blog/2016/08/13/what-ssa-brings-to-go-17/">Go1.7からSSAが導入された</a>ことにより、
以下のようなコマンドで最適化の様子を簡単に知ることができるようになりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">GOSSAFUNC</span><span class="o">=</span>MakeContainer go build alloc_overhead.go
</span></code></pre></td></tr></table></div></figure>


<p>この機能を使って、各関数が最終的にどのように最適化されたのかを確認してみます。</p>

<p>以下は<code>MakeContainer</code>の結果(<a href="https://shogo82148.github.io/files/2017-04-13-go1-8-allocation/MakeContainer.html">ssa.html</a>)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>v1 = InitMem &lt;mem&gt;
</span><span class='line'>v2 = SP &lt;uintptr&gt; : SP
</span><span class='line'>v3 = SB &lt;uintptr&gt; : SB
</span><span class='line'>v10 = LEAQ &lt;*uint8&gt; {type."".container} v3 : AX
</span><span class='line'>v8 = MOVQstore &lt;mem&gt; v2 v10 v1
</span><span class='line'>v9 = CALLstatic &lt;mem&gt; {runtime.newobject} [16] v8
</span><span class='line'>v11 = MOVQload &lt;*container&gt; [8] v2 v9 : AX
</span><span class='line'>v13 = VarDef &lt;mem&gt; {~r0} v9
</span><span class='line'>v14 = MOVQstore &lt;mem&gt; {~r0} v2 v11 v13</span></code></pre></td></tr></table></div></figure>


<p><code>MakeContainerOneLine</code>の結果(<a href="https://shogo82148.github.io/files/2017-04-13-go1-8-allocation/MakeContainerOneLine.html">ssa.html</a>)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>v1 = InitMem &lt;mem&gt;
</span><span class='line'>v2 = SP &lt;uintptr&gt; : SP
</span><span class='line'>v3 = SB &lt;uintptr&gt; : SB
</span><span class='line'>v10 = LEAQ &lt;*uint8&gt; {type."".container} v3 : AX
</span><span class='line'>v8 = MOVQstore &lt;mem&gt; v2 v10 v1
</span><span class='line'>v9 = CALLstatic &lt;mem&gt; {runtime.newobject} [16] v8
</span><span class='line'>v11 = MOVQload &lt;*container&gt; [8] v2 v9 : AX
</span><span class='line'>v14 = VarDef &lt;mem&gt; {~r0} v9
</span><span class='line'>v15 = MOVQstore &lt;mem&gt; {~r0} v2 v11 v14</span></code></pre></td></tr></table></div></figure>


<p><code>MakeContainerNew</code>の結果(<a href="https://shogo82148.github.io/files/2017-04-13-go1-8-allocation/MakeContainerNew.html">ssa.html</a>)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>v1 = InitMem &lt;mem&gt;
</span><span class='line'>v2 = SP &lt;uintptr&gt; : SP
</span><span class='line'>v3 = SB &lt;uintptr&gt; : SB
</span><span class='line'>v10 = LEAQ &lt;*uint8&gt; {type."".container} v3 : AX
</span><span class='line'>v8 = MOVQstore &lt;mem&gt; v2 v10 v1
</span><span class='line'>v9 = CALLstatic &lt;mem&gt; {runtime.newobject} [16] v8
</span><span class='line'>v11 = MOVQload &lt;*container&gt; [8] v2 v9 : AX
</span><span class='line'>v12 = VarDef &lt;mem&gt; {~r0} v9
</span><span class='line'>v13 = MOVQstore &lt;mem&gt; {~r0} v2 v11 v12</span></code></pre></td></tr></table></div></figure>


<p>変数名の割り当てが異なるだけで実質同じ内容ですね。</p>

<h2>まとめ</h2>

<ul>
<li>Go1.8.1の最適化強い</li>
<li>Go1.8.1では<code>new(Type)</code>と<code>&amp;Type{}</code>の差はない(少なくとも性能面では)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis、PostgreSQL、MySQLで近傍検索]]></title>
    <link href="https://shogo82148.github.io/blog/2017/03/28/database-gis/"/>
    <updated>2017-03-28T19:59:49+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/03/28/database-gis</id>
    <content type="html"><![CDATA[<p>「<a href="http://techblog.kayac.com/serverside-geohash">サーバーで付近の情報を通知するサービスのつくり方</a>」
という、Geohashを使って近傍検索を実現する記事をみつけました。
最近<a href="https://shogo82148.github.io/blog/2017/02/23/perl-webdb-vol97/">Redisに関する記事</a>を書いた関係で、
この記事をみて「GeohashはRedisと一緒に使うともっと便利だよ！」と思わず宣伝したくなったのですが、
MySQL5.7でInnoDBに空間インデックス(Spatial Index)のサポートが入ったので
「MySQLでももっと簡単にできるのでは？」と思い、
RedisやMySQLを含めたいろんなDBで近傍検索を実現する方法を調べてみました。</p>

<p>以前、<a href="https://shogo82148.github.io/blog/2012/08/02/fireworks/">スマートフォンのセンサを活用して花火の打ち上げ場所を推定するアプリ</a>を作った関係で、
地球上での距離計算の実装も気になったので、それについても調査してみました。</p>

<!-- More -->


<h2>関連知識</h2>

<h3>GeoHash</h3>

<p><a href="https://ja.wikipedia.org/wiki/%E3%82%B8%E3%82%AA%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5">Geohash（ジオハッシュ）</a>
は緯度・経度を短い文字列に変換する方法です。
距離が近い2地点のGeohashは似たような文字列になるという特徴があります(一部例外あり)。
この特徴を利用すると、文字列検索だけで近傍検索が実現できます。</p>

<h3>地球上の二点間の距離</h3>

<p>地球は完全な球体ではなく、回転楕円体であることが知られています。
地球の形がわからないと緯度・経度などを決められないので、
<a href="https://ja.wikipedia.org/wiki/%E5%9C%B0%E7%90%83%E6%A5%95%E5%86%86%E4%BD%93">地球楕円体</a>が定義されています。
近似方法によっていくつか種類があるのですが、GPSなどで使われているWGS84がよく使われているようです。</p>

<p>国土地理院が提供している<a href="http://vldb.gsi.go.jp/sokuchi/surveycalc/main.html">測量計算サイト</a>では
<a href="http://vldb.gsi.go.jp/sokuchi/surveycalc/surveycalc/bl2stf.html">距離と方位角の計算</a>を使って緯度・経度から距離を計算できます。
回転楕円体上の距離の厳密解は求められない(要出典)ので、
<a href="http://vldb.gsi.go.jp/sokuchi/surveycalc/surveycalc/algorithm/bl2st/bl2st.htm">数値計算</a>によって求めることになります。
計算式を見て分かる通り非常に複雑なので、なんらかの近似をしている実装がほとんどです。</p>

<h2>各種DBでの実現方法</h2>

<h3>Redis</h3>

<p>Redisでは3.2から<a href="https://redis.io/commands#geo">GEO</a>関連の機能をサポートしています。
ソート済みセットにGeohashを組み合わせて実現しています。</p>

<p>簡単に試してみました。データは以下の記事から拝借したものを使用します。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/ilo/20090212/1234448136">MySQLで指定した緯度経度から半径nメートル内検索っぽいのを実現するSQL</a></li>
<li><a href="https://www.infoscoop.org/blogjp/2015/01/21/tutorial_for_geodb/">PostgreSQLとOracleで緯度経度から半径nメートル内検索を実行してみる。</a></li>
</ul>


<p><a href="https://redis.io/commands/geoadd"><code>GEOADD</code></a>でデータ挿入です。
ちなみにデータを削除する<code>GEODEL</code>は用意されていないとのこと。
中身はソート済みセットなので、<a href="https://redis.io/commands/zrem">ZREM</a>でいいんですね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat command.txt
</span><span class='line'>GEOADD geotable 139.777254 35.713768 上野駅         139.774029 35.711846 西郷隆盛像
</span><span class='line'>GEOADD geotable 139.774744 35.712737 上野の森美術館 139.770872 35.712351 不忍池弁財天
</span><span class='line'>GEOADD geotable 139.775696 35.716293 野口英世博士像 139.775803 35.715420 国立西洋美術館
</span><span class='line'>GEOADD geotable 139.776544 35.716319 国立科学博物館 139.772776 35.717186 東京都美術館
</span><span class='line'>GEOADD geotable 139.776462 35.718883 東京国立博物館 139.794547 35.715280 花やしき
</span><span class='line'>GEOADD geotable 139.792692 35.710635 雷門
</span><span class='line'>$ redis-cli &lt; command.txt
</span><span class='line'>(integer) 2
</span><span class='line'>(integer) 2
</span><span class='line'>(integer) 2
</span><span class='line'>(integer) 2
</span><span class='line'>(integer) 2
</span><span class='line'>(integer) 1</span></code></pre></td></tr></table></div></figure>


<p><code>GEOHASH</code>で各地点のGeohashを取得できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ redis-cli
</span><span class='line'>127.0.0.1:6379&gt; GEOHASH geotable 上野駅 西郷隆盛像 上野の森美術館
</span><span class='line'>1) "xn77htqxy10"
</span><span class='line'>2) "xn77hthkdf0"
</span><span class='line'>3) "xn77htkcg80"</span></code></pre></td></tr></table></div></figure>


<p><code>GEORADIUS</code>で近傍検索ができます。
上野駅から半径300m以内の地点を求める例です。
データに日本語を使ったので非常にわかりにくいですが、
上野駅から近い順に「上野駅」「国立西洋美術館」「上野の森美術館」「国立科学博物館」の距離と座標を返してくれました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ redis-cli
</span><span class='line'>127.0.0.1:6379&gt; GEORADIUS geotable 139.777254 35.713768 300 m WITHCOORD WITHDIST ASC
</span><span class='line'>1) 1) "\xe4\xb8\x8a\xe9\x87\x8e\xe9\xa7\x85"
</span><span class='line'>   2) "0.1203"
</span><span class='line'>   3) 1) "139.77725297212600708"
</span><span class='line'>      2) "35.71376868735887911"
</span><span class='line'>2) 1) "\xe5\x9b\xbd\xe7\xab\x8b\xe8\xa5\xbf\xe6\xb4\x8b\xe7\xbe\x8e\xe8\xa1\x93\xe9\xa4\xa8"
</span><span class='line'>   2) "225.4920"
</span><span class='line'>   3) 1) "139.77580457925796509"
</span><span class='line'>      2) "35.71541879083360271"
</span><span class='line'>3) 1) "\xe4\xb8\x8a\xe9\x87\x8e\xe3\x81\xae\xe6\xa3\xae\xe7\xbe\x8e\xe8\xa1\x93\xe9\xa4\xa8"
</span><span class='line'>   2) "254.1580"
</span><span class='line'>   3) 1) "139.77474242448806763"
</span><span class='line'>      2) "35.71273705584702896"
</span><span class='line'>4) 1) "\xe5\x9b\xbd\xe7\xab\x8b\xe7\xa7\x91\xe5\xad\xa6\xe5\x8d\x9a\xe7\x89\xa9\xe9\xa4\xa8"
</span><span class='line'>   2) "290.8339"
</span><span class='line'>   3) 1) "139.77654486894607544"
</span><span class='line'>      2) "35.71631861684517872"</span></code></pre></td></tr></table></div></figure>


<p>上野駅と上野駅の距離は当然0mなはずですが、ちょっとだけズレてます。
これはソート済みセットの制約で緯度・経度それぞれ53bitを26bitにまるめているからです(たぶん)。
距離の計算は<a href="https://github.com/antirez/redis/blob/4.0/src/geohash_helper.c#L52">半径6372797.560856mの完全な球体</a>で近似し、
<a href="https://en.wikipedia.org/wiki/Haversine_formula">Haversine formula</a>というのを使っています。</p>

<p>ちなみに扱える緯度・経度には以下の制限があり、極付近の座標は扱えません。</p>

<ul>
<li>経度 -180度から180度</li>
<li>緯度 -85.05112878度から85.05112878度</li>
</ul>


<p>これは Spherical Mercator(球面メルカトル図法) の制限らしいです。
Google Maps, OpenStreetMap, Bing 等でよく見る地図は平面ですが、本来の地球は丸いので、うまく平面にマッピングする必要があります。
このときにどうしても本来の地形から歪んでしまうわけですが、
極付近では歪みが無限大になってしまいうまく平面の地図にできないのです。</p>

<p>ただ、Redis自体は平面へのマッピングをしないので、別にこの制限要らな気もします。
まあ、コーナーケースなので他にも問題がありそうですし、
そもそも北極・南極向けにサービス作らないので気にしないでおきましょう。</p>

<h3>PostgreSQL</h3>

<p>日本語で書かれた先行事例を見つけたので、PostgreSQLの紹介から。
以下の記事にあるように、PostGISというオプション機能をインストールすると簡単に実現できます。</p>

<ul>
<li><a href="https://www.infoscoop.org/blogjp/2015/01/21/tutorial_for_geodb/">PostgreSQLとOracleで緯度経度から半径nメートル内検索を実行してみる。</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- PostGISを有効化</span>
</span><span class='line'><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">postgis</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- テーブルの作成</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">geotable</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">id</span>   <span class="nb">SERIAL</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
</span><span class='line'>    <span class="n">name</span> <span class="nb">varchar</span> <span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>    <span class="n">geom</span> <span class="n">geography</span><span class="p">(</span><span class="n">POINT</span><span class="p">,</span> <span class="mi">4326</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- データの挿入</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">geotable</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">geom</span><span class="p">)</span> <span class="k">VALUES</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;上野駅&#39;</span><span class="p">,</span> <span class="n">ST_GeographyFromText</span><span class="p">(</span><span class="s1">&#39;SRID=4326;POINT(139.777254 35.713768)&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;西郷隆盛像&#39;</span><span class="p">,</span> <span class="n">ST_GeographyFromText</span><span class="p">(</span><span class="s1">&#39;SRID=4326;POINT(139.774029 35.711846)&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;上野の森美術館&#39;</span><span class="p">,</span> <span class="n">ST_GeographyFromText</span><span class="p">(</span><span class="s1">&#39;SRID=4326;POINT(139.774744 35.712737)&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;不忍池弁財天&#39;</span><span class="p">,</span> <span class="n">ST_GeographyFromText</span><span class="p">(</span><span class="s1">&#39;SRID=4326;POINT(139.770872 35.712351)&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;野口英世博士像&#39;</span><span class="p">,</span> <span class="n">ST_GeographyFromText</span><span class="p">(</span><span class="s1">&#39;SRID=4326;POINT(139.775696 35.716293)&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;国立西洋美術館&#39;</span><span class="p">,</span> <span class="n">ST_GeographyFromText</span><span class="p">(</span><span class="s1">&#39;SRID=4326;POINT(139.775803 35.71542)&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;国立科学博物館&#39;</span><span class="p">,</span> <span class="n">ST_GeographyFromText</span><span class="p">(</span><span class="s1">&#39;SRID=4326;POINT(139.776544 35.716319)&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;東京都美術館&#39;</span><span class="p">,</span> <span class="n">ST_GeographyFromText</span><span class="p">(</span><span class="s1">&#39;SRID=4326;POINT(139.772776 35.717186)&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;東京国立博物館&#39;</span><span class="p">,</span> <span class="n">ST_GeographyFromText</span><span class="p">(</span><span class="s1">&#39;SRID=4326;POINT(139.776462 35.718883)&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;花やしき&#39;</span><span class="p">,</span> <span class="n">ST_GeographyFromText</span><span class="p">(</span><span class="s1">&#39;SRID=4326;POINT(139.794547 35.71528)&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;雷門&#39;</span><span class="p">,</span> <span class="n">ST_GeographyFromText</span><span class="p">(</span><span class="s1">&#39;SRID=4326;POINT(139.792692 35.710635)&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- 空間インデックスの作成</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">gist_geotable</span> <span class="k">on</span> <span class="n">geotable</span> <span class="k">USING</span> <span class="n">GIST</span> <span class="p">(</span><span class="n">geom</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ST_GeoHash</code>でGeohashを求めることができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">name</span><span class="p">,</span> <span class="n">ST_AsText</span><span class="p">(</span><span class="n">geom</span><span class="p">),</span> <span class="n">ST_GeoHash</span><span class="p">(</span><span class="n">geom</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">geotable</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>     name          |          st_astext          |      st_geohash
</span><span class='line'>-----------------------+-----------------------------+----------------------
</span><span class='line'> 上野駅             | POINT(139.777254 35.713768) | xn77htqxy0fu2t0y69sv
</span><span class='line'> 西郷隆盛像       | POINT(139.774029 35.711846) | xn77hthkdfw51p8cmr68
</span><span class='line'> 上野の森美術館 | POINT(139.774744 35.712737) | xn77htkcg8enm86bp3j7
</span><span class='line'> 不忍池弁財天    | POINT(139.770872 35.712351) | xn77ht4p92sp8jdqkjzf
</span><span class='line'> 野口英世博士像 | POINT(139.775696 35.716293) | xn77htvw3z9495yr4dxd
</span><span class='line'> 国立西洋美術館 | POINT(139.775803 35.71542)  | xn77htv9kkbffr4ptjcy
</span><span class='line'> 国立科学博物館 | POINT(139.776544 35.716319) | xn77htynts3mer092t8v
</span><span class='line'> 東京都美術館    | POINT(139.772776 35.717186) | xn77hw57twp9x63n6vus
</span><span class='line'> 東京国立博物館 | POINT(139.776462 35.718883) | xn77hwqjedkhwdmmwp0n
</span><span class='line'> 花やしき          | POINT(139.794547 35.71528)  | xn77jjg2949rgdfxbrjp
</span><span class='line'> 雷門                | POINT(139.792692 35.710635) | xn77jhcvtbf5mdcexf85
</span><span class='line'>(11 rows)</span></code></pre></td></tr></table></div></figure>


<p>近傍検索には<a href="http://cse.naro.affrc.go.jp/yellow/pgisman/2.0.0/ST_DWithin.html"><code>ST_DWithin</code></a>を使います。
<a href="http://cse.naro.affrc.go.jp/yellow/pgisman/2.0.0/ST_Distance.html"><code>ST_Distance</code></a>や
<a href="http://cse.naro.affrc.go.jp/yellow/pgisman/2.0.0/ST_Distance_Sphere.html"><code>ST_Distance_Sphere</code></a>、
<a href="http://cse.naro.affrc.go.jp/yellow/pgisman/2.0.0/ST_Distance_Spheroid.html"><code>ST_Distance_Spheroid</code></a>等
を使って距離を計算して絞り込むことも出来ますが、これらの関数はインデックスを使ってくれません。
<code>ST_DWithin</code>は
<a href="http://cse.naro.affrc.go.jp/yellow/pgisman/2.0.0/using_postgis_dbmanagement.html#id286995989">GiSTインデックス</a>
を利用してくれるので高速に処理してくれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">name</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ST_AsText</span><span class="p">(</span><span class="n">geom</span><span class="p">),</span>
</span><span class='line'>    <span class="n">ST_Distance</span><span class="p">(</span><span class="s1">&#39;SRID=4326;POINT(139.777254 35.713768)&#39;</span><span class="p">,</span> <span class="n">geom</span><span class="p">)</span> <span class="k">as</span> <span class="n">dist</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">geotable</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">ST_DWithin</span><span class="p">(</span><span class="n">geom</span><span class="p">,</span> <span class="n">ST_GeographyFromText</span><span class="p">(</span><span class="s1">&#39;SRID=4326;POINT(139.777254 35.713768)&#39;</span><span class="p">),</span> <span class="mi">300</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">dist</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>     name          |          st_astext          |     dist
</span><span class='line'>-----------------------+-----------------------------+---------------
</span><span class='line'> 上野駅             | POINT(139.777254 35.713768) |             0
</span><span class='line'> 国立西洋美術館 | POINT(139.775803 35.71542)  | 225.468916585
</span><span class='line'> 上野の森美術館 | POINT(139.774744 35.712737) | 254.308127877
</span><span class='line'> 国立科学博物館 | POINT(139.776544 35.716319) | 290.242707221</span></code></pre></td></tr></table></div></figure>


<p><code>ST_</code>で始まる関数は<a href="http://www.opengeospatial.org/standards/sfs">OpenGIS</a>やSQL/MMで標準化されているものらしいです。</p>

<h3>MySQL</h3>

<p>MySQLに関しては以下の記事を見つけました。
この記事が書かれた頃はMyISAMでしか空間インデックスをサポートしていませんでしたが、
5.7からInnoDBでもサポートされるようになったので、
InnoDBでも同様のことができるはずです。</p>

<ul>
<li><a href="http://qiita.com/kochizufan/items/a68b30ba74849483f75c">mysql空間テーブルの作り方</a></li>
</ul>


<p>MySQL5.7で入った機能についてはこちらを参照。
空間インデックス以外にも大量に変更があるので、アップグレードする人は確認をおすすめします。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=shogo82148-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B01LCJRCYE&linkId=ac9d8d9e348bd97dc858337c94e82696"></iframe>


<p>MySQLもPostgreSQLもOpenGISに準拠する方針みたいなので、
PostgreSQLと同じ感じでSQLが書けると信じたいところですが、
当然ながらそうは行きません。</p>

<p>一番大きな違いは<code>geography</code>型には対応しておらず<code>geometry</code>型しか使えないということです。
<code>geography</code>型は測地系の情報を持っている(つまり地球が回転楕円体だということを知っている)のですが、
<code>geometry</code>型は測地系の情報が無いため、平面しか扱えません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="n">test</span><span class="p">;</span> <span class="c1">-- 5.6以前は勝手に作ってくれたけど、5.7からは無いらしい</span>
</span><span class='line'><span class="n">USE</span> <span class="n">test</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">NOT</span> <span class="k">EXISTS</span> <span class="o">`</span><span class="n">geotable</span><span class="o">`</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">`</span><span class="n">id</span><span class="o">`</span>   <span class="nb">int</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="n">UNSIGNED</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">name</span><span class="o">`</span> <span class="nb">VARCHAR</span> <span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">geom</span><span class="o">`</span> <span class="n">geometry</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">),</span>
</span><span class='line'>  <span class="n">SPATIAL</span> <span class="k">KEY</span> <span class="o">`</span><span class="n">geom</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">geom</span><span class="o">`</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span> <span class="k">DEFAULT</span> <span class="n">CHARSET</span><span class="o">=</span><span class="n">utf8mb4</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>座標の指定も<code>ST_GeographyFromText</code>ではなく<code>ST_GeomFromText</code>を使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">geotable</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">geom</span><span class="p">)</span> <span class="k">VALUES</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;上野駅&#39;</span><span class="p">,</span> <span class="n">ST_GeomFromText</span><span class="p">(</span><span class="s1">&#39;POINT(139.777254 35.713768)&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;西郷隆盛像&#39;</span><span class="p">,</span> <span class="n">ST_GeomFromText</span><span class="p">(</span><span class="s1">&#39;POINT(139.774029 35.711846)&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;上野の森美術館&#39;</span><span class="p">,</span> <span class="n">ST_GeomFromText</span><span class="p">(</span><span class="s1">&#39;POINT(139.774744 35.712737)&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;不忍池弁財天&#39;</span><span class="p">,</span> <span class="n">ST_GeomFromText</span><span class="p">(</span><span class="s1">&#39;POINT(139.770872 35.712351)&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;野口英世博士像&#39;</span><span class="p">,</span> <span class="n">ST_GeomFromText</span><span class="p">(</span><span class="s1">&#39;POINT(139.775696 35.716293)&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;国立西洋美術館&#39;</span><span class="p">,</span> <span class="n">ST_GeomFromText</span><span class="p">(</span><span class="s1">&#39;POINT(139.775803 35.71542)&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;国立科学博物館&#39;</span><span class="p">,</span> <span class="n">ST_GeomFromText</span><span class="p">(</span><span class="s1">&#39;POINT(139.776544 35.716319)&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;東京都美術館&#39;</span><span class="p">,</span> <span class="n">ST_GeomFromText</span><span class="p">(</span><span class="s1">&#39;POINT(139.772776 35.717186)&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;東京国立博物館&#39;</span><span class="p">,</span> <span class="n">ST_GeomFromText</span><span class="p">(</span><span class="s1">&#39;POINT(139.776462 35.718883)&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;花やしき&#39;</span><span class="p">,</span> <span class="n">ST_GeomFromText</span><span class="p">(</span><span class="s1">&#39;POINT(139.794547 35.71528)&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;雷門&#39;</span><span class="p">,</span> <span class="n">ST_GeomFromText</span><span class="p">(</span><span class="s1">&#39;POINT(139.792692 35.710635)&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>PostgreSQLと同様にGeohashを求める<a href="https://dev.mysql.com/doc/refman/5.7/en/spatial-geohash-functions.html"><code>ST_GeoHash</code>があります</a>が、
桁数を指定する必要があるという違いがあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">name</span><span class="p">,</span> <span class="n">ST_AsText</span><span class="p">(</span><span class="n">geom</span><span class="p">),</span> <span class="n">ST_GeoHash</span><span class="p">(</span><span class="n">geom</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">geotable</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+-----------------------+-----------------------------+----------------------+
</span><span class='line'>| name                  | ST_AsText(geom)             | ST_GeoHash(geom, 11) |
</span><span class='line'>+-----------------------+-----------------------------+----------------------+
</span><span class='line'>| 上野駅                | POINT(139.777254 35.713768) | xn77htqxy0f          |
</span><span class='line'>| 西郷隆盛像            | POINT(139.774029 35.711846) | xn77hthkdfw          |
</span><span class='line'>| 上野の森美術館        | POINT(139.774744 35.712737) | xn77htkcg8e          |
</span><span class='line'>| 不忍池弁財天          | POINT(139.770872 35.712351) | xn77ht4p92s          |
</span><span class='line'>| 野口英世博士像        | POINT(139.775696 35.716293) | xn77htvw3z9          |
</span><span class='line'>| 国立西洋美術館        | POINT(139.775803 35.71542)  | xn77htv9kkb          |
</span><span class='line'>| 国立科学博物館        | POINT(139.776544 35.716319) | xn77htynts3          |
</span><span class='line'>| 東京都美術館          | POINT(139.772776 35.717186) | xn77hw57twp          |
</span><span class='line'>| 東京国立博物館        | POINT(139.776462 35.718883) | xn77hwqjedk          |
</span><span class='line'>| 花やしき              | POINT(139.794547 35.71528)  | xn77jjg2949          |
</span><span class='line'>| 雷門                  | POINT(139.792692 35.710635) | xn77jhcvtbf          |
</span><span class='line'>+-----------------------+-----------------------------+----------------------+
</span><span class='line'>11 rows in set (0.00 sec)</span></code></pre></td></tr></table></div></figure>


<p>MySQLにも距離を求める<code>ST_Distance</code>はあるのですが、これは平面専用です。
地球上での距離を求めるには<a href="https://dev.mysql.com/doc/refman/5.7/en/spatial-convenience-functions.html"><code>ST_Distance_Sphere</code>を使います</a>。
MySQL5.7から追加された関数で、これを使うと半径6370986mの球体で近似したときの距離を計算できます。</p>

<p>そして残念なことにPostgreSQLにはあった<code>ST_DWithin</code>はMySQLにはありません。
<code>ST_Distance_Sphere</code>を使えばクエリは書けるのですが、インデックスを使ってくれないので非効率です。
そのため、矩形の範囲指定で大雑把に絞り込んだあとで<code>ST_Distance_Sphere</code>を使って詳細に絞り込むことになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SET</span> <span class="o">@</span><span class="n">ueno</span> <span class="o">=</span> <span class="n">ST_GeomFromText</span><span class="p">(</span><span class="s1">&#39;POINT(139.777254 35.713768)&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">SELECT</span>
</span><span class='line'>    <span class="n">name</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ST_AsText</span><span class="p">(</span><span class="n">geom</span><span class="p">),</span>
</span><span class='line'>    <span class="n">ST_Distance_Sphere</span><span class="p">(</span><span class="o">@</span><span class="n">ueno</span><span class="p">,</span> <span class="n">geom</span><span class="p">)</span> <span class="k">AS</span> <span class="n">dist</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">geotable</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">ST_Distance_Sphere</span><span class="p">(</span><span class="o">@</span><span class="n">ueno</span><span class="p">,</span> <span class="n">geom</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">300</span>
</span><span class='line'><span class="k">AND</span> <span class="n">ST_Within</span><span class="p">(</span><span class="n">geom</span><span class="p">,</span> <span class="n">ST_Buffer</span><span class="p">(</span><span class="o">@</span><span class="n">ueno</span><span class="p">,</span> <span class="n">DEGREES</span><span class="p">(</span><span class="mi">300</span><span class="o">/</span><span class="p">(</span><span class="mi">6370986</span><span class="o">*</span><span class="n">COS</span><span class="p">(</span><span class="n">RADIANS</span><span class="p">(</span><span class="n">ST_Y</span><span class="p">(</span><span class="o">@</span><span class="n">ueno</span><span class="p">))))),</span> <span class="n">ST_Buffer_Strategy</span><span class="p">(</span><span class="s1">&#39;point_square&#39;</span><span class="p">)))</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">dist</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+-----------------------+-----------------------------+--------------------+
</span><span class='line'>| name                  | ST_AsText(geom)             | dist               |
</span><span class='line'>+-----------------------+-----------------------------+--------------------+
</span><span class='line'>| 上野駅                | POINT(139.777254 35.713768) |                  0 |
</span><span class='line'>| 国立西洋美術館        | POINT(139.775803 35.71542)  | 225.62014319497658 |
</span><span class='line'>| 上野の森美術館        | POINT(139.774744 35.712737) | 253.96163316266237 |
</span><span class='line'>| 国立科学博物館        | POINT(139.776544 35.716319) | 290.81011310408957 |
</span><span class='line'>+-----------------------+-----------------------------+--------------------+
</span><span class='line'>4 rows in set (0.00 sec)</span></code></pre></td></tr></table></div></figure>


<p>緯度によって経度1度あたりの長さが違うので、矩形選択の範囲に補正を入れてあります。
本当は緯度の補正は無くても良いはずですが、広めならいいだろ！ってことで雑に書いています。
本番で使いたい人は補正＆バリデーション頑張ってください(特に極の辺りで大変なことになるので)。</p>

<h3>その他DB</h3>

<p>力尽きたので簡単に。</p>

<p>SQLiteは<a href="https://www.gaia-gis.it/fossil/libspatialite/index">SpatiaLite</a>という拡張モジュールで空間データを扱えるようです。</p>

<p>全文検索エンジンの<a href="http://groonga.org/ja/">Groonga</a>も近傍検索に対応していて、
距離の計算方法は以下の3つから選べるようです。
(<a href="http://groonga.org/ja/docs/reference/functions/geo_distance.html"><code>geo_distance</code></a>)</p>

<ul>
<li><code>rectangle</code>: 方形近似して距離を計算</li>
<li><code>sphere</code>: <a href="https://github.com/groonga/groonga/blob/v7.0.0/lib/grn_geo.h#L42">半径6357303m</a>の完全な球体と仮定して計算</li>
<li><code>ellipsoid</code>: WGS84地球楕円体を<a href="http://yamadarake.jp/trdi/report000001.html">ヒュベニの距離計算式</a>で近似</li>
</ul>


<p>ヒュベニの距離計算式というのが出てきましたが、<code>ellipsoid</code>で使っているのは簡易版で、
<a href="http://www.amano-tec.com/apps/paceruler.html">本来のヒュベニの距離計算式</a>は非常に複雑で難しい・・・。</p>

<h2>まとめ</h2>

<p>Redis、PostgreSQL、MySQLで近傍検索をやってみました。</p>

<ul>
<li>Redisは近傍検索だけならお手軽</li>
<li>PostgreSQL+PostGISは今回触った中では最強。地理データを真面目に扱うならいいかも</li>
<li>MySQLは5.6以前よりは扱いやすくなったものの、空間インデックスを効果的に使うには一工夫必要</li>
</ul>


<p>PostgreSQL+PostGISと比べると、どうしてもMySQL5.7は見劣りしますね。
しかし、検索をSQLで書けるという利点は大きいので、利用を検討する価値はあると思います。</p>

<p>ところで、大体のDBで地球を完全な球で近似する実装が入ってるんですが、
半径が微妙に違うんですよね。</p>

<ul>
<li>Redis: 6 372 797.560 856m</li>
<li>PostgreSQL: 6 370 986m</li>
<li>MySQL: 6 370 986m</li>
<li>Groonga: 6 357 303m</li>
<li>赤道半径: 6 378 137m</li>
<li>極半径: 6 356 752.314 245m</li>
</ul>


<p>0.24%しか違わないので、実用上は全く問題ないんですが、
出典がよくわからないし気になります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go言語のchanはいったいいくつ付けられるのか試してみた]]></title>
    <link href="https://shogo82148.github.io/blog/2017/03/17/how-many-chan-can-i-write-in-golang/"/>
    <updated>2017-03-17T21:10:25+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/03/17/how-many-chan-can-i-write-in-golang</id>
    <content type="html"><![CDATA[<p>pecoに入った修正をみて、果たして<code>chan</code>はいくつまで付けられるのか気になったので、
雑に試してみました。
先に断っておきますが、全く有用ではないですよ。</p>

<!-- More -->


<h2>背景</h2>

<p>pecoに入った修正はこちら(一部抜粋)。</p>

<ul>
<li><a href="https://github.com/peco/peco/pull/411">Make Resume a blocking operation #411</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/interface.go b/interface.go</span>
</span><span class='line'><span class="gh">index 3d4472f..fff446c 100644</span>
</span><span class='line'><span class="gd">--- a/interface.go</span>
</span><span class='line'><span class="gi">+++ b/interface.go</span>
</span><span class='line'><span class="gu">@@ -162,8 +162,8 @@ type Screen interface {</span>
</span><span class='line'> // Termbox just hands out the processing to the termbox library
</span><span class='line'> type Termbox struct {
</span><span class='line'>  mutex     sync.Mutex
</span><span class='line'><span class="gd">-    resumeCh  chan (struct{})</span>
</span><span class='line'><span class="gd">-    suspendCh chan (struct{})</span>
</span><span class='line'><span class="gi">+    resumeCh  chan chan struct{}</span>
</span><span class='line'><span class="gi">+    suspendCh chan struct{}</span>
</span><span class='line'> }
</span><span class='line'>
</span><span class='line'> // View handles the drawing/updating the screen
</span><span class='line'><span class="gh">diff --git a/screen.go b/screen.go</span>
</span><span class='line'><span class="gh">index edbce87..f6dd71e 100644</span>
</span><span class='line'><span class="gd">--- a/screen.go</span>
</span><span class='line'><span class="gi">+++ b/screen.go</span>
</span><span class='line'><span class="gu">@@ -21,7 +21,7 @@ func (t *Termbox) Init() error {</span>
</span><span class='line'> func NewTermbox() *Termbox {
</span><span class='line'>  return &amp;Termbox{
</span><span class='line'>      suspendCh: make(chan struct{}),
</span><span class='line'><span class="gd">-        resumeCh:  make(chan struct{}),</span>
</span><span class='line'><span class="gi">+        resumeCh:  make(chan chan struct{}),</span>
</span><span class='line'>  }
</span><span class='line'> }
</span></code></pre></td></tr></table></div></figure>


<p>channelを使ってchannelをやり取りすることができるので、
<code>chan struct{}</code>をやり取りする<code>chan chan struct{}</code>という型が使えます。
同じ要領で、channelをやり取りするchannelをやり取りするchannelをやり取り&hellip;するchannelが
無限に作れるはずです(少なくとも構文上は)。
ということで、実際にやってみました。</p>

<h2>実験</h2>

<p>雑なPerlスクリプトを準備して、大量の<code>chan</code>を付けたGoのコードを自動生成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">print</span> <span class="s">&lt;&lt;EOF;</span>
</span><span class='line'><span class="s">package main</span>
</span><span class='line'>
</span><span class='line'><span class="s">import (</span>
</span><span class='line'><span class="s">    &quot;fmt&quot;</span>
</span><span class='line'><span class="s">)</span>
</span><span class='line'>
</span><span class='line'><span class="s">type Foo @{[&#39;chan &#39; x 4096]} struct{}</span>
</span><span class='line'>
</span><span class='line'><span class="s">func main() {</span>
</span><span class='line'><span class="s">    fmt.Printf(&quot;Hello, %#v\\n&quot;, make(Foo))</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>chan</code>の個数を変えて何度かビルドを繰り返します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">time </span>go build -o main main.go
</span></code></pre></td></tr></table></div></figure>


<h2>結果</h2>

<p>chanの個数とビルドにかかった時間をまとめてみました。</p>

<table>
    <tr><th>chanの個数</th><th>ビルド時間</th></tr>
    <tr><td>1</td><td>0.236s</td></tr>
    <tr><td>2</td><td>0.240s</td></tr>
    <tr><td>4</td><td>0.226s</td></tr>
    <tr><td>8</td><td>0.234s</td></tr>
    <tr><td>16</td><td>0.240s</td></tr>
    <tr><td>32</td><td>0.250s</td></tr>
    <tr><td>64</td><td>0.281s</td></tr>
    <tr><td>128</td><td>0.258s</td></tr>
    <tr><td>256</td><td>0.360s</td></tr>
    <tr><td>512</td><td>0.775s</td></tr>
    <tr><td>1024</td><td>3.228s</td></tr>
    <tr><td>2048</td><td>18.605s</td></tr>
    <tr><td>4096</td><td>1m53.614s</td></tr>
    <tr><td>8192</td><td>13m46.018s(ビルド失敗したので参考記録)</td></tr>
</table>


<p>8192個付けたら以下のようなエラーを吐いてビルドが失敗してしまったので、
8192個の時の記録は参考記録です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># command-line-arguments
</span><span class='line'>too much data in section SDWARFINFO (over 2000000000 bytes)</span></code></pre></td></tr></table></div></figure>


<p>何かビルドの設定をいじればもっと行けるかもしれませんが、
デフォルトの設定では4096から8192の間に限界があるようです。
4096個<code>chan</code>を付けたときのソースコードは20KB程度なのにバイナリサイズは524MBまで膨らんでいました。</p>

<p>256個当たりからビルド時間に影響が出ているので、
ビルド時間を考える256個以下に抑えるのがよさそうです。
それ以上だと <script type="math/tex">O(n^{2.6})</script> 程度のオーダーでビルド時間が延びます。
とはいえ、256個も<code>chan</code>を付いたコードを人間が読めるとは思えないので、
2個が限度でしょうね・・・。
3個以上必要になるケースは余りないと思います。</p>

<h2>型定義を再帰的にして無限chanを実現する</h2>

<p>そもそも、<code>chan</code>を大量に並べなくとも、
型定義を再帰的に行えば無限の<code>chan</code>を付けたときと同等のことができます。
例えば以下のコードで"Goroutine 1"と"Goroutine 2"を交互に表示することが可能です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Foo</span> <span class="kd">chan</span> <span class="nx">Foo</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="nx">Foo</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">ch</span> <span class="o">:=</span> <span class="nx">ch</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">done</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Goroutine 2&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">done</span> <span class="o">&lt;-</span> <span class="nx">ch</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Goroutine 1&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="nx">Foo</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">ch</span> <span class="o">&lt;-</span> <span class="nx">done</span>
</span><span class='line'>      <span class="nx">ch</span> <span class="p">=</span> <span class="o">&lt;-</span><span class="nx">done</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Hello, playground&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>channelでのやり取りが複雑になるので実用性があるかは不明ですが・・・。
例えば先程の例だと、普通にループを書いたほうが圧倒的にシンプルです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Goroutine 1&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Goroutine 2&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Hello, playground&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>無限<code>chan</code>が必要になる多くのケースは、このような書き換えができるような気がします。
(そもそも必要になったことがない)</p>

<h2>まとめ</h2>

<ul>
<li><code>chan</code>の個数の上限は4096から8192の間のどこか</li>
<li>256個あたりからビルド時間に影響が出始める

<ul>
<li>プログラムを読む人の精神力に多大な影響を与えるので、実際は2個までに留めるべきだと思う</li>
</ul>
</li>
<li>再帰的に型を定義することで、無限に<code>chan</code>を付けた時と同等のことが可能</li>
</ul>


<p><code>chan</code>を大量に付けたいケースには今までに僕自身は遭遇したことがないです。
有用な例を見つけた人は教えてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP/WebSocketで時刻同期するWebNTPを書いた]]></title>
    <link href="https://shogo82148.github.io/blog/2017/03/11/go-webntp/"/>
    <updated>2017-03-11T18:48:09+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/03/11/go-webntp</id>
    <content type="html"><![CDATA[<p>Go1.8から<a href="https://golang.org/pkg/net/http/httptrace/">http/httpgtrace</a>が追加され、
HTTP通信にフックを差し込めるようになりました。
以前触った時は<a href="https://shogo82148.github.io/blog/2017/01/14/re-golang-dns-cache/">パフォーマンス測定に利用</a>しましたが、
他に面白い活用法はないかとWebNTPというのを作ってみました。</p>

<ul>
<li><a href="https://github.com/shogo82148/go-webntp">webntp</a></li>
</ul>


<p>HTTP/HTTPS/Websocket上でNTP(Network Time Protocol)っぽいことをするプログラムです。</p>

<!-- More -->


<h2>HTTP/HTTPSで時刻同期</h2>

<p>日本標準時はNICTの管理する原子時計が基準になっており、
NICTでは原子時計に直結したNTPサーバー(ntp.nict.jp)の提供を行っています。
それに加えて、<a href="http://www.nict.go.jp/JST/http.html">https/httpサービス</a>も提供しており、
ブラウザを使って現在時刻を取得できます。</p>

<p>APIは簡単でミリ秒単位のtimestampを返してくれるだけです。
その情報からサーバーとクライアント間の時間のズレを算出するわけですが、
HTTP通信では、DNSの名前解決、TCPハンドシェイク、TLSハンドシェイク等々の時間が入ってしまうため、
正確なズレを求めることは困難です。</p>

<p>そこでhttp/httpgtraceを使って、ハンドシェイクを除いたリクエストの送信時刻、レスポンスを最初に受信した時刻から、
より正確なズレを知ることができるのではと作ったのがWebNTPです。
NICTの<a href="https://ntp-a1.nict.go.jp/cgi-bin/json">JSON形式のAPI</a>に対応しており、
以下のように時刻を取得できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go get github.com/shogo82148/go-webntp/cmd/webntp
</span><span class='line'>$ webntp https://ntp-a1.nict.go.jp/cgi-bin/json
</span><span class='line'>server https://ntp-a1.nict.go.jp/cgi-bin/json, offset -0.006376, delay 0.024411
</span><span class='line'>2017-03-11 16:08:06.150393313 +0900 JST, server https://ntp-a1.nict.go.jp/cgi-bin/json, offset -0.006376</span></code></pre></td></tr></table></div></figure>


<p>WebNTPはNICTのAPIと同様の内容を返すサーバーにもなれます。
本家のフォーマットにしたがい、しっかりとうるう秒の情報も返すようになっているので、
ntpdのSLEWモードを切った状態でお試しください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ webntp -serve :8080
</span><span class='line'>
</span><span class='line'>$ curl -s http://localhost:8080/ | jq .
</span><span class='line'>{
</span><span class='line'>  "id": "localhost:8080",
</span><span class='line'>  "it": 0,
</span><span class='line'>  "st": 1489217288.328757,
</span><span class='line'>  "time": 1489217288.328757,
</span><span class='line'>  "leap": 36,
</span><span class='line'>  "next": 1483228800, // 今年の1/1にあったうるう秒の情報
</span><span class='line'>  "step": 1
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>ところで、URLにcgi-binが入っているのは、過去との互換性を保つためにそうなっているのか、
今もCGIで動いているのか、気になる・・・
(少なくとも初期実装はPerlのCGIだったみたいですね)。</p>

<h2>Websocketで時刻同期</h2>

<p>HTTPで取れるのは便利ですが、これではブラウザ等や他のクライアントで正確な時間を知るのが難しいです。
今ならWebSocketが使えるのでは？と、WebSocketにも対応してみました。
時刻取得時にws/wssスキーマを指定するとWebSocketモードになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ webntp ws://localhost:8080/
</span><span class='line'>server ws://localhost:8080/, offset 0.000031, delay 0.000671
</span><span class='line'>2017-03-11 16:19:29.850452219 +0900 JST, server ws://localhost:8080/, offset 0.000031</span></code></pre></td></tr></table></div></figure>


<p>ブラウザからもJavaScriptを使ってアクセスできるというのが大きな利点ですね。
TCP上での通信のためNTPに比べればもちろん精度は落ちますが、
スプラトゥーンができる程度のネットワーク環境であれば±十数ミリ秒程度の誤差に収まるのではないでしょうか。</p>

<h2>ntpdの参照クロックとして使う</h2>

<p>実装している最中にいろいろと調べてみたところ、
ntpdはNTPでネットワークから時刻を取得する以外に、コンピュータに直結したデバイスからも時刻情報を取得できることがわかりました。
たとえばGPSモジュールを繋いで、GPSに積まれている原子時計と同期をとることができるらしいです。</p>

<p>同期方法はたくさんあるのですが、Shared Memory <a href="http://doc.ntp.org/4.2.8/drivers/driver28.html">driver28</a>というのが
比較的ポピュラーなようです。
Python+SWIGの実装(<a href="https://github.com/mjuenema/python-ntpdshm">python-ntpdshm</a>)があったので、
それを参考にGoに移植しました。</p>

<p><code>ntpd.conf</code>にShared Memoryと同期する設定を追加します。
アドレス部分に<code>127.127.28.x</code>を指定するとShared Memoryになるそうです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server 127.127.28.2 noselect
</span><span class='line'>fudge 127.127.28.2 refid PYTH stratum 10</span></code></pre></td></tr></table></div></figure>


<p><code>-shm x</code>をオプションにつけると、ntpdとの同期モードになり、
HTTP等で取得した時刻情報をntpdに送信します。
デフォルトだと4回連続でAPIを叩いて怒られそうなので、<code>-p 1</code>も一緒につけています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ webntp -p 1 -shm 2 https://ntp-a1.nict.go.jp/cgi-bin/json https://ntp-b1.nict.go.jp/cgi-bin/json
</span><span class='line'>server https://ntp-a1.nict.go.jp/cgi-bin/json, offset -0.003258, delay 0.018910
</span><span class='line'>server https://ntp-b1.nict.go.jp/cgi-bin/json, offset -0.003570, delay 0.021652</span></code></pre></td></tr></table></div></figure>


<p>しばらくしてから、ntpdのステータスを確認すると、
remote:SHM(2)にoffset情報が表示されるはずです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ntpq -p
</span><span class='line'>     remote           refid      st t when poll reach   delay   offset  jitter
</span><span class='line'>==============================================================================
</span><span class='line'> SHM(2)          .PYTH.          10 l    2   64   17    0.000   -3.331   0.384
</span><span class='line'>*ntp-a2.nict.go. .NICT.           1 u   58   64   37   10.280    1.494   2.028</span></code></pre></td></tr></table></div></figure>


<h2>その他類似プロジェクト</h2>

<p>HTTPで時刻同期というアイデア自体はすでにあったようで、
<a href="http://www.htptime.org/index.html">htptime</a>というものがありました。
WebNTPはhtptimeのサーバーとも同期できます。
AWS Lambdaで動いているhtptimeサーバーも公開されているのですが、Internal Server Errorしか帰ってこない・・・。</p>

<p><a href="http://www.vervest.org/htp/">htp</a>はhtptimeの元ネタらしいです。
HTTPのDateヘッダーで時刻合わせするので、秒単位でしか同期できません。
WebNTPでは未対応です。</p>

<h2>まとめ</h2>

<ul>
<li>http/httpgtraceの活用法としてWebNTPというのを作ってみた</li>
<li>HTTP/HTTPS/WebSocketでの同期が可能(UDP通信を禁止されている環境でも大丈夫！)</li>
<li>取得した時刻をntpdに反映することも可能</li>
</ul>


<p>UDP/123が禁止されている環境って今はどの程度あるんですかね？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go-JSONStoreの高速化と機能追加]]></title>
    <link href="https://shogo82148.github.io/blog/2017/03/05/tune-up-go-jsonstore/"/>
    <updated>2017-03-05T16:19:25+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/03/05/tune-up-go-jsonstore</id>
    <content type="html"><![CDATA[<p>以前mattnさんが紹介していた<a href="https://github.com/schollz/jsonstore">schollz/jsonstore</a>。
時間が経ってしまいましたが「ここは高速化できそうだなー」といじってみたので、
やってみたことをメモ。</p>

<p>本来は上流にフィードバックしたほうがよいのですが、
本家のほうも修正が入ってコンフリクトして面倒になったので、
フォーク版をそのまま置いておきます。</p>

<ul>
<li><a href="https://github.com/shogo82148/jsonstore">shogo82148/jsonstore</a></li>
</ul>


<!-- More -->


<h2>高速化</h2>

<p>まだまだ高速化できそうなところがあったので、いじってみた部分です。</p>

<h3>ロックの範囲を最小にする</h3>

<p>ロックの範囲を小さくすることで、並列処理時の性能が上がります。
例えば、jsonstoreに値を入れる<code>Set</code>メソッドは、
以下のように<code>Set</code>全体がロックの対象になっていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">JSONStore</span><span class="p">)</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">value</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Set の中全体がロックの対象になっている</span>
</span><span class='line'>  <span class="nx">s</span><span class="p">.</span><span class="nx">Lock</span><span class="p">()</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">b</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">s</span><span class="p">.</span><span class="nx">data</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">s</span><span class="p">.</span><span class="nx">data</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">json</span><span class="p">.</span><span class="nx">RawMessage</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">s</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="p">=</span> <span class="p">(</span><span class="o">*</span><span class="nx">json</span><span class="p">.</span><span class="nx">RawMessage</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>jsonのエンコード処理はjsonstoreの中身を触らないので並列実行可能です。
次のように <code>s.data</code> だけをロックの対象にすれば十分です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">JSONStore</span><span class="p">)</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">value</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// json.Marshal は並列実行可能</span>
</span><span class='line'>  <span class="nx">b</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// s.data を触る直前でロック</span>
</span><span class='line'>  <span class="nx">s</span><span class="p">.</span><span class="nx">Lock</span><span class="p">()</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">s</span><span class="p">.</span><span class="nx">data</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">s</span><span class="p">.</span><span class="nx">data</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">json</span><span class="p">.</span><span class="nx">RawMessage</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">s</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="p">=</span> <span class="p">(</span><span class="o">*</span><span class="nx">json</span><span class="p">.</span><span class="nx">RawMessage</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>デコード処理も同様に並列化が可能なので、<code>Get</code>にも同じ修正をいれました。
修正前後でベンチを取ってみたところ以下のようになりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Before:
</span><span class='line'>BenchmarkGet-4                 1000000          1923 ns/op         272 B/op          5 allocs/op
</span><span class='line'>BenchmarkParaGet-4             1000000          1000 ns/op         272 B/op          5 allocs/op
</span><span class='line'>BenchmarkSet-4                 1000000          1159 ns/op         216 B/op          3 allocs/op
</span><span class='line'>BenchmarkParaSet-4             1000000          1974 ns/op         216 B/op          3 allocs/op
</span><span class='line'>
</span><span class='line'>After:
</span><span class='line'>BenchmarkGet-4             1000000          1793 ns/op         256 B/op          4 allocs/op
</span><span class='line'>BenchmarkParaGet-4         2000000           845 ns/op         256 B/op          4 allocs/op
</span><span class='line'>BenchmarkSet-4             1000000          1212 ns/op         248 B/op          4 allocs/op
</span><span class='line'>BenchmarkParaSet-4         2000000           686 ns/op         248 B/op          4 allocs/op</span></code></pre></td></tr></table></div></figure>


<p>Paraが付いているのが並列実行したとき、付いていないのが単一のgorotineで実行したときの結果です。
単一gorotineでは修正前後で余り大きな性能差はありませんが、
並列実行の性能が向上していることがわかりますね。</p>

<p>(他にも細々とした修正を入れたので、全部がロックの効果ではないと思いますが)</p>

<h3>ストリーミングAPIを利用する</h3>

<p>ファイル保存時にjsonのエンコーディングをしているのですが、
修正前のコードでは<code>json.MarshalIndent</code>を使用していました。
<code>json.MarshalIndent</code>は結果をメモリ上に出力するので、
メモリの消費量が増え、そのメモリをアロケーションする分だけ性能が劣化します。</p>

<p><code>io.Writer</code>に書き込むだけなら、以下のように<code>json.NewEncoder</code>を利用するのが効率的です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">enc</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="nx">enc</span><span class="p">.</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>不要な再エンコードを避ける</h3>

<p>元のコードでは一度jsonに変換した値を、ファイル保存時に<code>string</code>にキャストしていました。
そのため、出力されたjsonは以下のように文字列の中にjsonが入っている形になります。
この形式だと<code>"</code>のエスケープが必要になるので、
処理性能的にも、ファイル容量的にも不利です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">b</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">`{&quot;Name&quot;:&quot;Dante&quot;,&quot;Height&quot;:5.4}`</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">data</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;human:1&quot;</span><span class="p">:</span> <span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span> <span class="c1">// ここでキャストしている</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">enc</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">enc</span><span class="p">.</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="nt">&quot;human:1&quot;</span><span class="p">:</span> <span class="s2">&quot;{\&quot;Name\&quot;:\&quot;Dante\&quot;,\&quot;Height\&quot;:5.4}&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>値は既にjsonエンコード済みなので、ファイル出力時に手を加える必要はありません。
以下のように<code>*json.RawMessage</code>型に変換することで、
余計な再エンコードを避けることができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">b</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">`{&quot;Name&quot;:&quot;Dante&quot;,&quot;Height&quot;:5.4}`</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">data</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">json</span><span class="p">.</span><span class="nx">RawMessage</span><span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;human:1&quot;</span><span class="p">:</span> <span class="p">(</span><span class="o">*</span><span class="nx">json</span><span class="p">.</span><span class="nx">RawMessage</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">b</span><span class="p">),</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">enc</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">enc</span><span class="p">.</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="nt">&quot;human:1&quot;</span><span class="p">:{</span><span class="nt">&quot;Name&quot;</span><span class="p">:</span><span class="s2">&quot;Dante&quot;</span><span class="p">,</span><span class="nt">&quot;Height&quot;</span><span class="p">:</span><span class="mf">5.4</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>json.RawMessage</code>でなく<code>*json.RawMessage</code>とポインタを使っているのがポイントです。
<code>json.RawMessage</code>だと<code>[]byte</code>とみなされてbase64エンコーディングされてしまうのです・・・。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">b</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">`{&quot;Name&quot;:&quot;Dante&quot;,&quot;Height&quot;:5.4}`</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">data</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">json</span><span class="p">.</span><span class="nx">RawMessage</span><span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;human:1&quot;</span><span class="p">:</span> <span class="nx">json</span><span class="p">.</span><span class="nx">RawMessage</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">enc</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">enc</span><span class="p">.</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">//</span> <span class="err">Go</span><span class="mf">1.7</span><span class="err">以下で実行時</span>
</span><span class='line'><span class="p">{</span><span class="nt">&quot;human:1&quot;</span><span class="p">:</span><span class="s2">&quot;eyJOYW1lIjoiRGFudGUiLCJIZWlnaHQiOjUuNH0=&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">//</span> <span class="err">Go</span><span class="mf">1.8</span><span class="err">で実行時</span>
</span><span class='line'><span class="p">{</span><span class="nt">&quot;human:1&quot;</span><span class="p">:{</span><span class="nt">&quot;Name&quot;</span><span class="p">:</span><span class="s2">&quot;Dante&quot;</span><span class="p">,</span><span class="nt">&quot;Height&quot;</span><span class="p">:</span><span class="mf">5.4</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみにこの挙動、1.8で<code>json.RawMessage</code>も<code>*json.RawMessage</code>と同じ結果になる修正されたようです(この記事を書いていて気がついた)。
1.7以下を切り捨てるなら<code>json.RawMessage</code>の方が良さそうですね。</p>

<p>「ストリーミングAPIを利用する」「不要な再エンコードを避ける」をやった結果は以下のとおりです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Before:
</span><span class='line'>BenchmarkSave-4                    500       3324647 ns/op     1418718 B/op       3121 allocs/op
</span><span class='line'>
</span><span class='line'>After:
</span><span class='line'>BenchmarkSave-4                500       2455853 ns/op     1127372 B/op       3094 allocs/op</span></code></pre></td></tr></table></div></figure>


<h3>浅いコピーで並列処理性能を上げる</h3>

<p>一度<code>Set</code>で<code>json.RawMessage</code>に変換されたデータは書き換えられることがないので、
浅いコピーをするだけでスナップショットが簡単にとれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">JSONStore</span><span class="p">)</span> <span class="nx">Snapshot</span><span class="p">()</span> <span class="o">*</span><span class="nx">JSONStore</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">s</span><span class="p">.</span><span class="nx">RLock</span><span class="p">()</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">s</span><span class="p">.</span><span class="nx">RUnlock</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">results</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">json</span><span class="p">.</span><span class="nx">RawMessage</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span><span class="p">.</span><span class="nx">data</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">results</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="p">=</span> <span class="nx">v</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&amp;</span><span class="nx">JSONStore</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">data</span><span class="p">:</span>     <span class="nx">results</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一度スナップショットを取ってしまえば、ファイルへの書き込み時にはロックが不要になります。
ファイルの書き込みはI/Oを伴うとても重い処理なので、
この部分をロックの外側に出せるのは非常に効果大です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">JSONStore</span><span class="p">)</span> <span class="nx">Save</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">snapshot</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Snapshot</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// snapshotを取ったあとはLock不要</span>
</span><span class='line'>  <span class="nx">enc</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">enc</span><span class="p">.</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">snapshot</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>別gorotineでひたすらSaveを繰り返しながらSetのベンチを取ってみた結果です。
修正前はSaveがほとんどの時間ロックを獲得していまうので、Saveと同程度の性能しか出ません。
修正後はSaveとSetを並列実行できるようになるので、大幅に性能が改善します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Before:
</span><span class='line'>BenchmarkSaveSet-4                 500       3260143 ns/op     1382516 B/op       3047 allocs/op
</span><span class='line'>
</span><span class='line'>After:
</span><span class='line'>BenchmarkSaveSet-4         1000000          1948 ns/op         914 B/op          5 allocs/op</span></code></pre></td></tr></table></div></figure>


<h3>正規表現をなるべく避ける</h3>

<p>元のjsonstoreには正規表現でキーを指定して値を取ってくる機能があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">GetAll</span><span class="p">(</span><span class="nx">re</span> <span class="o">*</span><span class="nx">regexp</span><span class="p">.</span><span class="nx">Regexp</span><span class="p">)</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">json</span><span class="p">.</span><span class="nx">RawMessage</span>
</span></code></pre></td></tr></table></div></figure>


<p>Gopherのみなさんなら御存知の通り、Goの正規表現はとても遅いです。
stringsパッケージなどを使えるよう、関数を受け取るインターフェースの方がよいでしょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">GetAll</span><span class="p">(</span><span class="nx">matcher</span> <span class="kd">func</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span><span class="p">)</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">json</span><span class="p">.</span><span class="nx">RawMessage</span>
</span></code></pre></td></tr></table></div></figure>


<p>このインターフェースなら簡単なものであれば自分で関数をかけば良いし、
どうしても正規表現が必要な場合は<code>s.GetAll(re.MatchString)</code>とやればいいので大きな問題にはなりません。</p>

<p>以下ベンチマークの結果です。Afterの方は正規表現ではなくstringsパッケージを使用しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Before:
</span><span class='line'>BenchmarkRegex-4                  3000        449209 ns/op      206954 B/op         67 allocs/op
</span><span class='line'>
</span><span class='line'>After:
</span><span class='line'>BenchmarkRegex-4              5000        251788 ns/op      124483 B/op         68 allocs/op</span></code></pre></td></tr></table></div></figure>


<h2>機能追加</h2>

<p>実際使うなら最低限こんな機能も必要だよな・・・
といくつか機能追加も行いました。</p>

<h3>アトミックなデータ保存</h3>

<p>例えば<code>humans.json.gz</code>に保存されたデータを書き換えることを考えます。
単純に書くと以下のようになるでしょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">ks</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">jsonstore</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;humans.json.gz&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ksに何か操作を行う</span>
</span><span class='line'>
</span><span class='line'><span class="k">go</span> <span class="nx">jsonstore</span><span class="p">.</span><span class="nx">Save</span><span class="p">(</span><span class="nx">ks</span><span class="p">,</span> <span class="s">&quot;humans.json.gz&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// もしpanicしたら・・・？</span>
</span><span class='line'><span class="nb">panic</span><span class="p">(</span><span class="s">&quot;error!!&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここでもしSaveの最中にプログラムが強制終了してしまったらどうなるでしょう。
書きかけの<code>humans.json.gz</code>だけが残り、元のデータが失われてしまう可能性があります。</p>

<p>それを避けるために、一度テンポラリファイルに書き出し、Renameするのが安全です。
たとえ途中でクラッシュしてしまっても、最悪変更前のデータは残ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">ks</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">jsonstore</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;humans.json.gz&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ksに何か操作を行う</span>
</span><span class='line'>
</span><span class='line'><span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">jsonstore</span><span class="p">.</span><span class="nx">Save</span><span class="p">(</span><span class="nx">ks</span><span class="p">,</span> <span class="s">&quot;humans.json.tmp.gz&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">os</span><span class="p">.</span><span class="nx">Rename</span><span class="p">(</span><span class="s">&quot;humans.json.tmp.gz&quot;</span><span class="p">,</span> <span class="s">&quot;humans.json.gz&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}()</span>
</span><span class='line'>
</span><span class='line'><span class="nb">panic</span><span class="p">(</span><span class="s">&quot;error!!&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを勝手にやってくれる<code>SaveAndRename</code>という関数を追加しました。</p>

<p>Linuxの場合、Renameはアトミックに行われるので、
サーバを起動したままデータベースのバックアップを取るのも安全にできます。
しかしWindowsの場合、アトミック性は保証されていない模様・・・？
本当は<code>SafeSave</code>とかにしたかったけど、Windowsの事情がよくわからなったので、
やってることをそのまま名前にしました。</p>

<h3>自動保存機能</h3>

<p>変更のたびに毎回ファイルに書き込んでいたら、極端に性能が劣化してしまうので、
適当なタイミングで自動保存してくれる機能を追加しました。
次のようにすることで、1000回変更があるたびに保存、
変更回数が1000回に満たなくても最低60秒毎に保存してくれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">ks</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">jsonstore</span><span class="p">.</span><span class="nx">JSONStore</span><span class="p">)</span>
</span><span class='line'><span class="nx">ks</span><span class="p">.</span><span class="nx">StartAutoSave</span><span class="p">(</span><span class="s">&quot;db.json.gz&quot;</span><span class="p">,</span> <span class="mi">60</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="k">defer</span> <span class="nx">ks</span><span class="p">.</span><span class="nx">StopAutoSave</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>以下の高速化を行いました。</p>

<ul>
<li>ロックの範囲を最小にする</li>
<li>ストリーミングAPIを利用する</li>
<li>不要な再エンコードを避ける</li>
<li>浅いコピーで並列処理性能を上げる</li>
<li>正規表現をなるべく避ける</li>
</ul>


<p>また、実際使う際に必要になるであろう、次の機能も追加しました。</p>

<ul>
<li>アトミックなデータ保存</li>
<li>自動保存機能</li>
</ul>


<p>これだけあれば、簡単なおもちゃを作るときのデータベースに使うくらいは出来るんじゃないですかね。</p>

<p>プロセス間でデータ共有できない問題はありますが・・・
まあ、そういうときは素直にRedisとかSQLiteとかboltdbとか使って下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redisを使ってユニークなIDを配布する]]></title>
    <link href="https://shogo82148.github.io/blog/2017/02/26/unique-id-supplier-using-redis/"/>
    <updated>2017-02-26T19:37:45+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/02/26/unique-id-supplier-using-redis</id>
    <content type="html"><![CDATA[<p>スケーラブルにIDを生成する方法として
Twitterの<a href="https://github.com/twitter/snowflake">snowflake</a>が有名です。
1024台までスケールすることが出来ますが、各snowflakeのサーバにユニークなWoker IDを割り振る必要があります。
IDを振るためのサーバにIDを振るのが問題になるとは難しいですね。</p>

<p>各snowflakeサーバにIDを振る親玉Worker ID配布サーバを作るというアイデアはあったのですが、
Worker IDサーバの可用性を考えるのが大変で手を付けていませんでした。
最近になってWorker IDサーバとしてRedisを使い、ソート済みセット型で管理すれば楽できるのでは？
と思いついたので、やってみたというお話です。</p>

<!-- More -->


<h2>概要</h2>

<p>レポジトリはこちらです。</p>

<ul>
<li><a href="https://github.com/shogo82148/yaraus">shogo82148/yaraus</a></li>
</ul>


<p>他の<a href="https://github.com/twitter/snowflake">snowflake</a>-likeなID発番サーバの実装として
<a href="http://techblog.kayac.com/katsubushi-introduction.html">katsubushi</a>や
<a href="https://github.com/sony/sonyflake">sonyflake</a>なんていうのもあります。
これらのID発番サーバにRedisを使ってWorker IDを割り振るコマンドです。
Redis3.2以上推奨です。</p>

<h2>使い方</h2>

<p>Go製なので<code>go get</code>でインストールできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>go get github.com/shogo82148/yaraus/cmd/yaraus
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 1から1023までのIDが使えるようにRedisを初期化</span>
</span><span class='line'><span class="nv">$ </span>yaraus init -min <span class="m">1</span> -max 1023
</span><span class='line'>
</span><span class='line'><span class="c"># ユニークなIDが必要な処理を実行する</span>
</span><span class='line'><span class="nv">$ </span>yaraus run -- <span class="nb">echo</span> <span class="o">{}</span>
</span><span class='line'>2017/02/25 17:19:16 getting new id...
</span><span class='line'>2017/02/25 17:19:16 client id: YourHostName-1488010756.738-1, id: 1
</span><span class='line'>2017/02/25 17:19:16 sleep 2s <span class="k">for</span> making sure that other generates which has same id expire.
</span><span class='line'>2017/02/25 17:19:18 starting...
</span><span class='line'>1
</span><span class='line'>2017/02/25 17:19:18 releasing id...
</span><span class='line'>
</span><span class='line'><span class="c"># katsubushiと一緒に使う例</span>
</span><span class='line'><span class="nv">$ </span>yaraus run -- ./katsubushi -worker-id<span class="o">={}</span> -port<span class="o">=</span>7238
</span><span class='line'>
</span><span class='line'><span class="c"># ステータス情報もとれます</span>
</span><span class='line'><span class="nv">$ </span>yaraus stats
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;client_id_count&quot;</span>: 4,
</span><span class='line'>    <span class="s2">&quot;client_get_id_count&quot;</span>: 4,
</span><span class='line'>    <span class="s2">&quot;client_get_id_success&quot;</span>: 4,
</span><span class='line'>    <span class="s2">&quot;get_id_no_available_id&quot;</span>: 0,
</span><span class='line'>    <span class="s2">&quot;extend_ttl_count&quot;</span>: 8,
</span><span class='line'>    <span class="s2">&quot;extend_ttl_success&quot;</span>: 8,
</span><span class='line'>    <span class="s2">&quot;extend_ttl_ownership_error&quot;</span>: 0,
</span><span class='line'>    <span class="s2">&quot;extend_ttl_expire_warning&quot;</span>: 0,
</span><span class='line'>    <span class="s2">&quot;unusing_ids&quot;</span>: 1023,
</span><span class='line'>    <span class="s2">&quot;using_ids&quot;</span>: 0,
</span><span class='line'>    <span class="s2">&quot;using_ttl_max&quot;</span>: 0,
</span><span class='line'>    <span class="s2">&quot;using_ttl_mid&quot;</span>: 0,
</span><span class='line'>    <span class="s2">&quot;using_ttl_min&quot;</span>: 0
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ステータスの意味は以下の通りです。</p>

<ul>
<li><code>client_id_count</code>: 今までに接続してきたクライアントの延べ数</li>
<li><code>client_get_id_count</code>: ID取得を試みた回数</li>
<li><code>client_get_id_success</code>: ID取得に成功した回数</li>
<li><code>get_id_no_available_id</code>: 利用可能なIDが無くて失敗した回数</li>
<li><code>extend_ttl_count</code>: Expireを伸ばそうと試みた回数</li>
<li><code>extend_ttl_success</code>: Expireを伸ばすのに成功した回数</li>
<li><code>extend_ttl_ownership_error</code>: IDが横取りされた回数</li>
<li><code>extend_ttl_expire_warning</code>: IDが横取りされそうだったのを防いだ回数</li>
<li><code>unusing_ids</code>: 未使用のIDの数</li>
<li><code>using_ids</code>: 使用中のIDの数</li>
<li><code>using_ttl_max</code>: IDの寿命の最大値(秒単位)</li>
<li><code>using_ttl_mid</code>: IDの寿命の中央値(秒単位)</li>
<li><code>using_ttl_min</code>: IDの寿命の最小値(秒単位)</li>
</ul>


<h2>実装アイデア</h2>

<p>Redisのセット型を使えば、ID配布自体は簡単です。
Perlでの実装は以下のようになります。(Go実装なのに例がPerlなのは、僕が一番慣れているので・・・)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># あらかじめPoolにIDを蓄えておく</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">sadd</span><span class="p">(</span><span class="s">&#39;pool&#39;</span><span class="p">,</span> <span class="s">&quot;id$_&quot;</span><span class="p">)</span> <span class="k">for</span> <span class="mi">1</span><span class="o">..</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ランダムに選ぶ</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$id</span> <span class="o">=</span> <span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">spop</span><span class="p">(</span><span class="s">&#39;pool&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 使い終わったら戻す</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">sadd</span><span class="p">(</span><span class="s">&#39;pool&#39;</span><span class="p">,</span> <span class="nv">$id</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>多めに見積もって1IDあたり1kB使うと仮定しても、1000個のIDで約1MBです。
余裕で全部メモリにのるので、オンメモリのRedisでも全く問題ありません。</p>

<p>しかし、この方法では、IDを受け取ったクライアントが突然死してしまった場合に
永遠にIDが開放されないため、そのうちIDが枯渇してしまいます。</p>

<p>そこで思いついたのが、ソート済みセット型を使ったExpire付き機能付きID配布です。
「ソート済みセットのスコアにExpireの予定時刻を入れる」というルールでIDを管理します。
ソート済みセットを使えば、「スコアが一番小さいID＝Expireしている可能性が一番高いID」
を簡単に取得できます。
現在時刻と比較して実際にExpireしているかをチェックし、ExpireしていたらID取得成功です。
Perlのコードに起こすと以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># PoolにID追加</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">zadd</span><span class="p">(</span><span class="s">&#39;pool&#39;</span><span class="p">,</span> <span class="nb">time</span><span class="p">,</span> <span class="s">&quot;id$_&quot;</span><span class="p">)</span> <span class="k">for</span> <span class="mi">1</span><span class="o">..</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># IDを取得</span>
</span><span class='line'><span class="n">RETRY:</span>
</span><span class='line'><span class="k">my</span> <span class="p">(</span><span class="nv">$id</span><span class="p">,</span> <span class="nv">$score</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">zrange</span><span class="p">(</span><span class="s">&#39;pool&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&quot;WITHSCORE&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># expireしているかチェック</span>
</span><span class='line'><span class="k">if</span> <span class="nv">$score</span> <span class="o">&lt;</span> <span class="nb">time</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># ID取得失敗、しばらく待ってID取得やり直し</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">goto</span> <span class="n">RETRY</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># expireの期間延長</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$expire</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="c1"># 10秒でexpire</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">zadd</span><span class="p">(</span><span class="s">&#39;pool&#39;</span><span class="p">,</span> <span class="nb">time</span> <span class="o">+</span> <span class="nv">$expire</span><span class="p">,</span> <span class="nv">$id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># $idを使ったなにかの処理</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 使い終わったらExpire扱い</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">zadd</span><span class="p">(</span><span class="s">&#39;pool&#39;</span><span class="p">,</span> <span class="nb">time</span><span class="p">,</span> <span class="nv">$id</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>クライアントが突然死していまうと、Expireが更新されないため
どんどんRankがあがっていき、最終的には別のクライアントに再利用されます。</p>

<p>この方法であれば、Expireしてからの期間が長いIDから再利用されるというのも利点です。
どうしてもサーバとクライアントで時刻のズレが生じてしまうので、
サーバはExpireした！と思っても、クライアントがまだ使用中ということは十分に考えられます。
そのためExpireしたIDをすぐに再利用してしまうと、多重使用になってしまう可能性があります。
Expireしてからの期間が長いIDから再利用することで、この問題を緩和できるというわけです。</p>

<p>(Googleさんみたいに分散データベース管理に原子時計を導入していれば話は別ですが・・・)</p>

<p>ソート済みセット型のScoreは64bitの浮動小数点型なので、
scoreにunix timestampを使うとマイクロ秒程度の精度になってしまいますが、
この用途であれば十分足りるでしょう。</p>

<h2>実装上の工夫</h2>

<p>このアイデアなら楽できる！と思ったものの、
実際にコードに起こすとなると考慮すべきことがたくさんあって大変でした。</p>

<h3>ID取得とExpire期間延長をアトミックにする</h3>

<p>先のコード例をそのまま実装すると同時アクセスがあった場合にIDプールが壊れます。
それを防ぐために
「IDを取得」「expireしているかチェック」「expireの期間延長」はアトミックに実行する必要があります。</p>

<p>Redisの場合、Luaスクリプトを使えば簡単ですね。
慣れないLuaに少し手こずりましたが、一度覚えてしまうと全部Luaにしたくなってしまう麻薬ですね、あれは。</p>

<h3>Luaスクリプト内で時刻を取得する</h3>

<p>このアイデアは時刻が肝なので、可能であれば時刻の管理もRedisサーバに一任したいところです。
しかし、Luaスクリプト内ではOS機能のモジュールが無効化されており、時刻の取得はできません。
ファイルもいじれる危ないモジュールなので仕方ないですね。</p>

<p>ではどうするかというと、LuaからRedisのTIMEコマンドを呼び出して時刻を取得します。
しかしながら、この方法も一筋縄ではいかず、何もせずに呼び出すとコマンドの実行に失敗してしまいます。</p>

<p>TIMEコマンドが失敗する原因はLuaスクリプトのレプリケーションの方法にあります。
Redisのレプリケーション方法は、マスターからスクリプトをまるごとスレーブに送り、スレーブ側でスクリプト再実行する方式です。
そのため、TIMEコマンドのように実行するタイミングによって結果が変わるコマンドは、
マスターとスレーブで不整合が起きてしまう可能性があるため実行できないのです。</p>

<p>この問題を解決するため、Redis3.2から <code>redis.replicate_commands</code> が追加されました。
この関数を呼び出すと、Luaスクリプト内で実行したRedisへの書き込みコマンドを転送するレプリケーション方式に変わります。
実行結果だけを送るのでTIMEコマンドも安全に実行できるというわけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">redis</span><span class="p">.</span><span class="n">replicate_commands</span><span class="p">()</span>
</span><span class='line'><span class="kd">local</span> <span class="n">t</span> <span class="o">=</span> <span class="n">redis</span><span class="p">.</span><span class="n">call</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">TIME&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span> <span class="o">=</span> <span class="n">t</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">t</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="mf">1e-6</span> <span class="c1">-- 秒単位に変換</span>
</span></code></pre></td></tr></table></div></figure>


<p>なお、<code>redis.replicate_commands</code>が使えない場合は、クライアントの時刻を使うようフォールバックするので、
3.2よりまえのRedisでも動作はします。</p>

<p>ちなみにレプリケーションの挙動を変えるコマンドは他にもあって、
<code>redis.set_repl</code>を使うとレプリケーション自体を止めることも出来るらしいです。
怖い。</p>

<h3>若い番号のIDから配布する</h3>

<p>これはあまり重要ではないんですが、Expireまでの期間が同じだった場合、
若い番号のIDから順に配布するようにしました。
「エライ人順にIPアドレスを設定しろ」みたいなアレなので、
別に考慮しなくてもいいんですが、数字を見ると順番に並べたくなってしまうのが人間というものです。</p>

<p>Redisのソート済みセットはスコアが同じ場合、メンバーの辞書順に並びます。
<code>Itoa(id)</code>した結果をそのまま辞書順ソートすると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1, 10, 11, 12, ..., 2, 20, 21, ...</span></code></pre></td></tr></table></div></figure>


<p>のようなおかしな順番になってしまいます。
そこで、「1桁のときは頭にAを付ける」「2桁のときはB」「3桁のときはC」&hellip;
と先頭の文字で数字の桁数が分かるようにしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A1, A2, A3, ..., A9, B10, B11, B12, ... B99, C100, C101, C102, ...</span></code></pre></td></tr></table></div></figure>


<p>この規則はRFC2550をヒントにしました。
RFC2550にはZまで使い切ったあとのことも書いてあるんですが、そこまではしていません。
可読性にこだわらなければ他にも方法はあるのですが、redis-cliで見れたほうが嬉しいじゃないですか。</p>

<ul>
<li><a href="https://tools.ietf.org/html/rfc2550">RFC 2550 Y10K and Beyond</a></li>
<li><a href="http://www.cam.hi-ho.ne.jp/mendoxi/rfc/rfc2550j.html">参考日本語訳 RFC 2550 Y10K とその先</a></li>
</ul>


<h3>レプリケーション完了を待つ</h3>

<p>可用性を求めるならば、Redisサーバー自体が突然死する可能性も考えなければなりません。
この問題に対応するにはマスタースレーブ構成を取るのが一般的でしょう。
マスタースレーブ構成ではフェールオーバー時に多少のデータ消失が起こる可能性があります。
レプリケーションが終わっていない分のデータが消失するためです。</p>

<p>キャッシュ用途であれば許容できるかもしれませんが、
ID配布でこれが起こるのは致命的です。
配布したIDをもとにデータベースへの書き込みを行うので、整合性が崩れ、修復困難なダメージを与えてしまう可能性があります。</p>

<p>この問題を最小限に抑えるために、2.8からWAITコマンドが追加されています。
WAITコマンドを使うと、今まで書き込んだデータがレプリケーションされたかを検出できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ROLEコマンドでスレーブの台数を確認
</span><span class='line'>127.0.0.1:6379&gt; ROLE
</span><span class='line'>1) "master"
</span><span class='line'>2) (integer) 83
</span><span class='line'>3) 1) 1) "::1"     # 一台スレーブ
</span><span class='line'>      2) "6378"
</span><span class='line'>      3) "83"
</span><span class='line'>
</span><span class='line'># 適当に書き込み
</span><span class='line'>127.0.0.1:6379&gt; SET foo bar
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'># 1つのスレーブのレプリケーションが完了するのを待つ(Timeout 1000ms)
</span><span class='line'>127.0.0.1:6379&gt; WAIT 1 1000
</span><span class='line'>(integer) 1 # レプリケーションが完了したスレーブの台数</span></code></pre></td></tr></table></div></figure>


<p>レプリケーションの完了＝コマンドの実行完了と解釈すれば、
データの消失を最小限に抑えることができます。</p>

<p>ちなみに、WAITコマンドのtimeoutはミリ秒ですが、今回使用した<a href="https://godoc.org/gopkg.in/redis.v5">go-redis/redis</a>は
これを秒として扱っていました。
(こういうのRedis::Fast開発時にもあった気がする)
単位重要ですね。
time.ParseDurationで時間指定をすると、毎回単位指定が必要になって面倒ですが、
こういうミスを防ぐためには有用そうです。
積極的に使っていきたい。</p>

<h3>横取り検出</h3>

<p>WAITコマンドでデータの消失を最小限にしたとしても、0にできるわけではありません。
消失が起こった場合の対応も必要です。
ID配布した記録が消えて横取りが出来る可能性があるので、
IDに所有者(貸出先の方が正しかったかも)を一緒に記録しておくことにしました。</p>

<p>各クライアントにクライアントIDを付与しておきます。(現状の実装はhostname+timestamp+連番)
横取りされた方は、自分のクライアントIDとIDの所有者を比較し、横取りが分かった時点で速やかにID開放します。
横取りした方は、ID取得からID使用までしばらく時間を開けます(-delayでこの時間は変更可能)
これは横取りされた方のID開放が終わるまで、猶予時間を与えるためです。</p>

<h2>動作条件等</h2>

<p>何度か書いていますが、このアイデアは時刻が肝です。
各サーバ間の時刻同期が正しく行われている必要があります。
普通にNTPを使っていればmsのオーダーで同期が取れるので問題ないでしょう。</p>

<p>・・・ただし、みんな大嫌いなうるう秒があります。
うるう秒の対応の仕方がまちまちなので、ことなった対応方針が適用されたサーバーが混ざると大変です。</p>

<p>例えば、マネージドなRedisとしてElastiCacheを使うと、
うるう秒挿入のタイミングでElastiCacheは<a href="http://aws.typepad.com/aws_japan/2015/05/look-before-you-leap-the-coming-leap-second-and-aws.html">AWS調整時刻</a>で動作します。
残念ながらAWS調整時刻を返すNTPは提供されていないようです。</p>

<p>デフォルトの設定はこの辺を考慮してマージンを取っているので大丈夫なはず・・・。
使う人がいるかはわかりませんが、検証頑張って！</p>

<h2>名前について</h2>

<p>「Yet Another Ranged Unique id Supplier」の略です。
いい名前が思いつかなかったので、fujiwaraさん製のRanged Unique id Supplierが既にあったのでそこから拝借しました。
Yet Anatherは、こう付けると流行ると「言語のしくみ」に書いてあったからです。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=shogo82148-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B01N7JZXMD&linkId=8ee3d3dfb649430b1d0abd35881e5f56"></iframe>


<h2>まとめ</h2>

<ul>
<li>RedisをID発番サーバID配布サーバとして活用する方法を考えてみました</li>
<li>可用性を求めていったらレプリケーションの高度な使い方がわかってきた

<ul>
<li><code>redis.replicate_commands</code>でスクリプトのレプリケーション方式を変更する</li>
<li>WAITコマンドでレプリケーションを待つ</li>
</ul>
</li>
<li>フェールオーバのこととか考えると全然楽じゃなかった・・・</li>
</ul>


<p>思いつきを試したかっただけなのですが、勉強になったので良しとしましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust vs Go の終戦へ向けてPolyglotを作ってみた]]></title>
    <link href="https://shogo82148.github.io/blog/2017/02/25/rust-and-go-ploygolot/"/>
    <updated>2017-02-25T16:58:27+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/02/25/rust-and-go-ploygolot</id>
    <content type="html"><![CDATA[<p>「Golang Rust」とググると、関連項目は「Rust vs Go」のように
GolangとRustが対立しているような項目ばかりです。
まあまあ、もっと仲良くやろうじゃないですか、ということで、
どうしたら仲良くなれるかを考えました。
Polyglotにして同じソースコードの中に閉じ込めてやれば、
そのうち仲良くなるのではないかと考え、
RustとGoのPloyglotを作ってみました。</p>

<!-- More -->


<h2>結果</h2>

<figure class='code'><figcaption><span>polyglot.rs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cm">/*/*/</span>
</span><span class='line'><span class="n">package</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">fmt</span><span class="p">.</span><span class="n">Print</span><span class="p">(</span><span class="s">&quot;Hello Go!!&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">_</span> <span class="o">=</span> <span class="err">`</span><span class="o">*/*/</span>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Hello Rust!!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//`</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>polyglot.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="cm">/*/*/</span>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Print</span><span class="p">(</span><span class="s">&quot;Hello Go!!&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">_</span> <span class="p">=</span> <span class="s">`*/*/</span>
</span><span class='line'><span class="s">fn main() {</span>
</span><span class='line'><span class="s">    println!(&quot;Hello Rust!!&quot;);</span>
</span><span class='line'><span class="s">//`</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>仕組み</h2>

<p>一番のポイントは最初の行の <code>/*/*/</code> です。
RustもGoも<code>/* */</code>形式の複数行コメントに対応していますが、
Rustはネストに対応しており、Goはネストはできないという違いがあります。
この違いにより、Rustは<code>/*/*/</code>を<code>/* /* /</code>のように「二重にネストしたコメントの開始部分」として扱いますが、
Goは<code>/* / */</code>のように「<code>/</code>をコメントアウトしたもの」と見なします。
これにより2行目<code>package main</code>以降はGoには普通のコードに見えますが、
Rustからは単なるコメントとして認識されます。</p>

<p>次はGoからRustへの切り替えです。
Goではバッククオートで複数行文字列を定義できるので、その中にRustのコードを書きます。
この中ではバッククオートさえ使わなければ自由にRustのコードを書くことが出来るので、
あとはGoのコードだけ上手くコメントアウトされるよう調整すれば完成です。</p>

<h2>せっかくなのでリンクしてみた</h2>

<p>GoからRustのコードを呼び出すサンプルコードを見つけたので、
せっかくなのでリンクしてみました。</p>

<ul>
<li><a href="https://github.com/medimatrix/rust-plus-golang">medimatrix/rust-plus-golang</a></li>
</ul>


<p><code>main.go</code>と<code>lib.go</code>を以下のように置き換えます。
内容は一緒なので、シンボリックリンクにすると編集が楽でいいかもしれませんね。</p>

<figure class='code'><figcaption><span>main.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="cm">/*golang code starts from here/*/</span>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">#cgo LDFLAGS: -L./lib -lhello</span>
</span><span class='line'><span class="cm">void hello(char *name);</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;C&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">C</span><span class="p">.</span><span class="nx">hello</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">CString</span><span class="p">(</span><span class="s">&quot;John Smith&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">_</span> <span class="p">=</span> <span class="s">`rustlang code starts from here */*/</span>
</span><span class='line'><span class="s">extern crate libc;</span>
</span><span class='line'><span class="s">use std::ffi::CStr;</span>
</span><span class='line'>
</span><span class='line'><span class="s">#[no_mangle]</span>
</span><span class='line'><span class="s">pub extern &quot;C&quot; fn hello(name: *const libc::c_char) {</span>
</span><span class='line'><span class="s">    let buf_name = unsafe { CStr::from_ptr(name).to_bytes() };</span>
</span><span class='line'><span class="s">    let str_name = String::from_utf8(buf_name.to_vec()).unwrap();</span>
</span><span class='line'><span class="s">    println!(&quot;Hello {}!&quot;, str_name);</span>
</span><span class='line'><span class="s">//`</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>lib.rs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cm">/*golang code starts from here/*/</span>
</span><span class='line'><span class="n">package</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">#cgo LDFLAGS: -L./lib -lhello</span>
</span><span class='line'><span class="cm">void hello(char *name);</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">import</span> <span class="s">&quot;C&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">C</span><span class="p">.</span><span class="n">hello</span><span class="p">(</span><span class="n">C</span><span class="p">.</span><span class="n">CString</span><span class="p">(</span><span class="s">&quot;John Smith&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">_</span> <span class="o">=</span> <span class="err">`</span><span class="n">rustlang</span> <span class="n">code</span> <span class="n">starts</span> <span class="n">from</span> <span class="n">here</span> <span class="o">*/*/</span>
</span><span class='line'><span class="k">extern</span> <span class="n">crate</span> <span class="n">libc</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">ffi</span><span class="o">::</span><span class="n">CStr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[no_mangle]</span>
</span><span class='line'><span class="k">pub</span> <span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="k">fn</span> <span class="n">hello</span><span class="p">(</span><span class="n">name</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="n">libc</span><span class="o">::</span><span class="n">c_char</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">buf_name</span> <span class="o">=</span> <span class="k">unsafe</span> <span class="p">{</span> <span class="n">CStr</span><span class="o">::</span><span class="n">from_ptr</span><span class="p">(</span><span class="n">name</span><span class="p">).</span><span class="n">to_bytes</span><span class="p">()</span> <span class="p">};</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">str_name</span> <span class="o">=</span> <span class="n">String</span><span class="o">::</span><span class="n">from_utf8</span><span class="p">(</span><span class="n">buf_name</span><span class="p">.</span><span class="n">to_vec</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Hello {}!&quot;</span><span class="p">,</span> <span class="n">str_name</span><span class="p">);</span>
</span><span class='line'><span class="c1">//`</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>呼び出し元と呼び出し先のコードが一度に確認できて便利(？)</p>

<h2>まとめ</h2>

<p>Goの最初に<code>package main</code>を書かなければいけない制限が意外と厳しいため、
Polyglotにする言語には相性があります。
つまりRustとGoは相性バツグンということですね！(？？？)
みなさんもRustとGoを仲良く使っていきましょう！！！！！</p>

<p>(※ジョークなので本気にしないでくださいね、念のため)</p>

<h2>参考</h2>

<ul>
<li><a href="https://doc.rust-lang.org/reference.html#comments">The Rust Reference#comment</a></li>
<li><a href="https://shogo82148.github.io/blog/2016/04/05/polyglot-of-perl-and-golang/">PerlとGolangで実行できるPolyglot書いてみた</a>

<ul>
<li>どうやらGoはPerlとも相性がいいようです</li>
</ul>
</li>
<li><a href="https://github.com/medimatrix/rust-plus-golang">medimatrix/rust-plus-golang</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WEB+DB PRESS Vol.97にPerlとRedisの記事を寄稿しました]]></title>
    <link href="https://shogo82148.github.io/blog/2017/02/23/perl-webdb-vol97/"/>
    <updated>2017-02-23T18:27:53+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/02/23/perl-webdb-vol97</id>
    <content type="html"><![CDATA[<p>昨年末に<a href="https://twitter.com/songmu">Songmu</a>さんからお話を頂き、
<a href="http://gihyo.jp/magazine/wdpress/archive/2017/vol97">WEB+DB PRESS Vol.97</a>内の連載「第43回Perl Hackers Hub」に
「PerlでのRedis活用法」というタイトルで寄稿しました。
発売日は<strong>2月24日</strong>です。</p>

<!-- More -->


<h2>内容</h2>

<p>簡単に内容を紹介しておきます。
Perl使いではじめてRedisを使う人向けに書いたつもりです。</p>

<h3>Redisの簡単な説明</h3>

<p>Redisのインストール方と、Perlからの接続方法、そしてRedisの型の説明です。
記事の中でも紹介していますが、Redisはその豊富な型が特長です。
読者はきっとPerl使いだろうということで、Perlの型(Perlにも型はあるんだよ！！)と
比較しながら簡単に紹介しています。</p>

<h3>Redisの応用例とCPANモジュールの紹介</h3>

<p>Redisを使うとこんなことができるよ、という紹介です。
CPANで公開されているRedis関連のモジュールも合わせて紹介しています。</p>

<h3>Redis自体の注意点</h3>

<p>以前Redisを使ったサービスの運用に携わっていたのですが、
そのなかで実際に起きたことを元に、Redisの注意点について書きました。
さいわいサービスが停止するような事故にはありませんでしたが、
メトリックスを眺めながらエンジニア勢でヤバイヤバイ騒いでましたね・・・。
みなさんも気をつけて下さい。</p>

<h2>執筆してみての感想</h2>

<p>昔から文章を書くのにはだいぶ苦手意識があり、
今回の執筆も非常に苦労しました。
一文の前半を書いた時点で
「今から書こうとしている情報は本当に必要なのか」
「自分の記憶違いで間違った情報なのでは」と不安になり、
色々考えているうちに、何書こうとしてたのかわからなくなるんですよね。
まずは適当に書き上げて、後からちゃんと推敲しよう、
とは思いつつもなかなか進められず・・・。
スループットを上げたい。</p>

<p>細かい表現とかも気になってなかなか進まないので、
こういうの入れて頑張ろうと思います！</p>

<ul>
<li><a href="http://qiita.com/azu/items/2c565a38df5ed4c9f4e1">VS Codeでtextlintを使って文章をチェックする</a></li>
<li><a href="http://takemikami.com/2017/02/14/gitbook.html">gitbookで技術書を書く環境の構築手順</a></li>
</ul>


<p>(執筆が進まないと、こういう環境構築に時間をかけてしまうのもよくないと思うんだ・・・)</p>

<h2>余談</h2>

<p>ところで、<strong>Vol.97</strong>と<strong>第43回</strong>ってどっちも<strong>素数</strong>ですね！
雑なプログラムを書いて調べてみたところ、
両方素数になるのはVol.83, 第29回以来、<strong>7回目</strong>(これも<strong>素数</strong>だ！)。
次はVol.101, 第47回です。
そのときのPerl Hackerは誰になるのでしょうか。楽しみですね！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">is_prime</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$n</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="nv">$n</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="nv">$i</span><span class="o">*</span><span class="nv">$i</span><span class="o">&lt;=</span><span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="nv">$n</span> <span class="nv">%</span> <span class="err">$</span><span class="nv">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="k">my</span> <span class="nv">$n</span><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$m</span> <span class="o">=</span> <span class="nv">$n</span><span class="o">-</span><span class="mi">43</span><span class="o">+</span><span class="mi">97</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">is_prime</span><span class="p">(</span><span class="nv">$n</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">is_prime</span><span class="p">(</span><span class="nv">$m</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">printf</span> <span class="s">&quot;%3d: Vol.%3d, No.%3d\n&quot;</span><span class="p">,</span> <span class="nv">$i</span><span class="p">,</span> <span class="nv">$m</span><span class="p">,</span> <span class="nv">$n</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go言語でコンパイル時フィボナッチ数列計算]]></title>
    <link href="https://shogo82148.github.io/blog/2017/02/19/golang-compile-time-fib/"/>
    <updated>2017-02-19T09:06:05+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/02/19/golang-compile-time-fib</id>
    <content type="html"><![CDATA[<p><a href="http://postd.cc/fibonacci/">整数の公式でフィボナッチ数列を求める</a>という記事を読んで、
「これコンパイル時ならGoでも簡単に計算できるのでは？」と思いやってみたメモ。</p>

<!-- More -->


<h2>背景</h2>

<p>みんな大好きフィボナッチ数列(要出典)。
漸化式で定義されているため、再帰やループを使って書くことが多いと思いますが、
閉じた式で書くことが知られています。
ただし、この一般式には無理数の演算が入るので、コンピュータで厳密に扱うことはできません。
ところが、さきほど紹介した記事で紹介された方法を使うと、整数の演算のみで実現できるそうです。</p>

<p>原理などはネタ元の記事を参照してもらうとして、
Python3では以下のように書けるらしいです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="mi">4</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="o">*</span><span class="p">(</span><span class="mi">3</span><span class="o">+</span><span class="n">n</span><span class="p">))</span> <span class="o">//</span> <span class="p">((</span><span class="mi">4</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="o">*</span><span class="n">n</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="mi">2</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">((</span><span class="mi">2</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ある程度大きなフィボナッチ数を求める場合、
計算途中の値が非常に大きくなるため、多倍長整数が必要となります。
Python3は多倍長整数に組み込みで対応していますが、
Goでは<a href="https://golang.org/pkg/math/big/">math/bigパッケージ</a>を利用する必要があります。</p>

<p>なんか面倒だなGolangと思っていたのですが、
<a href="http://qiita.com/sonatard/items/464a9d45c689386edfe1">Better C - Go言語と整数 #golang</a>を読んで、
「Goの定数には型がない(場合がある)」「任意の精度で計算してくれる」ということを知り、
「つまりコンパイル時に定数として計算すれば楽にいけるのでは！！」と考えたわけです。</p>

<h2>結果</h2>

<p>ちょっと複雑な式ですが、個々の演算自体はPython3もGoも変わらないので、
翻訳は簡単ですね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">const</span> <span class="nx">Fib0</span> <span class="p">=</span> <span class="mi">1</span> <span class="c1">// 0だけはうまくいかない</span>
</span><span class='line'>
</span><span class='line'><span class="kd">const</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">_</span>    <span class="p">=</span> <span class="p">(</span><span class="mi">4</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="kc">iota</span> <span class="o">*</span> <span class="p">(</span><span class="mi">3</span> <span class="o">+</span> <span class="kc">iota</span><span class="p">)))</span> <span class="o">/</span> <span class="p">((</span><span class="mi">4</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="kc">iota</span><span class="p">))</span> <span class="o">-</span> <span class="p">(</span><span class="mi">2</span> <span class="o">&lt;&lt;</span> <span class="kc">iota</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">((</span><span class="mi">2</span> <span class="o">&lt;&lt;</span> <span class="kc">iota</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">Fib1</span>
</span><span class='line'>  <span class="nx">Fib2</span>
</span><span class='line'>  <span class="nx">Fib3</span>
</span><span class='line'>  <span class="nx">Fib4</span>
</span><span class='line'>  <span class="nx">Fib5</span>
</span><span class='line'>  <span class="nx">Fib6</span>
</span><span class='line'>  <span class="nx">Fib7</span>
</span><span class='line'>  <span class="nx">Fib8</span>
</span><span class='line'>  <span class="nx">Fib9</span>
</span><span class='line'>  <span class="nx">Fib10</span>
</span><span class='line'>  <span class="nx">Fib11</span>
</span><span class='line'>  <span class="nx">Fib12</span>
</span><span class='line'>  <span class="nx">Fib13</span>
</span><span class='line'>  <span class="nx">Fib14</span>
</span><span class='line'>  <span class="nx">Fib15</span>
</span><span class='line'>  <span class="nx">Fib16</span>
</span><span class='line'>  <span class="nx">Fib17</span>
</span><span class='line'>  <span class="nx">Fib18</span>
</span><span class='line'>  <span class="nx">Fib19</span>
</span><span class='line'>  <span class="nx">Fib20</span>
</span><span class='line'>  <span class="nx">Fib21</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fibs</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Fib0</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib1</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib2</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib3</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib4</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib5</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib6</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib7</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib8</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib9</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib10</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib11</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib12</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib13</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib14</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib15</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib16</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib17</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib18</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib19</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib20</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib21</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">fib</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">fibs</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">fib</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行結果です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go run fibconst.go
</span><span class='line'>0 1
</span><span class='line'>1 1
</span><span class='line'>2 2
</span><span class='line'>3 3
</span><span class='line'>4 5
</span><span class='line'>5 8
</span><span class='line'>6 13
</span><span class='line'>7 21
</span><span class='line'>8 34
</span><span class='line'>9 55
</span><span class='line'>10 89
</span><span class='line'>11 144
</span><span class='line'>12 233
</span><span class='line'>13 377
</span><span class='line'>14 610
</span><span class='line'>15 987
</span><span class='line'>16 1597
</span><span class='line'>17 2584
</span><span class='line'>18 4181
</span><span class='line'>19 6765
</span><span class='line'>20 10946
</span><span class='line'>21 17711</span></code></pre></td></tr></table></div></figure>


<p><code>Fibxxx</code>をたくさん書くのはつらかったので、ソースコードはPerlで自動生成しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">print</span> <span class="s">&lt;&lt;EOF;</span>
</span><span class='line'><span class="s">package main</span>
</span><span class='line'>
</span><span class='line'><span class="s">import &quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s">const Fib0 = 1</span>
</span><span class='line'>
</span><span class='line'><span class="s">const (</span>
</span><span class='line'><span class="s">    _    = (4 &lt;&lt; (iota * (3 + iota))) / ((4 &lt;&lt; (2 * iota)) - (2 &lt;&lt; iota) - 1) &amp; ((2 &lt;&lt; iota) - 1)</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;    Fib$_\n&quot;</span> <span class="k">for</span> <span class="mi">1</span><span class="o">..</span><span class="mi">21</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&lt;&lt;EOF;</span>
</span><span class='line'><span class="s">)</span>
</span><span class='line'>
</span><span class='line'><span class="s">func main() {</span>
</span><span class='line'><span class="s">    fibs := []int{</span>
</span><span class='line'><span class="s">        Fib0,</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;        Fib$_,\n&quot;</span> <span class="k">for</span> <span class="mi">1</span><span class="o">..</span><span class="mi">21</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&lt;&lt;EOF</span>
</span><span class='line'><span class="s">    }</span>
</span><span class='line'><span class="s">    for i, fib := range fibs {</span>
</span><span class='line'><span class="s">        fmt.Println(i, fib)</span>
</span><span class='line'><span class="s">    }</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>21までしかないのは、
22以降を求めようとしたらコンパイルが通らなかったためです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go run fibconst.go
</span><span class='line'># command-line-arguments
</span><span class='line'>./fibconst.go:29: shift count too large: 550</span></code></pre></td></tr></table></div></figure>


<p>どうやら512bitまでしか扱えないらしい。
任意精度扱えるって書いてあったのに！！！</p>

<ul>
<li><a href="https://github.com/golang/go/blob/go1.8/src/cmd/compile/internal/gc/mpint.go#L211">mpint.go</a></li>
<li><a href="https://github.com/golang/go/blob/go1.8/src/cmd/compile/internal/gc/mpfloat.go#L18">mpfloat.go</a></li>
</ul>


<p>おとなしく多倍長整数が組込の言語でやれっている話ではありますが、
なんとなくやってみたかったんです。</p>

<h2>参考</h2>

<ul>
<li><a href="http://postd.cc/fibonacci/">整数の公式でフィボナッチ数列を求める</a>

<ul>
<li>Source: <a href="http://paulhankin.github.io/Fibonacci/">An integer formula for Fibonacci numbers</a></li>
</ul>
</li>
<li><a href="http://qiita.com/sonatard/items/464a9d45c689386edfe1">Better C - Go言語と整数 #golang</a></li>
</ul>


<p>ネタ元にある「母関数」という概念は、数学ガールを読んで知りました。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=shogo82148-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=4797341378&linkId=be2c6011ca1a5f15d96c370e494b0f95"></iframe>


<p>フィボナッチ数列に触れている部分はWebでも公開されているので、そちらもどうぞ(<a href="http://www.hyuki.com/story/genfunc.html">ミルカさんとフィボナッチ数列</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go-sql-proxyがcontextに対応しました]]></title>
    <link href="https://shogo82148.github.io/blog/2017/02/16/go-sql-proxy-in-go18/"/>
    <updated>2017-02-16T07:16:44+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/02/16/go-sql-proxy-in-go18</id>
    <content type="html"><![CDATA[<p>Go1.8ではdatabase/sqlのcontextサポートが入ります。
(きっと今日の<a href="https://eventdots.jp/event/611405">Go 1.8 Release Party</a>で詳しく説明があるはず、たぶん)
それにともない<a href="https://shogo82148.github.io/blog/2015/05/13/golang-sql-proxy/">Go言語でSQLのトレースをする</a>で紹介した
<a href="https://github.com/shogo82148/go-sql-proxy">shogo82148/go-sql-proxy</a>でもcontextを扱えるようにしました。</p>

<!-- More -->


<h2>Go1.8新機能のサポート</h2>

<p><a href="http://mattn.kaoriya.net/software/lang/go/20161106232834.htm">Golang 1.8 でやってくる database/sql の変更点</a>で
mattnさんが紹介しているように、Go1.8ではdatabase/sqlにいくつか新機能が追加されます。
(mattnさんの対応が早すぎて、メソッド名とか微妙に変更が入っているので注意)</p>

<p>特に大きなのがcontextのサポートでしょう。以下のようなコードでクエリのキャンセルが可能になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">WithCancel</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Background</span><span class="p">())</span>
</span><span class='line'><span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 1秒待ってからキャンセル</span>
</span><span class='line'>    <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">cancel</span><span class="p">()</span>
</span><span class='line'><span class="p">}()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">rows</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">QueryContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="s">&quot;SELECT name FROM test where id = ?&quot;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>go-sql-proxyでもcontext対応を行ったので、
proxyを経由した場合でも、キャンセルが可能になります。
(もちろん、originとなるドライバの対応も必要です)</p>

<p>Go1.8ではcontextサポート以外にもいくつか新機能が追加される予定です。
これらについても、originとなるドライバが対応していれば、go-sql-proxy経由でも全く同じように扱えます。</p>

<h2>contextとHookの関連付け</h2>

<p>contextにHookを関連付けて、一部のクエリにだけHookを付けることができるようになりました。
例えば以下のようなコードでctxに関連したクエリだけログを出力できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;context&quot;</span>
</span><span class='line'>  <span class="s">&quot;database/sql&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/shogo82148/go-sql-proxy&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">tracer</span> <span class="p">=</span> <span class="nx">proxy</span><span class="p">.</span><span class="nx">NewTraceHooks</span><span class="p">(</span><span class="nx">proxy</span><span class="p">.</span><span class="nx">TracerOptions</span><span class="p">{})</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 何もしないproxyをインストール</span>
</span><span class='line'>  <span class="nx">proxy</span><span class="p">.</span><span class="nx">RegisterProxy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 末尾に&quot;:proxy&quot;がついた名前でアクセス</span>
</span><span class='line'>  <span class="nx">db</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">sql</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;origin:proxy&quot;</span><span class="p">,</span> <span class="s">&quot;data source&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// このコンテキストに関連したクエリだけでログが有効になります</span>
</span><span class='line'>  <span class="nx">ctx</span> <span class="o">:=</span> <span class="nx">proxy</span><span class="p">.</span><span class="nx">WithHooks</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Background</span><span class="p">(),</span> <span class="nx">tracer</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">db</span><span class="p">.</span><span class="nx">ExecContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="s">&quot;CREATE TABLE t1 (id INTEGER PRIMARY KEY)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>グローバルなproxyに既にHookが設定してあった場合は上書きされます。
上書きされたHookは実行されないので注意してください。</p>

<p>「トレースの負荷が気になるから、全体の1%だけ出力したい！」とか
「このAPIだけ重たいから、この部分だけトレースしたい！」とか
そういう場合に便利ではないでしょうか。</p>

<h2>トレースオプションの追加</h2>

<p>Tracerに色々オプションをつけたいなと思ったので、<code>proxy.TracerOptions</code>を追加しました。
例えばSlowQueryに時間を設定すると、この時間以上経ったクエリだけ表示されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">tracer</span> <span class="p">=</span> <span class="nx">proxy</span><span class="p">.</span><span class="nx">NewTraceHooks</span><span class="p">(</span><span class="nx">proxy</span><span class="p">.</span><span class="nx">TracerOptions</span><span class="p">{</span>
</span><span class='line'>  <span class="nx">SlowQuery</span><span class="p">:</span> <span class="mi">10</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに初期のトレーサーは<code>logger.Output(6, "Begin")</code>みたいな感じで書いてたので、
案の定Go1.8の変更でぶっ壊れました。
頑張ってスタックトレースを辿って、関数名をパースしてパッケージ名を取得(ダイレクトにパッケージ名だけ取る機能は見つからなかった)して、
フィルタリングするようにしたので、もう大丈夫なはず。
その代わりにパフォーマンスが犠牲になったので、
あまり高負荷のところに突っ込まないでくださいね。</p>

<h2>フック関数の変更</h2>

<p>context対応に伴い、Hookの差し込み方も変わっています。
<code>proxy.Hooks</code>は非推奨の扱いで、<code>proxy.HooksContext</code>を使って下さい。
以下の例のようにcontext.Contextが第一引数に追加されています。
デバッグ情報の受け渡しに使えるかも？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;database/sql&quot;</span>
</span><span class='line'>  <span class="s">&quot;database/sql/driver&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/mattn/go-sqlite3&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/shogo82148/go-sql-proxy&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">sql</span><span class="p">.</span><span class="nx">Register</span><span class="p">(</span><span class="s">&quot;sqlite3-proxy&quot;</span><span class="p">,</span> <span class="nx">proxy</span><span class="p">.</span><span class="nx">NewProxyContext</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">sqlite3</span><span class="p">.</span><span class="nx">SQLiteDriver</span><span class="p">{},</span> <span class="o">&amp;</span><span class="nx">proxy</span><span class="p">.</span><span class="nx">HooksContext</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">PreExec</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">_</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">_</span> <span class="o">*</span><span class="nx">proxy</span><span class="p">.</span><span class="nx">Stmt</span><span class="p">,</span> <span class="nx">_</span> <span class="p">[]</span><span class="nx">driver</span><span class="p">.</span><span class="nx">NamedValue</span><span class="p">)</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// The first return value(time.Now()) is passed to both `Hooks.Exec` and `Hook.ExecPost` callbacks.</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">(),</span> <span class="kc">nil</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">PostExec</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">_</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">ctx</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">stmt</span> <span class="o">*</span><span class="nx">proxy</span><span class="p">.</span><span class="nx">Stmt</span><span class="p">,</span> <span class="nx">args</span> <span class="p">[]</span><span class="nx">driver</span><span class="p">.</span><span class="nx">NamedValue</span><span class="p">,</span> <span class="nx">_</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">Result</span><span class="p">,</span> <span class="nx">_</span> <span class="kt">error</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// The `ctx` parameter is the return value supplied from the `Hooks.PreExec` method, and may be nil.</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Query: %s; args = %v (%s)\n&quot;</span><span class="p">,</span> <span class="nx">stmt</span><span class="p">.</span><span class="nx">QueryString</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Since</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">)))</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>  <span class="p">}))</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">db</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sql</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;sqlite3-proxy&quot;</span><span class="p">,</span> <span class="s">&quot;:memory:&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatalf</span><span class="p">(</span><span class="s">&quot;Open filed: %v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">db</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span>
</span><span class='line'>      <span class="s">&quot;CREATE TABLE t1 (id INTEGER PRIMARY KEY)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go1.8のGraceful Shutdownとgo-gracedownの対応]]></title>
    <link href="https://shogo82148.github.io/blog/2017/01/21/golang-1-dot-8-graceful-shutdown/"/>
    <updated>2017-01-21T12:44:32+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/01/21/golang-1-dot-8-graceful-shutdown</id>
    <content type="html"><![CDATA[<p>Go1.8beta1が出た時に、Go1.8で追加される予定のGraceful Shutdownについて書く！
とTwitterに書き込んで早1ヶ月。
この前の金曜日に<a href="https://twitter.com/golang/status/822201571928731648">Go1.8rc2がリリースされ</a>、正式リリースも間近になってきて、
さすがに書かねばという気持ちになって来たので、がんばって検証してみます。</p>

<!-- More -->


<h2>公式サポートで増える予定の機能</h2>

<p>以前<a href="https://shogo82148.github.io/blog/2015/11/23/golang-graceful-restart-2nd/">Go言語でGraceful Restartをするときに取りこぼしを少なくする</a>で
紹介したように<a href="https://github.com/shogo82148/go-gracedown">shogo82148/go-gracedown</a>というものを書きました。
あれから時は経ち、ついにGo1.8からは<a href="https://github.com/golang/go/issues/4674">Graceful Shudownがbuild-inの機能として提供</a>される予定です。
公式サポートが入ることによって、以下のような機能を使えるようになります。</p>

<h3>HTTP/2のGraceful Shutdownができる</h3>

<p>HTTP/2ではGOAWAYフレームという接続を切ることを通知する機能があります。
Go1.8からはシャットダウン時にこのGOAWAYフレームを送ってくれるようになります。
GOAWAYフレームはサーバ側から任意のタイミングで送ることができ、
どこまで正常に処理できたかをクライアントに伝えられるという利点があります。</p>

<p>余談ですが、この機能は<a href="https://github.com/golang/go/issues/18471">x/net/http2を利用している場合は動かない</a>らしいです。
<a href="https://github.com/golang/net/blob/8fd7f25955530b92e73e9e1932a41b522b22ccd9/http2/server.go#L2716-L2736">importしたときには動かないけどbundleしたときにだけ動く黒魔術</a>が使われているためです。
覚えておいても今後絶対使うことはなさそう。というか使いたくない・・・。</p>

<h3>contextが使える</h3>

<p>go-gracedownを作った頃は、contextはまだ標準パッケージに取り込まれていなかったので対応していませんでした。
(1.7のリリース時に対応を怠っていただけとも言える)
net/httpのシャットダウンはもちろんcontextに対応しています。
これにより、Graceful Shutdownを中断して強制終了する、
ということが簡単にできるようになります。</p>

<h2>公式サポートで変更になる予定の挙動</h2>

<p>Keep-Aliveでのリクエストの挙動が少し変わります。
1.7以前のgo-gracedownでは、クライアントにKeep-Aliveが無効になったのを伝え、
クライアント側から接続を切るのを待つように実装してしました。
多少接続時間が延びたとしてもクライアント側でよくわからないエラーになるよりはマシだろ、との考えからです。</p>

<p>1.8からはシャットダウン時にIdle状態(TCP接続は有効だけど、リクエストは処理していない状態)な接続は切断されます。
内部で使っている<a href="https://golang.org/pkg/net/http/#Server.SetKeepAlivesEnabled">Server.SetKeepAlivesEnabled</a>の
挙動が<a href="https://github.com/golang/go/issues/9478">変更になった</a>ためです。</p>

<p>Goの中の人的には「この挙動が原因で万が一トラブルになっても、クライアントがリトライしてくれるから大丈夫でしょ」とのことのようです。
サーバシャットダウン以外にもネットワークトラブル等でも接続は切れるので、
クライアント側で頑張ってというのは正論ですが、
どの程度エラーが増えるのかは気になるところです。</p>

<h3>go-gracedownの対応</h3>

<p>go-gracedownはGo1.8でコンパイルされたときはbuild-inの機能を直接使うようになります。
中身はほとんどがインターフェースの互換性を保つためのコードなので、
機能的なメリットは完全になくなってしまいました・・・。
HTTP/2サポートも問題なく動くはずです。
逆にパッケージの依存が増えること以外はデメリットはないともいえます。</p>

<p>Go1.7以下では今までの方法にフォールバックしてくれます。
というわけで、以下のような人には有用です。</p>

<ul>
<li>深淵な理由でGo1.7以下しか使えない人</li>
<li>Go1.8とGo1.7以下のサポートがどうしても必要な人</li>
<li>Go1.8にアップグレードしたけど、graceful shutdownの処理を書き換えるのがめんどくさい人</li>
</ul>


<p>ところで、環境が悪いときに性能を落としたり機能を制限することをフォールバック(fall back)というわけですが、
逆に環境が良いときに性能を上げたり機能を拡張することはなんていうんですかね？
モデムでは通信環境が良いときに高速な通信方式に切り変えることを「フォールフォワード(fall forward)」というらしいです。
「Go1.8ではbild-inのGraceful Shutdownにフォールフォワードする」で使い方あってます？</p>

<h2>使い方</h2>

<h3>Server.Shutdownを使う</h3>

<p><a href="http://qiita.com/advent-calendar/2016/go3">Go(その3) Advent Calendar</a>の
<a href="http://qiita.com/najeira/items/806cacb9bba96ff06ec4">最終日の記事</a>でも扱ってますが改めて。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;context&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;os/signal&quot;</span>
</span><span class='line'>  <span class="s">&quot;syscall&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/lestrrat/go-server-starter/listener&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;start pid %d\n&quot;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">listeners</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ListenAll</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ErrNoListeningTarget</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">l</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listener</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ErrNoListeningTarget</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Fallback if not running under Server::Starter</span>
</span><span class='line'>      <span class="nx">l</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listen</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="s">&quot;:8080&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">panic</span><span class="p">(</span><span class="s">&quot;Failed to listen to port 8080&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">l</span> <span class="p">=</span> <span class="nx">listeners</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 別goroutineでServeしていることに注意！</span>
</span><span class='line'>  <span class="nx">srv</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span><span class="nx">Handler</span><span class="p">:</span> <span class="nx">newHandler</span><span class="p">()}</span>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">srv</span><span class="p">.</span><span class="nx">Serve</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// mainの中でシグナルの待受をしていることに注意！</span>
</span><span class='line'>  <span class="nx">signal_chan</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">signal</span><span class="p">.</span><span class="nx">Notify</span><span class="p">(</span><span class="nx">signal_chan</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">s</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">signal_chan</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">s</span> <span class="o">==</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;SIGTERM!!!!\n&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">srv</span><span class="p">.</span><span class="nx">Shutdown</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Background</span><span class="p">())</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">newHandler</span><span class="p">()</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">mux</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">NewServeMux</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">mux</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;from pid %d.\n&quot;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">())</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">mux</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>go-gracedownからの移行するさいの注意点は以下の通りです。</p>

<ul>
<li><code>Server.Shutdown</code>を使う(<code>Serer.Close</code>もあるけど、そっちはGracefulではない)</li>
<li><code>Server.Serve</code>は<strong>シャットダウンが始まる</strong>とすぐに制御を返す(<strong>シャットダウンが終わる</strong>とではない)</li>
<li><code>Server.Shutdown</code>は<strong>シャットダウンが終わる</strong>と制御を返す(<strong>シャットダウンが始まる</strong>とではない)</li>
</ul>


<h3>go-gracedownを使う</h3>

<p>go-gracedownの使い方も再掲しておきます。
Go1.6から利用方法は一切変更はないですが、
Go1.8でコンパイルすると<code>Server.Shutdown</code>を利用してくれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;os/signal&quot;</span>
</span><span class='line'>  <span class="s">&quot;syscall&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/lestrrat/go-server-starter/listener&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/shogo82148/go-gracedown&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;start pid %d\n&quot;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">signal_chan</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">signal</span><span class="p">.</span><span class="nx">Notify</span><span class="p">(</span><span class="nx">signal_chan</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">s</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">signal_chan</span>
</span><span class='line'>          <span class="k">if</span> <span class="nx">s</span> <span class="o">==</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;SIGTERM!!!!\n&quot;</span><span class="p">)</span>
</span><span class='line'>              <span class="nx">gracedown</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">listeners</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ListenAll</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ErrNoListeningTarget</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">l</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listener</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ErrNoListeningTarget</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Fallback if not running under Server::Starter</span>
</span><span class='line'>      <span class="nx">l</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listen</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="s">&quot;:8080&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">panic</span><span class="p">(</span><span class="s">&quot;Failed to listen to port 8080&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">l</span> <span class="p">=</span> <span class="nx">listeners</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">gracedown</span><span class="p">.</span><span class="nx">Serve</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span> <span class="nx">newHandler</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">newHandler</span><span class="p">()</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">mux</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">NewServeMux</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">mux</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;from pid %d.\n&quot;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">())</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">mux</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>HTTP/2を使う</h3>

<p>せっかくHTTP/2にも対応したことなので、
Server::Starterを使ってHTTP/2サーバのGraceful Restartをする例も書いてみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;context&quot;</span>
</span><span class='line'>  <span class="s">&quot;crypto/tls&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;os/signal&quot;</span>
</span><span class='line'>  <span class="s">&quot;syscall&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/lestrrat/go-server-starter/listener&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// net/http/internal/testcert.go から拝借</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">localhostCert</span> <span class="p">=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">`-----BEGIN CERTIFICATE-----</span>
</span><span class='line'><span class="s">MIICEzCCAXygAwIBAgIQMIMChMLGrR+QvmQvpwAU6zANBgkqhkiG9w0BAQsFADAS</span>
</span><span class='line'><span class="s">MRAwDgYDVQQKEwdBY21lIENvMCAXDTcwMDEwMTAwMDAwMFoYDzIwODQwMTI5MTYw</span>
</span><span class='line'><span class="s">MDAwWjASMRAwDgYDVQQKEwdBY21lIENvMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB</span>
</span><span class='line'><span class="s">iQKBgQDuLnQAI3mDgey3VBzWnB2L39JUU4txjeVE6myuDqkM/uGlfjb9SjY1bIw4</span>
</span><span class='line'><span class="s">iA5sBBZzHi3z0h1YV8QPuxEbi4nW91IJm2gsvvZhIrCHS3l6afab4pZBl2+XsDul</span>
</span><span class='line'><span class="s">rKBxKKtD1rGxlG4LjncdabFn9gvLZad2bSysqz/qTAUStTvqJQIDAQABo2gwZjAO</span>
</span><span class='line'><span class="s">BgNVHQ8BAf8EBAMCAqQwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDwYDVR0TAQH/BAUw</span>
</span><span class='line'><span class="s">AwEB/zAuBgNVHREEJzAlggtleGFtcGxlLmNvbYcEfwAAAYcQAAAAAAAAAAAAAAAA</span>
</span><span class='line'><span class="s">AAAAATANBgkqhkiG9w0BAQsFAAOBgQCEcetwO59EWk7WiJsG4x8SY+UIAA+flUI9</span>
</span><span class='line'><span class="s">tyC4lNhbcF2Idq9greZwbYCqTTTr2XiRNSMLCOjKyI7ukPoPjo16ocHj+P3vZGfs</span>
</span><span class='line'><span class="s">h1fIw3cSS2OolhloGw/XM6RWPWtPAlGykKLciQrBru5NAPvCMsb/I1DAceTiotQM</span>
</span><span class='line'><span class="s">fblo6RBxUQ==</span>
</span><span class='line'><span class="s">-----END CERTIFICATE-----`</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">localhostKey</span> <span class="p">=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">`-----BEGIN RSA PRIVATE KEY-----</span>
</span><span class='line'><span class="s">MIICXgIBAAKBgQDuLnQAI3mDgey3VBzWnB2L39JUU4txjeVE6myuDqkM/uGlfjb9</span>
</span><span class='line'><span class="s">SjY1bIw4iA5sBBZzHi3z0h1YV8QPuxEbi4nW91IJm2gsvvZhIrCHS3l6afab4pZB</span>
</span><span class='line'><span class="s">l2+XsDulrKBxKKtD1rGxlG4LjncdabFn9gvLZad2bSysqz/qTAUStTvqJQIDAQAB</span>
</span><span class='line'><span class="s">AoGAGRzwwir7XvBOAy5tM/uV6e+Zf6anZzus1s1Y1ClbjbE6HXbnWWF/wbZGOpet</span>
</span><span class='line'><span class="s">3Zm4vD6MXc7jpTLryzTQIvVdfQbRc6+MUVeLKwZatTXtdZrhu+Jk7hx0nTPy8Jcb</span>
</span><span class='line'><span class="s">uJqFk541aEw+mMogY/xEcfbWd6IOkp+4xqjlFLBEDytgbIECQQDvH/E6nk+hgN4H</span>
</span><span class='line'><span class="s">qzzVtxxr397vWrjrIgPbJpQvBsafG7b0dA4AFjwVbFLmQcj2PprIMmPcQrooz8vp</span>
</span><span class='line'><span class="s">jy4SHEg1AkEA/v13/5M47K9vCxmb8QeD/asydfsgS5TeuNi8DoUBEmiSJwma7FXY</span>
</span><span class='line'><span class="s">fFUtxuvL7XvjwjN5B30pNEbc6Iuyt7y4MQJBAIt21su4b3sjXNueLKH85Q+phy2U</span>
</span><span class='line'><span class="s">fQtuUE9txblTu14q3N7gHRZB4ZMhFYyDy8CKrN2cPg/Fvyt0Xlp/DoCzjA0CQQDU</span>
</span><span class='line'><span class="s">y2ptGsuSmgUtWj3NM9xuwYPm+Z/F84K6+ARYiZ6PYj013sovGKUFfYAqVXVlxtIX</span>
</span><span class='line'><span class="s">qyUBnu3X9ps8ZfjLZO7BAkEAlT4R5Yl6cGhaJQYZHOde3JEMhNRcVFMO8dJDaFeo</span>
</span><span class='line'><span class="s">f9Oeos0UUothgiDktdQHxdNEwLjQf7lJJBzV+5OtwswCWA==</span>
</span><span class='line'><span class="s">-----END RSA PRIVATE KEY-----`</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;start pid %d\n&quot;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">listeners</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ListenAll</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ErrNoListeningTarget</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">l</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listener</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ErrNoListeningTarget</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Fallback if not running under Server::Starter</span>
</span><span class='line'>      <span class="nx">l</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listen</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="s">&quot;:8080&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">panic</span><span class="p">(</span><span class="s">&quot;Failed to listen to port 8080&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">l</span> <span class="p">=</span> <span class="nx">listeners</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">cert</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tls</span><span class="p">.</span><span class="nx">X509KeyPair</span><span class="p">(</span><span class="nx">localhostCert</span><span class="p">,</span> <span class="nx">localhostKey</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">tlsConfig</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">tls</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">NextProtos</span><span class="p">:</span>   <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;h2&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">Certificates</span><span class="p">:</span> <span class="p">[]</span><span class="nx">tls</span><span class="p">.</span><span class="nx">Certificate</span><span class="p">{</span><span class="nx">cert</span><span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">srv</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Handler</span><span class="p">:</span>   <span class="nx">newHandler</span><span class="p">(),</span>
</span><span class='line'>      <span class="nx">TLSConfig</span><span class="p">:</span> <span class="nx">tlsConfig</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">l</span> <span class="p">=</span> <span class="nx">tls</span><span class="p">.</span><span class="nx">NewListener</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span> <span class="nx">tlsConfig</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">srv</span><span class="p">.</span><span class="nx">Serve</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">signal_chan</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">signal</span><span class="p">.</span><span class="nx">Notify</span><span class="p">(</span><span class="nx">signal_chan</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">s</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">signal_chan</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">s</span> <span class="o">==</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;SIGTERM!!!!\n&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">srv</span><span class="p">.</span><span class="nx">Shutdown</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Background</span><span class="p">())</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">newHandler</span><span class="p">()</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">mux</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">NewServeMux</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">mux</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;from pid %d.\n&quot;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">())</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">mux</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>NextProtos</code>へ明示的に<code>h2</code>を指定する必要があるのがポイントです。
net/httpはデフォルトでHTTP/2を有効にしてくれますが、
<code>TLSConfig</code>が指定されているときは自前でやる必要があります。</p>

<h2>実験</h2>

<p>HTTP/2に対応していて証明書の検証もスキップできて・・・という条件で
ベンチマークソフトを探すのが面倒だったので、Goで自作です。
あまり詳しい統計情報は要らないので、負荷をかけるのにリソースを割きたかったというのもあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;crypto/tls&quot;</span>
</span><span class='line'>  <span class="s">&quot;flag&quot;</span>
</span><span class='line'>  <span class="s">&quot;io&quot;</span>
</span><span class='line'>  <span class="s">&quot;io/ioutil&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/kayac/parallel-benchmark/benchmark&quot;</span>
</span><span class='line'>  <span class="s">&quot;golang.org/x/net/http2&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">myWorker</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">URL</span>    <span class="kt">string</span>
</span><span class='line'>  <span class="nx">client</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Client</span>
</span><span class='line'>  <span class="nx">buf</span>    <span class="p">[]</span><span class="kt">byte</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">myWorker</span><span class="p">)</span> <span class="nx">Setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">tr</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Transport</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Proxy</span><span class="p">:</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ProxyFromEnvironment</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">DialContext</span><span class="p">:</span> <span class="p">(</span><span class="o">&amp;</span><span class="nx">net</span><span class="p">.</span><span class="nx">Dialer</span><span class="p">{</span>
</span><span class='line'>          <span class="nx">Timeout</span><span class="p">:</span>   <span class="mi">30</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">KeepAlive</span><span class="p">:</span> <span class="mi">30</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span><span class='line'>      <span class="p">}).</span><span class="nx">DialContext</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">MaxIdleConns</span><span class="p">:</span>        <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">IdleConnTimeout</span><span class="p">:</span>     <span class="mi">90</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">TLSHandshakeTimeout</span><span class="p">:</span> <span class="mi">10</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">TLSClientConfig</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">tls</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span><span class='line'>          <span class="c1">// テストなので証明書の検証はスキップ</span>
</span><span class='line'>          <span class="c1">// プロダクションでは必ず有効にしてください！</span>
</span><span class='line'>          <span class="nx">InsecureSkipVerify</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">ExpectContinueTimeout</span><span class="p">:</span> <span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http2</span><span class="p">.</span><span class="nx">ConfigureTransport</span><span class="p">(</span><span class="nx">tr</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">client</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Client</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Transport</span><span class="p">:</span> <span class="nx">tr</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">buf</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">myWorker</span><span class="p">)</span> <span class="nx">Teardown</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">myWorker</span><span class="p">)</span> <span class="nx">Process</span><span class="p">()</span> <span class="p">(</span><span class="nx">subscore</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nx">Get</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">URL</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;ERROR: %v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">CopyBuffer</span><span class="p">(</span><span class="nx">ioutil</span><span class="p">.</span><span class="nx">Discard</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">,</span> <span class="nx">w</span><span class="p">.</span><span class="nx">buf</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;ERROR: %v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">StatusCode</span> <span class="o">!=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Invalid Status: %d&quot;</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">StatusCode</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="p">(</span>
</span><span class='line'>      <span class="nx">conn</span>     <span class="kt">int</span>
</span><span class='line'>      <span class="nx">duration</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  <span class="nx">flag</span><span class="p">.</span><span class="nx">IntVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">conn</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&quot;connections to keep open&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">flag</span><span class="p">.</span><span class="nx">DurationVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">duration</span><span class="p">,</span> <span class="s">&quot;d&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span> <span class="s">&quot;duration of benchmark&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">flag</span><span class="p">.</span><span class="nx">Parse</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">url</span> <span class="o">:=</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">Args</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">workers</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="nx">benchmark</span><span class="p">.</span><span class="nx">Worker</span><span class="p">,</span> <span class="nx">conn</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">workers</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">workers</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">myWorker</span><span class="p">{</span><span class="nx">URL</span><span class="p">:</span> <span class="nx">url</span><span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">benchmark</span><span class="p">.</span><span class="nx">Run</span><span class="p">(</span><span class="nx">workers</span><span class="p">,</span> <span class="nx">duration</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>前回記事同様、Server::Starterを使って1秒毎に再起動を繰り返しながらベンチを回します。
AWSのc4.largeインスタンス上で実行しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>start_server --port <span class="m">8080</span> --pid-file app.pid -- ./main
</span><span class='line'><span class="nv">$ </span><span class="k">while</span> <span class="nb">true</span><span class="p">;</span> <span class="k">do</span> <span class="nb">kill</span> -HUP <span class="sb">`</span>cat app.pid<span class="sb">`</span><span class="p">;</span> sleep 1<span class="p">;</span> <span class="k">done</span>
</span><span class='line'><span class="nv">$ </span>./bin/bench -c <span class="m">10</span> -d<span class="o">=</span>1m http://localhost:8080/
</span></code></pre></td></tr></table></div></figure>


<h2>結果</h2>

<h3>Server.Shutdownを使った場合</h3>

<p>Server.Shutdownを使った場合の結果です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./bin/bench -c 10 -d=1m http://localhost:8080/
</span><span class='line'>2017/01/22 12:20:51 starting benchmark: concurrency: 10, time: 1m0s, GOMAXPROCS: 2
</span><span class='line'>2017/01/22 12:21:51 done benchmark: score 1174412, elapsed 1m0.002557914s = 19572.698912 / sec</span></code></pre></td></tr></table></div></figure>


<p>先程紹介したKeepAliveの挙動変更の影響で多少はエラーがでるのでは？と予想していたものの、
まったく影響はありませんでした。</p>

<h3>go-gracedownを使った場合</h3>

<p>go-gracedownを使った場合の結果です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./bin/bench -c 10 -d=1m http://localhost:8080/
</span><span class='line'>2017/01/22 12:22:26 starting benchmark: concurrency: 10, time: 1m0s, GOMAXPROCS: 2
</span><span class='line'>2017/01/22 12:23:26 done benchmark: score 1160878, elapsed 1m0.009764419s = 19344.818485 / sec</span></code></pre></td></tr></table></div></figure>


<p>中身は<code>Server.Shutdown</code>なので、当然ながら同じ結果です。</p>

<h3>HTTP/2でアクセスした場合</h3>

<p>HTTP/2でアクセスした場合の結果です。
GoのHTTP/2サポートはHTTPSで通信したときにしか有効にならないので、他のベンチとURLが違うことに注意。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./bin/bench -c 10 -d=1m https://localhost:8080/
</span><span class='line'>2017/01/22 12:30:04 starting benchmark: concurrency: 10, time: 1m0s, GOMAXPROCS: 2
</span><span class='line'>2017/01/22 12:31:04 done benchmark: score 666801, elapsed 1m0.001842465s = 11113.008745 / sec</span></code></pre></td></tr></table></div></figure>


<p>特にエラーもなく、全く問題ありませんでした。</p>

<h2>まとめ</h2>

<ul>
<li>Go1.8からサポートされる予定のHTTPサーバのGraceful Shutdownについて検証しました

<ul>
<li>HTTP/1.1とHTTP/2で検証しましたが、特に問題は見つかりませんでした</li>
</ul>
</li>
<li>go-gracedownはGo1.8でコンパイルされたときはbuild-inの機能を使うようになります

<ul>
<li>機能的にはbuild-inの機能を直接使う場合とまったく変わりありません</li>
</ul>
</li>
</ul>


<p>Go1.8の正式リリース楽しみですね！</p>

<h2>参考</h2>

<ul>
<li><a href="https://shogo82148.github.io/blog/2015/05/03/golang-graceful-restart/">Go言語でGraceful Restartをする</a></li>
<li><a href="https://shogo82148.github.io/blog/2015/11/23/golang-graceful-restart-2nd/">Go言語でGraceful Restartをするときに取りこぼしを少なくする</a></li>
<li><a href="https://github.com/golang/go/issues/4674">net/http: add built-in graceful shutdown support to Server #4674</a></li>
<li><a href="https://github.com/golang/go/issues/9478">net/http: make Server.SetKeepAlivesEnabled(false) drop currently-open connections #9478</a></li>
<li><a href="http://qiita.com/najeira/items/806cacb9bba96ff06ec4">Go 1.8 の HTTP Server Graceful Shutdown を試す</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
