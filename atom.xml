<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shogo's Blog]]></title>
  <link href="http://shogo82148.github.io/atom.xml" rel="self"/>
  <link href="http://shogo82148.github.io/"/>
  <updated>2014-10-21T02:14:29+09:00</updated>
  <id>http://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gitで作業ディレクトリの変更を破棄したのに差分が出続けて困った話その2]]></title>
    <link href="http://shogo82148.github.io/blog/2014/10/21/git-case-sensitivity/"/>
    <updated>2014-10-21T00:56:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/10/21/git-case-sensitivity</id>
    <content type="html"><![CDATA[<p>先日「<a href="http://shogo82148.github.io/blog/2014/10/04/gitattribute-eol-equals-crlf/">Gitで作業ディレクトリの変更を破棄したのに差分が出続けて困った話</a>」と
いうのを書きましたが、より強力な敵が現われました。
このときは文字コードが原因で <code>git checkout -- &lt;file&gt;</code> しても差分が残り続けるというもので、<code>git add</code> してコミットし直すことで回避出来ました。
しかし、今度の敵は <code>git checkout -- &lt;file&gt;</code> しても <code>git add &lt;file&gt;</code>しても差分が残り続けます。</p>

<p>なんだ・・・このボスを倒したら新たなラスボスが現れた感・・・</p>

<p>acidlemon先生の手助けにより事無きを得たのですが、
ちょっと不明な点もあったので、その点もあわせてメモを残しておきます。</p>

<!-- More -->


<h2>症状</h2>

<p><code>git checkout -- &lt;file&gt;</code> しても、<code>git add &lt;file&gt;</code> しても、<code>git reset --hard HEAD</code> しても、
何をしても差分が出続ける・・・なんだこいつ・・・</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout -- AwesomeFeature
</span><span class='line'>$ git add .
</span><span class='line'>$ git status
</span><span class='line'>On branch master
</span><span class='line'>Changes not staged for commit:
</span><span class='line'>  (use "git add &lt;file&gt;..." to update what will be committed)
</span><span class='line'>    (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
</span><span class='line'>  
</span><span class='line'>  modified:   AwesomeFeature/HogeHoge.txt
</span><span class='line'>  
</span><span class='line'>  no changes added to commit (use "git add" and/or "git commit -a")</span></code></pre></td></tr></table></div></figure>


<p>操作は全てMac上で行いました。</p>

<h2>原因</h2>

<p>原因はファイル名の大文字小文字でした。
<code>git ls-files</code> でgitに管理されているファイルの一覧を表示します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git ls-files
</span><span class='line'>AwesomeFeature/HogeHoge.txt
</span><span class='line'>AwesomeFeature/hogehoge.txt
</span><span class='line'>README.txt</span></code></pre></td></tr></table></div></figure>


<p>大文字小文字だけが違う「HogeHoge.txt」と「hogehoge.txt」が管理されています。</p>

<p>しかしワーキングディレクトリにあるのは「HogeHoge.txt」のみです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls AwesomeFeature/
</span><span class='line'>HogeHoge.txt</span></code></pre></td></tr></table></div></figure>


<p>Macのファイルシステムは大文字小文字を区別しないので、
ワーキングディレクトリ上で「HogeHoge.txt」と「hogehoge.txt」を同時に扱えません。
しかしgitは両者を区別するので、よくわからない差分が生まれてしまったわけです。</p>

<p>両方同時に扱えないので、どちらか片方を消して解決します。
<code>git diff</code>で「HogeHoge.txt」と「hogehoge.txt」の差分が見れるのでどっちを残すが選択、
<code>git checkout -- &lt;file&gt;</code>で必要なほうをワーキングディレクトリに反映後、
<code>git rm --cached &lt;file&gt;</code>で不要なファイルをレポジトリから削除です。
「hogehoge.txt」を残す場合は以下のような感じです。全てファイル名を明示してるのがポイントです(症状のところではディレクトリ名指定だった)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ # 差分確認
</span><span class='line'>$ # 今はHogeHoge.txtの方がワーキングディレクトリに反映されているので、hogehoge.txtに変更があるように見える
</span><span class='line'>$ git diff
</span><span class='line'>diff --git a/AwesomeFeature/hogehoge.txt b/AwesomeFeature/hogehoge.txt
</span><span class='line'>index 3488202..1150100 100644
</span><span class='line'>--- a/AwesomeFeature/hogehoge.txt
</span><span class='line'>+++ b/AwesomeFeature/hogehoge.txt
</span><span class='line'>@@ -1 +1 @@
</span><span class='line'>-this is hogehoge.txt
</span><span class='line'>+this is HogeHoge.txt
</span><span class='line'>$
</span><span class='line'>$ # hogehoge.txt の内容をワーキングディレクトリに反映
</span><span class='line'>$ git checkout -- AwesomeFeature/hogehoge.txt
</span><span class='line'>$
</span><span class='line'>$ # 今度はHogeHoge.txtに変更があるように見える
</span><span class='line'>$ git diff
</span><span class='line'>diff --git a/AwesomeFeature/HogeHoge.txt b/AwesomeFeature/HogeHoge.txt
</span><span class='line'>index 1150100..3488202 100644
</span><span class='line'>--- a/AwesomeFeature/HogeHoge.txt
</span><span class='line'>+++ b/AwesomeFeature/HogeHoge.txt
</span><span class='line'>@@ -1 +1 @@
</span><span class='line'>-this is HogeHoge.txt
</span><span class='line'>+this is hogehoge.txt
</span><span class='line'>$
</span><span class='line'>$ # HogeHoge.txtの方はgitから削除
</span><span class='line'>$ git rm AwesomeFeature/HogeHoge.txt
</span><span class='line'>rm 'AwesomeFeature/HogeHoge.txt'
</span><span class='line'>$ git commit -m 'rm AwesomeFeature/HogeHoge.txt'</span></code></pre></td></tr></table></div></figure>


<p>「HogeHoge.txt」があるブランチと「hogehoge.txt」があるブランチをマージするとこうなるようです。
gitの扱いに慣れてない人が触っているレポジトリなのでトラブルが絶えない・・・それにしたってなんでこう見事に地雷を踏抜いて行くんだ・・・(ヽ´ω`)</p>

<h2>まとめ</h2>

<p>大文字小文字を区別しないファイルシステムなんか滅んでしまえ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis::Fast 0.13をリリースしました]]></title>
    <link href="http://shogo82148.github.io/blog/2014/10/16/redis-fast-0-dot-13-released/"/>
    <updated>2014-10-16T23:51:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/10/16/redis-fast-0-dot-13-released</id>
    <content type="html"><![CDATA[<p>Redis::Fast 0.13をリリースしました。
主な変更点は以下のとおりです。</p>

<ul>
<li>passwordオプションの対応</li>
<li>maxclientsに達した場合に、deep recursion することがある問題の修正</li>
<li>トランザクション内で再接続処理が行われる問題の修正</li>
</ul>


<!-- More -->


<h2>passwordオプションの対応</h2>

<p>今更感のある機能ですね。昔は対応してたんです。
対応してたんですが、Sentinel対応のために接続開始周りをごそっと入れ替えて、そのときに間違ってパスワード認証機能を削除しちゃってたっぽいです(・ω&lt;)
なんというかごめんなさい。</p>

<p>実際実装してテストしてみると、認証失敗したときにdouble freeで落ちてちょっとハマりました。
hiredisを使う場合は<code>redisAsyncSetConnectCallback</code>に指定する関数内で、コネクションを切断するような処理(password認証とか)はしないようにしましょう。</p>

<h2>maxclientsに達した場合に、deep recursion することがある問題の修正</h2>

<p>Redis::Fastでは、接続処理の中で、コネクションに名前をつけたり、パスワード認証したり、その他独自の処理を実行しています。
この処理の途中でも再接続処理が走ってしまい、
再接続処理の中で再接続処理が実行されて、その再接続処理の中で再接続が&#8230; というような無限ループに突入する場合があります。
maxclientsに達した場合、一度コネクションの確立に成功したあとに接続が切られるので、この無限ループに入ってしまうようです。</p>

<p>接続処理中は再接続処理を行わないようにすることで対応しました。</p>

<h2>トランザクション内で再接続処理が行われる問題の修正</h2>

<p>Redis::Fast 0.07以降、<code>MULTI</code>-<code>EXEC</code>コマンドを遣ったトランザクションの中にいるときは再接続処理が行わないようになっています。
その仕組みを作るにあたって、トランザクションの中にいるか外にいるかを表すフラグをコマンド送信前に更新していました。</p>

<ol>
<li>再接続を禁止する</li>
<li><code>MULTI</code> コマンドを送る</li>
<li>結果を受け取る</li>
<li>必要なコマンド発行を行う</li>
<li>再接続を許可する</li>
<li><code>EXEC</code>コマンドを実行する</li>
<li>結果を受け取る</li>
</ol>


<p>しかしこれだと 5 と 6 の間で再接続が起こってしまいます。
<code>EXEC</code>コマンドがまだ実行されていないので、ここはまだトランザクションの中ですね。</p>

<p>Redis::Fast 0.13ではフラグの更新はコマンドが成功したときに変更してあります。</p>

<ol>
<li><code>MULTI</code>コマンドを送る</li>
<li>結果を受け取る</li>
<li>再接続を禁止する</li>
<li>必要なコマンド発行を行う</li>
<li><code>EXEC</code>コマンドを実行する</li>
<li>結果を受け取る</li>
<li>再接続を許可する</li>
</ol>


<p>これでトランザクション中に再接続処理が走ることは無いはずです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitで作業ディレクトリの変更を破棄したのに差分が出続けて困った話]]></title>
    <link href="http://shogo82148.github.io/blog/2014/10/04/gitattribute-eol-equals-crlf/"/>
    <updated>2014-10-04T15:05:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/10/04/gitattribute-eol-equals-crlf</id>
    <content type="html"><![CDATA[<p>gitで変更した覚えの無いファイルに差分が出ていたので、
作業ディレクトリの変更を破棄したのに、
<code>git status</code>で差分が出続けて困ったのでメモ。</p>

<!-- More -->


<h2>症状</h2>

<p>gitでは<code>git checkout -- &lt;file&gt;</code> ってコマンドを叩くと、
作業ディレクトリの変更を破棄できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout -- hoge.txt
</span><span class='line'>$ git status
</span><span class='line'>On branch master
</span><span class='line'>Changes not staged for commit:
</span><span class='line'> (use "git add &lt;file&gt;..." to update what will be committed)
</span><span class='line'> (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
</span><span class='line'>
</span><span class='line'>   modified:   hoge.txt</span></code></pre></td></tr></table></div></figure>


<p>しかし、差分が出続ける&#8230;
<code>git checkout -- &lt;file&gt;</code> ならさっきやったよ！</p>

<p><code>git reset --hard HEAD</code> して全変更を破棄してもダメでした。</p>

<h2>原因</h2>

<p>.gitattributesに改行コードの指定があったからでした。</p>

<figure class='code'><figcaption><span>.gitattributes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*.txt text=auto eol=crlf</span></code></pre></td></tr></table></div></figure>


<p>これが指定されていると、CRLFなファイルをコミットしようとしても、
レポジトリには改行コードがLFで保存されるようになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat .gitattributes # .gitattributes には eol=crlf が指定されている
</span><span class='line'>*.txt text=auto eol=crlf
</span><span class='line'>$ hexdump hoge.txt   # hoge.txt は改行コードCRLFで保存されている
</span><span class='line'>0000000 48 65 6c 6c 6f 20 57 6f 72 6c 64 21 21 0d 0a
</span><span class='line'>000000f
</span><span class='line'>$ git add hoge.txt
</span><span class='line'>$ git commit -m 'add hoge.txt'  # 改行コードがCRLFなhoge.txtをコミット
</span><span class='line'>$ git cat-file -p master^{tree} # レポジトリにコミットされているオブジェクトを確認
</span><span class='line'>100644 blob 523f058ebd4f1a280b5a33a79af8f22b74415f37   .gitattributes
</span><span class='line'>100644 blob 936977184a9fa89d82f86957a90b92d4924b6573   hoge.txt
</span><span class='line'>$ git cat-file -p 936977184a9fa89d82f86957a90b92d4924b6573 | hexdump # 改行コードがLF(末尾が0a)になっている！！
</span><span class='line'>0000000 48 65 6c 6c 6f 20 57 6f 72 6c 64 21 21 0a
</span><span class='line'>000000e</span></code></pre></td></tr></table></div></figure>


<p>ところがレポジトリ上にCRLFなファイルがコミットされていると、
コミットすべき内容と一致しないので差分がでてしまう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git cat-file -p master^{tree}
</span><span class='line'>100644 blob 523f058ebd4f1a280b5a33a79af8f22b74415f37   .gitattributes
</span><span class='line'>100644 blob 23c3aefeda706ec02f4a724edc2faf1913a547ef   hoge.txt
</span><span class='line'>$ git cat-file -p 23c3aefeda706ec02f4a724edc2faf1913a547ef | hexdump # 改行コードはCRLF(末尾が0d 0a)
</span><span class='line'>0000000 48 65 6c 6c 6f 20 57 6f 72 6c 64 21 21 0d 0a
</span><span class='line'>000000f
</span><span class='line'>$ git status # 差分がでてしまう
</span><span class='line'>On branch master
</span><span class='line'>Changes not staged for commit:
</span><span class='line'>  (use "git add &lt;file&gt;..." to update what will be committed)
</span><span class='line'>  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
</span><span class='line'>
</span><span class='line'>  modified:   hoge.txt
</span><span class='line'>
</span><span class='line'>  no changes added to commit (use "git add" and/or "git commit -a")</span></code></pre></td></tr></table></div></figure>


<p>作業ディレクトリが壊れているわけでなく、レポジトリの内容がおかしい(<code>eol=crlf</code>が設定されているときは全てのファイルはLFでコミットされているべき)ので、
今回はコミットして正しい状態にすることで解決。
差分計算の効率化のためにタイムスタンプを最初に見ているみたいなので、
touchしただけで差分が！ってなってびっくりした。</p>

<h2>まとめ</h2>

<p>CRLF滅びろ</p>

<h2>追記</h2>

<p><a href="http://shogo82148.github.io/blog/2014/10/21/git-case-sensitivity/">続編</a>がでました</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISUCON4にチームぽわわで参加しました]]></title>
    <link href="http://shogo82148.github.io/blog/2014/10/03/isucon-powawa-4/"/>
    <updated>2014-10-03T19:55:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/10/03/isucon-powawa-4</id>
    <content type="html"><![CDATA[<p>遅くなりましたが、ISUCON4のレポートです。
まこぴーとchroneさんとともにチームぽわわで参加し、惨敗してきました。</p>

<p>2014-10-06 追記: <a href="https://github.com/shogo82148/isucon4_powawa">競技中に使ったレポジトリ</a>を公開しました。</p>

<!-- More -->


<h2>事前準備</h2>

<ul>
<li>メンバー三人で集まって、去年のnopasteアプリで練習

<ul>
<li>chroneさんは初参戦なので雰囲気を掴んでもらう</li>
</ul>
</li>
<li>Ansibleを使っていこうっていう話になったので、プレイブックを書いて遊んでみる</li>
<li>githubにprivate repositoryを予め建てる

<ul>
<li>PayPalに対応してるっぽいので、ログインを試みるも何故か失敗</li>
<li>諦めてクレカ情報を直接入力</li>
<li>どうなってるんですかgithubさん！！！</li>
</ul>
</li>
</ul>


<h2>競技</h2>

<h3>10時くらいまで</h3>

<ul>
<li>お題確認</li>
<li>サーバのセットアップはchroneさんにお願いしスムーズにできた</li>
<li>サーバは人数分準備

<ul>
<li>僕がコミット＆実行確認をこまめに繰り返すタイプなので、書いたコードはすぐにデプロイしてテストに回したい！！</li>
<li>サーバ一台だとインフラの調整とアプリの確認がかぶって面倒</li>
<li>かといってローカルで同じ環境用意するのも面倒</li>
<li>AMIがあるならそれを使っちゃえ！(って記事を去年見た気がしたので)</li>
</ul>
</li>
<li>密かにUkigumoで自動デプロイする仕組みを作っておいた

<ul>
<li>書いたコードはすぐにデプロイしてテストに回したい！！</li>
<li>あらかじめukigumo-agentを起動</li>
<li>github-hookを設定してコミットしたら実行</li>
<li><a href="http://shogo82148.github.io/blog/2014/09/23/github-hooks-receiver-supports-x-hub-signature/">Github::Hooks::Receiverいじってた</a>のはこれやるためだったんだけど、Ukigumoさんで十分でした。便利ですね！！</li>
<li>去年はサーバに入って作業する人(まこぴー)がかなり忙しそうだったので、なんとか解消したかった</li>
</ul>
</li>
</ul>


<h3>お昼くらいまで</h3>

<ul>
<li>nginxで静的ファイル配信とかMySQLのクエリ分析とか</li>
<li>いっちーさんは早速Redis::Fastに手を付ける

<ul>
<li>みんなもRedis::Fast使ってね！！</li>
</ul>
</li>
<li>あとUkigumoさんのおもり

<ul>
<li>UkigumoとAnsibleのお陰で僕が何もしなくても、まこぴー氏が「nginxで静的ファイル配信したよ！」って言って数分後には確認できる状態になっていて便利</li>
<li>これのおかげでページが真っ白になっているのに気がつく</li>
<li>普通に設定を書き換えるとMIMEの設定がなくなるらしい</li>
<li>Ukigumo++</li>
</ul>
</li>
</ul>


<h3>14時くらいまで</h3>

<ul>
<li>chroneさんにMySQLのクエリ改善

<ul>
<li><code>COUNT()</code> している部分を一行SELECTだけにする修正とか</li>
</ul>
</li>
<li>一部Redis::Fastに書き換えた版も一応スコアでる</li>
<li>アプリが単純すぎてMySQLでもRedisでも大差ないスコア</li>
<li>自分の環境でmy.cnfの調整をしたら、MySQL gone awayしてしまってつらいことに

<ul>
<li>Redisに書き換えたものの、reportのロジックには手をつけてなかったので、効果あるのではと</li>
<li>MySQLだけ再起動したらそうなるらしいけど、ansibleのplaybookにアプリの再起動手順も含まれていたので全部再起動かかってたと思うんだけど・・・</li>
<li>結局サーバごと再起動しました(・ω&lt;)</li>
</ul>
</li>
</ul>


<h3>17時くらいまで</h3>

<ul>
<li>workloadを上げるとfailが大量にでて/reportのチェックでコケる問題</li>
<li>トランザクションとかFOR UPDATEの問題かと思ってSQLをいじくりまわす</li>
<li>初期データの考慮を忘れてたことに気が付き、初期化スクリプトを組む</li>
</ul>


<h3>18時まで</h3>

<ul>
<li>workload変えてベンチ走らせたり最後のあがき</li>
</ul>


<h2>まとめ</h2>

<ul>
<li>初期化大事！！

<ul>
<li>社内ISUCONに参加したときも初期化で散々な目にあった</li>
</ul>
</li>
<li>Ansibleがあまり効果的に使えてなかった

<ul>
<li>configいじるのが速いので、どうしても直接いじっちゃう</li>
<li>各個人にサーバ用意したけど、微妙に環境が違ってつらい</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github::Hooks::ReceiverがX-Hub-Signatureをサポートしました]]></title>
    <link href="http://shogo82148.github.io/blog/2014/09/23/github-hooks-receiver-supports-x-hub-signature/"/>
    <updated>2014-09-23T00:25:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/09/23/github-hooks-receiver-supports-x-hub-signature</id>
    <content type="html"><![CDATA[<p><a href="https://metacpan.org/pod/Github::Hooks::Receiver">Github::Hooks::Receiver</a>にX-Hub-SignatureをサポートするPull Requestを送ったら、
速攻取り込まれ、さらにGithubのコミット権とPAUSEのco-maintパーミッションをもらったというお話。</p>

<!-- More -->


<h2>X-Hub-Signature</h2>

<p>GithubのWebhookは大変便利なんですが、特に対策をしないままだと
他の人にcurlとかで叩かれてしまう可能性があります。
本来であればIPアドレスで制限をかけるべきなんですが、
iptablesの設定とかよくわからないし・・・と思ってGithubのドキュメントを読んでいたら、
もっとお手軽な方法発見。</p>

<ul>
<li><a href="https://developer.github.com/webhooks/securing/">Securing your webhooks</a></li>
</ul>


<p>GithubからのリクエストにはX-Hub-Signatureというのがついていて、
これを使うとPayloadの検証ができるらしい。
<a href="https://metacpan.org/pod/Github::Hooks::Receiver">Github::Hooks::Receiver</a>は
このヘッダを全くみていないようだったので<a href="https://github.com/Songmu/Github-Hooks-Receiver/pull/1">Pull Requestを送ってみた</a>。</p>

<p>Github::Hooks::Receiver 0.02以降で、以下のようにsecretの指定ができるようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Github::Hooks::Receiver::</span><span class="n">Declare</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$receiver</span> <span class="o">=</span> <span class="n">receiver</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">secret</span> <span class="s">&#39;secret1234&#39;</span><span class="p">;</span> <span class="c1"># Webhookの設定画面のsecretの項目と同じものを入力</span>
</span><span class='line'>    <span class="n">on</span> <span class="nb">push</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>        <span class="c1"># レポジトリにPushされた時の処理とかをゴニョゴニョ書く</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$psgi</span> <span class="o">=</span> <span class="nv">$receiver</span><span class="o">-&gt;</span><span class="n">to_app</span><span class="p">;</span>
</span><span class='line'><span class="nv">$receiver</span><span class="o">-&gt;</span><span class="n">run</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでsecretを知らない人がリクエストを偽装できなくなるので安心です。
secretはエントロピーが高いほうがいいので
<code>ruby -rsecurerandom -e 'puts SecureRandom.hex(20)'</code>
みたいなコマンド使うといいらしいですよ。</p>

<h2>String::Compare::ConstantTime</h2>

<p>Signatureの比較にはRubyの<a href="http://rubydoc.info/github/rack/rack/master/Rack/Utils.secure_compare">secure_compare</a>のような関数を
使ったほうがいいらしい。
Github::Hooks::Receiverでは、そのPerl版の<a href="https://metacpan.org/pod/String::Compare::ConstantTime">String::Compare::ConstantTime</a>を使ってみた。
ちょっと引数のチェックに甘いところがあって、segmentation fault場合があったので、こちらにもPull Requestを送っておきました。
Github::Hooks::Receiverは使う前にチェックを入れてあるので、現行バージョンでも問題なく動くはず。</p>

<p>String::Compare::ConstantTimeはXSで書かれたモジュールなんですが、
この手のバグが入り込みやすいのでXS難しいですね。</p>

<h2>まとめ</h2>

<ul>
<li>XS怖い</li>
<li>Github::Hooks::Receiverにsecretを指定できるようになったので、IP制限がかけられない場合でも安心</li>
<li>でも、可能であればIP制限もしましょうね</li>
<li>XS怖い</li>
</ul>


<h2>追記</h2>

<h3>IP制限について</h3>

<p>Songmu先生よりコメントをいただきました。</p>

<blockquote class="twitter-tweet"><p>これはいい機能。ちなみにIP制限は、Nginxとかでやるのがお手軽で、plackで完結させたいのであれば、Plack::Middlewareで弾いてやればいいと思います。 / “Github::Hooks::ReceiverがX-…” <a href="http://t.co/NM0uQzW1s8">http://t.co/NM0uQzW1s8</a></p>&mdash; songmu (@songmu) <a href="https://twitter.com/songmu/status/514426458190528513">September 23, 2014</a></blockquote>


<script async src="http://shogo82148.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>確かにPlack::Middlewareとか使えばお手軽に弾けるので、
X-Hub-SignatureだけでなくIP制限もやっておくと良いですね。</p>

<h3>String::Compare::ConstantTime</h3>

<p>String::Compare::ConstantTime ですが、僕のprが取り込まれた 0.310 がリリースされました。
<code>undef</code> を渡すとsegmentation fault で落ちるというバグが修正されています。
XS怖い。</p>

<h2>SEE ALSO</h2>

<ul>
<li><a href="https://metacpan.org/pod/Github::Hooks::Receiver">Github::Hooks::Receiver</a></li>
<li><a href="https://metacpan.org/pod/String::Compare::ConstantTime">String::Compare::ConstantTime</a></li>
<li><a href="http://www.songmu.jp/riji/entry/2013-12-05-github-hooks.html">GithubのHookについてのまとめとソリューション</a></li>
<li><a href="http://www.songmu.jp/riji/entry/2014-04-18-github-hooks.html">Jenkinsでパラメータ付ビルドでブランチ指定出来るようにしつつ、GithubのHookも受け付けられるようにする</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Githubさんにpack exceeds maximum allowed sizeって言われた]]></title>
    <link href="http://shogo82148.github.io/blog/2014/09/13/github-remote-push-pack-size-exceeded/"/>
    <updated>2014-09-13T10:51:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/09/13/github-remote-push-pack-size-exceeded</id>
    <content type="html"><![CDATA[<p>Githubに手元のレポジトリをpushしようとしたら、
「Pushできないよ！！」って言われたときのメモ。</p>

<!-- More -->


<p>コミット数が17kほどあって、画像とかサイズが比較的大きいファイルがたくさんあるレポジトリを、
一度に全部pushしようとしたら「制限を超えてます」って言われてダメだった。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin master
</span><span class='line'>Counting objects: 280874, done.
</span><span class='line'>Delta compression using up to 4 threads.
</span><span class='line'>Compressing objects: 100% (60497/60497), done.
</span><span class='line'>remote: fatal: pack exceeds maximum allowed size
</span><span class='line'>error: pack-objects died of signal 13
</span><span class='line'>error: failed to push some refs to 'git@github.com:***/****.git'</span></code></pre></td></tr></table></div></figure>


<p>ググってみると、おんなじような症状が見つかった。</p>

<ul>
<li><a href="http://stackoverflow.com/questions/15125862/github-remote-push-pack-size-exceeded">Github remote push pack size exceeded</a></li>
</ul>


<p>リモートへのPushはオブジェクトを全部一つにPackしてしまうので、
一度に大量のコミットをPushしようとすると制限に引っかかるらしい。
(そして、サイズを制限する方法はないみたい)</p>

<p>解決策は「2回以上に分けてPushしてね」とのこと</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push remoteB &lt;some previous commit on master&gt;:master
</span><span class='line'>...
</span><span class='line'>git push remoteB &lt;some previous commit after the last one&gt;:master
</span><span class='line'>git push remoteB master</span></code></pre></td></tr></table></div></figure>


<p>頑張ってコミットログを遡ってコミットハッシュを調べるのはつらかったので、
打ってあったタグからコミットハッシュを調べてPushした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push origin `git show v0.1.0 | grep commit | cut -d' ' -f2`:master</span></code></pre></td></tr></table></div></figure>


<p>タグは単なるコミットハッシュの別名ではなくひとつのオブジェクトなので、
コミットだけをPushしたいときはタグと関連づいたコミットを調べる必要がある。
今回はタグの情報からgrepとcutで必要なとこだけ切り抜くってことをしたけど、
もっとスマートな方法があるなら知りたい。
この方法で古いコミットから順番に何度かに分けてPushしたらうまくいった。</p>

<p>今回は見つけた情報に通りに&lt;コミットハッシュ>:&lt;ブランチ名>でPushしたけど、
コミットオブジェクトがリモートに転送されてればいいわけだから、
単にタグをプッシュしてあとから消すでも良かったかもしれない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push origin v0.1.0
</span><span class='line'>git push origin :v0.1.0</span></code></pre></td></tr></table></div></figure>


<p>こちらは未確認。</p>

<p>歴史を守るって大変なことなんだなあ(ヽ´ω`)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[秘密鍵から公開鍵をつくる]]></title>
    <link href="http://shogo82148.github.io/blog/2014/09/03/get-public-key/"/>
    <updated>2014-09-03T13:40:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/09/03/get-public-key</id>
    <content type="html"><![CDATA[<p>githubに公開鍵を登録しようと思ったけど、
手元に秘密鍵しかなくて困った時のメモ。</p>

<!-- More -->


<p>ssh-keygenを使うとできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 秘密鍵を読み込んで公開鍵を出力する</span>
</span><span class='line'>ssh-keygen -y -f ~/.ssh/id_rsa
</span></code></pre></td></tr></table></div></figure>


<p>この公開鍵って登録したっけ？
ってときには以下のコマンドでフィンガープリントを確認できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 公開鍵のフィンガープリントを取得する</span>
</span><span class='line'>ssh-keygen -l -f ~/.ssh/id_rsa.pub
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPC::Asia 2014 に行ってきた #yapcasia]]></title>
    <link href="http://shogo82148.github.io/blog/2014/08/31/yapcasia/"/>
    <updated>2014-08-31T16:02:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/08/31/yapcasia</id>
    <content type="html"><![CDATA[<p><a href="http://yapcasia.org/2014/">YAPC::Asia 2014</a> に参加してきました。
「ブログに書くまでがYAPC」らしいので、メモ書き。</p>

<!-- More -->


<h2>見たトーク</h2>

<ul>
<li><a href="http://yapcasia.org/2014/talk/show/103a434e-ec02-11e3-bd6d-c7a06aeab6a4">Perl meets Real World 〜ハードウェアと恋に落ちるPerlの使い方〜</a>

<ul>
<li>デモ中のURLが「localhost」になってたんであれ？って思ったんですが、WebサーバはPC上にあったんですね。RaspberryPi上でPerl動くんじゃなかったんですか！</li>
<li>ネギ振りミククラウド化するって言ってたんで期待してます</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2014/talk/show/2276d7b2-eba7-11e3-bd6d-c7a06aeab6a4">Go For Perl Mongers</a></li>
<li><a href="http://yapcasia.org/2014/talk/show/66c55626-eba9-11e3-bd6d-c7a06aeab6a4">お待たせしました。Perl で BDD を簡単に実践する最高にクールなフレームワークができました</a></li>
<li><a href="http://yapcasia.org/2014/talk/show/3c896370-01de-11e4-9357-07b16aeab6a4">DBIx::Class - what is it and what is it good for?</a>

<ul>
<li><a href="http://search.cpan.org/~ribasushi/DBIx-Class-0.08270/lib/DBIx/Class/ResultClass/HashRefInflator.pm">HashRefInflator</a>の存在を初めて知りました</li>
<li>今関わってるプロジェクトでDBICのRowObject生成コストが問題になってるんで、後で試してみたいです</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2014/talk/show/d557ddbe-fde4-11e3-b7e8-e4a96aeab6a4">Scala In Perl Company : Hatena</a></li>
<li><a href="http://yapcasia.org/2014/talk/show/e495bc1a-f30d-11e3-b7e8-e4a96aeab6a4">WHERE狙いのキー、ORDER BY狙いのキー</a></li>
<li><a href="http://yapcasia.org/2014/talk/show/e35ec49a-ebba-11e3-bd6d-c7a06aeab6a4">Get a kick out of CPAN</a></li>
<li><p><a href="http://yapcasia.org/2014/talk/show/61b78258-026f-11e4-9357-07b16aeab6a4">初心者が Web エンジニアのコミュニティに触れてみて感じたこと - ゆとりエンジニアの成長戦略</a></p></li>
<li><p><a href="http://yapcasia.org/2014/talk/show/d1eb4942-fdb5-11e3-b7e8-e4a96aeab6a4">突然ITインフラを任された人のための…監視設計入門</a></p></li>
<li><a href="http://yapcasia.org/2014/talk/show/a02d05e6-fead-11e3-b7e8-e4a96aeab6a4">半端なPHPDisでPHPerに陰で笑われないためのPerl Monger向け最新PHP事情(5.6対応)</a>

<ul>
<li>MacにはPHPが最初から入ってるらしいですよ</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2014/talk/show/77109da0-00b8-11e4-b7e8-e4a96aeab6a4">モバイルアプリとAPIのありかたを考える2014</a></li>
<li><a href="http://yapcasia.org/2014/talk/show/3a5f2a0e-ec3e-11e3-bd6d-c7a06aeab6a4">Mobile Application Development for Perl Mongers [ninjinkun x gfx]</a>

<ul>
<li>シングルトンは嫌だシングルトンは嫌だ</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2014/talk/show/d5049940-ebb2-11e3-bd6d-c7a06aeab6a4">そんなにビッグでもないデータ処理手法の話</a>

<ul>
<li>一日分の解析ならなんとか一台で、でも一ヶ月分となると・・・ってことが多いんでもうちょっと調査して、どれかに手を出してみようかな・・・</li>
</ul>
</li>
<li>typester先生のキーノート

<ul>
<li>28才で結婚・・・あと2年・・・20代・・・あと4年・・・(´；ω；｀)ｳｯ…</li>
</ul>
</li>
</ul>


<h2>全体を通して</h2>

<p>僕が見たトークは全体からしたらほんの一部ですが、それでも一覧にすると結構見てるな。
貧乏症なんで、こういうイベント参加するとトークたくさん見ないといけない気持ちになっちゃうんです。
のんびり人と話すのもいいってことは分かるんですけどね。</p>

<p>去年も感じましたが、参加人数に対して会場が狭く、立ち見が多くて大変でした。
特に今年は去年より参加者多かったみたいですし、余計にそう感じたかも。
あと移動時間がほとんどないのもつらい。</p>

<p>NSD(Nagaoka Developers Study)のメンバーや、元同僚も多く参加していて、なんだか同窓会みたいな感じでしたね。
ただ、やっぱり、全く知らない人には話しかけづらい(´・ω・｀)
来年やるようだったら何かトークしたいなと思った２日間でした。</p>

<h2>最後に一番言いたいこと</h2>

<p>Twitterのほうでは騒いでましたが、先日Mac Book Airにアクエリアスを飲ませてダメにするという悲しい事故が・・・。
このブログOctopressで書いてるんで、
ローカルの環境がなくなって再構築面倒だったり、
pushし忘れてて一部記事がなかったり、
非常に面倒でした。</p>

<p>みなさんもアクエリアスの扱いには注意しましょう・・・(ヽ´ω`)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PerlのXS中に起きたシグナルの扱い]]></title>
    <link href="http://shogo82148.github.io/blog/2014/07/05/signal-in-xs/"/>
    <updated>2014-07-05T11:56:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/07/05/signal-in-xs</id>
    <content type="html"><![CDATA[<p><a href="https://metacpan.org/pod/Redis::Fast">Redis::Fast</a> にIssueが来ていたので、
それに関して調査したお話です。</p>

<ul>
<li>接続タイムアウトすると double free check に引っかかる</li>
<li><code>brpop</code> みたいな長時間ブロックするコマンド中にシグナルが入ると、最初の1回が無視される</li>
</ul>


<p>前者はC言語つらいって話で頑張って double free になる条件を探せばいいんですが、
後者はシグナル時のPerlやPOSIX APIの挙動を知らなくと解決できなそう。
そういうわけで、主に後者について調べた結果をまとめておきます。</p>

<!-- More -->


<h2>PERL_ASYNC_CHECKってXS中から呼んでもいいの？</h2>

<p>言いたいことは最初に書いとけって偉い人に言われたので、最初にこの記事の結論を。
「よしななタイミングでPERL_ASYNC_CHECKを呼べばいいっぽい」みたいです。
でも、 <strong> 「PERL_ASYNC_CHECKってXS中から呼んでもいいの？」 </strong> という点に確証が持ててないので、
識者のご意見を募集してます！</p>

<h2>selectの挙動を調べる</h2>

<p>Redis::FastはRedisからのレスポンスを待つのにLinuxのselect apiを叩いてます。
ファイルとかが読み書き可能になるまで処理をブロックしてくれるいいやつです。
しかし、select が処理をブロックしている間にシグナルを受信すると、うまく処理ができてないらしい。
そこで割り込み発生時の挙動を確認してみます。</p>

<p>困った時の<a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man2/select.2.html">manページ(select)</a>
をちゃんと読めば書いてありますね。</p>

<blockquote><p>エラーならば -1 を返し、 errno にエラーを示す値が設定される;</p>

<p>EINTR
シグナルを受信した。</p></blockquote>

<p>Redis::Fastは<code>errno</code>を特に確認せず、とにかくエラーが発生したらリトライになってたのでダメだったみたいです。
通信にエラーが起きたわけではないので、再接続処理とかみたいな複雑なリトライ処理は必要なく、
単にもう一度selectしなおせば良さそうです。</p>

<h2>Perlさんのシグナル処理のタイミング</h2>

<p>「割り込みかかったら再度select」っていうふうに修正してみたんですが、
今度はPerlのシグナルハンドラがなかなか呼び出されない！！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">Fast</span><span class="p">;</span>
</span><span class='line'><span class="nv">$SIG</span><span class="p">{</span><span class="n">TERM</span><span class="p">}</span><span class="o">=</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>    <span class="nb">warn</span> <span class="s">&quot;TERM handler called&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$c</span> <span class="o">=-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">reconnect</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">,</span> <span class="n">every</span> <span class="o">=&gt;</span> <span class="mi">100</span><span class="p">,</span> <span class="n">server</span> <span class="o">=&gt;</span> <span class="s">&quot;localhost:6379&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$c</span><span class="o">-&gt;</span><span class="n">brpop</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span> <span class="c1"># 100秒経ったら諦めて戻ってくる</span>
</span></code></pre></td></tr></table></div></figure>


<p>このコードを実行中にSIGTERMを送ると、送った瞬間に&#8221;TERM handler called&#8221;と表示されて欲しいのですが、
<code>brpop</code>コマンドが終わるまで実行されない……</p>

<p>ググってみるとPerlはシグナルハンドラを即座に処理しているのではなく、
シグナルハンドラを安全に実行できるタイミングを見計らって実行しているみたいです。</p>

<ul>
<li><a href="http://perl-users.jp/articles/advent-calendar/2009/data-model/03.html">Q4M を使ってる時のシグナル処理に注意</a></li>
</ul>


<p>この記事では「Low Levelなシグナルハンドラを使おう」っていうことになってますが、できることならライブラリ側で対応したい。
安全にシグナルハンドラを実行できるタイミングで<code>PERL_ASYNC_CHECK</code>を呼び出しているので、
XS中でもこいつを呼べばできるのでは！ってことでやってみたら動いてるっぽい……？</p>

<p>ただDBIでもシグナルの扱いに同様の問題があるらしく、
これで解決するならDBIが解決してるよな・・・何か罠があるんだろうか。不安だ・・・。</p>

<h2>まとめ</h2>

<ul>
<li>selectはシグナルを受信するとエラーを返すので、<code>errno</code> をみて適切に扱うこと</li>
<li>Perlはシグナルハンドラを安全に実行できるタイミングでしか実行しない</li>
<li><code>PERL_ASYNC_CHECK</code>を使えば解決しそうだけど、どこからか椅子が飛んでくるんじゃないだろうか怖い</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IRCに癒やしボットを入れてみた]]></title>
    <link href="http://shogo82148.github.io/blog/2014/06/04/irc-healing-bot/"/>
    <updated>2014-06-04T07:37:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/06/04/irc-healing-bot</id>
    <content type="html"><![CDATA[<p>別チームがIRCに癒やしボットを入れてたので、自分のチームのチャンネルにも入れてみた。</p>

<!-- More -->


<h2>Instagramに登録する</h2>

<p><a href="http://instagram.com/developer/">InstagramのDeveloperサイト</a>に開発者として登録します。
<a href="http://instagram.com/developer/authentication/">Authentication</a>
のページを見ながら、Server-side (Explicit) Flow を参考にアクセストークンを取得します。</p>

<h2>Instagram APIを叩く</h2>

<p><code>https://api.instagram.com/v1/tags/$TAGNAME/media/recent?access_token=YOUR_ACCESS_TOKEN</code>を叩くと
TAGNAMEに関連する画像の情報がJSONで帰ってくるので、
Perlからこのエンドポイントを叩きます。
IRCとのやりとりには<a href="http://www.songmu.jp/riji/entry/2013-09-09-unazusan.html">UnazuSan</a>を使いました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="o">!</span><span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">perl</span>
</span><span class='line'><span class="k">use</span> <span class="mf">5.014</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">Encode</span> <span class="sx">qw/encode_utf8/</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">Furl</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">JSON</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">UnazuSan</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">neko</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">state</span> <span class="nv">$data</span> <span class="o">=</span> <span class="nb">undef</span><span class="p">;</span>
</span><span class='line'>    <span class="n">state</span> <span class="nv">$time</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nv">$data</span> <span class="o">||</span> <span class="nb">time</span> <span class="o">-</span> <span class="nv">$time</span> <span class="o">&gt;</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$time</span> <span class="o">=</span> <span class="nb">time</span><span class="p">;</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$furl</span> <span class="o">=</span> <span class="n">Furl</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$res</span> <span class="o">=</span> <span class="nv">$furl</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;https://api.instagram.com/v1/tags/%E7%8C%AB/media/recent?access_token=YOUR_ACCESS_TOKEN&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$hash</span> <span class="o">=</span> <span class="nn">JSON::</span><span class="n">decode_json</span><span class="p">(</span><span class="nv">$res</span><span class="o">-&gt;</span><span class="n">content</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$hash</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$media</span> <span class="o">=</span> <span class="nv">$data</span><span class="o">-&gt;</span><span class="p">[</span><span class="nb">rand</span><span class="p">(</span><span class="nb">scalar</span> <span class="nv">@$data</span><span class="p">)];</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$media</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">images</span><span class="p">}{</span><span class="n">standard_resolution</span><span class="p">}{</span><span class="n">url</span><span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$unazu_san</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$NICKNAME</span> <span class="o">=</span> <span class="s">&#39;iyashi&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$unazu_san</span> <span class="o">=</span> <span class="n">UnazuSan</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span>
</span><span class='line'>    <span class="n">host</span>       <span class="o">=&gt;</span> <span class="s">&#39;127.0.0.1&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">enable_ssl</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">join_channels</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s">&#39;#test&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="n">respond_all</span>   <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">nickname</span>      <span class="o">=&gt;</span> <span class="nv">$NICKNAME</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$unazu_san</span><span class="o">-&gt;</span><span class="n">on_message</span><span class="p">(</span>
</span><span class='line'>    <span class="sx">qr/^\s+$NICKNAME:/</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$receive</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$receive</span><span class="o">-&gt;</span><span class="n">reply</span><span class="p">(</span><span class="s">&#39;うんうん&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="sx">qr/(.*)/</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="p">(</span><span class="nv">$receive</span><span class="p">,</span> <span class="nv">$match</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>        <span class="n">say</span> <span class="nv">$match</span><span class="p">;</span>
</span><span class='line'>        <span class="n">say</span> <span class="nv">$receive</span><span class="o">-&gt;</span><span class="n">message</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$unazu_san</span><span class="o">-&gt;</span><span class="n">on_command</span><span class="p">(</span>
</span><span class='line'>   <span class="s">&#39; 癒やし&#39;</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="p">(</span><span class="nv">$receive</span><span class="p">,</span> <span class="nv">@args</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$receive</span><span class="o">-&gt;</span><span class="n">reply</span><span class="p">(</span><span class="n">neko</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$unazu_san</span><span class="o">-&gt;</span><span class="n">run</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>「癒して」と話しかけると猫画像を検索して返してくれます。</p>

<h2>引数をMeCabで解析する</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>acidlemon unazu_san: 癒やしをうさぎで頼む
</span><span class='line'>acidlemon ネコやん! ('-'#)</span></code></pre></td></tr></table></div></figure>


<p>みたいなことがあったので、「癒して」のあとも見ることにしました。
MeCabを使って名詞っぽいものを抽出して、タグ名に使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">state</span> <span class="nv">$mecab</span> <span class="o">=</span> <span class="nn">Text::</span><span class="n">MeCab</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$n</span> <span class="o">=</span> <span class="nv">$mecab</span><span class="o">-&gt;</span><span class="n">parse</span><span class="p">(</span><span class="nb">join</span> <span class="s">&#39; &#39;</span><span class="p">,</span> <span class="nv">@_</span><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$keyword</span> <span class="o">=</span> <span class="nb">undef</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$f</span> <span class="o">=</span> <span class="n">decode_utf8</span> <span class="nv">$n</span><span class="o">-&gt;</span><span class="n">feature</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$keyword</span> <span class="sr">//</span><span class="o">=</span> <span class="n">decode_utf8</span><span class="p">(</span><span class="nv">$n</span><span class="o">-&gt;</span><span class="n">surface</span><span class="p">)</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$f</span> <span class="o">=~</span><span class="sr"> /^名詞,/</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">$f</span> <span class="o">!~</span> <span class="sr">/^名詞,代名詞,/</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$n</span> <span class="o">=</span> <span class="nv">$n</span><span class="o">-&gt;</span><span class="k">next</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$keyword</span> <span class="sr">//</span><span class="o">=</span> <span class="s">&#39;猫&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$word</span> <span class="o">=</span> <span class="n">uri_escape_utf8</span><span class="p">(</span><span class="nv">$keyword</span><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$res</span> <span class="o">=</span> <span class="nv">$furl</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;https://api.instagram.com/v1/tags/$word/media/recent?access_token=ACCESS_TOKEN&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで癒やしをうさぎで頼まれてもウサギ画像を返せるようになりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[キレイになったコトバとハートを元に戻すツール作った]]></title>
    <link href="http://shogo82148.github.io/blog/2014/06/01/anti-sizukatter/"/>
    <updated>2014-06-01T00:24:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/06/01/anti-sizukatter</id>
    <content type="html"><![CDATA[<p>現実世界にご満足の方消えてなくなってほしいの！！！</p>

<p><a href="http://www.toyotown.jp/sizukatter/">しずかったー</a>を使うと個性あふれるコトバを使ってもキレイにしてくれるので
とっても便利ですね！
でも、本当は何を言っているのか真意を知りたい・・・。</p>

<p>そんな人のために、キレイになったコトバとハートを元に戻す
<a href="http://shogo82148.github.io/anti-sizukatter/">アンチしずかったー</a>
を作りました。</p>

<!-- More -->


<h2>仕組み</h2>

<p>しずかったーは単純な文字列置換で動いているみたいなので、
対応表を頑張って作りました。
それを<a href="http://mecab.googlecode.com/svn/trunk/mecab/doc/index.html">MeCab</a>用の辞書に変換し、
<a href="http://igo.sourceforge.jp/">Igo</a>を使ってバイナリ辞書に変換、
<a href="https://github.com/shogo82148/igo-javascript">igo-javascript</a>でブラ失礼しちゃう上で解析できるようにしました。</p>

<h2>既知の問題点</h2>

<p>しずかったー前後の文脈関係なく変換しちゃうので、
同音異義語は元に戻らないことがあります。
特にひらがな・カタカナは失敗することが多いです。(「（お昼寝したい）ふわふわ」だとか「ブラ失礼しちゃう」だとか)</p>

<p>あと、マシュマロ的な内緒の言葉はさすがのしずかちゃんでも代替表現が思いつかなかったらしく、
全部ハートになってしまいます。
元に戻せと言う方が頑張ればなんとかできそうなので期待しないでく時代が変わればかっこいい。</p>

<h2>まとめ</h2>

<p>またおもしろいものを作ってしまいましたが、
igo-javascriptのバグを発見できたりしたので、いいのです。</p>

<p>自宅警備員でお時間ある方の皆様、天才だと思ったらぜひおしゃべり広場や「いいね！」広場で共有をお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C#のconditional Attributeのコンパイル結果を見てみる]]></title>
    <link href="http://shogo82148.github.io/blog/2014/05/29/conditional-attribute/"/>
    <updated>2014-05-29T19:20:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/05/29/conditional-attribute</id>
    <content type="html"><![CDATA[<p>C#で「ある環境では関数の定義ごと消したい」みたいな要件があって、
そういう用途にconditinal attributeが使えるのかなーと話題のあがったので、実際に確認してみました。</p>

<p>結論から言えばできないのですが、せっかく調べたのでメモとして残しておきます。</p>

<!-- More -->


<h2>conditional attribute</h2>

<p>「デバッグ時のみにしか実行して欲しくない関数」みたいなものを定義するための機能です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Diagnostics</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">ConditionalAttributeTest</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">MainClass</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span> <span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="p">(</span><span class="s">&quot;fugu&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">        [ConditionalAttribute(&quot;DEBUG&quot;)]</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Log</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんなふうに書いておくと <code>DEBUG</code> シンボルが定義されている時にだけ<code>Log</code>の呼び出しが行われます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; mcs -d:DEBUG ConditionalAttributeTest.cs
</span><span class='line'>&gt; mono ConditionalAttributeTest
</span><span class='line'>fugu
</span><span class='line'>&gt; mcs ConditionalAttributeTest.cs
</span><span class='line'>&gt; mono ConditionalAttributeTest
</span></code></pre></td></tr></table></div></figure>


<h2>逆アセンブルしてみる</h2>

<p>DEBUG付きでコンパイルした結果を逆アセンブルしてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ...前略
</span><span class='line'>// method line 2
</span><span class='line'>.method public static hidebysig
</span><span class='line'>    default void Main (string[] args)  cil managed
</span><span class='line'>{
</span><span class='line'>    // Method begins at RVA 0x2058
</span><span class='line'>    .entrypoint
</span><span class='line'>    // Code size 11 (0xb)
</span><span class='line'>    .maxstack 8
</span><span class='line'>    IL_0000:  ldstr "fugu"
</span><span class='line'>    IL_0005:  call void class ConditionalAttributeTest.MainClass::Log(string)
</span><span class='line'>    IL_000a:  ret
</span><span class='line'>} // end of method MainClass::Main
</span><span class='line'>
</span><span class='line'>// method line 3
</span><span class='line'>.method public static hidebysig
</span><span class='line'>    default void Log (string message)  cil managed
</span><span class='line'>{
</span><span class='line'>    .custom instance void class [mscorlib]System.Diagnostics.ConditionalAttribute::'.ctor'(string) =  (01 00 05 44 45 42 55 47 00 00 ) // ...DEBUG..
</span><span class='line'>
</span><span class='line'>    // Method begins at RVA 0x2064
</span><span class='line'>    // Code size 7 (0x7)
</span><span class='line'>    .maxstack 8
</span><span class='line'>    IL_0000:  ldarg.0
</span><span class='line'>    IL_0001:  call void class [mscorlib]System.Console::WriteLine(string)
</span><span class='line'>    IL_0006:  ret
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>DEBUGを付けなかったときとのDIFFをとってみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>15c15
</span><span class='line'>&lt; .module ConditionalAttributeTest.exe // GUID = {A54F3644-5083-4EC7-B846-8A354DD113AA}
</span><span class='line'><span class="gd">---</span>
</span><span class='line'>&gt; .module ConditionalAttributeTest.exe // GUID = {436FE462-17D6-4FDB-9AA7-15DA92658168}
</span><span class='line'>42c42
</span><span class='line'>&lt;  // Code size 11 (0xb)
</span><span class='line'><span class="gd">---</span>
</span><span class='line'>&gt;  // Code size 1 (0x1)
</span><span class='line'>44,46c44
</span><span class='line'>&lt;  IL_0000:  ldstr &quot;fugu&quot;
</span><span class='line'>&lt;  IL_0005:  call void class ConditionalAttributeTest.MainClass::Log(string)
</span><span class='line'>&lt;  IL_000a:  ret
</span><span class='line'><span class="gd">---</span>
</span><span class='line'>&gt;  IL_0000:  ret
</span><span class='line'>55c53
</span><span class='line'>&lt;         // Method begins at RVA 0x2064
</span><span class='line'><span class="gd">---</span>
</span><span class='line'>&gt;         // Method begins at RVA 0x205a
</span></code></pre></td></tr></table></div></figure>


<p>変わったのは呼び出し側であるmain関数だけで、ConditionalAttributeがついたメソッド自体はDEBUGの有無に関係なく同じコードが吐かれます。</p>

<h2>SEE ALSO</h2>

<p>例によってこのことはドキュメントにバッチリ載っております。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/system.diagnostics.conditionalattribute.aspx">ConditionalAttribute クラス</a></li>
</ul>


<blockquote><p>指定した条件付きコンパイルのシンボルが定義されていない限り、メソッド呼び出しまたは属性を無視するようにコンパイラに指示します。</p></blockquote>

<p>ドキュメントには「呼び出しを無視する」としか書かれてないので、定義がなくなるわけではないですね。
そもそも関数定義がなくなったら、リンク時に Conditional Attribute があるかないか確認する方法がないじゃないですか・・・。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初期化なしのusing文ってOK？]]></title>
    <link href="http://shogo82148.github.io/blog/2014/05/27/using-statement-without-instantiating/"/>
    <updated>2014-05-27T13:48:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/05/27/using-statement-without-instantiating</id>
    <content type="html"><![CDATA[<p>C# の using ステートメント、普通は変数の初期化とか new とかをまとめてやるものだと思ってたんですが、
某プロジェクトでusing文をこんな感じで使っているのを見かけました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">hoge</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Hoge</span><span class="p">();</span>
</span><span class='line'><span class="n">using</span><span class="p">(</span><span class="n">hoge</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// using( var hoge = new Hoge() ) { ならよく見る</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>見慣れない書き方だったので、本当にリソース解放が行われているのか不安・・・。
リソース解放が行われているのか調べてみました。</p>

<!-- More -->


<h2>まずは結論</h2>

<ul>
<li>リソース解放自体は行われているので、ちゃんと書いてあれば問題なし</li>
<li>しかしエラーをコンパイル時に見つけられない場合があるので非推奨</li>
</ul>


<h2>逆アセンブルして調べてみた</h2>

<p>コンパイル結果見ればちゃんとリソース解放されているかわかるよね！
ってことでバイナリを逆アセンブルして調べてみました。</p>

<h3>サンプルコード</h3>

<p>検証に使ったのはこんなコード。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">UsingTest</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">MainClass</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span> <span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">sr</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamReader</span> <span class="p">(</span><span class="s">&quot;hoge.txt&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="s">&quot;Hoge: {0}&quot;</span><span class="p">,</span> <span class="n">sr</span><span class="p">.</span><span class="n">ReadLine</span> <span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>僕はMac使いに転向したので、Monoを使います。
<code>mcs</code>を使ってコンパイル、<code>monodis</code> ってのを使うとILを見れるらしいです。
Windowsだったら .NET Framework SDK に <code>ildasm</code> ってのが付属してるので、それで見れるはず。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mcs UsingTest.cs
</span><span class='line'>monodis UsingTest.exe
</span></code></pre></td></tr></table></div></figure>


<p>標準出力にILが吐かれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.assembly extern mscorlib
</span><span class='line'>// ... 中略 ...
</span><span class='line'>.namespace UsingTest
</span><span class='line'>{
</span><span class='line'>  .class private auto ansi beforefieldinit MainClass
</span><span class='line'>       extends [mscorlib]System.Object
</span><span class='line'>  {
</span><span class='line'>
</span><span class='line'>    // method line 1
</span><span class='line'>    .method public hidebysig specialname rtspecialname
</span><span class='line'>           instance default void '.ctor' ()  cil managed
</span><span class='line'>    {
</span><span class='line'>        // Method begins at RVA 0x2050
</span><span class='line'>  // Code size 7 (0x7)
</span><span class='line'>  .maxstack 8
</span><span class='line'>  IL_0000:  ldarg.0
</span><span class='line'>  IL_0001:  call instance void object::'.ctor'()
</span><span class='line'>  IL_0006:  ret
</span><span class='line'>    } // end of method MainClass::.ctor
</span><span class='line'>
</span><span class='line'>    // method line 2
</span><span class='line'>    .method public static hidebysig
</span><span class='line'>           default void Main (string[] args)  cil managed
</span><span class='line'>    {
</span><span class='line'>        // Method begins at RVA 0x2058
</span><span class='line'>  .entrypoint
</span><span class='line'>  // Code size 29 (0x1d)
</span><span class='line'>  .maxstack 2
</span><span class='line'>  .locals init (
</span><span class='line'>      class [mscorlib]System.IO.StreamReader  V_0)
</span><span class='line'>      IL_0000:  nop
</span><span class='line'>      IL_0001:  ldstr "hoge.txt"
</span><span class='line'>      IL_0006:  newobj instance void class [mscorlib]System.IO.StreamReader::'.ctor'(string)
</span><span class='line'>      IL_000b:  stloc.0
</span><span class='line'>      IL_000c:  ldstr "Hoge: {0}"
</span><span class='line'>      IL_0011:  ldloc.0
</span><span class='line'>      IL_0012:  callvirt instance string class [mscorlib]System.IO.TextReader::ReadLine()
</span><span class='line'>      IL_0017:  call void class [mscorlib]System.Console::WriteLine(string, object)
</span><span class='line'>      IL_001c:  ret
</span><span class='line'>    } // end of method MainClass::Main
</span><span class='line'>
</span><span class='line'>  } // end of class UsingTest.MainClass
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Disposeが呼ばれてない！
リソース解放されてないぞ！！</p>

<h3>usingと一緒に初期化してみる</h3>

<p>usingステートメントを使って解放処理をしてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">sr</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamReader</span> <span class="p">(</span><span class="s">&quot;hoge.txt&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="s">&quot;Hoge: {0}&quot;</span><span class="p">,</span> <span class="n">sr</span><span class="p">.</span><span class="n">ReadLine</span> <span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Code size 49 (0x31)
</span><span class='line'>.maxstack 2
</span><span class='line'>.locals init (
</span><span class='line'>    class [mscorlib]System.IO.StreamReader    V_0)
</span><span class='line'>IL_0000:  nop
</span><span class='line'>IL_0001:  ldstr "hoge.txt"
</span><span class='line'>IL_0006:  newobj instance void class [mscorlib]System.IO.StreamReader::'.ctor'(string)
</span><span class='line'>IL_000b:  stloc.0
</span><span class='line'>.try { // 0
</span><span class='line'>  L_000c:  nop
</span><span class='line'>  IL_000d:  ldstr "Hoge: {0}"
</span><span class='line'>  IL_0012:  ldloc.0
</span><span class='line'>  IL_0013:  callvirt instance string class [mscorlib]System.IO.TextReader::ReadLine()
</span><span class='line'>  IL_0018:  call void class [mscorlib]System.Console::WriteLine(string, object)
</span><span class='line'>  IL_001d:  nop
</span><span class='line'>  IL_001e:  leave IL_0030
</span><span class='line'>
</span><span class='line'>} // end .try 0
</span><span class='line'>finally { // 0
</span><span class='line'>  IL_0023:  ldloc.0
</span><span class='line'>  IL_0024:  brfalse IL_002f
</span><span class='line'>
</span><span class='line'>  IL_0029:  ldloc.0
</span><span class='line'>  IL_002a:  callvirt instance void class [mscorlib]System.IDisposable::Dispose()
</span><span class='line'>  IL_002f:  endfinally
</span><span class='line'>} // end handler 0
</span><span class='line'>IL_0030:  ret
</span><span class='line'>} // end of method MainClass::Main</span></code></pre></td></tr></table></div></figure>


<p>自動的に try-finall節が作られ、その中でDisposeが呼ばれています。(たぶん。ILよくわかんないけど)</p>

<h3>usingでは初期化しない</h3>

<p>次にusingの外で初期化</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">sr</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamReader</span> <span class="p">(</span><span class="s">&quot;hoge.txt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">using</span> <span class="p">(</span><span class="n">sr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="s">&quot;Hoge: {0}&quot;</span><span class="p">,</span> <span class="n">sr</span><span class="p">.</span><span class="n">ReadLine</span> <span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Code size 51 (0x33)
</span><span class='line'>.locals init (
</span><span class='line'>    class [mscorlib]System.IO.StreamReader V_0,
</span><span class='line'>    class [mscorlib]System.IO.StreamReader V_1)
</span><span class='line'>IL_0000:  nop
</span><span class='line'>IL_0001:  ldstr "hoge.txt"
</span><span class='line'>IL_0006:  newobj instance void class [mscorlib]System.IO.StreamReader::'.ctor'(string)
</span><span class='line'>IL_000b:  stloc.0
</span><span class='line'>IL_000c:  ldloc.0
</span><span class='line'>IL_000d:  stloc.1
</span><span class='line'>.try { // 0
</span><span class='line'>  IL_000e:  nop
</span><span class='line'>  IL_000f:  ldstr "Hoge: {0}"
</span><span class='line'>  IL_0014:  ldloc.0
</span><span class='line'>  IL_0015:  callvirt instance string class [mscorlib]System.IO.TextReader::ReadLine()
</span><span class='line'>  IL_001a:  call void class [mscorlib]System.Console::WriteLine(string, object)
</span><span class='line'>  IL_001f:  nop
</span><span class='line'>  IL_0020:  leave IL_0032
</span><span class='line'>
</span><span class='line'>} // end .try 0
</span><span class='line'>finally  { // 0
</span><span class='line'>  IL_0025:  ldloc.1
</span><span class='line'>  IL_0026:  brfalse IL_0031
</span><span class='line'>
</span><span class='line'>  IL_002b:  ldloc.1
</span><span class='line'>  IL_002c:  callvirt instance void class [mscorlib]System.IDisposable::Dispose()
</span><span class='line'>  IL_0031:  endfinally
</span><span class='line'>} // end handler 0
</span><span class='line'>IL_0032:  ret</span></code></pre></td></tr></table></div></figure>


<p>お、ちゃんとDispose呼ばれてるみたい！
リソース解放はされてますね。</p>

<p>上のILをよく見ると、ローカル変数が２つ定義されています。
どうやらusingの中と外では同じ<code>sr</code>を指定しても別変数として扱われているようです。
そのためにコピーするコードが追加されているので、コードサイズが2byteほど増えてます。</p>

<h3>ブロックの外でインタンスを使う</h3>

<p><code>sr</code> のスコープは<code>Main</code>メソッドの中全体なので、usingのあとに<code>sr</code> をいじってもコンパイルは通ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">sr</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamReader</span> <span class="p">(</span><span class="s">&quot;hoge.txt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">using</span> <span class="p">(</span><span class="n">sr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="s">&quot;Hoge: {0}&quot;</span><span class="p">,</span> <span class="n">sr</span><span class="p">.</span><span class="n">ReadLine</span> <span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="s">&quot;Hoge: {0}&quot;</span><span class="p">,</span> <span class="n">sr</span><span class="p">.</span><span class="n">ReadLine</span> <span class="p">());</span> <span class="c1">// 例外を吐いて死ぬ</span>
</span></code></pre></td></tr></table></div></figure>


<p>しかし、最後の行で例外を吐いて死にます。
使えるけど使うと死ぬインスタンスが残ってるの気持ち悪いですね・・・。</p>

<h2>再び結論</h2>

<p>ちゃんと Dispose は呼ばれるので、usingを抜けたところでリソース解放は行われます。
(たった2byteだけど)意味の無いILが生成されたり、コンパイル時のチェックがされなかったり、
あんまりいいことが無いので積極的に使う理由はないですね。</p>

<h2>SEE ALSO</h2>

<p>ちゃんとドキュメントに書いてあった。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/yh598w02.aspx">using ステートメント (C# リファレンス)</a></li>
</ul>


<blockquote><p>リソース オブジェクトをインスタンス化して、変数を using ステートメントに渡すことは可能ですが、これはベスト プラクティスではありません。
You can instantiate the resource object and then pass the variable to the using statement, but this is not a best practice.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# でお手軽にMessagePack解析！]]></title>
    <link href="http://shogo82148.github.io/blog/2014/05/25/mini-message-pack/"/>
    <updated>2014-05-25T01:38:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/05/25/mini-message-pack</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/shogo82148/MiniMessagePack">MiniMessagePack.cs</a>ってのを作った。
C#のプロジェクトにファイルひとつ導入するだけで、お手軽にMessagePackの解析ができます。</p>

<!-- More -->


<h2>なんで作ったの？</h2>

<p><a href="https://gist.github.com/darktable/1411710">MiniJSON</a> の置き換えが目的です。
とあるUnityプロジェクトでMB単位のJSONをパースする箇所があってですね・・・
パースにはMiniJSONを使っているのですが、さすがに対象がでかすぎて重たい。
そこでMessagePackへの置き換えを検討してみたわけです。</p>

<p>もちろん C# で動く MessagePack のパーサはすでにあって、
<a href="https://github.com/msgpack/msgpack-cli">messagepack-cli</a>とか<a href="https://github.com/southwudang/msgpack-unity">messagepack-unity</a>とか見つけました。
しかし、Unityのちょっと古いMonoで動かすためにちょっとゴニョゴニョしないといけなかったり、
MiniJSON との互換性を取るためにもゴニョゴニョしないといけなかったり(実際やってみたらキャストが大量に失敗して辛かった・・・)、
今回の用途にはちょっと高機能かなーと思ったので作っちゃいました！</p>

<h2>つかいかた</h2>

<h3>デコードする</h3>

<p><code>byte</code>の配列を渡すとパースして返してくれます。
配列は<code>List&lt;object&gt;</code>で、マップは<code>Dictionary&lt;string, object&gt;</code>になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">MiniMessagePack</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// it means {&quot;compact&quot;:true,&quot;schema&quot;:0} in JSON</span>
</span><span class='line'><span class="kt">var</span> <span class="n">msgpack</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="p">[]</span> <span class="p">{</span>
</span><span class='line'>    <span class="m">0</span><span class="n">x82</span><span class="p">,</span> <span class="m">0</span><span class="n">xa7</span><span class="p">,</span> <span class="m">0</span><span class="n">x63</span><span class="p">,</span> <span class="m">0</span><span class="n">x6f</span><span class="p">,</span> <span class="m">0</span><span class="n">x6d</span><span class="p">,</span> <span class="m">0</span><span class="n">x70</span><span class="p">,</span> <span class="m">0</span><span class="n">x61</span><span class="p">,</span> <span class="m">0</span><span class="n">x63</span><span class="p">,</span> <span class="m">0</span><span class="n">x74</span><span class="p">,</span> <span class="m">0</span><span class="n">xc3</span><span class="p">,</span>
</span><span class='line'>  <span class="m">0</span><span class="n">xa6</span><span class="p">,</span> <span class="m">0</span><span class="n">x73</span><span class="p">,</span> <span class="m">0</span><span class="n">x63</span><span class="p">,</span> <span class="m">0</span><span class="n">x68</span><span class="p">,</span> <span class="m">0</span><span class="n">x65</span><span class="p">,</span> <span class="m">0</span><span class="n">x6d</span><span class="p">,</span> <span class="m">0</span><span class="n">x61</span><span class="p">,</span> <span class="m">0</span><span class="n">x00</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">packer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MiniMessagePacker</span> <span class="p">();</span>
</span><span class='line'><span class="kt">object</span> <span class="n">unpacked_data</span> <span class="p">=</span> <span class="n">packer</span><span class="p">.</span><span class="n">Unpack</span> <span class="p">(</span><span class="n">msgpack</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">unpacked_data = new Dictionary&lt;string, object&gt; {</span>
</span><span class='line'><span class="cm">    { &quot;compact&quot;, true },</span>
</span><span class='line'><span class="cm">    { &quot;schema&quot;, 0},</span>
</span><span class='line'><span class="cm">};</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h3>エンコードする</h3>

<p>オブジェクトを渡すと MessagePack にエンコードして返してくれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">MiniMessagePack</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">unpacked_data</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">{</span> <span class="s">&quot;compact&quot;</span><span class="p">,</span> <span class="k">true</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="s">&quot;schema&quot;</span><span class="p">,</span> <span class="m">0</span><span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">packer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MiniMessagePacker</span> <span class="p">();</span>
</span><span class='line'><span class="n">bytep</span><span class="p">[]</span> <span class="n">msgpack</span> <span class="p">=</span> <span class="n">packer</span><span class="p">.</span><span class="n">Pack</span> <span class="p">(</span><span class="n">unpacked_data</span><span class="p">);</span>
</span><span class='line'><span class="c1">// msgpack = new byte[] { 0x82, 0xa7, ...};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>制限事項</h2>

<p>MiniJSON との互換性を取るために、色々と制限事項があります。</p>

<ul>
<li>デコード時、整数型は全て<code>long</code>型

<ul>
<li>整数の大きさに関係なく全て<code>long</code>型になります</li>
<li>符号なし64bit整数型も<code>long</code>として扱われるので、表現できる範囲が狭くなっていることに注意してください</li>
</ul>
</li>
<li>デコード時、浮動小数点型は全て<code>double</code>型

<ul>
<li><code>float</code>も<code>double</code>として扱われます(拡張される方向への変換だから問題ないとは思うけど)</li>
</ul>
</li>
<li>デコード時、マップ型のキーは文字列にキャストされます

<ul>
<li>MessagePackの仕様にはキーの型に制限が無いっぽい(？)けど、扱えるのは文字列の場合のみです</li>
</ul>
</li>
<li>Extended は今のところ扱えません</li>
</ul>


<h2>ちょっとだけ使ってみた結果</h2>

<p>正確なベンチマークとかはとってないのですが、
実際のプロジェクトに組み込んでみた結果、MiniJSONとくらべて約2倍の速さでパースできました！</p>

<p>MiniJSON を使っているプロジェクトであれば簡単に導入できるはずなので、ぜひ試してみてみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[travis-ciでC++11のテストをする]]></title>
    <link href="http://shogo82148.github.io/blog/2014/05/22/use-cpp11-in-travis/"/>
    <updated>2014-05-22T23:34:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/05/22/use-cpp11-in-travis</id>
    <content type="html"><![CDATA[<p>今 C++ を書くなら C++11 だよね！と言うわけでC++11の新機能を使ってコードを書いたので、
<a href="https://travis-ci.org/">travis-cli</a>でテストしたらFAIL。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ g++ -std=gnu++0x hogehoge.cpp
</span><span class='line'>sorry, unimplemented: non-static data member initializers</span></code></pre></td></tr></table></div></figure>


<p>unimplemented・・・だと・・・。</p>

<p>頑張って動かしてみたのでメモ。</p>

<!-- More -->


<h2>autoconf の設定をする</h2>

<p>autotoolsを使っていたので、
C++11 に対応しているかのチェックを追加しておきます。</p>

<p><a href="https://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx_11.html">ax_cxx_compile_stdcxx_11.m4</a>をダウンロードし、
configure.ac でm4ファイルをダウンロードするようにしておきます。</p>

<figure class='code'><figcaption><span>configure.ac</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>m4_include([m4/ax_cxx_compile_stdcxx_11.m4])
</span><span class='line'>AX_CXX_COMPILE_STDCXX_11
</span><span class='line'>AC_LANG([C++])</span></code></pre></td></tr></table></div></figure>


<h2>travis.yaml を設定する</h2>

<p>ぐぐったら<a href="http://stackoverflow.com/questions/22111549/travis-ci-with-clang-3-4-and-c11">stackoverflowでやり方を見つけました</a>。
標準でテストに使われるコンパイラは古いようなので、新しいバージョンのものをインストールするように設定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>language: cpp
</span><span class='line'>
</span><span class='line'>compiler:
</span><span class='line'>  - clang
</span><span class='line'>  - gcc
</span><span class='line'>
</span><span class='line'>before_install:
</span><span class='line'>  # g++4.8.1
</span><span class='line'>  - if [ "$CXX" == "g++" ]; then sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test; fi
</span><span class='line'>
</span><span class='line'>  # clang 3.4
</span><span class='line'>  - if [ "$CXX" == "clang++" ]; then sudo add-apt-repository -y ppa:h-rayflood/llvm; fi
</span><span class='line'>
</span><span class='line'>  - sudo apt-get update -qq
</span><span class='line'>
</span><span class='line'>install:
</span><span class='line'>  # g++4.8.1
</span><span class='line'>  - if [ "$CXX" = "g++" ]; then sudo apt-get install -qq g++-4.8; fi
</span><span class='line'>  - if [ "$CXX" = "g++" ]; then export CXX="g++-4.8"; fi
</span><span class='line'>
</span><span class='line'>  # clang 3.4
</span><span class='line'>  - if [ "$CXX" == "clang++" ]; then sudo apt-get install --allow-unauthenticated -qq clang-3.4; fi
</span><span class='line'>  - if [ "$CXX" == "clang++" ]; then export CXX="clang++-3.4"; fi</span></code></pre></td></tr></table></div></figure>


<p>これで、clangとgccでテストが走るようになります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Test を使ってC++のテストしてみた]]></title>
    <link href="http://shogo82148.github.io/blog/2014/05/18/test-with-google-test/"/>
    <updated>2014-05-18T21:24:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/05/18/test-with-google-test</id>
    <content type="html"><![CDATA[<p>C++ なライブラリを書こうと思い、C++のテストってどうやるんだろうと調べたメモ。
テストフレームワークとして <a href="https://code.google.com/p/googletest/">Google C++ Testing Framework</a> を使用、
コンパイルにはautotoolを使ってtravis-ciでテストするところまでやってみました。</p>

<p>やってみた結果→
<a href="https://github.com/shogo82148/cpp-test">cpp-test</a></p>

<!-- More -->


<h2>Testを書く</h2>

<p>Google Test の<a href="http://opencv.jp/googletestdocs/primer.html">入門ガイド</a>に書いてあったテストをコピペしてきました。</p>

<figure class='code'><figcaption><span>test/factorial.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &quot;gtest/gtest.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">Factorial</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">TEST</span><span class="p">(</span><span class="n">FractionTest</span><span class="p">,</span> <span class="n">hoge</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">Factorial</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>    <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">Factorial</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>    <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="n">Factorial</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span>
</span><span class='line'>    <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="mi">40320</span><span class="p">,</span> <span class="n">Factorial</span><span class="p">(</span><span class="mi">8</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>テストの対象となる関数はこちら。</p>

<figure class='code'><figcaption><span>src/factorial.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// calculate 1 * 2 * 3 * ... * n</span>
</span><span class='line'><span class="kt">int</span> <span class="n">Factorial</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span> <span class="o">*</span> <span class="n">Factorial</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>テスト用実行ファイルのビルドをする</h2>

<p>せっかくならしっかりしたものをつくろうと、Autotoolsを使ってビルドしてみました。
<a href="http://www.spa.is.uec.ac.jp/~kinuko/slidemaker/autotools/">新しめの Autotools (Autoconf&amp;Automake) を使ってみよう</a> を参考に
Makefileのひな形を書いていきます。</p>

<p><a href="http://kikuchy.hatenablog.com/entry/2014/01/12/Google_Test_%E3%81%A8_Travice_CI_%E3%81%A7%E3%80%81C%E8%A8%80%E8%AA%9E%E3%81%A7%E6%9B%B8%E3%81%84%E3%81%9F%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E7%B6%99%E7%B6%9A%E7%9A%84%E3%82%A4">Google Test と Travice CI で、C言語で書いたライブラリの継続的インテグレーションをしてみた結果</a>
ではGoogle Testをシステムにインストールしていますが、
システムへのインストールは推奨されていないのと、手元で動かすのが面倒だったので
<a href="https://code.google.com/p/googletest/wiki/V1_6_AdvancedGuide#Fusing_Google_Test_Source_Files">Fused Source File</a>
を作ってGoogle Testを自分のプロジェクトに同梱しちゃいました。</p>

<p>Google Testのプロジェクトで<code>python fuse_gtest_files.py OUTPUT_DIR</code> を実行すると
<code>gtest/gtest.h</code> と <code>gtest/gtest-all.cc</code> が作られるので、
この２つのファイルを自分のプロジェクトにコピーしてきます。
あとは Makefile.am でこれらのファイルをコンパイル＆リンクするように設定します。
自分のプロジェクトでは使っていなくても、Google Test のコンパイルには pthread が必要なので忘れずに。
(clangでは無くても動くらしく、clangで試していたらgccで動かなくてちょっとはまった)</p>

<figure class='code'><figcaption><span>test/Makefile.am</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nv">TESTS</span> <span class="o">=</span> factorial_test
</span><span class='line'><span class="nv">check_PROGRAMS</span> <span class="o">=</span> factorial_test
</span><span class='line'><span class="nv">factorial_test_SOURCES</span> <span class="o">=</span> factorial.cpp gtest_main.cc gtest-all.cc
</span><span class='line'><span class="nv">factorial_test_LDADD</span> <span class="o">=</span> ../src/libfactorial.a
</span><span class='line'><span class="nv">factorial_test_LDFLAGS</span> <span class="o">=</span> -pthread
</span></code></pre></td></tr></table></div></figure>


<p><code>make check</code> でテストが走るようになります。
Google Test のソースがプロジェクトに含まれているので、
新しくプログラムをインストールしたり、特別な設定をしたりといったことは必要ありません。</p>

<h2>travis-ci でテストする</h2>

<p>travisのC++のテストは、標準で<code>./configure &amp;&amp; make &amp;&amp; make test</code>を実行してくれますが、
autotoolsで作ったMakefileだと上手く動かないので以下のように.travis.ymlを設定します。</p>

<figure class='code'><figcaption><span>.travis.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cpp</span>
</span><span class='line'><span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">autoreconf -fi &amp;&amp; ./configure &amp;&amp; make &amp;&amp; make check</span>
</span></code></pre></td></tr></table></div></figure>


<p>gnuなプロジェクトのお作法にしたがって、以下のように書き換えてあります。</p>

<ul>
<li>configureスクリプトはautotoolsで自動生成されるファイルなのでレポジトリには入れず、テスト前に生成する</li>
<li>make check でテストが走るのが普通らしい</li>
</ul>


<p>configureスクリプトを自動生成するのでautoconfのバージョンに注意してください。
autoconfは2014/05/18現在2.69が最新版ですが、travis-ciは2.68がインストールされているようです。
最新版のautoconfでconfigure.acのひな形を作ると<code>AC_PREREQ([2.69])</code>のように必要バージョンが設定されてしまい、
テストのときにconfigureファイルを作れなくて死にます。
バージョン指定を削除するか、古いバージョンに書き換えましょう。</p>

<p>C++のお作法がよくわかっていないですが、ちょっとずつ頑張っていきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis::Fast 0.07 をリリースしました！]]></title>
    <link href="http://shogo82148.github.io/blog/2014/05/17/redis-fast-0-dot-07-released/"/>
    <updated>2014-05-17T16:27:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/05/17/redis-fast-0-dot-07-released</id>
    <content type="html"><![CDATA[<p><a href="https://metacpan.org/release/Redis-Fast">Redis::Fast 0.07</a> をリリースしました。
現時点での最新バージョンである Redis.pm 1.974 とコンパチブルになります。</p>

<!-- More -->


<p>主な修正点は以下の通りです</p>

<ul>
<li>Redis Sentinel 対応</li>
<li>トランザクション内での再接続禁止</li>
<li>再接続にDB選択し直し</li>
</ul>


<h2>Redis Sentinel 対応</h2>

<p>Redis Sentinel というのは自動フェールオーバーの仕組みらしいです。
(ソースはコピペしたきただけで仕組みはあまり理解していない)
どんなものかは本家ドキュメントや実際に検証してみた人の記事をご参照ください。</p>

<ul>
<li><a href="http://redis.io/topics/sentinel">Redis Sentinel Documentation</a></li>
<li><a href="http://chrone.hatenablog.com/entry/2014/02/28/212616">Redis 2.8 の Sentinel の動きを検証してみた</a></li>
<li><a href="http://blog.kenjiskywalker.org/blog/2013/01/24/redis-sentiel-howto/">Redis Sentinelを動かしてみた</a></li>
</ul>


<p>前から移植作業は進めてたのですが、本家 Redis.pm でもテストがコケたりしてちょっと不安だったのでリリースを見送ってました。
今日 Redis.pm の安定版がリリースされたのでこっちも追従しますよ！！</p>

<p>コネクションを作るときに <code>sentinels</code> を渡すと Redis Sentinel から接続情報を取ってきてくれます。
一緒に <code>reconnect</code> を設定しておいてあげると、Masterに何かあった時に接続情報を再取得→
自動的に Slave へフェールオーバーしてくれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">Fast</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$redis</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Fast</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span>
</span><span class='line'>    <span class="n">sentinels</span> <span class="o">=&gt;</span> <span class="p">[</span> <span class="s">&#39;127.0.0.1:26379&#39;</span> <span class="p">],</span>
</span><span class='line'>  <span class="n">service</span> <span class="o">=&gt;</span> <span class="s">&#39;mymaster&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">reconnect</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>トランザクション内での再接続禁止</h2>

<p>Redisにも簡単な<a href="http://redis.io/topics/transactions">トランザクション機能</a>があって、
複数の命令を同時に実行することができます。
トランザクション中に再接続が発生するとトランザクションがリセットされてしまうので、
接続前の命令を再投入する必要があるのですが、Redis.pm/Redis::Fastの再接続処理はそこまで面倒を見てくれません。
以前のバージョンではそこの面倒を見てくれないのに適当に処理してしまい、
トランザクションが中途半端なまま実行されてしました。</p>

<p>0.07 からはトランザクション内では再接続を行わずに例外を吐きます。
トランザクションを最初からやり直すなど、よしなに対応してください。</p>

<h2>再接続時にDB選択し直し</h2>

<p>一つのRedis-Serverが複数のデータベースを持てるようになっていて、
<a href="http://redis.io/commands/select">SELECT</a>コマンドを使って切り替え可能です。
今までのバージョンでは、SELECTコマンドでデータベースを切り替えていても、
再接続時にリセットされてしまう問題がありました。
0.07では再接続の中でSELECTを実行し直すので、再接続を気にする必要はありません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Androidのバイナリファイルを解析するgoのライブラリ]]></title>
    <link href="http://shogo82148.github.io/blog/2014/05/07/androidbinary/"/>
    <updated>2014-05-07T13:29:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/05/07/androidbinary</id>
    <content type="html"><![CDATA[<p>Androidのアプリの実態はzipファイルなのでunzipすれば簡単に中身を見ることができるわけですが、
開いてもバイナリファイルが入っているだけでよくわかりません。
AndroidSDKに付属しているaaptというツールを使えば読めるんだけどインストールが大変で苦しんでいる人がいたので、
お手軽に解析できるgolangのライブラリを書いてみました。</p>

<!-- More -->


<h2>使い方</h2>

<h3>go getしてくる</h3>

<p><a href="https://github.com/shogo82148/androidbinary">githubのレポジトリ</a> からダウンロードしてきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>go get github.com/shogo82148/androidbinary
</span></code></pre></td></tr></table></div></figure>


<h3>AndroidManifest.xmlを解析する</h3>

<p><code>io.ReaderAt</code>インターフェースを満たすオブジェクトを<code>androidbinary.NewXMLFile</code>に渡すと解析してくれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">f</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;AndroidManifest.xml&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">xmlFile</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">androidbinary</span><span class="p">.</span><span class="nx">NewXMLFile</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span><span class='line'><span class="nx">reader</span> <span class="o">:=</span> <span class="nx">xmlFile</span><span class="p">.</span><span class="nx">Reader</span><span class="p">()</span>
</span><span class='line'><span class="c1">// reader を読むと普通のXMLファイルとして読める</span>
</span></code></pre></td></tr></table></div></figure>


<h3>resources.arscを解析する</h3>

<p>アプリ名などの設定はAndroidManifest.xmlには直接書かれておらず、
リソースファイルに書いてあることがほとんどです(開発者がよほどものぐさでなければ)。
リソースの情報はapk内のresources.arscに書かれているので、
このファイルを読む機能もついてます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">f</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;resources.arsc&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">tableFile</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">androidbinary</span><span class="p">.</span><span class="nx">NewTableFile</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ID 0x7F040000 に対応するリソースを読む</span>
</span><span class='line'><span class="nx">config</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">ResTableConfig</span><span class="p">{}</span>
</span><span class='line'><span class="nx">val</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">tableFile</span><span class="p">.</span><span class="nx">GetResource</span><span class="p">(</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">ResId</span><span class="p">(</span><span class="mh">0x7f040000</span><span class="p">),</span> <span class="nx">config</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>アプリ名はロケールによって変わったりするので、
<code>config</code>で設定できます。
例えば日本語の名前を取得したい場合はこんな感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// ID 0x7F040000 に対応するリソース(日本語)を読む</span>
</span><span class='line'><span class="nx">config</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">ResTableConfig</span><span class="p">{}</span>
</span><span class='line'><span class="nx">config</span><span class="p">.</span><span class="nx">Language</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="sc">&#39;j&#39;</span>
</span><span class='line'><span class="nx">config</span><span class="p">.</span><span class="nx">Language</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="sc">&#39;a&#39;</span>
</span><span class='line'><span class="nx">val</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">tableFile</span><span class="p">.</span><span class="nx">GetResource</span><span class="p">(</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">ResId</span><span class="p">(</span><span class="mh">0x7f040000</span><span class="p">),</span> <span class="nx">config</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>サンプルコード</h3>

<p>apkを解析してアプリの日本語名を取得する例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;archive/zip&quot;</span>
</span><span class='line'>  <span class="s">&quot;bytes&quot;</span>
</span><span class='line'>  <span class="s">&quot;encoding/xml&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/shogo82148/androidbinary&quot;</span>
</span><span class='line'>  <span class="s">&quot;io/ioutil&quot;</span>
</span><span class='line'>  <span class="s">&quot;strconv&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">XMLManifest</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">XMLName</span>      <span class="nx">xml</span><span class="p">.</span><span class="nx">Name</span>          <span class="s">`xml:&quot;manifest&quot;`</span>
</span><span class='line'>  <span class="nx">Applications</span> <span class="p">[]</span><span class="o">*</span><span class="nx">XMLApplication</span> <span class="s">`xml:&quot;application&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">XMLApplication</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">XMLName</span> <span class="nx">xml</span><span class="p">.</span><span class="nx">Name</span> <span class="s">`xml:&quot;application&quot;`</span>
</span><span class='line'>  <span class="nx">Label</span>   <span class="kt">string</span>   <span class="s">`xml:&quot;http://schemas.android.com/apk/res/android label,attr&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">r</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">zip</span><span class="p">.</span><span class="nx">OpenReader</span><span class="p">(</span><span class="s">&quot;sample.apk&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// read manifest and resource</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">xmlFile</span> <span class="o">*</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">XMLFile</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">tableFile</span> <span class="o">*</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">TableFile</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">f</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">r</span><span class="p">.</span><span class="nx">File</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Name</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;AndroidManifest.xml&quot;</span><span class="p">:</span>
</span><span class='line'>          <span class="nx">rc</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Open</span><span class="p">()</span>
</span><span class='line'>          <span class="nx">buf</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadAll</span><span class="p">(</span><span class="nx">rc</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">xmlFile</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">androidbinary</span><span class="p">.</span><span class="nx">NewXMLFile</span><span class="p">(</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">NewReader</span><span class="p">(</span><span class="nx">buf</span><span class="p">))</span>
</span><span class='line'>          <span class="nx">rc</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;resources.arsc&quot;</span><span class="p">:</span>
</span><span class='line'>          <span class="nx">rc</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Open</span><span class="p">()</span>
</span><span class='line'>          <span class="nx">buf</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadAll</span><span class="p">(</span><span class="nx">rc</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">tableFile</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">androidbinary</span><span class="p">.</span><span class="nx">NewTableFile</span><span class="p">(</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">NewReader</span><span class="p">(</span><span class="nx">buf</span><span class="p">))</span>
</span><span class='line'>          <span class="nx">rc</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// parse xml</span>
</span><span class='line'>  <span class="nx">decoder</span> <span class="o">:=</span> <span class="nx">xml</span><span class="p">.</span><span class="nx">NewDecoder</span><span class="p">(</span><span class="nx">xmlFile</span><span class="p">.</span><span class="nx">Reader</span><span class="p">())</span>
</span><span class='line'>  <span class="nx">xmlManifest</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">XMLManifest</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">decoder</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="nx">xmlManifest</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// get application label</span>
</span><span class='line'>  <span class="nx">labelId</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">ParseInt</span><span class="p">(</span><span class="nx">xmlManifest</span><span class="p">.</span><span class="nx">Applications</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Label</span><span class="p">[</span><span class="mi">3</span><span class="p">:],</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">config</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">ResTableConfig</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">config</span><span class="p">.</span><span class="nx">Language</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="sc">&#39;j&#39;</span>
</span><span class='line'>  <span class="nx">config</span><span class="p">.</span><span class="nx">Language</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="sc">&#39;a&#39;</span>
</span><span class='line'>  <span class="nx">label</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">tableFile</span><span class="p">.</span><span class="nx">GetResource</span><span class="p">(</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">ResId</span><span class="p">(</span><span class="nx">labelId</span><span class="p">),</span> <span class="nx">config</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Application Name:&quot;</span><span class="p">,</span> <span class="nx">label</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>エラー処理とか完全に省いているので上手く補ってください。</p>

<h2>制限事項</h2>

<p>GW中頑張ったけど途中で力尽きたので、今のところ以下のような制限があります。</p>

<ul>
<li>リソース名を扱えない

<ul>
<li>普通AndroidManifest.xmlにリソースを埋め込むときは<code>@string/app_name</code>みたいな名前を埋め込みますが、リソースファイルとの連携機能がないため<code>@0x7F04000000</code>のような数値を返します</li>
<li>resources.arsc からリソース名を読み取ったり、リソース名からリソースを取得する機能はありません</li>
</ul>
</li>
<li>configの設定が一部しか対応していない

<ul>
<li>ロケール、画面サイズ、SDKバージョン等にしか対応してません</li>
<li>IMEの設定や画面の細かいオプションとかも指定はできるけど、<code>GetResource</code>が解釈してくれないので誤った結果を返すかも</li>
</ul>
</li>
<li>リソースタイプ

<ul>
<li>文字列、整数、ブーリアン値にしか対応してません</li>
<li>string-array とかいうのとかあったりするけど、そんなの知らない</li>
</ul>
</li>
</ul>


<p>いろいろ制限はありますが、アプリ名を読み取ったり、パーミッションを解析するくらいはできるんじゃないですかね。
golang初心者なのでイケてないところがあったら教えて下さい。</p>

<h2>参考</h2>

<ul>
<li><a href="http://dsas.blog.klab.org/archives/52011424.html">エンコードされた AndroidManifest.xml を読む</a></li>
<li><a href="https://gist.github.com/cielavenir/4365521">ruby_apk Android::Resource can relate string pool (partially)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tweepyの2.3.0が出ました]]></title>
    <link href="http://shogo82148.github.io/blog/2014/04/27/tweepy-2-dot-3-0-released/"/>
    <updated>2014-04-27T21:51:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/04/27/tweepy-2-dot-3-0-released</id>
    <content type="html"><![CDATA[<p>Tweepyの2.3.0が出ました。
「<a href="http://shogo82148.github.io/blog/2014/04/18/tweepy-will-application-only-auth/">Tweepy が Application-only Authentication に対応します</a>」僕のprも取り込まれていて、
Application-only Authentication が標準で使えるようになりました。
というわけで、早速遊んでみます。</p>

<h2>Application-only Authenticationで遊ぶ</h2>

<p>使い方は「<a href="http://shogo82148.github.io/blog/2013/05/09/application-only-authentication-with-tweepy/">tweepyでApplication-only Authenticationしてみた</a>」のときとほぼ同じ。
Tweepy本体に取り込んでもらったので、名前空間がちょこっと変わったくらいです。
Consumer Key と Consumer Secretだけ設定すればいいので、簡単に使えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">tweepy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">codecs</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">stdin</span> <span class="o">=</span> <span class="n">codecs</span><span class="o">.</span><span class="n">getreader</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)(</span><span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="p">)</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">codecs</span><span class="o">.</span><span class="n">getwriter</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)(</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">CONSUMER_KEY</span> <span class="o">=</span> <span class="s">&#39;YOUR CONSUMER KEY&#39;</span>
</span><span class='line'><span class="n">CONSUMER_SECRET</span> <span class="o">=</span> <span class="s">&#39;YOUR CONSUMER SECRET&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">user_id</span> <span class="o">=</span> <span class="s">&quot;JO_RI&quot;</span>
</span><span class='line'>    <span class="n">auth</span> <span class="o">=</span> <span class="n">tweepy</span><span class="o">.</span><span class="n">AppAuthHandler</span><span class="p">(</span><span class="n">CONSUMER_KEY</span><span class="p">,</span> <span class="n">CONSUMER_SECRET</span><span class="p">)</span>
</span><span class='line'>    <span class="n">api</span> <span class="o">=</span> <span class="n">tweepy</span><span class="o">.</span><span class="n">API</span><span class="p">(</span><span class="n">auth</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">arg</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;id&#39;</span><span class="p">:</span> <span class="n">user_id</span><span class="p">,</span> <span class="s">&#39;include_rts&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>    <span class="n">user_statuses</span> <span class="o">=</span> <span class="n">tweepy</span><span class="o">.</span><span class="n">Cursor</span><span class="p">(</span><span class="n">api</span><span class="o">.</span><span class="n">user_timeline</span><span class="p">,</span> <span class="o">**</span><span class="n">arg</span><span class="p">)</span><span class="o">.</span><span class="n">items</span><span class="p">(</span><span class="mi">3200</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">user_status</span> <span class="ow">in</span> <span class="n">user_statuses</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">user_status</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tweepy が Application-only authentication に対応します]]></title>
    <link href="http://shogo82148.github.io/blog/2014/04/18/tweepy-will-application-only-auth/"/>
    <updated>2014-04-18T06:37:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/04/18/tweepy-will-application-only-auth</id>
    <content type="html"><![CDATA[<p>以前 「<a href="http://shogo82148.github.io/blog/2013/05/09/application-only-authentication-with-tweepy/">tweepyでApplication-only Authenticationしてみた</a>」で
書いたTweepyのAuthHandlerを本体に取り込んでもらいました。
リリースタイミングとかよくわかってないですが、次のリリースとかでApplication-only Authenticationを簡単に使えるようになります、たぶん。</p>

<p>(2014-04-27追記)
このprを取り込んだTweepy 2.3.0がリリースされました。早速遊んでみたのでこちらもどうぞ><a href="http://shogo82148.github.io/blog/2014/04/27/tweepy-2-dot-3-0-released/">Tweepyの2.3.0が出ました</a></p>

<!-- More -->


<h2>取り込まれるまでの経緯</h2>

<ul>
<li>「Application-only Authentication 対応しないの？」って質問は去年からあった(<a href="https://github.com/tweepy/tweepy/issues/318">tweepy#318</a>)</li>
<li>先日「ここに動くコード載ってるよ」と<a href="https://github.com/tweepy/tweepy/issues/318#issuecomment-40291735">僕の記事が紹介される</a></li>
<li>昨日の夕方「コントリビュートしてみない？」とブログやgithub経由で頼まれる</li>
<li>やるしか無い！と思って昨日のうちにpr作成</li>
<li>朝起きたら取り込まれてた</li>
</ul>


<p>日本語なんてマイナーな言語で記事が書いてあっても、読んでくれる人は読んでくれるんですね。
Tweepy は僕も何度か使ったことがあるので Issue とかみて開発状況をチェックしていたんですが、
見覚えのある名前が見えたときはびっくりしました。</p>

<p>ちょっとしたコードでも公開しておくといいことがあるよ、というお話でした。
最近ここも全然更新してないので、もっとアウトプットしていかないと・・・。</p>
]]></content>
  </entry>
  
</feed>
