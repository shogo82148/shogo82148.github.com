<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shogo's Blog]]></title>
  <link href="http://shogo82148.github.io/atom.xml" rel="self"/>
  <link href="http://shogo82148.github.io/"/>
  <updated>2016-04-13T04:41:37+09:00</updated>
  <id>http://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[net/httpで安全に静的ファイルを返す]]></title>
    <link href="http://shogo82148.github.io/blog/2016/04/13/serving-static-files-in-golang/"/>
    <updated>2016-04-13T02:29:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2016/04/13/serving-static-files-in-golang</id>
    <content type="html"><![CDATA[<p><a href="http://konboi.hatenablog.com/entry/2016/04/12/121105">net/httpで静的ファイルを返す</a>で、
<code>http.ServeFile</code>を使っていてアレ？と思ったのでちょっと詳しく調べてみました。
(<code>http.FileServer</code>を使うものだと思ってたため)</p>

<p>結論だけ先に書いておくと</p>

<ul>
<li>やはり、特に理由がなければ<code>http.FileServer</code>を使ったほうが良さそう</li>
<li>どうしても<code>http.ServeFile</code>を使う場合は定数でパス指定をする</li>
<li>「自作パスルータを使っている」かつ「Go 1.6.1 未満を使っている」場合はとくに要注意</li>
</ul>


<!-- More -->


<h2>ディレクトリトラバーサル脆弱性</h2>

<p>紹介されているのは以下のコードです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/static/&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">ServeFile</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>しかし、参照先の「<a href="http://stackoverflow.com/questions/25945538/go-golang-to-serve-a-specific-html-file">Go Golang to serve a specific html file</a>」には
<strong>Actually, do not do that.</strong> (やっちゃいけない)とコメントされています。
<a href="https://ja.wikipedia.org/wiki/%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%83%88%E3%83%A9%E3%83%90%E3%83%BC%E3%82%B5%E3%83%AB">ディレクトリトラバーサル</a>により
脆弱性の原因となってしまう可能性があるためです。</p>

<p>脆弱性再現のために、以下の様なコードを書いてGo1.5でコンパイルして実行してみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;strings&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3000&quot;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">HasPrefix</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span><span class="p">,</span> <span class="s">&quot;/static/&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">http</span><span class="p">.</span><span class="nx">ServeFile</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">http</span><span class="p">.</span><span class="nx">NotFound</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>..</code>を含んだパスをリクエストしてみます。(実行した場所によって<code>..</code>の数は変わるので適宜調整してみてください)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -v http://localhost:3000/static/../../../.ssh/id_rsa
</span><span class='line'>* About to connect() to localhost port 3000 (#0)
</span><span class='line'>*   Trying ::1... connected
</span><span class='line'>* Connected to localhost (::1) port 3000 (#0)
</span><span class='line'>&gt; GET /static/../../../.ssh/id_rsa HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.19.1 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2
</span><span class='line'>&gt; Host: localhost:3000
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt;
</span><span class='line'>&lt; HTTP/1.1 200 OK
</span><span class='line'>&lt; Accept-Ranges: bytes
</span><span class='line'>&lt; Content-Length: 1679
</span><span class='line'>&lt; Content-Type: text/plain; charset=utf-8
</span><span class='line'>&lt; Last-Modified: Fri, 13 Jun 2014 04:57:05 GMT
</span><span class='line'>&lt; Date: Tue, 12 Apr 2016 17:53:19 GMT
</span><span class='line'>&lt;
</span><span class='line'>-----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>(中略)
</span><span class='line'>-----END RSA PRIVATE KEY-----
</span><span class='line'>* Connection #0 to host localhost left intact
</span><span class='line'>* Closing connection #0</span></code></pre></td></tr></table></div></figure>


<p>macのcurlで試したらクライアント側で相対パスを解決した状態でリクエストが飛んでしまって上手く行きませんでした。
オプションで外す方法がよくわかなかったので、<code>telnet</code>で叩いてみた例も載せておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ telnet localhost 3000
</span><span class='line'>Trying ::1...
</span><span class='line'>Connected to localhost.
</span><span class='line'>Escape character is '^]'.
</span><span class='line'>GET /static/../../../.ssh/id_rsa HTTP/1.0
</span><span class='line'>
</span><span class='line'>HTTP/1.0 200 OK
</span><span class='line'>Accept-Ranges: bytes
</span><span class='line'>Content-Length: 1679
</span><span class='line'>Content-Type: text/plain; charset=utf-8
</span><span class='line'>Last-Modified: Fri, 13 Jun 2014 04:57:05 GMT
</span><span class='line'>Date: Tue, 12 Apr 2016 18:02:56 GMT
</span><span class='line'>
</span><span class='line'>-----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>(中略)
</span><span class='line'>-----END RSA PRIVATE KEY-----
</span><span class='line'>Connection closed by foreign host.</span></code></pre></td></tr></table></div></figure>


<p>ああ、僕の秘密鍵が・・・。</p>

<h2>脆弱性を回避する</h2>

<h3>Go1.6以降を使う</h3>

<p>Go1.6以降では修正されており、
同じコードをGo1.6でコンパイルしてcurlで叩くと400が帰ってきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -v http://localhost:3000/static/../../../.ssh/id_rsa
</span><span class='line'>* About to connect() to localhost port 3000 (#0)
</span><span class='line'>*   Trying ::1... connected
</span><span class='line'>* Connected to localhost (::1) port 3000 (#0)
</span><span class='line'>&gt; GET /static/../../../.ssh/id_rsa HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.19.1 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2
</span><span class='line'>&gt; Host: localhost:3000
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt; 
</span><span class='line'>&lt; HTTP/1.1 400 Bad Request
</span><span class='line'>&lt; Content-Type: text/plain; charset=utf-8
</span><span class='line'>&lt; X-Content-Type-Options: nosniff
</span><span class='line'>&lt; Date: Tue, 12 Apr 2016 18:12:46 GMT
</span><span class='line'>&lt; Content-Length: 17
</span><span class='line'>&lt; 
</span><span class='line'>invalid URL path
</span><span class='line'>* Connection #0 to host localhost left intact
</span><span class='line'>* Closing connection #0</span></code></pre></td></tr></table></div></figure>


<h3><code>http.ServeMux</code>を使う</h3>

<p><code>http.ServeMux</code>にはパスの正規化機能が組み込まれており、
正規化されていないURLにアクセスが来た場合は自動的リダイレクトしてくれるようです。
HTTPハンドラに渡ってくるときには、必ず相対パスが含まれていない状態になっています。
(これに最初は気が付かず、脆弱性が再現しないので困ってた。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 内部でhttp.ServeMuxを使ってくれる</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/static/&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// r.URLには相対パスが含まれない形で渡ってくる</span>
</span><span class='line'>    <span class="nx">http</span><span class="p">.</span><span class="nx">ServeFile</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3000&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>相対パスを含んだリクエストを投げてもアクセスはできません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -v http://localhost:3000/static/../../../.ssh/id_rsa
</span><span class='line'>* About to connect() to localhost port 3000 (#0)
</span><span class='line'>*   Trying ::1... connected
</span><span class='line'>* Connected to localhost (::1) port 3000 (#0)
</span><span class='line'>&gt; GET /static/../../../.ssh/id_rsa HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.19.1 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2
</span><span class='line'>&gt; Host: localhost:3000
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt; 
</span><span class='line'>&lt; HTTP/1.1 301 Moved Permanently
</span><span class='line'>&lt; Location: /.ssh/id_rsa
</span><span class='line'>&lt; Date: Tue, 12 Apr 2016 18:14:49 GMT
</span><span class='line'>&lt; Content-Length: 47
</span><span class='line'>&lt; Content-Type: text/html; charset=utf-8
</span><span class='line'>&lt; 
</span><span class='line'>&lt;a href="http://shogo82148.github.io/.ssh/id_rsa"&gt;Moved Permanently&lt;/a&gt;.
</span><span class='line'>
</span><span class='line'>* Connection #0 to host localhost left intact
</span><span class='line'>* Closing connection #0</span></code></pre></td></tr></table></div></figure>


<h3><code>http.FileServer</code>を使う</h3>

<p><code>http.Dir</code>と<code>http.FileServer</code>を使うとルートディレクトリを指定でき、
その外へはアクセスできなくなるので想定外のファイルが見えてしまうことはありません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;strings&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fileServer</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StripPrefix</span><span class="p">(</span><span class="s">&quot;/static/&quot;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">FileServer</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">Dir</span><span class="p">(</span><span class="s">&quot;static&quot;</span><span class="p">)))</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3000&quot;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">HasPrefix</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span><span class="p">,</span> <span class="s">&quot;/static/&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fileServer</span><span class="p">.</span><span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">http</span><span class="p">.</span><span class="nx">NotFound</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">}))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>相対パスを含んだURLにアクセスしても404になって見れません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -v http://localhost:3000/static/../../../.ssh/id_rsa
</span><span class='line'>* About to connect() to localhost port 3000 (#0)
</span><span class='line'>*   Trying ::1... connected
</span><span class='line'>* Connected to localhost (::1) port 3000 (#0)
</span><span class='line'>&gt; GET /static/../../../.ssh/id_rsa HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.19.1 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2
</span><span class='line'>&gt; Host: localhost:3000
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt; 
</span><span class='line'>&lt; HTTP/1.1 404 Not Found
</span><span class='line'>&lt; Content-Type: text/plain; charset=utf-8
</span><span class='line'>&lt; X-Content-Type-Options: nosniff
</span><span class='line'>&lt; Date: Tue, 12 Apr 2016 18:39:34 GMT
</span><span class='line'>&lt; Content-Length: 19
</span><span class='line'>&lt; 
</span><span class='line'>404 page not found
</span><span class='line'>* Connection #0 to host localhost left intact
</span><span class='line'>* Closing connection #0</span></code></pre></td></tr></table></div></figure>


<h3><code>http.ServeFile</code>に定数を渡す</h3>

<p>どうしても特定のファイルを指定したい場合は、<code>http.ServeFile</code>に渡すファイルパスを定数で指定するべきです。
例えば、「<a href="http://stackoverflow.com/questions/25945538/go-golang-to-serve-a-specific-html-file">Go Golang to serve a specific html file</a>」の質問者が上げている例を
正しく書きなおすと以下のようになると思います。</p>

<blockquote><p><code>http.Handle("/", http.FileServer(http.Dir("static")))</code>
Serves the html file in static directory.</p>

<p>Is there any way in Go that we can specify the html file to serve?</p>

<p>Something like render_template in Flask</p>

<p>I want to do something like:</p>

<p><code>http.Handle("/hello", http.FileServer(http.Dir("static/hello.html")))</code></p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/hello&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">http</span><span class="p">.</span><span class="nx">ServeFile</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="s">&quot;static/hello.html&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3000&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>回答者がActually, do not do thatとコメントしているのは<code>http.ServeFile</code>に<code>r.URL.Path[1:]</code>を渡すことで、
<code>http.ServeFile</code>自体が悪いわけではありません。
正しく安全に使いましょう。</p>

<h2>まとめ</h2>

<p>まとめ再掲。</p>

<ul>
<li>やはり、特に理由がなければ<code>http.FileServer</code>を使ったほうが良さそう</li>
<li>どうしても<code>http.ServeFile</code>を使う場合は定数でパス指定をする</li>
<li>「自作パスルータを使っている」かつ「Go 1.6.1 未満を使っている」場合はとくに要注意</li>
</ul>


<h2>まとめのまとめ</h2>

<p><a href="https://golang.org/pkg/net/http/#example_FileServer">godocのexample</a>どおりにやるのが一番。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/static/&quot;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StripPrefix</span><span class="p">(</span><span class="s">&quot;/static/&quot;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">FileServer</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">Dir</span><span class="p">(</span><span class="s">&quot;static&quot;</span><span class="p">))))</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3000&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PerlでもGoでも実行できるQuine書いた]]></title>
    <link href="http://shogo82148.github.io/blog/2016/04/06/ployglot-quine-of-golang-and-perl/"/>
    <updated>2016-04-06T10:07:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2016/04/06/ployglot-quine-of-golang-and-perl</id>
    <content type="html"><![CDATA[<p><a href="http://shogo82148.github.io/blog/2016/04/05/polyglot-of-perl-and-golang/">昨日のPolyglot</a>を元にPerlでもGoでも実行できるQuine書いた。</p>

<!-- More -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package main;import("fmt");var(q=`printf'package main;import("fmt");var(q%c%c%s%c/*%c);sub import{}sub var{$_%cshift%c~s!%c(.*)%c/\*!$1!gr;eval}%c__END__%c',61,96,$_,96,61,61,61,96,96,10,10;print&lt;DATA&gt;`/*=);sub import{}sub var{$_=shift=~s!`(.*)`/\*!$1!gr;eval}
</span><span class='line'>__END__
</span><span class='line'>*/);func main(){s:=`package main;import("fmt");var(q=%c%s%c/*=);sub import{}sub var{$_=shift=~s!%c(.*)%c/\*!$1!gr;eval}
</span><span class='line'>__END__
</span><span class='line'>*/);func main(){s:=%c%s%c;fmt.Printf(s,96,q,96,96,96,96,s,96)}
</span><span class='line'>`;fmt.Printf(s,96,q,96,96,96,96,s,96)}</span></code></pre></td></tr></table></div></figure>


<p>Perlで実行してもGoで実行しても自分自身を出力します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PerlとGolangで実行できるPolyglot書いてみた]]></title>
    <link href="http://shogo82148.github.io/blog/2016/04/05/polyglot-of-perl-and-golang/"/>
    <updated>2016-04-05T12:27:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2016/04/05/polyglot-of-perl-and-golang</id>
    <content type="html"><![CDATA[<p>Rubyの会社をPerlの会社に変えてしまおう計画。
Golangのフリをして忍び込ませれば行けるのではという話になったので、
GoでもPerlでも実行できるコードを書いてみた。</p>

<!-- More -->


<p>出来上がったのがこちら。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package main;
</span><span class='line'>import ("fmt");
</span><span class='line'>var (s=0/*==);
</span><span class='line'>sub import {}
</span><span class='line'>sub var { print "Hello macotasu"; }
</span><span class='line'>__END__
</span><span class='line'>*/)
</span><span class='line'>func main() { fmt.Println("Hello macotasu") }</span></code></pre></td></tr></table></div></figure>


<p>一番のポイントは<code>var (s=0/*==);</code>の行ですね。
Perlで解釈すると正規表現置換<code>s///</code>として解釈され、<code>/*</code>が無視されます。
Goで解釈すると変数<code>s</code>への代入として解釈され、<code>/*</code>がコメントとして扱われます。</p>

<p>あとはGoのキーワードをPerlが解釈できないので、ちょっと書き方を工夫します。</p>

<ul>
<li><code>package main</code> はGoでもPerlでも似たような意味で解釈されるのでそのまま</li>
<li>Goの <code>import</code>, <code>var</code> はPerlで解釈できないので、()を省略せずに書いてPerlの関数呼び出しっぽくする</li>
<li>省略可能なセミコロンをちゃんと書く</li>
</ul>


<p>GoとPerlのコードは分かれているのでどんな処理でも自由に書くことができますが、
<code>import</code> だけGoでもPerlでも解釈されてしまうというという制限があります。
<code>import</code> するパッケージが一個だけなら問題ないんですが、
複数書く場合は以下のように２個め以降をすべてドットインポートする必要があって男気あふれる感じです。
(Perlでは文字列結合として解釈される。Goでは<code>var</code>のあとに<code>import</code>かけないっぽいので、ここに押し込むしかない。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package main;
</span><span class='line'>import (
</span><span class='line'>  "fmt"
</span><span class='line'>  . "math"
</span><span class='line'>);
</span><span class='line'>var (s=0/*==);
</span><span class='line'>sub import {}
</span><span class='line'>sub var { print "Hello macotasu"; }
</span><span class='line'>__END__
</span><span class='line'>*/)
</span><span class='line'>func main() { fmt.Println("Hello macotasu", Pi) }</span></code></pre></td></tr></table></div></figure>


<p>もっと簡潔にかけないかな。</p>

<h2>追記</h2>

<p>シンタックスハイライトしてみたらわかりやすいかなと思ってやってみた。</p>

<p>Perlのシンタックスハイライト。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nb">package</span> <span class="n">main</span><span class="p">;</span>
</span><span class='line'><span class="nb">import</span> <span class="p">(</span><span class="s">&quot;fmt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">var</span> <span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="mi">0</span><span class="o">/*==</span><span class="p">);</span>
</span><span class='line'><span class="k">sub </span><span class="nf">import</span> <span class="p">{}</span>
</span><span class='line'><span class="k">sub </span><span class="nf">var</span> <span class="p">{</span> <span class="k">print</span> <span class="s">&quot;Hello macotasu&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="cp">__END__</span>
</span><span class='line'><span class="cp">*/)</span>
</span><span class='line'><span class="cp">func main() { fmt.Println(&quot;Hello macotasu&quot;) }</span>
</span></code></pre></td></tr></table></div></figure>


<p>Goのシンタックスハイライト。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span><span class="p">;</span>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span><span class="s">&quot;fmt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="p">(</span><span class="nx">s</span><span class="p">=</span><span class="mi">0</span><span class="cm">/*==);</span>
</span><span class='line'><span class="cm">sub import {}</span>
</span><span class='line'><span class="cm">sub var { print &quot;Hello macotasu&quot;; }</span>
</span><span class='line'><span class="cm">__END__</span>
</span><span class='line'><span class="cm">*/</span><span class="p">)</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Hello macotasu&quot;</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="https://golang.org/ref/spec">The Go Programming Language Specification</a></li>
<li><a href="http://d.hatena.ne.jp/sugyan/20110306/1299418878">polyglot 基礎の基礎</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webブラウザを使って電波を出してみた]]></title>
    <link href="http://shogo82148.github.io/blog/2016/03/29/web-jjy/"/>
    <updated>2016-03-29T12:19:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2016/03/29/web-jjy</id>
    <content type="html"><![CDATA[<p>読者の持っている至って普通のコンピューターは、実は電波時計の時刻合わせを行うために必要な標準電波の発信装置が備わっている。</p>

<p>コードは以下から入手できる。</p>

<ul>
<li><a href="https://github.com/shogo82148/web-jjy">shogo82148/web-jjy</a></li>
<li><a href="http://shogo82148.github.io/web-jjy/">JJYシミュレータWeb版</a></li>
</ul>


<!-- More -->


<h2>動かし方</h2>

<p>パソコンのイヤホンジャックにアンテナ(普通のイヤホンで十分です)を接続し、電波時計の近くに置きます。
音量を最大にし、「Start」ボタンを押すと信号が送信されます。
電波時計を強制受信モードにし、時刻が設定されるのを待ちましょう。</p>

<p>パソコンの時間を基準にするので、あらかじめntpとかで時刻設定をしておくといいと思います。</p>

<h2>原理</h2>

<p><a href="http://jjy.nict.go.jp/jjy/trans/index.html">標準電波JJY</a>は日本標準時のタイムコードを送信する電波で、
東日本では40kHz、西日本では60kHzの周波数で発信されています。
電波時計はこの信号を使って時刻合わせをしています。</p>

<p>この信号をオーディオデバイスから出力する<a href="http://www.starstonesoft.com/jjy_simulator.htm">電波時計用JJYシミュレータ</a>というものがあるのを知り、
「今のWebブラウザならjavascriptだけで実装できるのでは？」と思いやってみました。
一般的なオーディオデバイスは、20kHz以上の周波数の再生には適していないため、そのままでは40kHz/60kHzの信号は出せません。
そこで、<a href="http://www.starstonesoft.com/jjy_simulator.htm">電波時計用JJYシミュレータ</a>は、歪んだ波形に含まれる高調波を利用しています。
ボリュームを大きくして音が割れた状態になると、音声信号は矩形波に近いかたちになります。
矩形波には3倍、5倍、7倍&#8230;の奇数倍の周波数成分が含まれているため、
(<a href="http://togetter.com/li/942071">世はまさに大フーリエ時代</a>とか見ると楽しい)
13.333kHzの矩形波を出力することで、39.999kHzの信号を出せるというわけです。</p>

<p>元のソフトウェアはWindowsのバイナリ形式でしたが、
WebAudioの登場によりWebブラウザからも同様のことが行えるようになりました。</p>

<h2>最後に</h2>

<p>少し前にCPUから出るノイズを使ってAMラジオの電波を発信するという記事が話題になりましたね。</p>

<ul>
<li><a href="http://cpplover.blogspot.jp/2016/03/am.html">普通のコンピューターからAMラジオを鳴らそう</a></li>
</ul>


<p>CPUやオーディオデバイスも電気で動いている以上、電波が出ているのは当たり前のことなのですが、
こうやって改めて確認できると面白いですね。</p>

<p>パソコンから出る程度の電波強度では、電波法に抵触することはないと思いますが、
うっかり強力な電波を発信しないよう気をつけてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数値と文字列がごちゃ混ぜになっているJSONをよしなにParseするやつ作った]]></title>
    <link href="http://shogo82148.github.io/blog/2016/03/23/go-weaktyping/"/>
    <updated>2016-03-23T20:44:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2016/03/23/go-weaktyping</id>
    <content type="html"><![CDATA[<p>Goは数値と文字列を厳格に区別しますが、他の言語もそうとは限りません。
例えばPerlは数値と文字列を自動変換してくれるので、気をつけていないといつの間にか数値が文字列になっていたりします。
その言語の中に閉じていいれば問題ないのですが、Goとやり取りしようとすると困ります。
そんなときに使えるライブラリを書いてみました。</p>

<ul>
<li><a href="https://github.com/shogo82148/go-weaktyping">shogo82148/go-weaktyping</a></li>
</ul>


<!-- More -->


<h2>背景</h2>

<p><code>map[string][]*string</code>を返してくるライブラリがあって、
そのままだと扱いにくいのでなんとか構造体にできないかと頭を悩ませていました。
JSONに一旦変換すれば楽かなーとも思ったのですが、一部フィールドを数値に変換する必要がありました。
JSONの数値と文字列を区別するため、JSONの文字列をGoの数値型に変換するのは厄介です。
タグに<code>json:",string"</code>と指定すると変換可能になりますが、逆にJSONの数値を受け付けなくなりますし、
JSONに変換すると文字列になってしまいます。
変換先の構造体は普通のJSONの操作にも使いたかったので、これでは困ります。
「数値も文字列もUnmarshalできて、Marshalするときには数値になる」ようなJSONライブラリが必要でした。</p>

<p><code>"encoding/json"</code>に代わる新しいJSONライブラリを・・・とも考えたのですが、
よく考えるとUnmarshal時の挙動は<code>"encoding/json".Unmarshaler</code>インターフェースを実装することでカスタマイズ可能です。
こうして作ったのが go-weaktyping です。</p>

<h2>使い方</h2>

<p>builtinの型の先頭を大文字にしたものを用意しているので、
適当にUnmarshalして欲しいところでbuiltinの型の代わりに指定するだけです。
以下は整数型をUnmarshalする例です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/shogo82148/go-weaktyping&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ptr</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">Foo</span> <span class="nx">weaktyping</span><span class="p">.</span><span class="nx">Int</span> <span class="s">`json:&quot;foo&quot;`</span>
</span><span class='line'>  <span class="p">}{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">`{&quot;foo&quot;:123}`</span><span class="p">),</span> <span class="nx">ptr</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Foo:&quot;</span><span class="p">,</span> <span class="nx">ptr</span><span class="p">.</span><span class="nx">Foo</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">`{&quot;foo&quot;:&quot;456&quot;}`</span><span class="p">),</span> <span class="nx">ptr</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Foo:&quot;</span><span class="p">,</span> <span class="nx">ptr</span><span class="p">.</span><span class="nx">Foo</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>{"foo":123}</code>が正常にUnmarshalできるのはもちろん、
通常はエラーになってしまう<code>{"foo":"456"}</code>のUnmarshalも問題なく行えます。
Marshal時は通常のint型と同様に振る舞います。</p>

<p>数値型だけでなく<code>weaktyping.String</code>も用意されていて、
通常はエラーになってしまう <code>{"foo":123}</code> も <code>struct { Foo weaktyping.String }{"123"}</code>にUnmarshal可能です。</p>

<p>その他使える型は <a href="https://godoc.org/github.com/shogo82148/go-weaktyping">godoc</a> をどうぞ。</p>

<h2>各種Boolたち</h2>

<p>builtinの<code>bool</code>に対応する<code>weaktyping.Bool</code>も実装してみたのですが、
何を持って真偽を判断するか難しい・・・。
例えば空のARRAYは真とみなすべきか、偽とみなすべきか。
普段触っている言語によって意見が分かれるのではないでしょうか。
(そもそも型が違うからエラーという人もいるだろうけど、そういうときは普通に<code>bool</code>を使いましょう)</p>

<p>JSONはもともとJavaScriptから派生した形式なので、JavaScriptに合わせるのが妥当かなと思い、
<code>weaktyping.Bool</code>の挙動はJavaScriptに合わせてあります。
「<a href="http://blog.mirakui.com/entry/20090604/truefalse">各言語におけるtrue/falseまとめ</a>」を参考に言語別のBoolも用意しています。</p>

<ul>
<li><code>Bool</code>/<code>JavaScriptBool</code>: <code>false</code>, <code>0</code>, <code>0.0</code>, <code>""</code>, <code>null</code> は偽、それ以外は真</li>
<li><code>RubyBool</code>: <code>false</code>, <code>null</code> は偽、それ以外は真</li>
<li><code>PHPBool</code>: <code>false</code>, <code>0</code>, <code>0.0</code>, <code>""</code>, <code>null</code>, <code>"0"</code>, <code>[]</code> は偽、それ以外は真</li>
<li><code>PerlBool</code>: <code>false</code>, <code>0</code>, <code>0.0</code>, <code>""</code>, <code>null</code>, <code>"0"</code> は偽、それ以外は真</li>
<li><code>PythonBool</code>: <code>false</code>, <code>0</code>, <code>0.0</code>, <code>""</code>, <code>null</code>, <code>[]</code>, <code>{}</code> は偽、それ以外は真</li>
</ul>


<p>ややこしい・・・なるべく使わない方がいいと思います。</p>

<h2>最後に</h2>

<p>これを作るきっかけになった問題ですが、reflectで解決しました。reflect最強。
go-weaktypingを使うとすべてのUnmarshal時に有効になってしまって怖いなと考えたためです。</p>

<p>今後もなるべく go-weaktyping を使わずに済むよう祈ってます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redisのトランザクション・スクリプト・ランキングを扱うPerlモジュールを公開しました]]></title>
    <link href="http://shogo82148.github.io/blog/2016/03/18/releaes-redis-modules/"/>
    <updated>2016-03-18T22:16:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2016/03/18/releaes-redis-modules</id>
    <content type="html"><![CDATA[<p>以前<a href="http://shogo82148.github.io/blog/2016/02/06/redis-leader-board-multi/">Redisでスコアを複数設定できるランキングを作ってみた</a>けど、
Githubの肥やしになっていてもあれなので、CPANizeしました。
あわせて、この実装のために作ったユーティリティモジュールも別モジュールとして公開しました。</p>

<ul>
<li><a href="https://metacpan.org/pod/Redis::LeaderBoardMulti">Redis::LeaderBoardMulti</a></li>
<li><a href="https://metacpan.org/pod/Redis::Script">Redis::Script</a></li>
<li><a href="https://metacpan.org/pod/Redis::Transaction">Redis::Transaction</a></li>
</ul>


<!-- More -->


<h2>Redis::LeaderBoardMulti</h2>

<p>最初の基準で順位を決められなかった場合の第二基準が欲しいというときに使うモジュールです。
インターフェースがRedis::LeaderBoard互換になるように調整したので、
前回とインターフェースがちょっと変わっています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">se</span> <span class="n">Redis</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">LeaderBoard</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$redis</span> <span class="o">=</span> <span class="n">Redis</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$lb</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">LeaderBoardMulti</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span>
</span><span class='line'>    <span class="n">redis</span> <span class="o">=&gt;</span> <span class="nv">$redis</span><span class="p">,</span>
</span><span class='line'>    <span class="n">key</span>   <span class="o">=&gt;</span> <span class="s">&#39;leader_board:1&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">order</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s">&#39;asc&#39;</span><span class="p">,</span> <span class="s">&#39;desc&#39;</span><span class="p">],</span> <span class="c1"># asc/desc, desc as default</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="c1"># Redis::LeaderBoardに合わせて複数指定できるようになりました</span>
</span><span class='line'><span class="nv">$lb</span><span class="o">-&gt;</span><span class="n">set_score</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="nb">time</span><span class="p">],</span>
</span><span class='line'>    <span class="s">&#39;two&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span> <span class="mi">50</span><span class="p">,</span> <span class="nb">time</span><span class="p">],</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="p">(</span><span class="nv">$rank</span><span class="p">,</span> <span class="nv">$score</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$lb</span><span class="o">-&gt;</span><span class="n">get_rank_with_score</span><span class="p">(</span><span class="s">&#39;one&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Redis::LeaderBoard互換なのでそのまま入れ替えられるはずですが、以下のような実装上の制限があります。</p>

<ul>
<li>スコアはすべて64bit符号付き整数

<ul>
<li>Redis::LeaderBoardのスコアは倍精度浮動小数点型なので小数も扱えるが、Redis::LeaderBoardMultiは整数だけ</li>
</ul>
</li>
<li>Redis 2.8.9以降のみで動きます</li>
<li>同順の場合の出現順

<ul>
<li>Redis::LeaderBoard は ZRANK, ZREVRANK を使い分けているので、orderパラメータによって昇順/降順が変わります</li>
<li>Redis::LaederBoardMulti は ZRANK しか使わないので、必ず昇順になります</li>
</ul>
</li>
</ul>


<p>一応 Lua Script を使わないオプションもそのまま残してありますが、特に理由がない限りデフォルト(Lua Script を使う)で使うといいと思います。
どうしてもロックの範囲が広くなってしまう場合があり、楽観的ロックでは効率が悪いケースがあるためです。</p>

<h2>Redis::Script</h2>

<p>EVALSHAを簡単に使うためのモジュールです。
EVALコマンドを使うとLua Scriptの実装ができますが、毎回毎回実行するスクリプト全体を送る必要があります。
EVALSHAコマンドはその代わりにスクリプトのSHA1ハッシュを送ることで、帯域の節約ができるというコマンドです。
しかしEVALSHAはSHA1ハッシュを事前に登録する必要があり、どのタイミングで登録を行うかが問題になってきます。</p>

<p><a href="http://redis.io/commands/eval">EVALコマンドのドキュメント</a>によると、
「EVALSHAで実行してみて <code>NOSCRIPT No matching script</code> で失敗したらEVALでやり直す」というのがおすすめらしいです。
EVALコマンドはSHA1ハッシュの登録も行ってくれるので、初回 <code>NOSCRIPT</code> になっても次回からはEVALSHAが成功します。</p>

<p>そんなに複雑なことではないのですが、毎回書くのも大変なのでモジュールとして切り出したのが Redis::Script です。
以下のようにスクリプトオブジェクトを作っておいて、パラメータを渡して実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">Redis</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">Script</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$script</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Script</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">script</span> <span class="o">=&gt;</span> <span class="s">&quot;return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="p">(</span><span class="nv">$key1</span><span class="p">,</span> <span class="nv">$key2</span><span class="p">,</span> <span class="nv">$arg1</span><span class="p">,</span> <span class="nv">$arg2</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$script</span><span class="o">-&gt;</span><span class="nb">eval</span><span class="p">(</span><span class="n">Redis</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;key1&#39;</span><span class="p">,</span> <span class="s">&#39;key2&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s">&#39;arg1&#39;</span><span class="p">,</span> <span class="s">&#39;arg2&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>$script</code> が計算済みのSHA1ハッシュを保存しておいてくれるので、計算リソースの節約にもなるはずです。
(ベンチとってみたところ、スクリプトのサイズが1kBから10kBくらいにならないと効果なさそうでしたが・・・)</p>

<h2>Redis::Transaction</h2>

<p>Redisのトランザクションを簡単に行うためのモジュールです。</p>

<p>MULTI-EXECは単に実行するだけなら、MULTIとEXECで囲うだけでよいので簡単です。
例えば、 <code>foo</code> と <code>bar</code> を同時にインクリメントしたい場合、以下のようにすると実現できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">multi</span><span class="p">;</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">incr</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">incr</span><span class="p">(</span><span class="s">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="nb">exec</span><span class="p">;</span> <span class="c1"># 他のクライアントからはfooとbarが全く同時にインクリメントされたように見える</span>
</span></code></pre></td></tr></table></div></figure>


<p>ただ、このような素朴な実装だと、途中でネットワークが不調になった場合などに再接続処理が止まったままになる可能性があります。
例えば以下のようにトランザクションの中で例外が発生すると、以後そのコネクションを使おうとしたときにエラーになります。
コネクションの永続化をしている場合はしばらくエラーが出続けることになり問題です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nb">eval</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">multi</span><span class="p">;</span> <span class="c1"># トランザクション開始</span>
</span><span class='line'>    <span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">incr</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">incr</span><span class="p">(</span><span class="s">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">die</span> <span class="s">&quot;ネットワークトラブル！&quot;</span>
</span><span class='line'>    <span class="nv">$redis</span><span class="o">-&gt;</span><span class="nb">exec</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">ping</span><span class="p">;</span> <span class="c1"># 繋がらなくなる</span>
</span></code></pre></td></tr></table></div></figure>


<p>Redis::Transaction はこのような問題を防ぐためのモジュールです。
トランザクションが失敗したときの後始末をよしなにやってくれるので、万が一エラーになっても安心です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">multi_exec</span> <span class="n">Redis</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sub </span><span class="p">{</span> <span class="c1"># 1は失敗したときのリトライ回数</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$redis</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">incr</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">incr</span><span class="p">(</span><span class="s">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">die</span> <span class="s">&quot;ネットワークトラブル！&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">ping</span><span class="p">;</span> <span class="c1"># 繋がる！</span>
</span></code></pre></td></tr></table></div></figure>


<p>WATCH-MULTI-EXECを使った楽観的ロックも扱えます。
Redisのトランザクションは楽観的ロックなので、
処理中に他のクライアントが書き換えを行った場合に失敗する可能性があります。
その場合でもリトライを行ってくれて便利です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># $redis-&gt;incr(&#39;mykey&#39;) をトランザクションを使って実現する</span>
</span><span class='line'><span class="n">watch_multi_exec</span> <span class="n">Redis</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;mykey&#39;</span><span class="p">],</span> <span class="mi">10</span><span class="p">,</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$redis</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;mykey&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$redis</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="s">&#39;mykey&#39;</span><span class="p">,</span> <span class="nv">$value</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>Redisのトランザクション・スクリプト・ランキングを扱うPerlモジュールを紹介しました。
それぞれは小さなモジュールですが、
トラブル発生時にも問題にならないようちゃんとした実装しようとすると、
意外と考えることが多く面倒なものです(特にトランザクション周りとか)。
適当に実装してしまったこころ当たりのある人は、ぜひ試してみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ngrokみたいなHTTPプロキシを書いてみた]]></title>
    <link href="http://shogo82148.github.io/blog/2016/03/14/http2-over-websocket/"/>
    <updated>2016-03-14T22:59:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2016/03/14/http2-over-websocket</id>
    <content type="html"><![CDATA[<p>開発中のWebアプリをみんなに試してほしいけど、
サーバなんてなくて開発環境がローカルにしか無くて公開できないということは、
開発初期段階だとよくあることだと思います。
もちろん本格的にやるならテスト用にサーバを建てるべきですが、
小さなものなら<a href="https://ngrok.com/">ngrok</a>を使うと簡単です。
<a href="https://ngrok.com/">ngrok</a>の公開サーバへのHTTPリクエストをローカルにリレーして、
ローカルのサーバをお手がるに公開できるサービスです。</p>

<p>びっくりするほど簡単に公開できて便利ですが、
一応oAuthで制限とかかけたいなーとかカスタマイズしてみたくなってきたので、
似たようなものを自作できないかといろいろ遊んでみました。</p>

<p>その結果、HTTP2 over Websocketみたいな謎なものが出来上がってしまったというお話です。</p>

<!-- More -->


<h2>HTTP2 over Websocketというアイデア</h2>

<p><a href="https://ngrok.com/">ngrok</a>っぽいものを実現するためには、
サーバが受け取ったHTTPリクエストをローカルの環境に転送する必要があります。
ご存知のとおり通常のHTTPではサーバ側からのプッシュ配信が難しいので、Websocketを使うのが良さそうです。
しかし、複数のコネクションで並列にやってくるHTTPリクエストを、一本のWebsocketに束ねる必要があり、
上手く制御するのは大変そうです。</p>

<p>さて、HTTP2は一つのTCPコネクションで複数のリクエストを並行処理する仕様があります。
「複数のリクエストを一本に束ねる」という点ではなんか似ているので、なんだか流用できそうな気がしてきました。
Golangならきっと上手いこと<code>interface</code>を実装すれば、なんとかできるのではとやってみました。</p>

<h2>実装</h2>

<p>HTTP2は暗号化や複雑なフロー制御を行っていますが、
外から見れば<code>net.Conn</code>インターフェースに読み書きしている何かに過ぎません。
そして、<code>websocket.Conn</code>も<code>net.Conn</code>を実装しているので、そのままHTTP2のライブラリに渡せるはずです。</p>

<p>そうしてできたのが以下のサーバです。</p>

<figure class='code'><figcaption><span>server.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;errors&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http/httputil&quot;</span>
</span><span class='line'>  <span class="s">&quot;sync&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;golang.org/x/net/http2&quot;</span>
</span><span class='line'>  <span class="s">&quot;golang.org/x/net/websocket&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">transport</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">m</span>      <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span><span class='line'>  <span class="nx">t</span>      <span class="nx">http</span><span class="p">.</span><span class="nx">RoundTripper</span>
</span><span class='line'>  <span class="nx">closed</span> <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">t</span> <span class="o">*</span><span class="nx">transport</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">t</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">transport</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">s</span> <span class="o">:=</span> <span class="nx">websocket</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span><span class="nx">Handler</span><span class="p">:</span> <span class="nx">websocket</span><span class="p">.</span><span class="nx">Handler</span><span class="p">(</span><span class="nx">Handler</span><span class="p">)}</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3000&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3001&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">httputil</span><span class="p">.</span><span class="nx">ReverseProxy</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Transport</span><span class="p">:</span> <span class="nx">t</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Director</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">req</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Handler</span><span class="p">(</span><span class="nx">ws</span> <span class="o">*</span><span class="nx">websocket</span><span class="p">.</span><span class="nx">Conn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;start new connection&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">t2</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http2</span><span class="p">.</span><span class="nx">Transport</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">t2</span><span class="p">.</span><span class="nx">NewClientConn</span><span class="p">(</span><span class="nx">ws</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">Lock</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">t</span><span class="p">.</span><span class="nx">t</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">t</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;already connected.&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">t</span> <span class="p">=</span> <span class="nx">conn</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class='line'>  <span class="o">&lt;-</span><span class="nx">t</span><span class="p">.</span><span class="nx">closed</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;close connection&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">transport</span><span class="p">)</span> <span class="nx">RoundTrip</span><span class="p">(</span><span class="nx">req</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Response</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">Lock</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">t2</span> <span class="o">:=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">t</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">t2</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;connection not found&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">t2</span><span class="p">.</span><span class="nx">RoundTrip</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">t</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">Lock</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">t</span><span class="p">.</span><span class="nx">t</span> <span class="p">=</span> <span class="kc">nil</span>
</span><span class='line'>      <span class="nx">t</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">t</span><span class="p">.</span><span class="nx">closed</span> <span class="o">&lt;-</span> <span class="kd">struct</span><span class="p">{}{}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">res</span><span class="p">,</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>複数Websocketのコネクションが張られた場合の処理が少し煩雑ですが、思いのほか短くかけました。
3001番ポートに来たリクエストをWebsocket経由で転送します。
Websocketは3000番ポートで待ち受けです。</p>

<p>これにアクセスするためのクライアントがこちら。</p>

<figure class='code'><figcaption><span>client.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http/httputil&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/url&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;golang.org/x/net/http2&quot;</span>
</span><span class='line'>  <span class="s">&quot;golang.org/x/net/websocket&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">origin</span> <span class="o">:=</span> <span class="s">&quot;http://localhost:3000/&quot;</span>
</span><span class='line'>  <span class="nx">u</span> <span class="o">:=</span> <span class="s">&quot;ws://localhost:3000/&quot;</span>
</span><span class='line'>  <span class="nx">ws</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">websocket</span><span class="p">.</span><span class="nx">Dial</span><span class="p">(</span><span class="nx">u</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="nx">origin</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">target</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">Parse</span><span class="p">(</span><span class="s">&quot;http://localhost:8000/&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">s</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http2</span><span class="p">.</span><span class="nx">Server</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">s</span><span class="p">.</span><span class="nx">ServeConn</span><span class="p">(</span><span class="nx">ws</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">http2</span><span class="p">.</span><span class="nx">ServeConnOpts</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Handler</span><span class="p">:</span> <span class="nx">httputil</span><span class="p">.</span><span class="nx">NewSingleHostReverseProxy</span><span class="p">(</span><span class="nx">target</span><span class="p">),</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Websocket経由でリクエストを受け付け、それを8000番ポートに転送します。
こちらも非常に短くかけました。
サーバーとクライアントを立ち上げて<code>http://localhost:3001/</code>にアクセスすると、
<code>http://localhost:8000/</code>の内容が見れるはずです。</p>

<h2>ngrok1.xについて</h2>

<p>ところでngrokの旧バージョンはソースコードが公開されているから、こっちを使ったほうが早い？
でも、開発中止って書かれてて不安になる。</p>

<ul>
<li><a href="https://github.com/inconshreveable/ngrok">ngrok1.x</a></li>
</ul>


<h2>まとめ</h2>

<p>ローカルのサーバをお手軽に公開するためのngrokというサービスを紹介しました。
自作のためのアイデアとして、http2 over websocketを試してみました。</p>

<p>設定の読み込みとかエラー処理とかセキュリティ周りとかいろいろ足りてない部分はありますが、
たったあれだけのコードで、ヘッダの圧縮転送、リクエストの並行処理等のHTTP2の機能が使えるのは面白いですね。</p>

<p>もうちょっと手を加えて多少は使えるものにしてみたいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx-omniauth-adapterのGolangポート作った]]></title>
    <link href="http://shogo82148.github.io/blog/2016/03/10/go-nginx-oauth2-adapter/"/>
    <updated>2016-03-10T12:51:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2016/03/10/go-nginx-oauth2-adapter</id>
    <content type="html"><![CDATA[<p>「<a href="http://techlife.cookpad.com/entry/2015/10/16/080000">nginx で omniauth を利用してアクセス制御を行う</a>」という記事で、
<a href="http://nginx.org/en/docs/http/ngx_http_auth_request_module.html">ngx_http_auth_request_module</a>の存在を知ったので、
Golangで<a href="https://github.com/sorah/nginx_omniauth_adapter">nginx_omniauth_adapter</a>と似たようなものを作ってみました。</p>

<ul>
<li><a href="https://github.com/shogo82148/go-nginx-oauth2-adapter">shogo82148/go-nginx-oauth2-adapter</a></li>
</ul>


<!-- More -->


<h2>背景</h2>

<p><a href="https://github.com/typester/gate">typester/gate</a>は単体でも動くようになっていますが、
例えばIP制限などちょっと高度なことをしたい場合には結局nginxを前段に置く必要があります。
nginxとgateの設定を同時にいじる必要があって煩雑だと感じていました。</p>

<p>そんな中「<a href="http://techlife.cookpad.com/entry/2015/10/16/080000">nginx で omniauth を利用してアクセス制御を行う</a>」という記事で、
<a href="http://nginx.org/en/docs/http/ngx_http_auth_request_module.html">ngx_http_auth_request_module</a>の存在を知りました。
gateが認証＋Proxyをやってしまうのに対して、認証だけRubyのomniauthモジュールで行いProxyはnginxに任せるという方法です。</p>

<p>以前から記事の存在は知っていたのですが、Rubyの実行環境をそろえるのが億劫で手を出せずにいました。
小さなアプリなので自分の慣れた言語で実装しても大したことないのではと思い、Goで実装してみることにしました。</p>

<h2>使い方</h2>

<p><code>go get</code>で落として来れます。
最低限client_idとclient_secretの指定が必要です。
nginx_omniauth_adapterと同じ環境変数名で設定できるほか、YAML形式の設定ファイルを読みこませることができます。
YAMLの形式はREADMEを参照してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go get github.com/shogo82148/go-nginx-oauth2-adapter/cli/go-nginx-oauth2-adapter
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">NGX_OMNIAUTH_GOOGLE_KEY</span><span class="o">=</span>YOUR_CLIENT_ID
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">NGX_OMNIAUTH_GOOGLE_SECRET</span><span class="o">=</span>YOUR_CLIENT_SECRET
</span><span class='line'><span class="nv">$ </span>go-nginx-oauth2-adapter
</span><span class='line'><span class="nv">$ </span>go-nginx-oauth2-adapter -c conf.yaml <span class="c"># 設定ファイルでの指定も可能</span>
</span></code></pre></td></tr></table></div></figure>


<p>PerlでHTTPサーバ書いているひとにはおなじみのServer::Starterにも対応しているので、
それ経由で立ち上げておくと設定の更新・プログラム自身の更新等が楽になると思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>start_server --port 18081 -- go-nginx-oauth2-adapter -c conf.yaml
</span></code></pre></td></tr></table></div></figure>


<p>nginx側の設定は<a href="https://github.com/shogo82148/go-nginx-oauth2-adapter/blob/master/examples/nginx/nginx-site.conf">examples</a>ディレクトリを参照してください。
ヘッダ名・パス名等を合わせてあるので、nginx_omniauth_adapterと同じ設定で動くはずです。</p>

<p>また、<a href="https://h2o.examp1e.net/">h2o</a>の設定はプログラマブルだからh2oでもちゃんと設定ファイルを書けば動くのではと考え、
<a href="https://github.com/shogo82148/go-nginx-oauth2-adapter/blob/master/examples/h2o/oauth.rb">h2oの設定</a>も書いてみました。
mrubyからproxyに渡るリクエストを書き換える方法がない(？)っぽいので、アプリ側で認証情報をとることはできないですが、一応制限はできます。
basic認証の実装を見る限りremote-userヘッダだけは渡せるようなので、これを使えばなんとかなるかもしれないですが、未確認です。
(Ruby慣れてないからってGoで実装したけど、結局Rubyを書いていて面白い)</p>

<h2>nginx_omniauth_adapterとの違い</h2>

<p>厳密に同じ挙動を実装するのが面倒だったため、挙動に若干の違いがあります。
一番大きなものは認証後のリダイレクト先です。</p>

<p>nginx_omniauth_adapterは認証後、一度adapterのURLにリダイレクトしてから、アプリサーバの<code>/_auth/callback</code>にリダイレクトします。
それに対してgo-nginx-oauth2-adapterは認証後、アプリサーバの<code>/_auth/callback</code>に直接リダイレクトします。
この違いのため、Google Developers Consoleの「承認済みのリダイレクト URI」に設定するべきURIが異なることに注意してください。
nginx_omniauth_adapterはadapter自身のURI、go-nginx-oauth2-adapterはアプリサーバの<code>/_auth/callbak</code>を指定します。</p>

<p>この挙動のため、go-nginx-oauth2-adapterはアプリの追加のたびにnginxの設定に加え「承認済みのリダイレクト URI」に正しいURIを追加する必要があります。
もちろん設定箇所がGoogle Developers Consoleではないだけで、nginx_omniauth_adapterもリダイレクト先の設定は必要です。
GoogleでもFacebookでも認証できるようにしたいという場合、nginx_omniauth_adapterは設定を一箇所変えればOKですが、go-nginx-oauth2-adapterは各サービスに登録し直す必要があります。
現状、認証に使うサービスをユーザが選ぶ仕組みがないので、そのまま放置してあります。</p>

<h2>まとめ</h2>

<p><a href="https://github.com/sorah/nginx_omniauth_adapter">nginx_omniauth_adapter</a>のGolangポート
<a href="https://github.com/shogo82148/go-nginx-oauth2-adapter">shogo82148/go-nginx-oauth2-adapter</a>を紹介しました。</p>

<p>adapter自身の公開設定をしなくて良い分簡単にセットアップできます。
nginx_omniauth_adapter互換ですぐに乗り換えもできるので、ぜひお気軽にお試し下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[転職して一週間がたちました]]></title>
    <link href="http://shogo82148.github.io/blog/2016/03/08/join-fuller/"/>
    <updated>2016-03-08T15:55:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2016/03/08/join-fuller</id>
    <content type="html"><![CDATA[<p>転職して1週間がたち，新しい生活サイクルにも慣れてきましたので近況報告をします．
<a href="http://www.kayac.com/">面白法人</a>を卒業し、3月1日から <a href="http://fuller.co.jp/">Fuller 株式会社</a>で働き始めました！
アプリの視聴率調査の<a href="https://analytics.appa.pe/">App Ape Analytics</a>の提供を中心に、スマフォアプリの開発・分析をやってる会社です。</p>

<!-- More -->


<h2>Pythonの会社なのか？</h2>

<p>私も入るまでみんなPythonを使っている会社だと思っていたのですが、
実際はPythonとjavascript半々くらいで使われています。（若干javascript勢の方が多いかも？）
最近は一部Goが導入されつつあるようでが、残念ながらPerlは影も形もありません。
折角Perlな会社にいたので、Perlの布教活動に勤しみたいと思っています。</p>

<h2>業務の感じ</h2>

<p>チームみんなで改善点を話し合って、みんなで解決していくような感じです。
慣れないツールばっかりで苦労してますが、頑張ります。</p>

<h2>会社の雰囲気</h2>

<p>ひとことで言うと大学の研究室みたいな感じです。（こう言えば多くの人に伝わるんじゃないかなと）
社員の高専卒の割合が非常に高く僕自身も高専の出身なので、懐かしい感じです。</p>

<h2>最後に一言</h2>

<p>TLを追ってなかったので全然気が付かなかったけど、退職と転職のタイミングがamacbee氏と完全に一致していてびっくりした。
僕も26日退社、1日入社だったのです。</p>

<ul>
<li><a href="http://amacbee.hatenablog.com/entry/2016/02/28/210544">転職して一週間がたちました</a></li>
<li><a href="http://amacbee.hatenablog.com/entry/2016/02/28/210544">退職します</a></li>
</ul>


<p>折角なので、記事の中身もamacbee氏に合わせてみました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[グロンギ語翻訳辞書をアップデートしました]]></title>
    <link href="http://shogo82148.github.io/blog/2016/02/27/update-grongish-dictionary/"/>
    <updated>2016-02-27T10:27:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2016/02/27/update-grongish-dictionary</id>
    <content type="html"><![CDATA[<p>やることがたくさんあるときに限ってどうでもいいことが捗ってこまっているいっちーです。
先日、挑戦状を受け取ったので、グロンギ語翻訳の品質改善に挑戦しました。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">《緊急告知》2月26日(金)、何かが起こる!!「仮面ライダークウガ」にまつわる新商品のようですが・・・。ページに書かれているのは、グロンギ語？お客様の中で、リントの言葉に翻訳できる方はいらっしゃいますか～？ <a href="https://t.co/hMDQCST6Tz">https://t.co/hMDQCST6Tz</a></p>&mdash; プレミアムバンダイ (@p_bandai) <a href="https://twitter.com/p_bandai/status/699790752985931776">February 17, 2016</a></blockquote>


<script async src="http://shogo82148.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<ul>
<li><a href="http://nlab.itmedia.co.jp/nl/articles/1602/17/news123.html">仮面ライダークウガより衝撃の新アイテム登場 ボンジ・ジュグギゾ・ガギバギ・グスと判明!(投げやり)</a></li>
</ul>


<p>お手軽に試せるページも作ったので、こちらでお試し下さい。</p>

<ul>
<li><a href="http://shogo82148.github.io/Grongish/">グロンギ語翻訳</a></li>
</ul>


<!-- More -->


<h2>変換の仕組み</h2>

<p>変換の仕組みの詳細は<a href="http://shogo82148.hatenablog.com/entry/2012/02/11/181441">以前書いた記事</a>をどうぞ。
概略だけ書いておくと、
日本語からグロンギ語への変換は<a href="http://taku910.github.io/mecab/">MeCab</a>を使った読み・品詞推定の結果もとに、
変換ルールを適用して翻訳しています。
グロンギ語から日本語への翻訳は、この翻訳問題が実は仮名漢字変換と同じ問題だということを利用して、
IMEの辞書をグロンギ語対応したものを使っています。</p>

<h2>変換ロジックの修正</h2>

<h3>旧版の問題点</h3>

<ul>
<li>ボンジジュグギゾガギバギグス: 紺地重視を再開する</li>
<li>ゲゲルンギバブゾロヅボパザセザ: ゲームのしなくっ持つのはだれだ</li>
<li>ゲゲルゾザジレスゾ: ゲームを始めるぞ</li>
</ul>


<p>「この日」は「ボンジ」が正しいのですが、「ボボジ」と変換していたため正しく認識できていませんでした。
「の」は通常「ガ」になるのですが、助詞として現れたときは「ン」になります。
さらに連体詞の一部として出てきたときも「ン」になるのですが、こちらのルールが抜けていました。</p>

<h3>さらなる改良</h3>

<p>旧版は<a href="http://chasen.org/~taku/software/mecab-skkserv/">mecab-skkdic</a>を元にした辞書を使っていましたが、
<a href="https://github.com/google/mozc">mozc</a>ベースに変更しました。
mozcの辞書はクラスタリングや語彙化のような粒度調整が行われており、変換精度の向上が期待できます。
どのようが調整が行われたかは<a href="http://www.slideshare.net/nokuno/tokyotextmining02-mozc">Mozcソースコード徹底解説 </a>や
<a href="http://www.anlp.jp/proceedings/annual_meeting/2011/pdf_dir/C4-3.pdf">言語処理学会でのMozcの資料</a>を見るとよいと思います。</p>

<p>mozcの変換エンジンをそのまま使えると良かったのですが、すごく面倒なことがわかったのでギブアップしました。
(依存モジュールの関係で32bit版しかビルドできず64bitのプログラムからは直接呼び出せないとか、C++とかC++とかC++とか)
mozcとMeCabの辞書構造は非常に似ているので、MeCabの辞書形式に変換して利用しています。
mozcには共起辞書を使った補正機能(例えば同じ「かいたい」という読みでも、「猫を飼いたい」「マグロを解体」を出し分ける機能)など、
MeCabにはない機能も入っているので、そのうち挑戦してみたいですね。
ただし、mozcには機能だけ組み込まれていて辞書が入っていないので、mozcを使っただけだと大差ないかもしれません。</p>

<h3>改良の結果</h3>

<ul>
<li>ボンジジュグギゾガギバギグス: この日重視を再開する</li>
<li>ゲゲルンギバブゾロヅボパザセザ: ゲームの資格を持つ子は誰だ</li>
<li>ゲゲルゾザジレスゾ: ゲームを始めるぞ</li>
</ul>


<p>だいぶ近くなりました。
「重視」と「遊戯」はグロンギ語で同じ音なので、難しいですね。</p>

<h2>変換サーバの実装</h2>

<p>ライブラリはPythonで書いてあるので、
PythonのWebフレームワークである<a href="http://www.pylonsproject.org/">Pyramid</a>を使ってAPI化してみました。</p>

<h3>デプロイ時のファイル置き換えをアトミックにする</h3>

<p>sakuraのVPS上で<a href="http://yuuki.hatenablog.com/entry/droot">droot</a>を使って起動しています。
kazuhoさんの「<a href="https://twitter.com/kazuho/status/671489245895221248">server-starter が SIGHUP 受け取ると pull 型のデプロイツールが起動して、そいつが新しいディレクトリにイメージを展開して、そこに chroot してアプリケーションが動き出すスタイル</a>」を実践してみたくなったので、以下のようなスクリプトを書いてみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">CONTAINER_DIR</span><span class="o">=</span>/var/containers/hogehoge-<span class="nv">$$</span>
</span><span class='line'>tar zfx hogehoge.tar.gz -C <span class="nv">$CONTAINER_DIR</span>
</span><span class='line'>
</span><span class='line'>droot run --root <span class="nv">$CONTAINER_DIR</span> <span class="nb">exec </span>gunicorn server:application &amp;
</span><span class='line'><span class="nv">CHILD</span><span class="o">=</span><span class="nv">$!</span>
</span><span class='line'>
</span><span class='line'>_term<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">kill</span> -TERM <span class="s2">&quot;$CHILD&quot;</span> 2&gt;/dev/null
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">trap </span>_term SIGTERM
</span><span class='line'>
</span><span class='line'>_cleanup_child<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    droot rm --root <span class="nv">$CONTAINER_DIR</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">trap </span>_cleanup_child EXIT
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span> <span class="s2">&quot;$CHILD&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>起動時にイメージの展開を行い、終了時には展開したディレクトリのお掃除をします。
<a href="https://twitter.com/kazuho/status/671489766689341440">「デプロイ時のファイルの置き換えを atomic にする」</a>ことができている・・・はず。
MeCabの辞書って上書きして大丈夫なの？とか余計なことを考えなくて済むので楽ちんですね。
(mmapしているから直接書き換えるとまずそう。mvすればinodeが変わるから行けるかもしれないけど、単語辞書と品詞辞書とで不整合起きたらまずくないか？とか)
モジュールが遅延ロードされて一部のモジュールだけ最新版になってしまい新旧の互換性が無くて死んだり、
テンプレートだけ都度読み込みになっていたため新旧の互換性が無くて死んだり、といったつらい経験があるのでこれは嬉しいです。</p>

<p>ただ、Dockerイメージをtarで固めたものはそこそこサイズがあって展開に時間がかかるのが不安です。
もたもたしていると Server::Starter が旧プロセスを殺してしまうので、ここは迅速に行う必要があります。
timeoutを付けてパラメータ調整すれば少しは安心かな・・・。</p>

<h3>graceful restart</h3>

<p>前述のスクリプトを Server::Starter 経由で起動すれば、プロセスの入れ替わりはできるのですが、
graceful restartするにはサーバのプログラムが Server::Starter に対応している必要があります。
PerlであればStarlet,Starman,Gazelleといった対応モジュールが出回っていますが、
残念ながら今回の変換器はPythonです。</p>

<p>PythonのWSGIサーバであるgunicornはRuby版のunicornと大体同じ作りになっているっぽいので、
<a href="http://d.hatena.ne.jp/limitusus/20131225/1387993119">Server::Starterに対応するとはどういうことか</a>
で紹介されているのと同じ方法が使えます。</p>

<p>どこでフックして変換コードを差し込めばいいかよくわかなかったので、さっきの起動スクリプトに差し込んでみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> <span class="o">[[</span> -n <span class="s2">&quot;${SERVER_STARTER_PORT-}&quot;</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">export </span><span class="nv">GUNICORN_FD</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$SERVER_STARTER_PORT</span> | tr <span class="s1">&#39;;&#39;</span> <span class="s1">&#39; &#39;</span> | xargs -n1 | cut -d<span class="o">=</span> -f2 | xargs | tr <span class="s1">&#39; &#39;</span> <span class="s1">&#39;,&#39;</span><span class="k">)</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>僕はShell Script芸人じゃないので、もっとシンプルな書き方があれば教えていただきたい。</p>

<h2>あとがき</h2>

<p>最初の予告ツイートの商品の販売が始まってましたね。</p>

<ul>
<li><a href="http://p-bandai.jp/item/item-1000102778/">仮面ライダークウガ グロンギ ゲゲルの掟セット【プレミアムバンダイ限定】</a></li>
<li><a href="http://nlab.itmedia.co.jp/nl/articles/1602/27/news018.html">「仮面ライダークウガ」でグロンギ族の必須アイテム「グゼパ」、初の商品化 襲った人間が数えられる!</a></li>
</ul>


<p>商品ページのグロンギ語をいくつか解読してみましたが、あまりうまくいかない・・・。
本家グロンギ語は語順が変わっている場合もあって流石に難しいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MeCabのGolangバインディングを書いてみた]]></title>
    <link href="http://shogo82148.github.io/blog/2016/02/11/golang-mecab-binding/"/>
    <updated>2016-02-11T19:32:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2016/02/11/golang-mecab-binding</id>
    <content type="html"><![CDATA[<p>Golangから<a href="http://taku910.github.io/mecab/">MeCab</a>を呼び出すライブラリ探せばあるにはあるのですが、
なんだかどれもメモリ管理がちょっと怪しいんですよね・・・。</p>

<ul>
<li><a href="http://yukihir0.hatenablog.jp/entry/2015/01/18/164446">GolangでMeCabを使う。</a>

<ul>
<li><a href="https://github.com/yukihir0/mecab-go">yukihir0/mecab-go</a></li>
</ul>
</li>
<li><a href="http://qiita.com/rerofumi/items/2bb1e49b20f2175ecaac">Go言語から mecab を使う - Qiita</a>

<ul>
<li><a href="https://bitbucket.org/rerofumi/mecab">rerofumi/mecab</a></li>
</ul>
</li>
<li><a href="http://d.hatena.ne.jp/gtaka555/20091116/p2">Go で Mecab を使ってみた</a></li>
</ul>


<p>メモリ管理は<a href="https://github.com/bluele/mecab-golang">bluele/mecab-golang</a>が一番しっかりしているっぽいですが、
libmecabの一番高機能だけど面倒な使い方しか対応していなくて、ちょっとカジュアルに遊ぶにはつらい。</p>

<p>というわけで、カジュアルな用途から高度な使い方まで対応したWrapperを書いてみました。</p>

<ul>
<li><a href="https://github.com/shogo82148/go-mecab">shogo82148/go-mecab</a></li>
</ul>


<!-- More -->


<h2>使い方</h2>

<p>READMEと<a href="https://godoc.org/github.com/shogo82148/go-mecab#pkg-examples">godocのexamples</a>からのコピペになってしまいますが、
簡単に使い方の紹介です。</p>

<h3>インストール</h3>

<p><code>go get</code>で取ってくることはできますが、事前にlibmecabとリンクするための設定が必要です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">CGO_LDFLAGS</span><span class="o">=</span><span class="s2">&quot;-L/path/to/lib -lmecab -lstdc++&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">CGO_CFLAGS</span><span class="o">=</span><span class="s2">&quot;-I/path/to/include&quot;</span>
</span><span class='line'><span class="nv">$ </span>go get github.com/shogo82148/go-mecab
</span></code></pre></td></tr></table></div></figure>


<p><code>mecab</code>コマンドと一緒に<code>mecab-config</code>がインストールされているはずなので、
それを使うのが楽でしょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">CGO_LDFLAGS</span><span class="o">=</span><span class="s2">&quot;`mecab-config --libs`&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">CGO_FLAGS</span><span class="o">=</span><span class="s2">&quot;`mecab-config --inc-dir`&quot;</span>
</span><span class='line'><span class="nv">$ </span>go get github.com/shogo82148/go-mecab
</span></code></pre></td></tr></table></div></figure>


<p>MeCabはデフォルトで<code>/usr/local/</code>以下に入るので、他の実装では決め打ちしている例が多いですが、
100%とは言い切れないので面倒ですが都度指定にしてあります。
cgoはpkg-configに対応しているで、MeCab側が対応してくれると環境変数の設定が不要になってもっと楽なんですけどね。</p>

<h3>カジュアルに使う</h3>

<p><code>Parse</code>を使うと<code>mecab</code>コマンドと同等の結果を文字列として受け取れます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">tagger</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mecab</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{})</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">defer</span> <span class="nx">tagger</span><span class="p">.</span><span class="nx">Destroy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">result</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tagger</span><span class="p">.</span><span class="nx">Parse</span><span class="p">(</span><span class="s">&quot;こんにちは世界&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>オプションの渡し方ですが、いろいろ考えた結果<code>map</code>で渡すようにしてみました。
(Perlの<a href="https://metacpan.org/release/Text-MeCab">Text::MeCab</a>からのインスパイア)
例えば、<code>mecab.New(map[string]string{"output-format-type": "wakati"})</code>のようにすると、分かち書きで出力されます。</p>

<h3>ノードの詳細情報にアクセスする</h3>

<p><code>ParseToNode</code>を使うと表層表現と品詞が最初から分かれた形で取得できます。
生起コストのようなより詳細な情報も取れます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">tagger</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mecab</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{})</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">defer</span> <span class="nx">tagger</span><span class="p">.</span><span class="nx">Destroy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// XXX: avoid GC problem with MeCab 0.996 (see https://github.com/taku910/mecab/pull/24)</span>
</span><span class='line'><span class="nx">tagger</span><span class="p">.</span><span class="nx">Parse</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">node</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tagger</span><span class="p">.</span><span class="nx">ParseToNode</span><span class="p">(</span><span class="s">&quot;こんにちは世界&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">;</span> <span class="nx">node</span> <span class="o">!=</span> <span class="p">(</span><span class="nx">mecab</span><span class="p">.</span><span class="nx">Node</span><span class="p">{});</span> <span class="nx">node</span> <span class="p">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Next</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s\t%s\n&quot;</span><span class="p">,</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Surface</span><span class="p">(),</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Feature</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以前紹介した<a href="http://shogo82148.github.io/blog/2015/12/20/mecab-in-python3-final/">MeCabをPython3から使う(続報)</a>の件、
実はPythonに限ったことではなく、公式で提供されている全ての言語バインディングで発生します。
(例えばRubyでも発生するっぽい: <a href="http://qiita.com/Salinger/items/3448d481b5b1e6cd2efb">Ruby + MeCab で Segmentation fault が発生した場合の対処</a>)
Pythonが参照カウント方式のGCを採用しているので、たまたま発見されるのが早かったというだけですね(Rubyだとメモリを圧迫するまで落ちないらしい)。</p>

<p>そして、公式で提供されているバインディングを参考に書いたので、今回のGo版でも発生します。
<a href="https://github.com/taku910/mecab/pull/24">MeCab側で対応してもらった</a>のでわざわざバインディング側で対応することもないだろうとの考えから、go-mecabでは特に対策をとっていません。
MeCab 0.996以下を使っている方は注意してください。(残念ながら0.996がまだ最新リリースだけど・・・)</p>

<h3>Modelを共有する</h3>

<p><a href="http://taku910.github.io/mecab/libmecab.html">MeCab ライブラリ</a>で紹介されている、マルチスレッド環境の場合での使い方にも対応しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">model</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mecab</span><span class="p">.</span><span class="nx">NewModel</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{})</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">defer</span> <span class="nx">model</span><span class="p">.</span><span class="nx">Destroy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">tagger</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">model</span><span class="p">.</span><span class="nx">NewMeCab</span><span class="p">()</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">defer</span> <span class="nx">tagger</span><span class="p">.</span><span class="nx">Destroy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">lattice</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mecab</span><span class="p">.</span><span class="nx">NewLattice</span><span class="p">()</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">defer</span> <span class="nx">lattice</span><span class="p">.</span><span class="nx">Destroy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">lattice</span><span class="p">.</span><span class="nx">SetSentence</span><span class="p">(</span><span class="s">&quot;こんにちは世界&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">err</span> <span class="p">=</span> <span class="nx">tagger</span><span class="p">.</span><span class="nx">ParseLattice</span><span class="p">(</span><span class="nx">lattice</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">lattice</span><span class="p">.</span><span class="nx">String</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>複数のゴルーチンから<code>model</code>や<code>tagger</code>を共有できると思います。<code>lattice</code>だけはゴルーチン毎に生成してください。
(へいれつへーこーしょりとかよくわかってないですが、スレッドセーフならゴルーチンセーフという認識であってますよね？)
メモリ効率もいいのでは(未検証なので誰か確かめて・・・)。</p>

<h2>GoからCへ文字列を渡す方法について</h2>

<h3>一般的な方法</h3>

<p>GoからCへ文字列を渡すには、Goの文字列を<code>C.CString</code>を使ってCの文字列に変換する必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">cstring</span> <span class="o">:=</span> <span class="nx">C</span><span class="p">.</span><span class="nx">CString</span><span class="p">(</span><span class="nx">gostring</span><span class="p">)</span>
</span><span class='line'><span class="k">defer</span> <span class="nx">C</span><span class="p">.</span><span class="nx">free</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">(</span><span class="nx">cstring</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="nx">C</span><span class="p">.</span><span class="nx">some_useful_function</span><span class="p">(</span><span class="nx">cstring</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで注意が必要なのは<code>C.CString</code>の戻り値はGoのガーベージコレクションの対象から外れるということです。
C側での使用状況をGoのランタイムが把握しきれないからですね。
<code>C.free</code>を使って明示的に開放してあげないとメモリーリークになります。
巷にあふれているMeCabバインディングはここがちょっと甘いものがほとんどでした。</p>

<h3>黒魔術を使う</h3>

<p>別に<code>C.CString</code>でも十分だとは思ったのですが、
<a href="http://qiita.com/mattn/items/176459728ff4f854b165">golang で string を []byte にキャストしてもメモリコピーが走らない方法を考えてみる</a>を見て、つい魔が差してしまいました。
Goの<code>string</code>をメモリーコピーを避けて<code>[]byte</code>にできるのなら、Cの文字列型(<code>*C.char</code>)でも同じことができるはず・・・！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">cstring</span> <span class="o">:=</span> <span class="o">*</span><span class="p">(</span><span class="o">**</span><span class="nx">C</span><span class="p">.</span><span class="nx">char</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">gostring</span><span class="p">))</span>
</span><span class='line'><span class="nx">C</span><span class="p">.</span><span class="nx">some_useful_function2</span><span class="p">(</span><span class="nx">cstring</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">gostring</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>通常C言語の文字列は末尾に<code>'\0'</code>が番兵としてついており、<code>C.CString</code>はそこら辺の事情を考慮してくれます。
しかし、この方法は番兵がいないため、文字列の長さを別途渡してあげる必要があります。
幸いMeCabは文字列長さを明示するインターフェースを備えているので、そちらを使えばOKでした。</p>

<p>Goの<code>string</code>はもちろんGCの対象なので、GCには要注意です。
関数内で閉じた状態にするのが無難ですね。
また、空文字が渡されるとヌルポで死んでしまうようなので、そこにも注意しましょう。</p>

<h2>まとめ</h2>

<ul>
<li>カジュアルな用途から高度な使い方まで対応したMeCabのWrapperを書いてみました

<ul>
<li><a href="https://github.com/shogo82148/go-mecab">shogo82148/go-mecab</a></li>
</ul>
</li>
<li>MeCab 0.996 と一緒に使う場合はGCに注意しましょう</li>
<li>GoからCへの文字列の渡し方を紹介しました

<ul>
<li><code>C.CString</code>を使った方法</li>
<li><code>unsafe.Ponter</code>を使った方法</li>
</ul>
</li>
</ul>


<p>ピンポーン <strong>unsafe をご使用になる時は、用法・用量を守り正しくお使い下さい。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS Lambda で MeCab を動かす(改)]]></title>
    <link href="http://shogo82148.github.io/blog/2016/02/10/mecab-in-lambda/"/>
    <updated>2016-02-10T14:52:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2016/02/10/mecab-in-lambda</id>
    <content type="html"><![CDATA[<p>MeCabのPythonバインディングをいじってた関係で、MeCabについてインターネットをさまよっていたら、
<a href="http://dev.classmethod.jp/cloud/aws-lambda-with-mecab/">AWS Lambda で MeCab を動かす</a>という記事を見つけました。
Lambdaの計算リソースで形態素解析できるのは楽しいですねー。
ただ実装にまだまだ改善できそうな部分があったので修正してみました。</p>

<!-- More -->


<h2>問題点</h2>

<p>第一に<strong>「外部プロセスを起動しているので遅い」</strong>という点です。
外部プロセスの起動は非常に重くて数百msかかります。
MeCabは非常に高速で数msもあれば解析が終わるのに、もったいないですよね。</p>

<p>第二に<strong>「OSコマンドインジェクションの危険性がある」</strong>という点です。
解析対象の文字列をコマンドライン引数として渡しており、この際シェルを経由しています。
そのため、<code>{"sentence": "$(ls)"}</code>のような文字列を渡すと、シェルがコマンドとして実行してしまいます。
API Gatewayなどで外部に公開した場合、第三者が何でもし放題な状態になってしまいます。</p>

<h2>頑張ってMeCabをライブラリとして呼ぶ</h2>

<p>全ての元凶は外部プロセス起動にあるので、頑張ってMeCabをライブラリとして呼んでみましょう。
そもそもなんで外部プロセス起動をしていたかというと、
<code>LD_LIBRARY_PATH</code>が正しく設定されていないため<code>import MeCab</code>時に<code>libmecab.so</code>を発見できないからです。
なんとかならないものかと探したところ、Stack Overflowにそれっぽい記事がありました。</p>

<ul>
<li><a href="http://stackoverflow.com/questions/6543847/setting-ld-library-path-from-inside-python">Setting LD_LIBRARY_PATH from inside Python</a></li>
</ul>


<p>「環境変数を設定してから自分自身をexecし直す方法」と「<code>ctypes</code>を使って絶対パス指定で読み込む方法」が紹介されています。
前者の方がvoteは多いですがLambdaでこれをやるのは大変そうなので、後者で試してみます。</p>

<figure class='code'><figcaption><span>lambda_function.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># preload libmecab</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">ctypes</span>
</span><span class='line'><span class="n">libdir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span> <span class="s">&#39;local&#39;</span><span class="p">,</span> <span class="s">&#39;lib&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">libmecab</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">cdll</span><span class="o">.</span><span class="n">LoadLibrary</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">libdir</span><span class="p">,</span> <span class="s">&#39;libmecab.so&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>一度読み込んでしまったライブラリは再利用されるため、
<code>import MeCab</code>はここで読み込んだライブラリにリンクされます(importの順番が重要なの闇な感じがする)。
<code>LD_LIBRARY_PATH</code>が正しく設定されている必要はありません。</p>

<p>さて、これで<code>lambda_function.py</code>と<code>tokenizer.py</code>が分かれている必要がなくなったので、二つを合体してみましょう。</p>

<figure class='code'><figcaption><span>lambda_function.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># coding=utf-8</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">settings</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">logging</span>
</span><span class='line'><span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">setLevel</span><span class="p">(</span><span class="n">settings</span><span class="o">.</span><span class="n">LOG_LEVEL</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># preload libmecab</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">ctypes</span>
</span><span class='line'><span class="n">libdir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span> <span class="s">&#39;local&#39;</span><span class="p">,</span> <span class="s">&#39;lib&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">libmecab</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">cdll</span><span class="o">.</span><span class="n">LoadLibrary</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">libdir</span><span class="p">,</span> <span class="s">&#39;libmecab.so&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">MeCab</span>
</span><span class='line'>
</span><span class='line'><span class="c"># prepare Tagger</span>
</span><span class='line'><span class="n">dicdir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span> <span class="s">&#39;local&#39;</span><span class="p">,</span> <span class="s">&#39;lib&#39;</span><span class="p">,</span> <span class="s">&#39;mecab&#39;</span><span class="p">,</span> <span class="s">&#39;dic&#39;</span><span class="p">,</span> <span class="s">&#39;ipadic&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">rcfile</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span> <span class="s">&#39;local&#39;</span><span class="p">,</span> <span class="s">&#39;etc&#39;</span><span class="p">,</span> <span class="s">&#39;mecabrc&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">default_tagger</span> <span class="o">=</span> <span class="n">MeCab</span><span class="o">.</span><span class="n">Tagger</span><span class="p">(</span><span class="s">&quot;-d{} -r{}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">dicdir</span><span class="p">,</span> <span class="n">rcfile</span><span class="p">))</span>
</span><span class='line'><span class="n">unk_tagger</span> <span class="o">=</span> <span class="n">MeCab</span><span class="o">.</span><span class="n">Tagger</span><span class="p">(</span><span class="s">&quot;-d{} -r{} --unk-feature 未知語,*,*,*,*,*,*,*,*&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">dicdir</span><span class="p">,</span> <span class="n">rcfile</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">DEFAULT_STOPTAGS</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;BOS/EOS&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">lambda_handler</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
</span><span class='line'>    <span class="n">sentence</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;sentence&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">stoptags</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;stoptags&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="n">DEFAULT_STOPTAGS</span>
</span><span class='line'>    <span class="n">unk_feature</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;unk_feature&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tokens</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">tagger</span> <span class="o">=</span> <span class="n">unk_tagger</span> <span class="k">if</span> <span class="n">unk_feature</span> <span class="k">else</span> <span class="n">default_tagger</span>
</span><span class='line'>    <span class="n">node</span> <span class="o">=</span> <span class="n">tagger</span><span class="o">.</span><span class="n">parseToNode</span><span class="p">(</span><span class="n">sentence</span><span class="p">)</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">node</span><span class="p">:</span>
</span><span class='line'>        <span class="n">feature</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">feature</span> <span class="o">+</span> <span class="s">&#39;,*,*&#39;</span>
</span><span class='line'>        <span class="n">part_of_speech</span> <span class="o">=</span> <span class="n">get_part_of_speech</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</span><span class='line'>        <span class="n">reading</span> <span class="o">=</span> <span class="n">get_reading</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</span><span class='line'>        <span class="n">base_form</span> <span class="o">=</span> <span class="n">get_base_form</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</span><span class='line'>        <span class="n">token</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&quot;surface&quot;</span><span class="p">:</span> <span class="n">node</span><span class="o">.</span><span class="n">surface</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&quot;feature&quot;</span><span class="p">:</span> <span class="n">node</span><span class="o">.</span><span class="n">feature</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&quot;pos&quot;</span><span class="p">:</span> <span class="n">part_of_speech</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&quot;reading&quot;</span><span class="p">:</span> <span class="n">reading</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&quot;baseform&quot;</span><span class="p">:</span> <span class="n">base_form</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&quot;stat&quot;</span><span class="p">:</span> <span class="n">node</span><span class="o">.</span><span class="n">stat</span><span class="p">,</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">part_of_speech</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stoptags</span><span class="p">:</span>
</span><span class='line'>            <span class="n">tokens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
</span><span class='line'>        <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span><span class="s">&quot;tokens&quot;</span><span class="p">:</span> <span class="n">tokens</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_part_of_speech</span><span class="p">(</span><span class="n">feature</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;-&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">v</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">feature</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)[:</span><span class="mi">4</span><span class="p">]</span> <span class="k">if</span> <span class="n">v</span> <span class="o">!=</span> <span class="s">&#39;*&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_reading</span><span class="p">(</span><span class="n">feature</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">feature</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)[</span><span class="mi">7</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_base_form</span><span class="p">(</span><span class="n">feature</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">feature</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)[</span><span class="mi">6</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>試してみる</h2>

<p><a href="https://github.com/shogo82148/aws-lambda-ja-tokenizer">forkして上記の修正をいれたレポジトリ</a>を用意したので、READMEにしたがってzipファイルを作り、Lambdaに登録しましょう。
雑なテストですが、Testボタンを5回押しみてログを見てみました。</p>

<p>まずは元記事にあったオリジナルのコードから。</p>

<table>
<thead>
<tr>
<th></th>
<th align="center"> Duration </th>
<th align="center"> Billing Duration </th>
<th align="center"> Memory Size </th>
<th align="center"> Max Memory Used </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center"> 280.76 ms </td>
<td align="center"> 300 ms </td>
<td align="center"> 128 MB </td>
<td align="center"> 29 MB |</td>
</tr>
<tr>
<td></td>
<td align="center"> 310.00 ms </td>
<td align="center"> 400 ms </td>
<td align="center"> 128 MB </td>
<td align="center"> 29 MB |</td>
</tr>
<tr>
<td></td>
<td align="center"> 205.99 ms </td>
<td align="center"> 300 ms </td>
<td align="center"> 128 MB </td>
<td align="center"> 30 MB |</td>
</tr>
<tr>
<td></td>
<td align="center"> 205.74 ms </td>
<td align="center"> 300 ms </td>
<td align="center"> 128 MB </td>
<td align="center"> 30 MB |</td>
</tr>
<tr>
<td></td>
<td align="center"> 213.96 ms </td>
<td align="center"> 300 ms </td>
<td align="center"> 128 MB </td>
<td align="center"> 30 MB |</td>
</tr>
</tbody>
</table>


<p>外部プロセスを起動しないように修正したバージョンです。</p>

<table>
<thead>
<tr>
<th></th>
<th align="center"> Duration </th>
<th align="left"> Billing Duration </th>
<th align="center"> Memory Size </th>
<th align="center"> Max Memory Used </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center"> 0.74 ms </td>
<td align="left"> 100 ms </td>
<td align="center"> 128 MB </td>
<td align="center"> 11 MB |</td>
</tr>
<tr>
<td></td>
<td align="center"> 0.74 ms </td>
<td align="left"> 100 ms </td>
<td align="center"> 128 MB </td>
<td align="center"> 11 MB |</td>
</tr>
<tr>
<td></td>
<td align="center"> 0.70 ms </td>
<td align="left"> 100 ms </td>
<td align="center"> 128 MB </td>
<td align="center"> 11 MB |</td>
</tr>
<tr>
<td></td>
<td align="center"> 0.69 ms </td>
<td align="left"> 100 ms </td>
<td align="center"> 128 MB </td>
<td align="center"> 11 MB |</td>
</tr>
<tr>
<td></td>
<td align="center"> 0.73 ms </td>
<td align="left"> 100 ms </td>
<td align="center"> 128 MB </td>
<td align="center"> 11 MB |</td>
</tr>
</tbody>
</table>


<p>速くなった！！！</p>

<h2>まとめ</h2>

<ul>
<li>AWS Lambdaでは外部プロセス起動は案外重たいのでなるべく避ける</li>
<li>深遠な理由により外部プロセス起動する場合でもシェルは使わない方が無難</li>
<li><code>LD_LIBRARY_PATH</code>の設定が必要なときは、<code>ctypes.cdll.LoadLibrary</code>を使って直接読みこめばなんとかなる</li>
</ul>


<p>外部ライブラリを読み込めるのは、いろいろ遊べそうですね・・・</p>

<h2>追記(2016-02-15)</h2>

<p><a href="https://github.com/KunihikoKido/aws-lambda-ja-tokenizer/pull/1">pullreq送って</a>取り込んでもらいました。</p>

<ul>
<li><a href="http://dev.classmethod.jp/cloud/improved-aws-lambda-with-mecab/">【改】AWS Lambda で MeCab を動かす</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redisでスコアを複数設定できるランキングを作ってみた]]></title>
    <link href="http://shogo82148.github.io/blog/2016/02/06/redis-leader-board-multi/"/>
    <updated>2016-02-06T02:30:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2016/02/06/redis-leader-board-multi</id>
    <content type="html"><![CDATA[<p>ランキングを作っているとスコアを複数設定したいことがよくあると思います。
例えば「得点が同じだったら早くその得点を出した人優先」とか「勝ち点が同じだったら得失点差が大きい方優先」とかのように、
最初の基準で順位を決められなかった場合の第二基準が欲しいみたいな場合です。</p>

<p>ランキングを作るのにはRedisのSorted Setを使うのが便利ですが、残念ながらSorted Setはひとつしかスコアを設定できません。
少し前にどうやったら実装できるかと社内チャットで話題に上ったので、試しにRedis::LeaderBoardMulti(仮名)という名前で書いてみました。</p>

<ul>
<li><a href="https://github.com/shogo82148/p5-Redis-LeaderBoardMulti">shogo82148/p5-Redis-LeaderBoardMulti</a></li>
</ul>


<!-- More -->


<h2>使い方</h2>

<p>メソッドの名前は<a href="http://www.songmu.jp/riji/archives/2013/06/redisleaderboar.html">Redis::LeaderBoard</a>にあわせてありますが、
スコアが複数指定できるようになった関係でちょっと変わってます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">Redis</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">LeaderBoard</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$redis</span> <span class="o">=</span> <span class="n">Redis</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$lb</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">LeaderBoardMulti</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span>
</span><span class='line'>    <span class="n">redis</span> <span class="o">=&gt;</span> <span class="nv">$redis</span><span class="p">,</span>
</span><span class='line'>    <span class="n">key</span>   <span class="o">=&gt;</span> <span class="s">&#39;leader_board:1&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">order</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s">&#39;asc&#39;</span><span class="p">,</span> <span class="s">&#39;desc&#39;</span><span class="p">],</span> <span class="c1"># asc/desc, desc as default</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="nv">$lb</span><span class="o">-&gt;</span><span class="n">set_score</span><span class="p">(</span><span class="s">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="mi">100</span><span class="p">,</span> <span class="nb">time</span><span class="p">);</span> <span class="c1"># 第二基準は時間=得点が同じだったら早くその得点を出した人優先</span>
</span><span class='line'><span class="nv">$lb</span><span class="o">-&gt;</span><span class="n">set_score</span><span class="p">(</span><span class="s">&#39;two&#39;</span> <span class="o">=&gt;</span>  <span class="mi">50</span><span class="p">,</span> <span class="nb">time</span><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="p">(</span><span class="nv">$rank</span><span class="p">,</span> <span class="nv">$score</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$lb</span><span class="o">-&gt;</span><span class="n">get_rank_with_score</span><span class="p">(</span><span class="s">&#39;one&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>set_score</code>の第二引数以降はすべてスコアとして扱われます。(そのためRedis::LeaderBoardと互換性はない)
上の例では「得点が同じだったら早くその得点を出した人優先」になってます。</p>

<h2>制限事項</h2>

<p>実装の都合により、以下のような制限があります。</p>

<ul>
<li>スコアはすべて64bit符号付き整数です

<ul>
<li>Redis::LeaderBoardのスコアは倍精度浮動小数点型なので小数も扱えるが、Redis::LeaderBoardMultiは整数だけ</li>
</ul>
</li>
<li>Redis 2.8.9以降のみで動きます</li>
</ul>


<h2>実装の仕組み</h2>

<p>Sorted Setの同じスコアを持つメンバーは辞書順にソートされます(zaddの<a href="http://redis.io/commands/zadd#elements-with-the-same-score">同じスコアを持つ要素</a>の項を参照)。
例えば以下の様にメンバー「a」「b」「c」を追加すると、必ず「abc」の順番になることが保証されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>127.0.0.1:6379&gt; ZADD ranking 0 "a" 0 "b" 0 "c"
</span><span class='line'>(integer) 3
</span><span class='line'>127.0.0.1:6379&gt; ZRANK ranking "b"
</span><span class='line'>(integer) 1</span></code></pre></td></tr></table></div></figure>


<p>これを利用して、メンバーの先頭にスコアをエンコードして付けておきます。
もちろんエンコードしたあとでもスコアの大小関係が保たれている必要があります。
以下はエンコード方式にビッグエンディアンの16bit整数を使った例です。
Redis 2.8.9から辞書順比較に特化したコマンド(LEXがつくやつ)が追加されているので、
ランクを求める処理は以下のように書くことができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>127.0.0.1:6379&gt; ZADD ranking 0 "\x00\x02b"    (bをスコア2で追加)
</span><span class='line'>(integer) 1
</span><span class='line'>127.0.0.1:6379&gt; ZADD ranking 0 "\x00\x01a"    (aをスコア1で追加)
</span><span class='line'>(integer) 1
</span><span class='line'>127.0.0.1:6379&gt; ZLEXCOUNT ranking - "(\x00\x02"    (スコア2未満の個数=bのランク)
</span><span class='line'>(integer) 1</span></code></pre></td></tr></table></div></figure>


<p>さすがに16bit符号なし整数だと範囲が狭いので、実際の実装は以下のようになっています。</p>

<ul>
<li>エンコードはビッグエンディアンの64bit符号付き整数</li>
<li>負数も扱えるように下駄を履かせる

<ul>
<li>1と-1を単純にエンコードすると-1の方が大きくなってしまう</li>
<li>0x8000000000000000を足して符号なし整数の範囲で比較できるように補正</li>
</ul>
</li>
</ul>


<h2>アトミック性について</h2>

<p>この方法だとSorted Setだけでは現在のスコアを取得できないので、
スコアだけ別管理にする必要があります。
スコアの更新とランキングの更新があるので、
片方だけ更新される状況がないようにアトミック性に注意する必要があります。
更新途中の間違った結果を返すだけならすぐに復旧するのでまだマシですが、
途中でネットワーク障害が起こって不整合なデータが残ってしまうと面倒です。</p>

<p>アトミック性を確保するためのパターンをいくつか実装してみました。
<code>use_script</code>と<code>use_hash</code>で制御が可能です。</p>

<h3>トランザクションを使った方法</h3>

<p>Redisには<a href="http://redis.io/topics/transactions">トランザクション</a>の仕組みがあるのでこれを使った方法です。
<code>use_script=&gt;0</code>が指定されるとこの方法で更新を行います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>127.0.0.1:6379&gt; WATCH ranking:a   (他のクライアントが更新を行っていないか監視)
</span><span class='line'>OK
</span><span class='line'>127.0.0.1:6379&gt; GET ranking:a   (ranking:aに入っている現在のスコアを取得)
</span><span class='line'>"\x00\x01"
</span><span class='line'>127.0.0.1:6379&gt; MULTI
</span><span class='line'>OK
</span><span class='line'>127.0.0.1:6379&gt; ZREM ranking "\x00\x01a"
</span><span class='line'>QUEUED
</span><span class='line'>127.0.0.1:6379&gt; ZADD ranking 0 "\x00\x03a"
</span><span class='line'>QUEUED
</span><span class='line'>127.0.0.1:6379&gt; SET ranking:a "\x00\x03"
</span><span class='line'>QUEUED
</span><span class='line'>127.0.0.1:6379&gt; EXEC   (スコアの更新とランキングの更新をアトミックに行う)
</span><span class='line'>1) (integer) 1
</span><span class='line'>2) (integer) 1
</span><span class='line'>3) OK</span></code></pre></td></tr></table></div></figure>


<p>Redisのトランザクションは楽観的ロックなので、他のクライアントがスコアを更新していると失敗する場合があります。
失敗した場合はリトライが必要です。
(この機構、いろいろと注意点があって毎回実装するのはつらすぎるので、別モジュールとして分離したいけど、いい名前とインターフェース募集中)</p>

<p><code>use_hash=&gt;1</code>が指定されていると、スコアの記録にHashを使います。
「Hashの特定のキーの更新をWATCHする」という命令はないため、ランキング全体を<code>WATCH</code>で監視します。
(<code>use_hash=&gt;0</code>の場合、そのメンバのスコアだけ監視する)</p>

<h3>Luaスクリプトを使った方法</h3>

<p>RedisはLuaスクリプトを実行する機能があります。
Luaスクリプト実行中は他の命令の実行をブロックするので、アトミック性が確保されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="kd">local</span> <span class="n">s</span><span class="o">=</span><span class="n">redis</span><span class="p">.</span><span class="n">call</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">GET&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s">ranking:a&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">s</span> <span class="k">then</span>
</span><span class='line'>  <span class="n">redis</span><span class="p">.</span><span class="n">call</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">ZREM&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s">ranking&#39;</span><span class="p">,</span> <span class="n">s</span><span class="o">..</span><span class="s1">&#39;</span><span class="s">a&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">redis</span><span class="p">.</span><span class="n">call</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">ZADD&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s">ranking&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s">\x00\x03a&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">redis</span><span class="p">.</span><span class="n">call</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">SET&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s">ranking:a&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s">\x00\x03&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Luaスクリプトを実行するには<code>EVAL</code>と<code>EVALSHA</code>の二種類のコマンドがあります。
<code>EVALSHA</code>は転送量を抑えられて便利ですが、事前に<code>SCRIPT LOAD</code>で使うスクリプトを登録しておく必要があります。
(ココらへんも別モジュールに分離したいけど、いい名前とインターフェース募集中)
<code>use_evalsha</code>オプションでどちらを使うか制御可能です。</p>

<p>ちなみに<code>EVAL</code>で実行したスクリプトも<a href="http://redis.io/commands/eval#script-cache-semantics">永遠にキャッシュされる</a>らしいです。
上の例はわかりやすいようにキー名や値を直接埋め込んでいますが、同じことをしようとLuaスクリプトの動的生成なんてすると死にます。
スクリプト内で<code>KEYS</code>や<code>ARGV</code>を使うと<code>EVAL</code>時にパラメータを渡せるようになるので、これを活用しましょう。</p>

<h3>諦める</h3>

<p><a href="https://metacpan.org/pod/Redis::LeaderBoard">Redis::LeaderBoard</a>の実装を見て気がついたんですが、
<code>get_rank</code>の実装は「スコアの取得」「スコアに対応するランクの取得」がアトミックでないため、
以下の条件を満たすと実際のランクより1大きい結果を返します。</p>

<ul>
<li>同じメンバーのスコア更新とランク取得が同時に行われる</li>
<li>ランクが上がるようにスコアが更新される</li>
</ul>


<p>確かに厳密性は欠けますがたかだか1結果が変わるだけですし、
そもそも更新と取得が同時に行われないようにモジュールを使う側が排他制御するべきですね。
こういうケースでは諦めるというのも一つの手かなと思いました。
もちろんデータの整合性が壊れる場合は頑張ってアトミック性を確保するべきでしょう。</p>

<h2>まとめ</h2>

<ul>
<li>Redisでランキングをつくる際に、スコアを複数設定する方法を紹介しました</li>
<li>アトミック性を確保する方法を紹介しました

<ul>
<li>トランザクションを使った方法</li>
<li>Luaスクリプトを使った方法</li>
<li>諦める</li>
</ul>
</li>
</ul>


<p>もうちょっとドキュメントを整備したらCPANにあげてみますかね。
トランザクション管理・Luaスクリプト管理も分離したい(いい名前を思いついたら)。
「こんな名前がいい！」「こんなインターフェースがいい！」等あればコメントください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis::Fast 0.17 をリリースしました]]></title>
    <link href="http://shogo82148.github.io/blog/2016/01/23/redis-fast-0-dot-17-released/"/>
    <updated>2016-01-23T16:20:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2016/01/23/redis-fast-0-dot-17-released</id>
    <content type="html"><![CDATA[<p><a href="https://metacpan.org/release/SHOGO/Redis-Fast-0.17">Redis::Fast 0.17</a> をリリースしました。
主な変更点は以下のとおりです。</p>

<ul>
<li>I/Oの待ち合わせに使うシステムコールをselect(2)からpoll(2)に変更</li>
<li>hiredisをv0.13.3にアップデート</li>
</ul>


<!-- More -->


<p>macでテストが終わらない問題がありましたが、この変更によって修正されています。</p>

<p>hiredisは<a href="https://linuxjm.osdn.jp/html/LDP_man-pages/man2/connect.2.html">connect(2)</a>をnonblokingモードで呼び出しています。
nonblockingなので接続が未完了であってもすぐに制御を返し、errnoにEINPROGRESSが設定されます。
この場合、manにあるようにselect(2)で書き込み可能になるのを待つことで、接続完了を検知できます。</p>

<blockquote><p>select(2) で書き込み可能になった後に、 getsockopt(2) を使って SOL_SOCKET レベルで SO_ERROR オプションを読み出すこ とにより、 connect() が成功したか、失敗したかを判断できる。</p></blockquote>

<p>linuxの場合はこれで上手く動くのですが、macだと何故かselect(2)が永遠に制御を返さない場合があるようです。
接続先が存在しない場合に起こるのですが、制御を返す場合もあるので謎です。</p>

<p>いろいろ調べてはみたのですがselect(2)だとどうやっても上手く動かなかったので、poll(2)に変更しました。
poll(2)変更版でテストしてみると、接続先が存在しない場合にPOLLOUTを返すケースとPOLLHUPを返すケースがあるようです。
どうやらPOLLHUPにあたるイベントが来た時の挙動がlinuxとmacとで違うらしい？
謎です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UnityのBitmapフォントの収録文字のdiffを取る]]></title>
    <link href="http://shogo82148.github.io/blog/2015/12/22/diff-of-unity-bitmap-font/"/>
    <updated>2015-12-22T19:04:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/12/22/diff-of-unity-bitmap-font</id>
    <content type="html"><![CDATA[<p>Unityで文字を描画するには
「<a href="http://d.hatena.ne.jp/nakamura001/20120910/1347241168">BMFont(Bitmap Font Generator)でビットマップフォントを作る方法</a>」等にあるように
ビットマップフォントを自分で作ってあげないといけないらしいです。
(ダイナミックフォントというものもあるらしいけど、まだ安定性が検証ができていないので使ってない。)</p>

<p>フォントに入っている全部の文字を収録するとでかくなりすぎるので、一部の文字だけ収録するのが一般的だと思います。
入れる文字は自分で選ぶわけですが、フォントファイルを更新する際に、以前は使えた文字が入っていなくてつらい思いをしたので、
gitで差分をみれるようにしてみました。</p>

<!-- More -->


<p>gitのいろんなファイル形式の差分を見やすくする方法は
<a href="http://shogo82148.github.io/blog/2015/03/24/git-diff-csv/">Git Diffでcsvの差分を見やすく表示する</a>を参照。</p>

<p>csvのときと同じ要領で、まずはfntファイルをdiffを取りやすい形式に変換するスクリプト(fnt2txt)を用意し</p>

<figure class='code'><figcaption><span>fnt2txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>grep <span class="s1">&#39;char id=&#39;</span> <span class="nv">$1</span> | cut -d<span class="s1">&#39; &#39;</span> -f2 | cut -d<span class="o">=</span> -f2 | perl -MEncode -ne <span class="s1">&#39;printf &quot;%04x: %s\n&quot;, $_, encode_utf8 chr($_) if $_ &gt;= 32&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>fnt2txtを使う設定を<code>.git/config</code>に設定します。</p>

<figure class='code'><figcaption><span>.git/config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[diff "fnt"]
</span><span class='line'>        textconv = fnt2txt</span></code></pre></td></tr></table></div></figure>


<p>最後に拡張子.fntに対してだけこの設定が反映されるようにすればOKです。</p>

<figure class='code'><figcaption><span>.gitatrribute</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*.fnt diff=fnt</span></code></pre></td></tr></table></div></figure>


<p>こんな感じでdiffが見れます。</p>

<figure class='code'><figcaption><span>git-diff</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/foo.fnt b/foo.fnt</span>
</span><span class='line'><span class="gh">index 79391c0..e262b2d 100755</span>
</span><span class='line'><span class="gd">--- a/foo.fnt</span>
</span><span class='line'><span class="gi">+++ b/foo.fnt</span>
</span><span class='line'><span class="gu">@@ -93,6 +93,7 @@</span>
</span><span class='line'> 007c: |
</span><span class='line'> 007d: }
</span><span class='line'> 007e: ~
</span><span class='line'><span class="gi">+00a0:  </span>
</span><span class='line'> 00a1: ¡
</span><span class='line'> 00a2: ¢
</span><span class='line'> 00a3: £
</span></code></pre></td></tr></table></div></figure>


<p>事故防止に是非ご利用ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MeCabをPython3から使う(続報)]]></title>
    <link href="http://shogo82148.github.io/blog/2015/12/20/mecab-in-python3-final/"/>
    <updated>2015-12-20T01:03:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/12/20/mecab-in-python3-final</id>
    <content type="html"><![CDATA[<p>Python3からMeCabを扱おうとして挫折していたのですが
(<a href="http://shogo82148.github.io/blog/2015/06/02/mecab-in-python3/">MeCabをPython3から使う(中間報告)</a>)、
改めて調査して、上手くいかなかった原因が分かったのでご報告します。</p>

<!-- More -->


<h2>おさらい</h2>

<p>Python3で以下のようにMeCabを使おうとすると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">MeCab</span>
</span><span class='line'><span class="n">tagger</span> <span class="o">=</span> <span class="n">MeCab</span><span class="o">.</span><span class="n">Tagger</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="s">u&#39;MeCabで遊んでみよう!&#39;</span>
</span><span class='line'><span class="n">node</span> <span class="o">=</span> <span class="n">tagger</span><span class="o">.</span><span class="n">parseToNode</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="k">while</span> <span class="n">node</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">surface</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">node</span><span class="o">.</span><span class="n">feature</span><span class="p">)</span>
</span><span class='line'>    <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">next</span>
</span></code></pre></td></tr></table></div></figure>


<p>surfaceが全く読み取れないという現象に遭遇していました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BOS/EOS,*,*,*,*,*,*,*,*
</span><span class='line'>名詞,一般,*,*,*,*,*
</span><span class='line'>助詞,格助詞,一般,*,*,*,で,デ,デ
</span><span class='line'>動詞,自立,*,*,五段・バ行,連用タ接続,遊ぶ,アソン,アソン
</span><span class='line'>助詞,接続助詞,*,*,*,*,で,デ,デ
</span><span class='line'>Traceback (most recent call last):
</span><span class='line'>  File "m.py", line 10, in &lt;module&gt;
</span><span class='line'>  print( node.surface + '\t' + node.feature )
</span><span class='line'>  UnicodeDecodeError: 'utf-8' codec can't decode byte 0xa3 in position 1: invalid start byte</span></code></pre></td></tr></table></div></figure>


<h2>解決策</h2>

<p>詳しい原因なんてどうでもいいからMeCabを使いたい人向けに、最初に解決方法を書いておきます。
以下のように本当に解析したい対象を解析する前に、一度<code>parse</code>をしておけばOKです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">MeCab</span>
</span><span class='line'><span class="n">tagger</span> <span class="o">=</span> <span class="n">MeCab</span><span class="o">.</span><span class="n">Tagger</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">tagger</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span> <span class="c"># これ重要！！！！</span>
</span><span class='line'>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="s">u&#39;MeCabで遊んでみよう!&#39;</span>
</span><span class='line'><span class="n">node</span> <span class="o">=</span> <span class="n">tagger</span><span class="o">.</span><span class="n">parseToNode</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="k">while</span> <span class="n">node</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">surface</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">node</span><span class="o">.</span><span class="n">feature</span><span class="p">)</span>
</span><span class='line'>    <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">next</span>
</span></code></pre></td></tr></table></div></figure>


<p>解析結果を全く使わずに捨てていて無駄のように思えますが、この一行が重要です！
これを入れると以下のように正常に解析ができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    BOS/EOS,*,*,*,*,*,*,*,*
</span><span class='line'>MeCab   名詞,一般,*,*,*,*,*
</span><span class='line'>で      助詞,格助詞,一般,*,*,*,で,デ,デ
</span><span class='line'>遊ん    動詞,自立,*,*,五段・バ行,連用タ接続,遊ぶ,アソン,アソン
</span><span class='line'>で      助詞,接続助詞,*,*,*,*,で,デ,デ
</span><span class='line'>みよ    動詞,非自立,*,*,一段,未然ウ接続,みる,ミヨ,ミヨ
</span><span class='line'>う      助動詞,*,*,*,不変化型,基本形,う,ウ,ウ
</span><span class='line'>!       名詞,サ変接続,*,*,*,*,*
</span><span class='line'>    BOS/EOS,*,*,*,*,*,*,*,*</span></code></pre></td></tr></table></div></figure>


<p>解析を行うメソッドであれば<code>parseToNode</code>でも構いません。</p>

<h2>原因</h2>

<p>結果が壊れる直接的な原因は<a href="http://shogo82148.github.io/blog/2012/12/15/mecab-python/">MeCabをPythonから使う注意点とか</a>で紹介したように、
解析対象の文字列がPythonの管理下から外れGCされてしまったからです。
高速化のために余計なメモリーアロケーションを避けており、メモリ管理は利用者の責任というわけです。</p>

<p>なんとかならないものかと、よくソースコードを追ってみると<code>MECAB_ALLOCATE_SENTENCE</code>というフラグをONにすれば
<a href="https://github.com/taku910/mecab/blob/6b392e3960a4f5562e18742cb390ae1e22353d2a/mecab/src/tagger.cpp#L769-L775">メモリ管理をMeCabに任せることができる</a>ということがわかりました。
これはTaggerを作るときの引数から指定でき、<code>-C</code>もしくは<code>--allocate-sentence</code>というオプションがこのフラグに対応します。
これを有効にすれば解決だ！と思ったのですが、実は各種言語バインディングからMeCabを利用する場合は<a href="https://github.com/taku910/mecab/blob/6b392e3960a4f5562e18742cb390ae1e22353d2a/mecab/swig/MeCab.i#L102">デフォルトで有効になっています</a>。</p>

<p>何故だ・・・とさらにコードを追ってみると<code>parseToNode</code>の実装が<a href="https://github.com/taku910/mecab/blob/6b392e3960a4f5562e18742cb390ae1e22353d2a/mecab/src/tagger.cpp#L602-L611">以下のようになっていること</a>がわかりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">const</span> <span class="n">Node</span> <span class="o">*</span><span class="n">TaggerImpl</span><span class="o">::</span><span class="n">parseToNode</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Lattice</span> <span class="o">*</span><span class="n">lattice</span> <span class="o">=</span> <span class="n">mutable_lattice</span><span class="p">();</span>
</span><span class='line'>  <span class="n">lattice</span><span class="o">-&gt;</span><span class="n">set_sentence</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span> <span class="c1">// このなかでMECAB_ALLOCATE_SENTENCEフラグが立ってるか確認している</span>
</span><span class='line'>  <span class="n">initRequestType</span><span class="p">();</span>               <span class="c1">// このなかでMECAB_ALLOCATE_SENTENCEフラグを立ててる</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">parse</span><span class="p">(</span><span class="n">lattice</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">set_what</span><span class="p">(</span><span class="n">lattice</span><span class="o">-&gt;</span><span class="n">what</span><span class="p">());</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">lattice</span><span class="o">-&gt;</span><span class="n">bos_node</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>MECAB_ALLOCATE_SENTENCEフラグを立てる前に、立っているかを確認しています。</strong></p>

<p>解析対象の文字列を渡す前に<code>initRequestType()</code>を呼んで<code>MECAB_ALLOCATE_SENTENCE</code>フラグを立てれば良いのですが、
残念ながら<code>initRequestType()</code>も<code>mutable_lattice()</code>もprivateなメソッドなのでPythonから直接呼ぶことはできません。
そこで<code>parse()</code>を使って<code>initRequestType()</code>を間接的に呼び出せば問題解決というわけです。</p>

<h2>別解</h2>

<p><code>mutable_lattice()</code>は触れなくても、自分で作ったlatticeなら自由にいじれるので、
以下のようにlatticeをPython側で作るのも手ですね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">lattice</span> <span class="o">=</span> <span class="n">MeCab</span><span class="o">.</span><span class="n">Lattice</span><span class="p">()</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">MeCab</span>
</span><span class='line'><span class="n">tagger</span> <span class="o">=</span> <span class="n">MeCab</span><span class="o">.</span><span class="n">Tagger</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">lattice</span> <span class="o">=</span> <span class="n">MeCab</span><span class="o">.</span><span class="n">Lattice</span><span class="p">()</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="s">u&#39;MeCabで遊んでみよう!&#39;</span>
</span><span class='line'><span class="n">lattice</span><span class="o">.</span><span class="n">set_sentence</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="n">tagger</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">lattice</span><span class="p">)</span>
</span><span class='line'><span class="n">node</span> <span class="o">=</span> <span class="n">lattice</span><span class="o">.</span><span class="n">bos_node</span><span class="p">()</span>
</span><span class='line'><span class="k">while</span> <span class="n">node</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">surface</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span><span class="o">+</span><span class="n">node</span><span class="o">.</span><span class="n">feature</span><span class="p">)</span>
</span><span class='line'>    <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">next</span>
</span></code></pre></td></tr></table></div></figure>


<p>いずれの方法でもnodeからlatticeやtaggerへの参照がない(実際はあるけどPythonはそのことを知らない)ので、
解析結果を読んでいる最中にlatticeやtaggerがGCで回収されないよう注意しましょう。</p>

<h2>追記(2015-12-20)</h2>

<p>MeCab自体の問題っぽいので、MeCabにpullreq送って直してもらおうとソースいじってたけど、<a href="https://github.com/taku910/mecab/issues/5">すでにpatchあった</a>。
<a href="https://github.com/taku910/mecab/compare/master...shogo82148:request-type">patchを取り込んだブランチを用意した</a>ので、
GCされて困っている方はgit cloneしてお試し下さい。</p>

<h2>追記その2(2016-02-08)</h2>

<p>なんとか取り込んでもらおうと<a href="https://github.com/taku910/mecab/pull/24">Pull Request</a>にしてマージしてもらいました。
まだリリースはされていませんが、2016-02-08現在のmasterブランチをビルドすれば、ガーベージコレクションの問題はなくなるはずです。
<a href="https://twitter.com/chezou/status/696306806394474496">Twitterで作者に聞いてくれた</a>人がいたみたいで、僕のpulllreq以外もたくさんマージされたようです。
よかったよかった。リリースを心待ちにしています。
(が、<a href="https://github.com/taku910/mecab/pull/16">Python3対応のpullreq</a>はマージされていない・・・一応試してみてから+1しておこうかな)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PerlのDBIx::Class利用上の注意点]]></title>
    <link href="http://shogo82148.github.io/blog/2015/12/17/dbix-class/"/>
    <updated>2015-12-17T18:35:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/12/17/dbix-class</id>
    <content type="html"><![CDATA[<p>この記事は、<a href="http://qiita.com/advent-calendar/2015/perl5">Perl 5 Advent Calendar</a>の17日目の記事です。</p>

<p><a href="http://tech.kayac.com/archive/reconnect_redisfast.html">Redis::Fast の reconnect について</a>の中で
<a href="https://metacpan.org/release/DBIx-Class">DBIx::Class</a>のreconnectについても触れています。
DBIx::Classの安全にreconnectionが行えるように考慮されていますが、色々と注意点があります。
reconnection周りで調べてみたので、Advent Calendarの枠を借りてまとめたいと思います。</p>

<h2>DBIx::Classとは</h2>

<p><a href="https://metacpan.org/release/DBIx-Class">DBIx::Class</a>はPerlのO/Rマッピングモジュールです。
テーブル間のリレーションを定義でき、JOIN句の入ったクエリもサポートする等、かなり高機能なモジュールです。
もう僕はJOIN句をDBIx::Class以外で書ける気がしません。
詳しくはtypester先生の解説記事をどうぞ。</p>

<ul>
<li><a href="http://gihyo.jp/dev/serial/01/perl-hackers-hub">Perl Hackers Hub</a>

<ul>
<li><a href="http://gihyo.jp/dev/serial/01/perl-hackers-hub/000301">第3回　DBIx::Classでデータベース操作（1）</a></li>
<li><a href="http://gihyo.jp/dev/serial/01/perl-hackers-hub/000302">第3回　DBIx::Classでデータベース操作（2）</a></li>
<li><a href="http://gihyo.jp/dev/serial/01/perl-hackers-hub/000303">第3回　DBIx::Classでデータベース操作（3）</a></li>
</ul>
</li>
</ul>


<h2>サンプル</h2>

<p>サンプルとしてユーザの所持金を管理する簡単なアプリを作ってみます。
Webアプリとか作るの面倒だったので、コンソールアプリです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nb">package</span> <span class="nn">My::Schema::</span><span class="n">User</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">use</span> <span class="n">base</span> <span class="s">&#39;DBIx::Class::Core&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">__PACKAGE__</span><span class="o">-&gt;</span><span class="n">table</span><span class="p">(</span><span class="s">&#39;user&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">__PACKAGE__</span><span class="o">-&gt;</span><span class="n">add_columns</span><span class="p">(</span>
</span><span class='line'>        <span class="n">id</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">data_type</span>         <span class="o">=&gt;</span> <span class="s">&#39;INTEGER&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">is_nullable</span>       <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>            <span class="n">is_auto_increment</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="n">username</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">data_type</span>   <span class="o">=&gt;</span> <span class="s">&#39;VARCHAR&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">size</span>        <span class="o">=&gt;</span> <span class="mi">255</span><span class="p">,</span>
</span><span class='line'>            <span class="n">is_nullable</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">__PACKAGE__</span><span class="o">-&gt;</span><span class="n">set_primary_key</span><span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># userとmoneyは1対1の関係で、userに対応するmoneyが必ず存在しなければならない</span>
</span><span class='line'>    <span class="n">__PACKAGE__</span><span class="o">-&gt;</span><span class="n">has_one</span><span class="p">(</span>
</span><span class='line'>        <span class="s">&#39;money&#39;</span> <span class="o">=&gt;</span> <span class="s">&#39;My::Schema::Money&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">{</span> <span class="s">&#39;foreign.user_id&#39;</span> <span class="o">=&gt;</span> <span class="s">&#39;self.id&#39;</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nb">package</span> <span class="nn">My::Schema::</span><span class="n">Money</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">use</span> <span class="n">base</span> <span class="s">&#39;DBIx::Class::Core&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">__PACKAGE__</span><span class="o">-&gt;</span><span class="n">table</span><span class="p">(</span><span class="s">&#39;money&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">__PACKAGE__</span><span class="o">-&gt;</span><span class="n">add_columns</span><span class="p">(</span>
</span><span class='line'>        <span class="n">user_id</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">data_type</span>   <span class="o">=&gt;</span> <span class="s">&#39;INTEGER&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">is_nullable</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="n">yen</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">data_type</span>   <span class="o">=&gt;</span> <span class="s">&#39;INTEGER&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">is_nullable</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">__PACKAGE__</span><span class="o">-&gt;</span><span class="n">set_primary_key</span><span class="p">(</span><span class="s">&#39;user_id&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">__PACKAGE__</span><span class="o">-&gt;</span><span class="n">belongs_to</span><span class="p">(</span>
</span><span class='line'>        <span class="s">&#39;user&#39;</span> <span class="o">=&gt;</span> <span class="s">&#39;My::Schema::User&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">{</span> <span class="s">&#39;foreign.id&#39;</span> <span class="o">=&gt;</span> <span class="s">&#39;self.user_id&#39;</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nb">package</span> <span class="nn">My::</span><span class="n">Schema</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">use</span> <span class="n">base</span> <span class="s">&#39;DBIx::Class::Schema&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">__PACKAGE__</span><span class="o">-&gt;</span><span class="n">load_classes</span><span class="p">(</span><span class="sx">qw/User Money/</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">feature</span> <span class="s">&#39;say&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$schema</span> <span class="o">=</span> <span class="nn">My::</span><span class="n">Schema</span><span class="o">-&gt;</span><span class="nb">connect</span><span class="p">(</span><span class="s">&#39;dbi:mysql:host=127.0.0.1;port=3306;database=test;mysql_write_timeout=1;mysql_read_timeout=1&#39;</span><span class="p">,</span> <span class="s">&#39;root&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$schema</span><span class="o">-&gt;</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">dbh</span><span class="o">-&gt;</span><span class="k">do</span><span class="p">(</span><span class="s">&#39;DROP TABLE IF EXISTS money, user&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$schema</span><span class="o">-&gt;</span><span class="n">deploy</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行するとMySQLのデータベースに以下のようなテーブルが作成されます。
userテーブルはユーザの名前を管理するテーブル、moneyはユーザの所持金を管理するテーブルです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">desc</span> <span class="n">user</span><span class="p">;</span>
</span><span class='line'><span class="o">+----------+--------------+------+-----+---------+----------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">Field</span>    <span class="o">|</span> <span class="n">Type</span>         <span class="o">|</span> <span class="n">Null</span> <span class="o">|</span> <span class="n">Key</span> <span class="o">|</span> <span class="n">Default</span> <span class="o">|</span> <span class="n">Extra</span>          <span class="o">|</span>
</span><span class='line'><span class="o">+----------+--------------+------+-----+---------+----------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">id</span>       <span class="o">|</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span>      <span class="o">|</span> <span class="n">NO</span>   <span class="o">|</span> <span class="n">PRI</span> <span class="o">|</span> <span class="n">NULL</span>    <span class="o">|</span> <span class="n">auto_increment</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">username</span> <span class="o">|</span> <span class="n">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="o">|</span> <span class="n">NO</span>   <span class="o">|</span>     <span class="o">|</span> <span class="n">NULL</span>    <span class="o">|</span>                <span class="o">|</span>
</span><span class='line'><span class="o">+----------+--------------+------+-----+---------+----------------+</span>
</span><span class='line'><span class="mi">2</span> <span class="n">rows</span> <span class="n">in</span> <span class="n">set</span> <span class="p">(</span><span class="mf">0.00</span> <span class="n">sec</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">desc</span> <span class="n">money</span><span class="p">;</span>
</span><span class='line'><span class="o">+---------+---------+------+-----+---------+-------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">Field</span>   <span class="o">|</span> <span class="n">Type</span>    <span class="o">|</span> <span class="n">Null</span> <span class="o">|</span> <span class="n">Key</span> <span class="o">|</span> <span class="n">Default</span> <span class="o">|</span> <span class="n">Extra</span> <span class="o">|</span>
</span><span class='line'><span class="o">+---------+---------+------+-----+---------+-------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">user_id</span> <span class="o">|</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="o">|</span> <span class="n">NO</span>   <span class="o">|</span> <span class="n">PRI</span> <span class="o">|</span> <span class="n">NULL</span>    <span class="o">|</span>       <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">yen</span>     <span class="o">|</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="o">|</span> <span class="n">NO</span>   <span class="o">|</span>     <span class="o">|</span> <span class="n">NULL</span>    <span class="o">|</span>       <span class="o">|</span>
</span><span class='line'><span class="o">+---------+---------+------+-----+---------+-------+</span>
</span><span class='line'><span class="mi">2</span> <span class="n">rows</span> <span class="n">in</span> <span class="n">set</span> <span class="p">(</span><span class="mf">0.00</span> <span class="n">sec</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>タイムアウトとロールバックの微妙な関係</h2>

<h3>ユーザの初期化プログラムを実装してみる</h3>

<p>テーブル作っただけではつまらないので、データを入れてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># スキーマ定義等略</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ユーザ作成</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$user_rs</span> <span class="o">=</span> <span class="nv">$schema</span><span class="o">-&gt;</span><span class="n">resultset</span><span class="p">(</span><span class="s">&#39;User&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nb">eval</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$user_rs</span><span class="o">-&gt;</span><span class="n">create</span><span class="p">({</span>
</span><span class='line'>        <span class="n">id</span>       <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="n">username</span> <span class="o">=&gt;</span> <span class="s">&#39;ok_macopy&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ユーザを初期化するためクエリ(ちょっと時間がかかる)</span>
</span><span class='line'>    <span class="nv">$user_rs</span><span class="o">-&gt;</span><span class="n">search</span><span class="p">({},</span> <span class="p">{</span><span class="nb">select</span> <span class="o">=&gt;</span> <span class="o">\</span><span class="s">&#39;SLEEP(1)&#39;</span><span class="p">})</span><span class="o">-&gt;</span><span class="n">all</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">create_related</span><span class="p">(</span><span class="n">money</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">yen</span> <span class="o">=&gt;</span> <span class="mi">1000</span> <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$err</span> <span class="o">=</span> <span class="vg">$@</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">warn</span> <span class="nv">$err</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$user_rs</span><span class="o">-&gt;</span><span class="n">search</span><span class="p">({</span> <span class="n">id</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">})</span><span class="o">-&gt;</span><span class="n">single</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">say</span> <span class="s">&quot;名前: &quot;</span><span class="p">,</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">username</span><span class="p">;</span>
</span><span class='line'>    <span class="n">say</span> <span class="s">&quot;所持金: &quot;</span><span class="p">,</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">money</span><span class="o">-&gt;</span><span class="n">yen</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">say</span> <span class="s">&quot;ユーザが見つかりませんでした&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行してみると、1000円持ったユーザが作成されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ perl dbic-test.pl
</span><span class='line'>名前: ok_macopy
</span><span class='line'>所持金: 1000</span></code></pre></td></tr></table></div></figure>


<h3>タイムアウトと戦う</h3>

<p>一件上手く動いていそうに見えますが、上記コードを何回か実行すると、ときたま以下のように失敗します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ perl dbic-test.pl
</span><span class='line'>DBIx::Class::Storage::DBI::_dbh_execute(): DBI Exception: DBD::mysql::st execute failed: Lost connection to MySQL server during query [for Statement "SELECT SLEEP(1) FROM user me"] at dbic-test.pl line 80
</span><span class='line'>名前: ok_macopy
</span><span class='line'>所持金: 0</span></code></pre></td></tr></table></div></figure>


<p>所持金が0円になってしまいました。
<code>SELECT SLEEP(1) FROM user me</code> という時間のかかるクエリを投げたので、コネクションがタイムアウトしてしまったようです。
データベースの状態を確認すると、userに行はあるけど、moneyは空っぽの状態です。
「userに対応するmoneyが必ず存在しなければならない」とスキーマで定義したのに、その条件を満たしていませんね。
たとえタイムアウトしたとしても、このような状態にはならないで欲しいです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; SELECT * FROM user;
</span><span class='line'>+----+-----------+
</span><span class='line'>| id | username  |
</span><span class='line'>+----+-----------+
</span><span class='line'>|  1 | ok_macopy |
</span><span class='line'>+----+-----------+
</span><span class='line'>1 row in set (0.00 sec)
</span><span class='line'>
</span><span class='line'>mysql&gt; SELECT * FROM money;
</span><span class='line'>Empty set (0.00 sec)</span></code></pre></td></tr></table></div></figure>


<h3>トランザクションを使ってみる</h3>

<p>リレーショナルデータベースにはこれを実現するためにトランザクションという便利なものがあります。
DBIx::Classから扱うにはいくつか方法がありますが、例えばガードオブジェクトを使って以下のように書けます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># ユーザ作成</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$user_rs</span> <span class="o">=</span> <span class="nv">$schema</span><span class="o">-&gt;</span><span class="n">resultset</span><span class="p">(</span><span class="s">&#39;User&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nb">eval</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$txn</span> <span class="o">=</span> <span class="nv">$schema</span><span class="o">-&gt;</span><span class="n">txn_scope_guard</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$user_rs</span><span class="o">-&gt;</span><span class="n">create</span><span class="p">({</span>
</span><span class='line'>        <span class="n">id</span>       <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="n">username</span> <span class="o">=&gt;</span> <span class="s">&#39;ok_macopy&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ユーザを初期化するためクエリ(ちょっと時間がかかる)</span>
</span><span class='line'>    <span class="nv">$user_rs</span><span class="o">-&gt;</span><span class="n">search</span><span class="p">({},</span> <span class="p">{</span><span class="nb">select</span> <span class="o">=&gt;</span> <span class="o">\</span><span class="s">&#39;SLEEP(1)&#39;</span><span class="p">})</span><span class="o">-&gt;</span><span class="n">all</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">create_related</span><span class="p">(</span><span class="n">money</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">yen</span> <span class="o">=&gt;</span> <span class="mi">1000</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$txn</span><span class="o">-&gt;</span><span class="n">commit</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$err</span> <span class="o">=</span> <span class="vg">$@</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">warn</span> <span class="nv">$err</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$user_rs</span><span class="o">-&gt;</span><span class="n">search</span><span class="p">({</span> <span class="n">id</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">})</span><span class="o">-&gt;</span><span class="n">single</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">say</span> <span class="s">&quot;名前: &quot;</span><span class="p">,</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">username</span><span class="p">;</span>
</span><span class='line'>    <span class="n">say</span> <span class="s">&quot;所持金: &quot;</span><span class="p">,</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">money</span> <span class="p">?</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">money</span><span class="o">-&gt;</span><span class="n">yen</span> <span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">say</span> <span class="s">&quot;ユーザが見つかりませんでした&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで片一方だけ更新されるのが防げるはず！
ところが、片一方だけ更新自体は防げはするのですが、
今度は所持金を表示するところでコケてしまいます。
トランザクションを使っていないときは正常に表示できていたし、
表示部分は一切いじってないのに不思議ですね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ perl dbic-test.pl
</span><span class='line'>Transaction aborted: DBIx::Class::Storage::DBI::_dbh_execute(): DBI Exception: DBD::mysql::st execute failed: Lost connection to MySQL server during query [for Statement "SELECT SLEEP(1) FROM user me"] at dbic-test.pl line 80
</span><span class='line'> Rollback failed: DBIx::Class::Storage::DBI::_exec_txn_rollback(): DBI Exception: DBD::mysql::db rollback failed: Turning on AutoCommit failed at dbic-test.pl line 72
</span><span class='line'>DBIx::Class::Storage::DBI::_dbh_execute(): DBI Exception: DBD::mysql::st execute failed: MySQL server has gone away [for Statement "SELECT me.id, me.username FROM user me WHERE ( id = ? )" with ParamValues: 0=1] at dbic-test.pl line 89
</span><span class='line'># ※「ユーザが見つかりませんでした」と表示されて欲しいがされない</span></code></pre></td></tr></table></div></figure>


<p>実はコネクションがタイムアウトしたとはMySQLとの再接続をする必要があるのですが、
DBIx::Classが裏で再接続処理を自動的にやってくれるので、普段は意識する必要はありません。
ただし例外があって、 <strong>トランザクションの中では再接続処理を行ってくれません</strong> 。</p>

<p>トランザクション内で勝手に再接続が行われると逆に困るので、この挙動自体は正しいのですが、
これにロールバックが絡むと少し不思議なことが起こります。
<strong>ロールバックしてトランザクションを抜けても、DBIx::Classはトランザクションの中にいると判断してしまうのです。</strong>
このことは<code>transaction_depth</code>を見ることで確認できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># ユーザ作成</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$user_rs</span> <span class="o">=</span> <span class="nv">$schema</span><span class="o">-&gt;</span><span class="n">resultset</span><span class="p">(</span><span class="s">&#39;User&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">say</span> <span class="s">&#39;transaction_depth = &#39;</span><span class="p">,</span> <span class="nv">$schema</span><span class="o">-&gt;</span><span class="n">storage</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">transaction_depth</span><span class="p">};</span>
</span><span class='line'><span class="nb">eval</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$txn</span> <span class="o">=</span> <span class="nv">$schema</span><span class="o">-&gt;</span><span class="n">txn_scope_guard</span><span class="p">;</span>
</span><span class='line'>    <span class="n">say</span> <span class="s">&#39;transaction_depth = &#39;</span><span class="p">,</span> <span class="nv">$schema</span><span class="o">-&gt;</span><span class="n">storage</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">transaction_depth</span><span class="p">};</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$user_rs</span><span class="o">-&gt;</span><span class="n">create</span><span class="p">({</span>
</span><span class='line'>        <span class="n">id</span>       <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="n">username</span> <span class="o">=&gt;</span> <span class="s">&#39;ok_macopy&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ユーザを初期化するためクエリ(ちょっと時間がかかる)</span>
</span><span class='line'>    <span class="nv">$user_rs</span><span class="o">-&gt;</span><span class="n">search</span><span class="p">({},</span> <span class="p">{</span><span class="nb">select</span> <span class="o">=&gt;</span> <span class="o">\</span><span class="s">&#39;SLEEP(1)&#39;</span><span class="p">})</span><span class="o">-&gt;</span><span class="n">all</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">create_related</span><span class="p">(</span><span class="n">money</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">yen</span> <span class="o">=&gt;</span> <span class="mi">1000</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$txn</span><span class="o">-&gt;</span><span class="n">commit</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$err</span> <span class="o">=</span> <span class="vg">$@</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">warn</span> <span class="nv">$err</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">say</span> <span class="s">&#39;transaction_depth = &#39;</span><span class="p">,</span> <span class="nv">$schema</span><span class="o">-&gt;</span><span class="n">storage</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">transaction_depth</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$user_rs</span><span class="o">-&gt;</span><span class="n">search</span><span class="p">({</span> <span class="n">id</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">})</span><span class="o">-&gt;</span><span class="n">single</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">say</span> <span class="s">&quot;名前: &quot;</span><span class="p">,</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">username</span><span class="p">;</span>
</span><span class='line'>    <span class="n">say</span> <span class="s">&quot;所持金: &quot;</span><span class="p">,</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">money</span> <span class="p">?</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">money</span><span class="o">-&gt;</span><span class="n">yen</span> <span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">say</span> <span class="s">&quot;ユーザが見つかりませんでした&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ perl dbic-test.pl
</span><span class='line'>transaction_depth = 0
</span><span class='line'>transaction_depth = 1
</span><span class='line'>Transaction aborted: DBIx::Class::Storage::DBI::_dbh_execute(): DBI Exception: DBD::mysql::st execute failed: Lost connection to MySQL server during query [for Statement "SELECT SLEEP(1) FROM user me"] at dbic-test.pl line 82
</span><span class='line'> Rollback failed: DBIx::Class::Storage::DBI::_exec_txn_rollback(): DBI Exception: DBD::mysql::db rollback failed: Turning on AutoCommit failed at dbic-test.pl line 73
</span><span class='line'>transaction_depth = 1 # ※トランザクションの外なのに1になってる
</span><span class='line'>DBIx::Class::Storage::DBI::_dbh_execute(): DBI Exception: DBD::mysql::st execute failed: MySQL server has gone away [for Statement "SELECT me.id, me.username FROM user me WHERE ( id = ? )" with ParamValues: 0=1] at dbic-test.pl line 92</span></code></pre></td></tr></table></div></figure>


<p>この状態になるといつまで経っても再接続は行われません。
都度接続なら大きな問題にはならないのですが、Webアプリでコネクションの永続化を行っている場合は深刻です。
一度タイムアウトすると以後のリクエストがすべて失敗してしまいます。</p>

<h3>確実に再接続を行う</h3>

<p>これを防ぐには確実に再接続をおこなって欲しいところで <code>$schema-&gt;storage-&gt;ensure_connected;</code> を実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># ユーザ作成</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$user_rs</span> <span class="o">=</span> <span class="nv">$schema</span><span class="o">-&gt;</span><span class="n">resultset</span><span class="p">(</span><span class="s">&#39;User&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nb">eval</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$txn</span> <span class="o">=</span> <span class="nv">$schema</span><span class="o">-&gt;</span><span class="n">txn_scope_guard</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$user_rs</span><span class="o">-&gt;</span><span class="n">create</span><span class="p">({</span>
</span><span class='line'>        <span class="n">id</span>       <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="n">username</span> <span class="o">=&gt;</span> <span class="s">&#39;ok_macopy&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ユーザを初期化するためクエリ(ちょっと時間がかかる)</span>
</span><span class='line'>    <span class="nv">$user_rs</span><span class="o">-&gt;</span><span class="n">search</span><span class="p">({},</span> <span class="p">{</span><span class="nb">select</span> <span class="o">=&gt;</span> <span class="o">\</span><span class="s">&#39;SLEEP(1)&#39;</span><span class="p">})</span><span class="o">-&gt;</span><span class="n">all</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">create_related</span><span class="p">(</span><span class="n">money</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">yen</span> <span class="o">=&gt;</span> <span class="mi">1000</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$txn</span><span class="o">-&gt;</span><span class="n">commit</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$err</span> <span class="o">=</span> <span class="vg">$@</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">warn</span> <span class="nv">$err</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$schema</span><span class="o">-&gt;</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">ensure_connected</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$user_rs</span><span class="o">-&gt;</span><span class="n">search</span><span class="p">({</span> <span class="n">id</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">})</span><span class="o">-&gt;</span><span class="n">single</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">say</span> <span class="s">&quot;名前: &quot;</span><span class="p">,</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">username</span><span class="p">;</span>
</span><span class='line'>    <span class="n">say</span> <span class="s">&quot;所持金: &quot;</span><span class="p">,</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">money</span> <span class="p">?</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">money</span><span class="o">-&gt;</span><span class="n">yen</span> <span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">say</span> <span class="s">&quot;ユーザが見つかりませんでした&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうすることで、何度実行しても「所持金1000のユーザが作られる」or「ユーザが見つかりませんでした」の状態になり、
中途半端な状態のユーザが作られたり、再接続に失敗したりということはなくなります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ perl dbic-test.pl
</span><span class='line'>Transaction aborted: DBIx::Class::Storage::DBI::_dbh_execute(): DBI Exception: DBD::mysql::st execute failed: Lost connection to MySQL server during query [for Statement "SELECT SLEEP(1) FROM user me"] at dbic-test.pl line 80
</span><span class='line'> Rollback failed: DBIx::Class::Storage::DBI::_exec_txn_rollback(): DBI Exception: DBD::mysql::db rollback failed: Turning on AutoCommit failed at dbic-test.pl line 72
</span><span class='line'>        (in cleanup) {UNKNOWN}: DBI Exception: DBD::mysql::db DESTROY failed: MySQL server has gone away  at /home/ichinose/.plenv/versions/5.20.2/lib/perl5/site_perl/5.20.2/DBIx/Class/Schema.pm line 1077.
</span><span class='line'>        DBIx::Class::Schema::throw_exception(My::Schema=HASH(0x118d088), "DBI Exception: DBD::mysql::db DESTROY failed: MySQL server ha"...) called at /home/ichinose/.plenv/versions/5.20.2/lib/perl5/site_perl/5.20.2/DBIx/Class/Storage.pm line 113
</span><span class='line'>        DBIx::Class::Storage::throw_exception(DBIx::Class::Storage::DBI::mysql=HASH(0x118d718), "DBI Exception: DBD::mysql::db DESTROY failed: MySQL server ha"...) called at /home/ichinose/.plenv/versions/5.20.2/lib/perl5/site_perl/5.20.2/DBIx/Class/Storage/DBI.pm line 1473
</span><span class='line'>        DBIx::Class::Storage::DBI::__ANON__("DBD::mysql::db DESTROY failed: MySQL server has gone away", DBI::db=HASH(0x16efbb8), undef) called at dbic-test.pl line 91
</span><span class='line'>        eval {...} called at dbic-test.pl line 91
</span><span class='line'>
</span><span class='line'>ユーザが見つかりませんでした</span></code></pre></td></tr></table></div></figure>


<h2>ネストしたトランザクションとロールバックの微妙な関係</h2>

<h3>トランザクションをネストする</h3>

<p>キャンペーン期間中なので通常1000円のところ2000円で初期化してあげることになりました。
<strong>2000円への更新処理の途中で何かエラーが起こった場合は1000円で初期化して欲しい</strong> ので、
以下のようにトランザクションをネストしてみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nb">eval</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$txn</span> <span class="o">=</span> <span class="nv">$schema</span><span class="o">-&gt;</span><span class="n">txn_scope_guard</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$user_rs</span><span class="o">-&gt;</span><span class="n">create</span><span class="p">({</span>
</span><span class='line'>        <span class="n">id</span>       <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="n">username</span> <span class="o">=&gt;</span> <span class="s">&#39;ok_macopy&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ユーザを初期化するためクエリ</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$money</span> <span class="o">=</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">create_related</span><span class="p">(</span><span class="n">money</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">yen</span> <span class="o">=&gt;</span> <span class="mi">1000</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># キャンペーン期間中なので2000円で初期化してげよう</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$txn2</span> <span class="o">=</span> <span class="nv">$schema</span><span class="o">-&gt;</span><span class="n">txn_scope_guard</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$money</span><span class="o">-&gt;</span><span class="n">update</span><span class="p">({</span><span class="n">yen</span> <span class="o">=&gt;</span> <span class="mi">2000</span><span class="p">});</span>
</span><span class='line'>        <span class="nb">undef</span> <span class="nv">$txn2</span><span class="p">;</span> <span class="c1"># エラーが起こったのでロールバックして欲しい！1000円にもどって!!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$txn</span><span class="o">-&gt;</span><span class="n">commit</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$err</span> <span class="o">=</span> <span class="vg">$@</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">warn</span> <span class="nv">$err</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$schema</span><span class="o">-&gt;</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">ensure_connected</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$user_rs</span><span class="o">-&gt;</span><span class="n">search</span><span class="p">({</span> <span class="n">id</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">})</span><span class="o">-&gt;</span><span class="n">single</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">say</span> <span class="s">&quot;名前: &quot;</span><span class="p">,</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">username</span><span class="p">;</span>
</span><span class='line'>    <span class="n">say</span> <span class="s">&quot;所持金: &quot;</span><span class="p">,</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">money</span><span class="o">-&gt;</span><span class="n">yen</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">say</span> <span class="s">&quot;ユーザが見つかりませんでした&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>わざとエラーが起こるようにして実行してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ perl dbic-test.pl
</span><span class='line'>DBIx::Class::Storage::TxnScopeGuard::DESTROY(): A DBIx::Class::Storage::TxnScopeGuard went out of scope without explicit commit or error. Rolling back. at dbic-test.pl line 88
</span><span class='line'>名前: ok_macopy
</span><span class='line'>所持金: 2000</span></code></pre></td></tr></table></div></figure>


<p>2000円！</p>

<p><strong>「Rolling back」って出てるのに全然ロールバックされてない！</strong></p>

<h3>SAVE POINTを使う</h3>

<p>接続時に<code>auto_savepoint</code>オプションを有効にすると、<code>SAVE POINT</code>を使った部分的なロールバックが使用可能になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$schema</span> <span class="o">=</span> <span class="nn">My::</span><span class="n">Schema</span><span class="o">-&gt;</span><span class="nb">connect</span><span class="p">(</span><span class="s">&#39;dbi:mysql:host=127.0.0.1;port=3306;database=test;mysql_write_timeout=1;mysql_read_timeout=1&#39;</span><span class="p">,</span> <span class="s">&#39;root&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">auto_savepoint</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ perl dbic-test.pl
</span><span class='line'>DBIx::Class::Storage::TxnScopeGuard::DESTROY(): A DBIx::Class::Storage::TxnScopeGuard went out of scope without explicit commit or error. Rolling back. at dbic-test.pl line 90
</span><span class='line'>名前: ok_macopy
</span><span class='line'>所持金: 1000</span></code></pre></td></tr></table></div></figure>


<h3>大人しく全部ロールバックする</h3>

<p>MySQLにはSAVE POINTという便利機能があるとはいえ、どこまでロールバックするべきかを管理するのはすごく大変です。
現実的には ALL or NOTHING、失敗したら全部ロールバックで十分なのではと思ってます。
このサンプルではdieしてしまえばいいですね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nb">eval</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$txn</span> <span class="o">=</span> <span class="nv">$schema</span><span class="o">-&gt;</span><span class="n">txn_scope_guard</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$user_rs</span><span class="o">-&gt;</span><span class="n">create</span><span class="p">({</span>
</span><span class='line'>        <span class="n">id</span>       <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="n">username</span> <span class="o">=&gt;</span> <span class="s">&#39;ok_macopy&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ユーザを初期化するためクエリ</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$money</span> <span class="o">=</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">create_related</span><span class="p">(</span><span class="n">money</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">yen</span> <span class="o">=&gt;</span> <span class="mi">1000</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># キャンペーン期間中なので2000円で初期化してげよう</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$txn2</span> <span class="o">=</span> <span class="nv">$schema</span><span class="o">-&gt;</span><span class="n">txn_scope_guard</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$money</span><span class="o">-&gt;</span><span class="n">update</span><span class="p">({</span><span class="n">yen</span> <span class="o">=&gt;</span> <span class="mi">2000</span><span class="p">});</span>
</span><span class='line'>        <span class="nb">die</span> <span class="s">&#39;something error!&#39;</span><span class="p">;</span> <span class="c1"># エラーが起こったのでロールバックして欲しい！1000円にもどって!!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$txn</span><span class="o">-&gt;</span><span class="n">commit</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$err</span> <span class="o">=</span> <span class="vg">$@</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">warn</span> <span class="nv">$err</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$schema</span><span class="o">-&gt;</span><span class="n">storage</span><span class="o">-&gt;</span><span class="n">ensure_connected</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$user_rs</span><span class="o">-&gt;</span><span class="n">search</span><span class="p">({</span> <span class="n">id</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">})</span><span class="o">-&gt;</span><span class="n">single</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">say</span> <span class="s">&quot;名前: &quot;</span><span class="p">,</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">username</span><span class="p">;</span>
</span><span class='line'>    <span class="n">say</span> <span class="s">&quot;所持金: &quot;</span><span class="p">,</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">money</span><span class="o">-&gt;</span><span class="n">yen</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">say</span> <span class="s">&quot;ユーザが見つかりませんでした&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>something error! at dbic-test.pl line 85.
</span><span class='line'>ユーザが見つかりませんでした</span></code></pre></td></tr></table></div></figure>


<p>途中で<code>eval</code>して例外キャッチしているとロールバックしたのにコミットされる現象が起こる
(その場合警告すら出ないっぽいので更に怖い)ので、例外握り潰していたら要注意です。</p>

<p>部分的なロールバックができない場合は、
「子トランザクションがロールバックされていたら親トランザクションのコミットが失敗する」
が安全だと思うんですが、なぜこんな挙動になっているんでしょうね。
誰か経緯についてご存知のかたは教えていただきたいです。</p>

<h2>まとめ</h2>

<ul>
<li>トランザクション外では自動的に再接続してくれるが、トランザクション内では行われない</li>
<li>必ず再接続して欲しいところで <code>$schema-&gt;storage-&gt;ensure_connected;</code></li>
<li>部分的なロールバックはやらないのが吉</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git-mergeの挙動をカスタマイズする]]></title>
    <link href="http://shogo82148.github.io/blog/2015/12/16/customize-git-merge/"/>
    <updated>2015-12-16T22:24:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/12/16/customize-git-merge</id>
    <content type="html"><![CDATA[<p>最近gitのコンフリクト解消職人みたいになっていてすごくつらいです。
普通のプログラムであれば順番が重要なので手動でのコンフリクト解消は避けられないのですが、
僕が相手にしているのは最終的にMySQLに食わせるデータなのでそこまで順番は重要ではありません。
順番に挿入したところで、MySQLが順番にかえしてくれるとは限りませんからね。
このようなケースではある程度機械的にマージできるのでは？と調べてみました。</p>

<!-- More -->


<h2>merge driver</h2>

<p>いろいろググってみると<a href="http://git-scm.com/docs/gitattributes">gitattributes</a>でファイル毎にマージの細かい挙動を制御できるようです。
通常マージの方法はgitがよしなに選択してくれますが、merge属性に以下の項目を指定することでマージの方法を強制することができます。</p>

<ul>
<li>text

<ul>
<li>テキストファイルとしてマージする。</li>
<li>コンフリクトすると <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>でコンフリクトした場所を教えてくれる。</li>
</ul>
</li>
<li>binary

<ul>
<li>バイナリファイルとしてマージする。</li>
<li>コンフリクトするとマージしようとしたファイルを残しておいてくれる。</li>
</ul>
</li>
<li>union

<ul>
<li>テキストファイルとしてマージする。</li>
<li>textと違ってコンフリクトしてもマーカを付けない。どちらの変更も残すように適当にマージしてくれる。</li>
<li>適当なので <strong>コンフリクト時の行の順番は保証されない</strong></li>
</ul>
</li>
</ul>


<p>text, binaryはコンフリクトしたときによく見る挙動ですね。
unionは初めて知ったので、簡単なレポジトリを作って挙動を確かめてみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="c"># masterブランチ上でmembers.txtにAliceを追加する</span>
</span><span class='line'><span class="nv">$ </span>git init
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>Alice &gt; members.txt
</span><span class='line'><span class="nv">$ </span>git add members.txt
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;add Alice&#39;</span>
</span><span class='line'><span class="o">[</span>master <span class="o">(</span>root-commit<span class="o">)</span> 8c39714<span class="o">]</span> add Alice
</span><span class='line'> 1 file changed, 1 insertion<span class="o">(</span>+<span class="o">)</span>
</span><span class='line'>  create mode 100644 members.txt
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="nv">$ </span><span class="c"># add-bobブランチ上でmembers.txtにBobを追加する</span>
</span><span class='line'><span class="nv">$ </span>git checkout -b add-bob
</span><span class='line'>Switched to a new branch <span class="s1">&#39;add-bob&#39;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;Bob&#39;</span> &gt;&gt; members.txt
</span><span class='line'><span class="nv">$ </span>git add members.txt
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;add Bob&#39;</span>
</span><span class='line'><span class="o">[</span>add-bob 9c406ae<span class="o">]</span> add Bob
</span><span class='line'> 1 file changed, 1 insertion<span class="o">(</span>+<span class="o">)</span>
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="nv">$ </span><span class="c"># masterブランチ上でmembers.txtにEveを追加する</span>
</span><span class='line'><span class="nv">$ </span>git checkout -
</span><span class='line'> Switched to branch <span class="s1">&#39;master&#39;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;Eve&#39;</span> &gt;&gt; members.txt
</span><span class='line'><span class="nv">$ </span>git add members.txt
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;add Eve&#39;</span>
</span><span class='line'><span class="o">[</span>master 9eabd8a<span class="o">]</span> add Eve
</span><span class='line'> 1 file changed, 1 insertion<span class="o">(</span>+<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>git merge add-bob
</span><span class='line'> Auto-merging members.txt
</span><span class='line'> CONFLICT <span class="o">(</span>content<span class="o">)</span>: Merge conflict in members.txt
</span><span class='line'> Automatic merge failed; fix conflicts and <span class="k">then </span>commit the result.
</span><span class='line'><span class="nv">$ </span>cat members.txt
</span><span class='line'> Alice
</span><span class='line'> <span class="o">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt; HEAD
</span><span class='line'> <span class="nv">Eve</span>
</span><span class='line'> <span class="o">=======</span>
</span><span class='line'> Bob
</span><span class='line'> &gt;&gt;&gt;&gt;&gt;&gt;&gt; add-bob
</span></code></pre></td></tr></table></div></figure>


<p>わざとコンフリクトを起こしてみるテストです。
ファイル末尾にEveとBobをそれぞれ別々のブランチで追加したためコンフリクトしてしまっています。</p>

<p>では次にgitattributeを追加して<code>merge=union</code>を指定した場合に挙動を確認してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="c"># merge=union属性を追加</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;members.txt merge=union&#39;</span> &gt; .gitattributes
</span><span class='line'><span class="nv">$ </span>git add -f .gitattributes
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;add gitattributes&#39;</span>
</span><span class='line'><span class="o">[</span>master 61d2cfc<span class="o">]</span> add gitattributes
</span><span class='line'> 1 file changed, 1 insertion<span class="o">(</span>+<span class="o">)</span>
</span><span class='line'>  create mode 100644 .gitattributes
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="nv">$ </span><span class="c"># もう一度マージしてみる</span>
</span><span class='line'><span class="nv">$ </span>git merge add-bob
</span><span class='line'>Auto-merging members.txt
</span><span class='line'>Merge made by the <span class="s1">&#39;recursive&#39;</span> strategy.
</span><span class='line'> members.txt | 1 +
</span><span class='line'>  1 file changed, 1 insertion<span class="o">(</span>+<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>cat members.txt
</span><span class='line'>Alice
</span><span class='line'>Eve
</span><span class='line'>Bob
</span></code></pre></td></tr></table></div></figure>


<p>通常はコンフリクトするケースですが、今度はうまくマージできました。</p>

<h2>merge driverをカスタマイズする</h2>

<p>デフォルトではtext, binary, unionしか用意されていないmerge driverですが、<code>.git/config</code>をいじることで自前のmerge driverを追加することができます。
unionでは行の順番が不定になって不便なので、試しに「必ずソートされており重複がないファイルをマージする」ためのmerge driverを作ってみます。
まずはマージするためのコマンド用意しましょう。</p>

<figure class='code'><figcaption><span>merge-sorted-set.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">A</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'><span class="nv">O</span><span class="o">=</span><span class="s2">&quot;$2&quot;</span>
</span><span class='line'><span class="nv">B</span><span class="o">=</span><span class="s2">&quot;$3&quot;</span>
</span><span class='line'><span class="nv">tmpfile</span><span class="o">=</span><span class="k">$(</span>mktemp temp.XXXXXX<span class="k">)</span>
</span><span class='line'>cp <span class="s2">&quot;$A&quot;</span> <span class="s2">&quot;$tmpfile&quot;</span>
</span><span class='line'>git merge-file -p -q --union <span class="s2">&quot;$tmpfile&quot;</span> <span class="s2">&quot;$O&quot;</span> <span class="s2">&quot;$B&quot;</span> | sort | uniq &gt; <span class="s2">&quot;$A&quot;</span>
</span><span class='line'>rm <span class="s2">&quot;$tmpfile&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>パスの通った場所にこのファイルを置き、<code>.git/config</code>にこれを呼び出す設定を書けば、gitattributeから使用できるようになります。</p>

<figure class='code'><figcaption><span>.git/config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[merge "zset"]
</span><span class='line'>        name = merge sorted set
</span><span class='line'>        driver = merge-sorted-set.sh %A %O %B</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>%A</code>: 現在のブランチの状態</li>
<li><code>%B</code>: マージしようとしているブランチの状態</li>
<li><code>%O</code>: 共通の祖先の状態</li>
<li><code>%L</code>: コンフリクトマーカの長さ。<a href="https://github.com/git/git/commit/23a64c9e771e3caf19cf2ee9a32c8942ddde4a81">1.7から使えるらしい</a></li>
<li><code>%P</code>: ファイルのパス。<a href="https://github.com/git/git/commit/ef45bb1f8156030446658d5bfb3983ce214a9e16">2.5.0から使えるらしい</a></li>
</ul>


<p>このmerge driverを使ってマージすると、先の例ではAlice, Bob, Eveの順番で並ぶようになります。</p>

<h2>theirs-oursの順番に並べてみる</h2>

<p>僕のケースではtheirs-oursの順番で並んでくれると都合が良いので、こんなスクリプトを書いてみました。</p>

<figure class='code'><figcaption><span>merge-theirs-ours.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">A</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'><span class="nv">O</span><span class="o">=</span><span class="s2">&quot;$2&quot;</span>
</span><span class='line'><span class="nv">B</span><span class="o">=</span><span class="s2">&quot;$3&quot;</span>
</span><span class='line'><span class="nv">tmpfile</span><span class="o">=</span><span class="k">$(</span>mktemp temp.XXXXXX<span class="k">)</span>
</span><span class='line'>cp <span class="s2">&quot;$A&quot;</span> <span class="s2">&quot;$tmpfile&quot;</span>
</span><span class='line'>git merge-file -p -q --union <span class="s2">&quot;$B&quot;</span> <span class="s2">&quot;$O&quot;</span> <span class="s2">&quot;$tmpfile&quot;</span> &gt; <span class="s2">&quot;$A&quot;</span>
</span><span class='line'>rm <span class="s2">&quot;$tmpfile&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>.git/config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[merge "theirsours"]
</span><span class='line'>        name = theirs first
</span><span class='line'>        driver = merge-theirs-ours.sh %A %O %B
</span><span class='line'>        recursive = text</span></code></pre></td></tr></table></div></figure>


<p>あとは勝手にコンフリクト解消して欲しいファイルに対して
.gitattributesで<code>merge=theirsours</code>を指定すれば通常はコンフリクトする場合でもマージしてくれます。</p>

<p>ただ、さすがに全自動だとちょっと怖いので、以下の様にコンフリクトするようであればユーザに確認(<code>exit 1</code>するとコンフリクトした扱いになる)
したほうが無難な気もしますね。</p>

<figure class='code'><figcaption><span>merge-theirs-ours.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">A</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'><span class="nv">O</span><span class="o">=</span><span class="s2">&quot;$2&quot;</span>
</span><span class='line'><span class="nv">B</span><span class="o">=</span><span class="s2">&quot;$3&quot;</span>
</span><span class='line'><span class="k">if </span>git merge-file -p -q <span class="s2">&quot;$A&quot;</span> <span class="s2">&quot;$O&quot;</span> <span class="s2">&quot;$B&quot;</span> &gt; /dev/null; <span class="k">then</span>
</span><span class='line'><span class="k">    </span>git merge-file <span class="s2">&quot;$A&quot;</span> <span class="s2">&quot;$O&quot;</span> <span class="s2">&quot;$B&quot;</span>;
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nv">tmpfile</span><span class="o">=</span><span class="k">$(</span>mktemp temp.XXXXXX<span class="k">)</span>
</span><span class='line'>    cp <span class="s2">&quot;$A&quot;</span> <span class="s2">&quot;$tmpfile&quot;</span>
</span><span class='line'>    git merge-file -p -q --union <span class="s2">&quot;$B&quot;</span> <span class="s2">&quot;$O&quot;</span> <span class="s2">&quot;$tmpfile&quot;</span> &gt; <span class="s2">&quot;$A&quot;</span>
</span><span class='line'>    rm <span class="s2">&quot;$tmpfile&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>gitattribute便利。
gitattributeを使って<a href="http://shogo82148.github.io/blog/2015/03/24/git-diff-csv/">Git Diffでcsvの差分を見やすく表示する</a>のもどうぞ。</p>

<p>ただmerge driverからはファイルのメタ情報に触れないので、「コミット日時が新しい方を残す」みたいなことができないのが残念です。
<a href="http://stackoverflow.com/questions/7607125/git-merge-conflict-to-always-take-the-newest-file">ブランチ決め打ちにする</a>のはちょっと怖いし、
merge strategyのカスタマイズは大変そう・・・
(一応 <code>git-merge-hogehoge</code> をいうコマンドを用意しておけば <code>git merge --strategy hogehoge</code> と使えるようです。が、<code>git-merge-hogehoge &lt;base&gt;... -- &lt;head&gt; &lt;remote&gt; ...</code> の形式で渡ってくるので、そこから再実装するのはつらい・・・)</p>

<h2>参考</h2>

<ul>
<li><a href="http://git-scm.com/docs/gitattributes">gitattributes</a></li>
<li><a href="http://stackoverflow.com/questions/23140240/git-how-do-i-add-a-custom-merge-strategy">git: How do I add a custom merge strategy?</a></li>
<li><a href="http://stackoverflow.com/questions/7607125/git-merge-conflict-to-always-take-the-newest-file">Git merge conflict to always take the newest file</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goでデプロイ神社書いてみた]]></title>
    <link href="http://shogo82148.github.io/blog/2015/12/13/go-deploy-shrine/"/>
    <updated>2015-12-13T10:51:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/12/13/go-deploy-shrine</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/advent-calendar/2015/go2">Go その2 Advent Calendar 2015</a>の13日目の記事です。</p>

<ul>
<li><a href="http://qiita.com/advent-calendar/2015/go">その1</a></li>
<li><a href="http://qiita.com/advent-calendar/2015/go2">その2</a></li>
<li><a href="http://qiita.com/advent-calendar/2015/go3">その3</a></li>
</ul>


<p>六曜を知ることができる便利コマンドを作ってみたお話です。</p>

<!-- More -->


<h2>Deploy神社とは</h2>

<p><a href="https://twitter.com/Maco_Tasu">Maco_Tasu</a>が作ったいつdeployしたら安全かを教えてくれる便利APIです。
詳しくは作者ブログ記事をどうぞ。(<a href="http://macotasu.hatenablog.jp/entry/2014/11/13/214337">Deploy神社APIを作った- 眠すぎて明日が見えない</a>)</p>

<p>便利APIなのですが、依存している外部APIが利用できなくなってしまったため、Deploy神社自体が利用できなくなっています。</p>

<h2>作ってみた</h2>

<p>デプロイする時間が分からないと不便なので、Go実装を作ってみました。</p>

<ul>
<li><a href="https://github.com/shogo82148/go-deploy-shrine">shogo82148/go-deploy-shrine</a></li>
</ul>


<p><code>go get</code>してきてお祈りを捧げればデプロイするべき時間を教えてくれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go get github.com/shogo82148/go-deploy-shrine/cli/pray
</span><span class='line'><span class="nv">$ </span>pray
</span><span class='line'>今日は旧暦の11月3日<span class="o">(</span>先勝<span class="o">)</span>です。deployは午前中に済ませましょう。
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.weblio.jp/content/%E5%85%88%E5%8B%9D">先勝 - Weblio</a></p>

<blockquote><p>六曜の一。急用や訴訟などによいとされ，早く事を行うのがよく，午前は吉，午後は凶という日。先勝日。せんかち。さきがち。</p></blockquote>

<p>今日12月13日は先勝で午前中にデプロイするのが良いようです。便利ですね。</p>

<h2>六曜とは</h2>

<p>むかしのカレンダーには暦注と呼ばれる「今日の運勢」みたいなものが記載されていたらしいです。
六曜はその暦注のひとつで、現在のカレンダーにも記載されることの多い影響力の大きなものです。</p>

<p>詳しくはWikipediaで。</p>

<ul>
<li><a href="https://ja.wikipedia.org/wiki/%E5%85%AD%E6%9B%9C">六曜 - Wikipedia</a></li>
</ul>


<p>旧暦の(月＋日)を6で割った余りから簡単に求めることができます。</p>

<ul>
<li>0: 大安</li>
<li>1: 赤口</li>
<li>2: 先勝</li>
<li>3: 友引</li>
<li>4: 先負</li>
<li>5: 仏滅</li>
</ul>


<h2>旧暦とは</h2>

<p>旧暦の月日を求めることができれば六曜は簡単に出せるのですが、
日本における旧暦である<a href="https://ja.wikipedia.org/wiki/%E5%A4%A9%E4%BF%9D%E6%9A%A6">天保暦</a>は月の満ち欠けと太陽の動きを元にした暦法であり、
月と太陽の動きを正確に予測する必要があります。</p>

<p>Go版デプロイ神社では「日の出・日の入りの計算―天体の出没時刻の求め方」で紹介されていた計算式を用いています</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=shogo82148-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4805206349" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<h2>2033年旧暦閏月問題</h2>

<p>天保暦をそのまま当てはめると2033年に月を決定できない問題が知られています。
日本カレンダー暦文化振興協会というところが「閏11月を推奨する」との見解を2015年8月に出しています。</p>

<ul>
<li><a href="http://www.rekibunkyo.or.jp/year2033problem.html">2033年旧暦閏月問題の見解</a></li>
</ul>


<p>Go版デプロイ神社では時憲暦方式を採用したつもりです。</p>

<h2>せめてGoっぽい話題を</h2>

<p>引数に日付を渡すとその日の六曜をかえしてくれます。
いろんな形式に対応していて、以下はすべて2006年1月2日の六曜を返します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pray 20060102
</span><span class='line'><span class="nv">$ </span>pray 1/2/2006
</span><span class='line'><span class="nv">$ </span>pray 2-Jan-06
</span><span class='line'><span class="nv">$ </span>pray 2-Jan-2006
</span><span class='line'><span class="nv">$ </span>pray 2/Jan/2006
</span><span class='line'><span class="nv">$ </span>pray <span class="s1">&#39;Jan 2 2006&#39;</span>
</span><span class='line'>2006-01-02は旧暦の12月3日<span class="o">(</span>友引<span class="o">)</span>です。昼のdeployはさけましょう。するなら朝晩が吉です。
</span></code></pre></td></tr></table></div></figure>


<p>引数の解析には <a href="https://github.com/tkuchiki/parsetime">tkuchiki/parsetime</a>を使っています。
たいていの日時フォーマットなら解析してくれる便利ライブラリです。</p>

<h2>最後に</h2>

<p>暦法とか天文学とかよくわかってない人間が作ったプログラムなので、結果の保証はできません。
今月の旧暦は<a href="http://keisan.casio.jp/exec/system/1186108192">六曜計算 - 高精度計算サイト</a>の計算結果と一致することは確認していますが、
他の日でも正しい結果を返すかどうかは未検証です。</p>

<p>Go版デプロイ神社を信じてのデプロイして事故っても、責任は負いかねますのでご了承ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl の DateTime 利用上の注意点]]></title>
    <link href="http://shogo82148.github.io/blog/2015/12/09/perl-datetime/"/>
    <updated>2015-12-09T00:00:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/12/09/perl-datetime</id>
    <content type="html"><![CDATA[<p>この投稿は <a href="http://qiita.com/advent-calendar/2015/perl5">Perl 5 Advent Calendar 2015</a> の 9日目の記事です。</p>

<p><a href="http://developer.hatenastaff.com/entry/2015/12/02/050000">Perl の Time::Piece 利用上の注意点</a>
という記事の最後に<a href="https://metacpan.org/release/DateTime">DateTime</a>への言及があったのですが、
DateTimeはDateTimeでいろいろとハマりどころがあるんですよね・・・。
僕も今年いくつか罠にハマりました。ちょうどアドベントカレンダーの季節ですし、この機会にハマりどころをまとめてみることにします。</p>

<!-- More -->


<h2>遅い</h2>

<p>いろんなところで言われていることですが <strong>遅い</strong> です。
試しに代表的な日付を扱うモジュールでベンチをとってみました。
(比較のために時間をとるためのPerlの組み込み関数も入れてあります)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># いろんな形式で今の時間を取得する</span>
</span><span class='line'><span class="k">use</span> <span class="n">Benchmark</span> <span class="sx">qw/ cmpthese /</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Time::</span><span class="n">HiRes</span> <span class="p">();</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Time::</span><span class="n">Moment</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Time::</span><span class="n">Piece</span> <span class="p">();</span>
</span><span class='line'><span class="k">use</span> <span class="n">DateTime</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cmpthese</span> <span class="mi">0</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;time&#39;</span>         <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="nb">time</span> <span class="p">},</span>
</span><span class='line'>  <span class="s">&#39;Time::HiRes&#39;</span>  <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="nn">Time::HiRes::</span><span class="n">time</span> <span class="p">},</span>
</span><span class='line'>    <span class="s">&#39;localtime&#39;</span>    <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="p">()</span> <span class="o">=</span> <span class="nb">localtime</span> <span class="p">},</span>
</span><span class='line'>    <span class="s">&#39;Time::Moment&#39;</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="nn">Time::</span><span class="n">Moment</span><span class="o">-&gt;</span><span class="n">now</span> <span class="p">},</span>
</span><span class='line'>    <span class="s">&#39;Time::Piece&#39;</span>  <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="nn">Time::</span><span class="n">Piece</span><span class="o">-&gt;</span><span class="nb">localtime</span> <span class="p">},</span>
</span><span class='line'>    <span class="s">&#39;DateTime&#39;</span>     <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="n">now</span><span class="p">(</span> <span class="n">time_zone</span><span class="o">=&gt;</span><span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">)</span> <span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">Rate</span> <span class="n">DateTime</span> <span class="nn">Time::</span><span class="n">Piece</span> <span class="nn">Time::</span><span class="n">Moment</span> <span class="nb">localtime</span> <span class="nn">Time::</span><span class="n">HiRes</span>  <span class="nb">time</span>
</span><span class='line'><span class="n">DateTime</span>         <span class="mi">5303</span><span class="o">/</span><span class="n">s</span>       <span class="o">--</span>        <span class="o">-</span><span class="mi">95</span><span class="nv">%</span>         <span class="err">-</span><span class="nv">98%</span>      <span class="err">-</span><span class="nv">99%</span>       <span class="err">-</span><span class="nv">100%</span> <span class="err">-</span><span class="nv">100%</span>
</span><span class='line'><span class="nn">Time::</span><span class="nv">Piece</span>    <span class="mi">103765</span><span class="o">/</span><span class="n">s</span>    <span class="mi">1857</span><span class="nv">%</span>          <span class="err">--</span>         <span class="err">-</span><span class="nv">67%</span>      <span class="err">-</span><span class="nv">71%</span>        <span class="err">-</span><span class="nv">98%</span>  <span class="err">-</span><span class="nv">99%</span>
</span><span class='line'><span class="nn">Time::</span><span class="nv">Moment</span>   <span class="mi">313599</span><span class="o">/</span><span class="n">s</span>    <span class="mi">5814</span><span class="nv">%</span>        <span class="nv">202%</span>           <span class="err">--</span>      <span class="err">-</span><span class="nv">11%</span>        <span class="err">-</span><span class="nv">93%</span>  <span class="err">-</span><span class="nv">98%</span>
</span><span class='line'><span class="nv">localtime</span>      <span class="mi">354215</span><span class="o">/</span><span class="n">s</span>    <span class="mi">6580</span><span class="nv">%</span>        <span class="nv">241%</span>          <span class="nv">13%</span>        <span class="err">--</span>        <span class="err">-</span><span class="nv">92%</span>  <span class="err">-</span><span class="nv">98%</span>
</span><span class='line'><span class="nn">Time::</span><span class="nv">HiRes</span>   <span class="mi">4706723</span><span class="o">/</span><span class="n">s</span>   <span class="mi">88658</span><span class="nv">%</span>       <span class="nv">4436%</span>        <span class="nv">1401%</span>     <span class="nv">1229%</span>          <span class="err">--</span>  <span class="err">-</span><span class="nv">72%</span>
</span><span class='line'><span class="nv">time</span>         <span class="mi">16536995</span><span class="o">/</span><span class="n">s</span>  <span class="mi">311751</span><span class="nv">%</span>      <span class="nv">15837%</span>        <span class="nv">5173%</span>     <span class="nv">4569%</span>        <span class="nv">251%</span>    <span class="err">--</span>
</span></code></pre></td></tr></table></div></figure>


<p>それにしてもTime::Moment速いですね。組み込みのlocaltimeと互角とは。</p>

<h2>演算は破壊的</h2>

<p>add, subtract等の演算を行うメソッドは破壊的です。
例えば、一時間後の日時を求めたい場合に以下のように書くと、
もとの日時が失われてしまいます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># 1時間後の日時を求める間違った例</span>
</span><span class='line'><span class="k">use</span> <span class="n">feature</span> <span class="s">&#39;say&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">DateTime</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$after_an_hour</span> <span class="o">=</span> <span class="nv">$dt</span><span class="o">-&gt;</span><span class="n">add</span><span class="p">(</span><span class="n">hours</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">say</span> <span class="nv">$dt</span><span class="p">;</span> <span class="c1"># 2015-12-09T01:00:00</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$after_an_hour</span><span class="p">;</span> <span class="c1"># 2015-12-09T01:00:00</span>
</span></code></pre></td></tr></table></div></figure>


<p>以下のようにcloneしてから演算することで防ぐことができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># 1時間後の日時を求める間違った例</span>
</span><span class='line'><span class="k">use</span> <span class="n">feature</span> <span class="s">&#39;say&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">DateTime</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$after_an_hour</span> <span class="o">=</span> <span class="nv">$dt</span><span class="o">-&gt;</span><span class="n">clone</span><span class="o">-&gt;</span><span class="n">add</span><span class="p">(</span><span class="n">hours</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">say</span> <span class="nv">$dt</span><span class="p">;</span> <span class="c1"># 2015-12-09T00:00:00</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$after_an_hour</span><span class="p">;</span> <span class="c1"># 2015-12-09T01:00:00</span>
</span></code></pre></td></tr></table></div></figure>


<h2>うるう秒の存在</h2>

<p>さて問題です。
「日本時間2015年7月1日午前9時の1秒前は何時何分何秒でしょう？」</p>

<p>簡単そうな問題ですが、一応DateTimeに計算してもらって確かめてもらいましょう。</p>

<figure class='code'><figcaption><span>datetime.pl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">feature</span> <span class="sx">qw(say)</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">DateTime</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">7</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">hour</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$dt</span><span class="o">-&gt;</span><span class="n">subtract</span><span class="p">(</span><span class="n">seconds</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを現時点での最新バージョンであるDateTime-1.21を使って実行してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>perl datetime.pl
</span><span class='line'>2015-07-01T08:59:60
</span></code></pre></td></tr></table></div></figure>


<p>はい、正解は <strong>「8時59分60秒」</strong> です。
「60秒はおかしい。8時59分59秒では？？？」という声が聞こえてきそうですが、60秒が正解です。
今年の7月1日は<a href="http://gigazine.net/news/20150701-leap-second-insert/">3年ぶりにうるう秒が挿入された日</a>でした。
そのため <strong>通常は存在しない60秒がこの日だけ存在します。</strong>
うるう秒についてはWikipediaの<a href="https://ja.wikipedia.org/wiki/%E9%96%8F%E7%A7%92">閏秒</a>の項目どうぞ。
インフラを担当されているかたは対応に苦労したかたも多いのではないでしょうか。</p>

<p>うるう秒は存在だけでも厄介ですが、さらに厄介なことに <strong>うるう秒調整のタイミングは実施される半年前になるまでわかりません</strong> 。
次調整が入るとすれば2016年7月1日ですが、2015年の現時点では調整が入るのか入らないのか確かなことは言えません(今までの傾向からないとは思いますが)。
事前に分からないものに対してDateTimeがどう対処しているかというと、<strong>うるう秒の調整が行われることがわかった時点でバージョンアップして対応</strong> しています。
そのため、2015年7月1日のうるう秒の存在を知らないバージョン(具体的には1.17以前)で先ほどのコードを実行すると、
最新版とは異なった結果が帰ってきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cpanm DateTime@1.17
</span><span class='line'><span class="nv">$ </span>perl datetime.pl
</span><span class='line'>2015-07-01T08:59:59
</span></code></pre></td></tr></table></div></figure>


<p>さて、うるう秒を正確に扱いたい場合は便利な機能ですが、
DateTimeモジュール以外のプログラムがうるう秒を正しく扱えるとは限らないので無視したいケースも多いと思います。
パッと思いつくのは以下のような対応でしょうか・・・。</p>

<ul>
<li>タイムゾーンに <code>floating</code> を指定する

<ul>
<li>「タイムゾーン情報を持っていない」ことを表す特殊なタイムゾーンです</li>
<li>うるう秒の調整のようなタイムゾーン情報が必要な機能はすべて無効になります</li>
<li>タイムゾーンを扱えるのがDateTimeの利点だったのに・・・</li>
</ul>
</li>
<li>うるう秒に関する定義を削除した自前ビルドを用意する

<ul>
<li>DateTimeのレポジトリに<a href="https://github.com/autarch/DateTime.pm/blob/master/leaptab.txt">うるう秒の挿入タイミング一覧</a>が定義されているので、これを削除した自前ビルドを用意する方法</li>
<li>なお、この一覧はビルド時にXSのコードの一部として組み込まれるようなので、ランタイムに何とかすることはできない模様</li>
</ul>
</li>
<li>一度DateTimeをインストールしたら絶対にバージョンアップを行わない。インストールした日時よりも半年以上未来の日時だけ扱う

<ul>
<li>通常半年前にうるう秒の調整は決定されるので、DateTimeはリリース後半年以上未来のうるう秒は知りません</li>
<li>そのため、半年以上未来の日時を扱う限りはうるう秒とは無縁でいられます</li>
</ul>
</li>
</ul>


<p>どれもBK臭溢れる対応なので、もっとスマートな対応方法をご存知のかたはご教授いただけると幸いです。</p>

<h2>ある日からある日までの日数を知りたい</h2>

<p>DateTimeは演算子オーバーロードされているため、通常の数値を同じように引き算が可能です。
引き算を使ったほうが手軽にできるからと以下のように書いてしまうとハマります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># 日数計算の間違った例</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt1</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">25</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt2</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dur</span> <span class="o">=</span> <span class="nv">$dt1</span> <span class="o">-</span> <span class="nv">$dt2</span><span class="p">;</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$dur</span><span class="o">-&gt;</span><span class="n">in_units</span><span class="p">(</span><span class="s">&#39;days&#39;</span><span class="p">);</span> <span class="c1"># 16</span>
</span></code></pre></td></tr></table></div></figure>


<p>一見動いているように見えますが、期間が一ヶ月を超えるような場合に間違った結果を返します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># 日数計算の間違った例</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt1</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">25</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt2</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">11</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dur</span> <span class="o">=</span> <span class="nv">$dt1</span> <span class="o">-</span> <span class="nv">$dt2</span><span class="p">;</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$dur</span><span class="o">-&gt;</span><span class="n">in_units</span><span class="p">(</span><span class="s">&#39;days&#39;</span><span class="p">);</span> <span class="c1"># 16</span>
</span></code></pre></td></tr></table></div></figure>


<p>引き算で帰ってくるDateTime::Durationオブジェクトは「1ヶ月と16日」という情報を持っているのですが、
「1ヶ月」の日数が月によってことなるため計算ができないのです。
以下のように差分を求める時点で日数を計算するように伝えるのが正しいやり方です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># 正しいやりかた</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt1</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">25</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt2</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">11</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dur</span> <span class="o">=</span> <span class="nv">$dt1</span><span class="o">-&gt;</span><span class="n">delta_days</span><span class="p">(</span><span class="nv">$dt2</span><span class="p">);</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$dur</span><span class="o">-&gt;</span><span class="n">in_units</span><span class="p">(</span><span class="s">&#39;days&#39;</span><span class="p">);</span> <span class="c1"># 46</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ある日時からある日時までの秒数を知りたい</h2>

<p>日数がわかったところで、次は秒数を求めてみましょう。
これも演算子オーバーロードを使うとハマります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># 秒数計算の間違った例</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt1</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt2</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span>  <span class="mi">9</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dur</span> <span class="o">=</span> <span class="nv">$dt1</span><span class="o">-</span><span class="nv">$dt2</span><span class="p">;</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$dur</span><span class="o">-&gt;</span><span class="n">in_units</span><span class="p">(</span><span class="s">&#39;seconds&#39;</span><span class="p">);</span> <span class="c1"># 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>$durには「1日」という情報が入っているはずなので、普通に考えるとこれから秒数は求められそうです。
1分は60秒で、1時間は60分で、1日は24時間なので、「1日=60×60×24秒」ですよね。
なぜ求められないのでしょう？</p>

<p>・・・そう、<strong>うるう秒</strong> です。
うるう秒が存在するため、1分は59秒の場合もあれば、61秒の場合もあります。
日数を求めるときと同じように、差分を求める時点で秒数の計算を行うように伝えるとうまくいきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># 正しいやりかた</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt1</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt2</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span>  <span class="mi">9</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dur</span> <span class="o">=</span> <span class="nv">$dt1</span><span class="o">-&gt;</span><span class="n">subtract_datetime_absolute</span><span class="p">(</span><span class="nv">$dt2</span><span class="p">);</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$dur</span><span class="o">-&gt;</span><span class="n">in_units</span><span class="p">(</span><span class="s">&#39;seconds&#39;</span><span class="p">);</span> <span class="c1"># 86400</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに今年はうるう秒の挿入があったので、 <strong>DateTimeの最新版で今年の秒数を計算すると 365×24×60×60秒よりも1秒だけ長くなります</strong> 。
そして今年のうるう秒の挿入を知らない <strong>DateTime1.17では365×24×60×60秒</strong>が帰ってきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$dt1</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2016</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt2</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dur</span> <span class="o">=</span> <span class="nv">$dt1</span><span class="o">-&gt;</span><span class="n">subtract_datetime_absolute</span><span class="p">(</span><span class="nv">$dt2</span><span class="p">);</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$dur</span><span class="o">-&gt;</span><span class="n">in_units</span><span class="p">(</span><span class="s">&#39;seconds&#39;</span><span class="p">);</span> <span class="c1"># 31536001 or 31536000 (DateTimeのバージョンによって異なります)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>epoch</code>は1970年1月1日午前0時(UTC)からの経過秒数を返すメソッドですが、
これは実際の経過時間ではなく形式的な経過秒数(つまりうるう秒を考慮しない)を返します。
そのため、以下のように秒数を求めるとどのバージョンでも同じ結果が帰ってくるはずです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$dt1</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2016</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt2</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2015</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$dt1</span><span class="o">-&gt;</span><span class="n">epoch</span><span class="p">()</span> <span class="o">-</span> <span class="nv">$dt2</span><span class="o">-&gt;</span><span class="n">epoch</span><span class="p">();</span> <span class="c1"># 31536000</span>
</span></code></pre></td></tr></table></div></figure>


<p>もうDateTimeなんか使うのやめて<code>epoch</code>使おうぜ！！
(もちろん実際の経過時間はうるう秒の+1があるのが正しいので、ケースバイケースですが)</p>

<h2>まとめ</h2>

<p>DateTimeは日時をしっかり扱ってくれる素晴らしいモジュールです。
きっと <strong>あなたが思っている以上に日時を正確に厳密に扱ってくれます</strong> 。
そこまで厳密にやるか・・・というところまでしっかり扱ってくれるので、
日時計算に潜んだ様々な闇に触れることになるでしょう。
使う側もそれらのことについてしっかりと理解しておく必要があります。</p>

<p>まあ、具体的に言うと <strong>うるう秒</strong> とか <strong>うるう秒</strong> とかですね！
廃止論とかありましたけど、<a href="http://internet.watch.impress.co.jp/docs/news/20151120_731707.html">とりあえず2023年までは調整がはいる</a>そうです・・・。</p>

<p>他にもいろいろ罠がありそう・・・知っているかたがいれば教えて下さい。</p>
]]></content>
  </entry>
  
</feed>
