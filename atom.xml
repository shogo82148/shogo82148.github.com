<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shogo's Blog]]></title>
  <link href="http://shogo82148.github.io/atom.xml" rel="self"/>
  <link href="http://shogo82148.github.io/"/>
  <updated>2013-09-14T23:57:14+09:00</updated>
  <id>http://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redis::NamespaceのPerl版書いた]]></title>
    <link href="http://shogo82148.github.io/blog/2013/09/14/redis-namespace-perl/"/>
    <updated>2013-09-14T18:36:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/09/14/redis-namespace-perl</id>
    <content type="html"><![CDATA[<p><a href="http://redis.io/">Redis</a> のキーにプリフィックスつけるの面倒だなー自動的につけてくれないかなーと思い、
調べてみると Ruby に <a href="https://github.com/resque/redis-namespace">Redis-Namespace</a> というものがあるらしい。
だけども、Perl では探しても見つからなかったので書いてみた。</p>

<p>レポジトリはこちら→<a href="https://github.com/shogo82148/Redis-Namepace">Redis::Namespace</a></p>

<!-- More -->


<h2>使い方</h2>

<p>インターフェースは <a href="http://search.cpan.org/~melo/Redis/">Perl Redis</a> と一緒。
コマンドのキー名に当たる部分に、自動的にプレフィックスをつけてくれる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">Redis</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">Namespace</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$redis</span> <span class="o">=</span> <span class="n">Redis</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$ns</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Namespace</span><span class="p">(</span><span class="n">redis</span> <span class="o">=&gt;</span> <span class="nv">$redis</span><span class="p">,</span> <span class="n">namespace</span> <span class="o">=&gt;</span> <span class="s">&#39;fugu&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ns</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">,</span> <span class="s">&#39;bar&#39;</span><span class="p">);</span>    <span class="c1"># $redis-&gt;set(&#39;fugu:foo&#39;, &#39;bar&#39;);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$foo</span> <span class="o">=</span> <span class="nv">$ns</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">);</span> <span class="c1"># my $foo = $redis-&gt;get(&#39;fugu:foo&#39;);</span>
</span></code></pre></td></tr></table></div></figure>


<p>大体のコマンドには対応したつもり。
別のプレフィックスがついたキーには基本的にアクセスできなくなるので、
キー名の管理が少し楽になると思います。</p>

<p>でも、flushdb とか flushall すると全部消えるので気をつけてね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl の Redis ライブラリを調べた]]></title>
    <link href="http://shogo82148.github.io/blog/2013/08/24/perl-redis-libraries/"/>
    <updated>2013-08-24T17:51:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/08/24/perl-redis-libraries</id>
    <content type="html"><![CDATA[<p>最近<a href="http://redis.io/">Redis</a> を使ったコードを書くようになったのですが、
キー名を毎回指定するのがだるいです。
Ruby には <a href="https://github.com/nateware/redis-objects">redis-objects</a> というのがあって、
Redisのキーをオブジェクトとして扱うことができるようです。
きっと、Perl にも似たようなのあるだろ、って思って調べてみました。</p>

<!-- More -->


<h2>ほしいもの</h2>

<p>低レベルなRedisのライブラリはたいていメソッドとRedisのコマンドが一対一対応していて、
次のようなコードになると思います。</p>

<figure class='code'><figcaption><span>hogehoge.pl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="s">&#39;key-name&#39;</span><span class="p">,</span> <span class="s">&#39;piyopiyo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;key_name&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>でも、Redisに何か操作をしたいわけじゃなくて、
Redisのキーに対して操作をしたいので、
次のように書けるべきだと思うんです。</p>

<figure class='code'><figcaption><span>expected.pl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$key</span> <span class="o">=</span> <span class="n">key</span><span class="p">(</span><span class="nv">$redis</span><span class="p">,</span> <span class="s">&#39;key-name&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$key</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="s">&#39;piyopiyo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$key</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Redis::Hash, Redis::List</h2>

<p><a href="http://search.cpan.org/~melo/Redis/lib/Redis/Hash.pm">Redis::Hash</a>と
<a href="http://search.cpan.org/~melo/Redis/lib/Redis/List.pm">Redis::List</a>は
Perlのハッシュや配列と同じ操作で Redis にアクセスできるようにするライブラリ。</p>

<figure class='code'><figcaption><span>Redis::Hash</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="mf">5.014</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">Hash</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">tie</span> <span class="k">my</span> <span class="nv">%my_hash</span><span class="p">,</span> <span class="s">&#39;Redis::Hash&#39;</span><span class="p">,</span> <span class="s">&#39;hash_prefix&#39;</span><span class="p">,</span> <span class="p">(</span><span class="n">server</span> <span class="o">=&gt;</span> <span class="s">&#39;localhost:6379&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># set hash_prefix:hogehoge piyopiyo</span>
</span><span class='line'><span class="c1"># set hash_prefix:fugafuga fugufugu</span>
</span><span class='line'><span class="nv">$my_hash</span><span class="p">{</span><span class="n">hogehoge</span><span class="p">}</span> <span class="o">=</span> <span class="s">&#39;piyopiyo&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$my_hash</span><span class="p">{</span><span class="n">fugafuga</span><span class="p">}</span> <span class="o">=</span> <span class="s">&#39;fugufugu&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># get hash_prefix:hogehoge piyopiyo</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$my_hash</span><span class="p">{</span><span class="n">hogehoge</span><span class="p">};</span> <span class="c1"># piyopiyo</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># keys hash_prefix:*</span>
</span><span class='line'><span class="n">say</span> <span class="nb">join</span> <span class="s">&#39;,&#39;</span><span class="p">,</span> <span class="nb">keys</span> <span class="nv">%my_hash</span><span class="p">;</span> <span class="c1">#fugafuga,hogehoge</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># keys hash_prefix:*</span>
</span><span class='line'><span class="c1"># get hash_prefix:fugafuga</span>
</span><span class='line'><span class="c1"># get hash_prefix:hogehoge</span>
</span><span class='line'><span class="n">say</span> <span class="nb">join</span> <span class="s">&#39;,&#39;</span><span class="p">,</span> <span class="nb">values</span> <span class="nv">%my_hash</span><span class="p">;</span> <span class="c1">#fugufugu,piyopiyo</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># del hash_prefix:hogehoge</span>
</span><span class='line'><span class="nb">delete</span> <span class="nv">$my_hash</span><span class="p">{</span><span class="n">hogehoge</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>tie とかよくわかない。
Perl の黒魔術を見た気がしました。</p>

<p>普通のハッシュや配列に見えるのは面白いけど、
Redisっぽい機能がまったく使えないのはつらい。
<code>tied(%my_hash)-&gt;cmd</code> って書けばコマンド発行できるけど、
それなら最初から直接 <a href="http://search.cpan.org/~melo/Redis/lib/Redis.pm">Redis.pm</a> を
使えよって話になります。</p>

<p>あと、tie するごとにコネクションを張り直しているようなので、
たくさんのハッシュやリストを作ると大変なことになりそうです。</p>

<h2>Redis::Client</h2>

<p>これも tie すると、Redis上のデータをハッシュや配列として扱うことができます。
tie できるのは <a href="http://search.cpan.org/~friedo/Redis-Client/lib/Redis/Client/String.pm">String</a>,
<a href="http://search.cpan.org/~friedo/Redis-Client/lib/Redis/Client/List.pm">List</a>,
<a href="http://search.cpan.org/~friedo/Redis-Client/lib/Redis/Client/Hash.pm">Hash</a>,
<a href="http://search.cpan.org/~friedo/Redis-Client/lib/Redis/Client/Set.pm">Set</a>,
<a href="http://search.cpan.org/~friedo/Redis-Client/lib/Redis/Client/Zset.pm">Zset</a>。
それぞれがRedisで使えるデータ型に対応している。</p>

<figure class='code'><figcaption><span>Redis::Client::String</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="mf">5.014</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">Client</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$client</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Client</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'><span class="nb">tie</span> <span class="k">my</span> <span class="nv">$str</span><span class="p">,</span> <span class="s">&#39;Redis::Client::String&#39;</span><span class="p">,</span> <span class="n">key</span> <span class="o">=&gt;</span> <span class="s">&#39;my_string&#39;</span><span class="p">,</span> <span class="n">client</span> <span class="o">=&gt;</span> <span class="nv">$client</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$str</span> <span class="o">=</span> <span class="s">&#39;foo&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$str</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ひとつのキーに対してひとつのオブジェクトを割り当てるのは良さげ。
また、ハッシュ型、セット型、ソート済みセット型といった、Redis特有のデータ型に対応しているのもGood。
でも、ただストアするだけならこれで十分だけど、もう少し高度な機能も使いたい・・・。</p>

<h2>Tie::Redis</h2>

<p><a href="http://search.cpan.org/~dgl/Tie-Redis/lib/Tie/Redis/Hash.pm">Tie::Redis</a> も
tie を使ってPerlのデータ構造っぽく扱えるようにするライブラリ。</p>

<p>Redis全体を一つのハッシュとして扱ったり、
Redisの文字列型、ハッシュ型、リスト型を扱えるみたい。</p>

<h2>Redis::Object</h2>

<p><a href="http://search.cpan.org/~ukautz/Redis-Object/README.pod">Redis::Oject</a>は
ORM風なRedis用ライブラリ。</p>

<figure class='code'><figcaption><span>RedisDatabase.pm</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nb">package</span> <span class="n">MyRedisDatabase</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">Moose</span><span class="p">;</span>
</span><span class='line'><span class="n">extends</span> <span class="sx">qw/ Redis::Object /</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">has</span> <span class="n">tables</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">isa</span>     <span class="o">=&gt;</span> <span class="s">&#39;ArrayRef[Str]&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">is</span>      <span class="o">=&gt;</span> <span class="s">&#39;ro&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">default</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="p">[</span> <span class="sx">qw/SomeTable/</span> <span class="p">]</span> <span class="p">},</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">__PACKAGE__</span><span class="o">-&gt;</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">make_immutable</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>RedisDatabase/SomeTable.pm</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nb">package</span> <span class="nn">MyRedisDatabase::</span><span class="n">SomeTable</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">Moose</span><span class="p">;</span>
</span><span class='line'><span class="n">with</span> <span class="sx">qw/ Redis::Object::Table /</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">has</span> <span class="n">hoge</span> <span class="o">=&gt;</span> <span class="p">(</span> <span class="n">isa</span> <span class="o">=&gt;</span> <span class="s">&#39;Str&#39;</span><span class="p">,</span> <span class="n">is</span> <span class="o">=&gt;</span> <span class="s">&#39;rw&#39;</span><span class="p">,</span> <span class="n">default</span> <span class="o">=&gt;</span> <span class="s">&#39;Something&#39;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">__PACKAGE__</span><span class="o">-&gt;</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">make_immutable</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>redis-object.pl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="mf">5.014</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">MyRedisDatabase</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># init database</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$db</span> <span class="o">=</span> <span class="n">MyRedisDatabase</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span>
</span><span class='line'>    <span class="n">server</span> <span class="o">=&gt;</span> <span class="s">&#39;localhost:6379&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># create item</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$item</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="n">create</span><span class="p">(</span> <span class="n">SomeTable</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">hoge</span> <span class="o">=&gt;</span> <span class="s">&quot;Hello&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># fetch item by id</span>
</span><span class='line'><span class="nv">$item</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="n">find</span><span class="p">(</span> <span class="n">SomeTable</span> <span class="o">=&gt;</span> <span class="nv">$item</span><span class="o">-&gt;</span><span class="n">id</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># update item</span>
</span><span class='line'><span class="nv">$item</span><span class="o">-&gt;</span><span class="n">hoge</span><span class="p">(</span> <span class="s">&quot;piyo&quot;</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>ORMっぽいけど、あんまり複雑な検索はできないらしい。
ここまでするなら普通にMySQLとORMつかったほうが良さそう。</p>

<h2>まとめ</h2>

<p>みんな tie が大好き。</p>

<p>tie しないのがほしいな・・・。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ランダム抽出アルゴリズムについて考える]]></title>
    <link href="http://shogo82148.github.io/blog/2013/07/13/random-sample/"/>
    <updated>2013-07-13T22:13:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/07/13/random-sample</id>
    <content type="html"><![CDATA[<p>数日前に社内IRCで「スマートな非復元抽出の方法はないか」と話題になったので、
ランダムサンプリングのアルゴリズムについて調べたり考えたりしてみた。</p>

<!-- More -->


<h2>復元抽出</h2>

<p>非復元抽出の手法って調べてもなかなか出てこない・・・。
ひとまず、復元抽出についてまとめてみましょう。</p>

<h3>線形検索</h3>

<p>一番簡単な実装方法。
どの区間に入るかを線形検索して求める。
選択肢の個数nとすると計算量はO(n)。</p>

<figure class='code'><figcaption><span>linear_search_method.pl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">List::</span><span class="n">Util</span> <span class="sx">qw(sum)</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">linear_search_method</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$weights</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$num</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="nv">@$weights</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$length</span> <span class="o">=</span> <span class="nv">@$weights</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">$num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$r</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="nv">$sum</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="k">my</span> <span class="nv">$i</span><span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="nv">$length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$r</span> <span class="o">-=</span> <span class="nv">$weights</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nv">$r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">push</span> <span class="nv">@a</span><span class="p">,</span> <span class="nv">$i</span><span class="p">;</span>
</span><span class='line'>                <span class="k">last</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">\</span><span class="nv">@a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nb">join</span> <span class="s">&#39;, &#39;</span><span class="p">,</span> <span class="nv">@</span><span class="p">{</span><span class="n">linear_search_method</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span> <span class="mi">100</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>バイナリサーチ</h3>

<p>あらかじめ累積分布表を作っておき、どの区間に入るかをバイナリサーチ。
準備にO(n)、選択に O(log n)かかる。</p>

<figure class='code'><figcaption><span>binary_search_method.pl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">List::</span><span class="n">Util</span> <span class="sx">qw(sum)</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">binary_search_method</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$weights</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$num</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$length</span> <span class="o">=</span> <span class="nv">@$weights</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@a</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@b</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="k">my</span> <span class="nv">$i</span><span class="p">(</span><span class="nv">@$weights</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">push</span> <span class="nv">@a</span><span class="p">,</span> <span class="nv">$sum</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$sum</span> <span class="o">+=</span> <span class="nv">$i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">push</span> <span class="nv">@a</span><span class="p">,</span> <span class="nv">$sum</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">$num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$r</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="nv">$sum</span><span class="p">);</span>
</span><span class='line'>        <span class="k">my</span> <span class="p">(</span><span class="nv">$l</span><span class="p">,</span> <span class="nv">$h</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="nv">$h</span> <span class="o">-</span> <span class="nv">$l</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">my</span> <span class="nv">$i</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$l</span> <span class="o">+</span> <span class="nv">$h</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nv">$r</span> <span class="o">&lt;</span> <span class="nv">$a</span><span class="p">[</span><span class="nv">$i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$h</span> <span class="o">=</span> <span class="nv">$i</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$l</span> <span class="o">=</span> <span class="nv">$i</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nb">push</span> <span class="nv">@b</span><span class="p">,</span> <span class="nv">$l</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">\</span><span class="nv">@b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nb">join</span> <span class="s">&#39;, &#39;</span><span class="p">,</span> <span class="nv">@</span><span class="p">{</span><span class="n">binary_search_method</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span> <span class="mi">100</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Walker&#8217;s alias method</h3>

<p>今回調べて初めて知ったアルゴリズム。
準備にO(n)、ランダム選択はなんと定数時間O(1)でできる。</p>

<figure class='code'><figcaption><span>walers_alias_method.pl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">List::</span><span class="n">Util</span> <span class="sx">qw(sum)</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">walkers_alias_method</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$weights</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$num</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="nv">@$weights</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$length</span> <span class="o">=</span> <span class="nv">@$weights</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@p</span> <span class="o">=</span> <span class="nb">map</span> <span class="p">{</span> <span class="nv">$_</span> <span class="o">/</span> <span class="nv">$sum</span> <span class="o">*</span> <span class="nv">$length</span><span class="p">}</span> <span class="nv">@$weights</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@a</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="nv">$length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$h</span><span class="p">,</span> <span class="nv">$l</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@hl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="k">my</span> <span class="nv">$i</span><span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="nv">$length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="nv">$p</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$hl</span><span class="p">[</span><span class="nv">$h</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$i</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$hl</span><span class="p">[</span><span class="nv">$l</span><span class="o">--</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$i</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="nv">$h</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nv">$l</span> <span class="o">!=</span> <span class="nv">$length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="p">(</span><span class="nv">$j</span><span class="p">,</span> <span class="nv">$k</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@hl</span><span class="p">[</span><span class="nv">$l</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nv">$h</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>        <span class="nv">$a</span><span class="p">[</span><span class="nv">$j</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$k</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$p</span><span class="p">[</span><span class="nv">$k</span><span class="p">]</span> <span class="o">+=</span> <span class="nv">$p</span><span class="p">[</span><span class="nv">$j</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$l</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="nv">$p</span><span class="p">[</span><span class="nv">$k</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$hl</span><span class="p">[</span><span class="nv">$l</span><span class="o">--</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$k</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$h</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nb">map</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$r</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="nv">$length</span><span class="p">);</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$k</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nv">$r</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$r</span> <span class="o">-=</span> <span class="nv">$k</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$r</span> <span class="o">&lt;</span> <span class="nv">$p</span><span class="p">[</span><span class="nv">$k</span><span class="p">]</span> <span class="p">?</span> <span class="nv">$k</span> <span class="p">:</span> <span class="nv">$a</span><span class="p">[</span><span class="nv">$k</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="mi">1</span><span class="o">..</span><span class="nv">$num</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nb">join</span> <span class="s">&#39;, &#39;</span><span class="p">,</span> <span class="nv">@</span><span class="p">{</span><span class="n">walkers_alias_method</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span> <span class="mi">100</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>非復元抽出</h2>

<p>復元抽出のアルゴリズムを応用して、非復元抽出について考えてみましょう。
一度出たものが2回でないよう、出たものの重みを0にします。</p>

<h3>線形検索</h3>

<p>線形検索の場合は、重みリストをほぼそのまま使っているので、更新は簡単。
一度出たものの重みを0にして、総和を更新するだけ。</p>

<figure class='code'><figcaption><span>linear_method.pl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">List::</span><span class="n">Util</span> <span class="sx">qw(sum)</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">linear_method</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$weights</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$num</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="nv">@$weights</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$length</span> <span class="o">=</span> <span class="nv">@$weights</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@w</span> <span class="o">=</span> <span class="nv">@$weights</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">$num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$r</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="nv">$sum</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="k">my</span> <span class="nv">$i</span><span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="nv">$length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$r</span> <span class="o">-=</span> <span class="nv">$w</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nv">$r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">push</span> <span class="nv">@a</span><span class="p">,</span> <span class="nv">$i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                 <span class="c1"># 一度出たものの重みを0にする</span>
</span><span class='line'>                <span class="nv">$sum</span> <span class="o">-=</span> <span class="nv">$w</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>
</span><span class='line'>                <span class="nv">$w</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                <span class="k">last</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">\</span><span class="nv">@a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nb">join</span> <span class="s">&#39;,&#39;</span><span class="p">,</span> <span class="n">linear_method</span><span class="p">([</span><span class="mi">1</span> <span class="o">..</span> <span class="mi">100000</span><span class="p">],</span> <span class="mi">500</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>二分木</h3>

<p>バイナリサーチでは累積分布表を作成したけど、
これの更新にはO(n)かかってしまうのでバイナリサーチの意味がなくなってしまう。
そこで重みを二分木を使って管理することで、O(log n)で重みの更新ができる。</p>

<figure class='code'><figcaption><span>tree.pl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">List::</span><span class="n">Util</span> <span class="sx">qw(sum)</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">binary_search_method</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$weights</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$num</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$length</span> <span class="o">=</span> <span class="nv">@$weights</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 二分木を構築</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@left_weight</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="n">x</span> <span class="p">(</span><span class="nv">$length</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@right_weight</span> <span class="o">=</span> <span class="p">((</span><span class="mi">0</span><span class="p">)</span> <span class="n">x</span> <span class="nv">$length</span><span class="p">,</span> <span class="nv">@$weights</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$i</span> <span class="o">=</span> <span class="nv">$length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="nv">$i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$left_weight</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$left_weight</span><span class="p">[</span><span class="nv">$i</span><span class="o">*</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="nv">$right_weight</span><span class="p">[</span><span class="nv">$i</span><span class="o">*</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>        <span class="nv">$right_weight</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$left_weight</span><span class="p">[</span><span class="nv">$i</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="nv">$right_weight</span><span class="p">[</span><span class="nv">$i</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@a</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">$num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1"># 二分木から検索</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$r</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="nv">$left_weight</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">+</span> <span class="nv">$right_weight</span><span class="p">[</span><span class="nv">$i</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nv">$r</span> <span class="o">&lt;</span> <span class="nv">$left_weight</span><span class="p">[</span><span class="nv">$i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$i</span> <span class="o">=</span> <span class="nv">$i</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$r</span> <span class="o">-=</span> <span class="nv">$left_weight</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>
</span><span class='line'>                <span class="nv">$i</span> <span class="o">=</span> <span class="nv">$i</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nb">push</span> <span class="nv">@a</span><span class="p">,</span> <span class="nv">$i</span> <span class="o">-</span> <span class="nv">$length</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># 木を更新</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$w</span> <span class="o">=</span> <span class="nv">$weights</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$i</span><span class="o">-</span><span class="nv">$length</span><span class="p">];</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="nv">$i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nv">$i</span> <span class="nv">%</span> <span class="nv">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$left_weight</span><span class="p">[</span><span class="nv">$i</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">]</span> <span class="o">-=</span> <span class="nv">$w</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$right_weight</span><span class="p">[</span><span class="nv">$i</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">]</span> <span class="o">-=</span> <span class="nv">$w</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nv">$i</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="o">\</span><span class="nv">@a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nb">join</span> <span class="s">&#39;,&#39;</span><span class="p">,</span> <span class="n">binary_search_method</span><span class="p">([</span><span class="mi">1</span><span class="o">..</span><span class="mi">100000</span><span class="p">],</span> <span class="mi">500</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>その他</h2>

<p>Walker&#8217;s alias method でも更新法を考えたけど、
テーブルを一から再生成する以外にいい方法が思いつかない。</p>

<p>抽出が高速であるという特徴を利用して、
同じ物が出たらもう一度実行するというのが手っ取り早そう。
Walker&#8217;s alias method が必要なときは n が十分に大きいはずなので、
重複が起こる確率は小さく、これで十分なきがする。</p>

<h2>まとめ</h2>

<table>
<tr>
  <th>手法</th><th>準備</th><th>抽出</th><th>重み更新</th>
</tr>
<tr>
  <td>線形検索</td><td>O(n)</td><td>O(n)</td><td>O(1)</td>
</tr>
<tr>
  <td>バイナリサーチ</td><td>O(n)</td><td>O(log n)</td><td>O(log n)</td>
</tr>
<tr>
  <td>Walker&#8217;s alias</td><td>O(n)</td><td>O(1)</td><td>O(n)</td>
</tr>
</table>


<h2>参考</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/koiti_yano/20070826/p1">比較的高速な復元抽出アルゴリズム</a></li>
<li><a href="http://tolstoy.newcastle.edu.au/R/devel/05/06/1403.html">efficiency of sample() with prob</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Cloud Messaging for Chrome を試してみた]]></title>
    <link href="http://shogo82148.github.io/blog/2013/05/15/google-cloud-messaging-for-chrome/"/>
    <updated>2013-05-15T11:26:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/05/15/google-cloud-messaging-for-chrome</id>
    <content type="html"><![CDATA[<p>少し前に<a href="http://developer.chrome.com/apps/cloudMessaging.html">Google Cloud Messaging for Chrome</a>
が発表されました。
Android向けに提供されていた Push 通信の仕組みである GCM の Chrome 版です。
ちょうど GCM for Android に触っていたところだったので、
for Chrome のほうも試してみることにしました。</p>

<!-- More -->


<h2>拡張機能の登録</h2>

<p>公式ページの説明にしたがって、
APIを使えるようにします。
GCMはOAuth2.0で認証を行うので、</p>

<ol>
<li>クライアントIDを作る</li>
<li>Refresh Token を作る</li>
</ol>


<p>という2ステップが必要。</p>

<h3>クライアントIDを作る</h3>

<p>まず、新しい OAuth2.0 のアプリを作成。
拡張機能をアップロードする予定のGoogleアカウントで以下の作業して
Client IDを作ります。</p>

<ol>
<li><a href="https://code.google.com/apis/console/">Google APIs Console</a> にログインする</li>
<li><strong> Create&#8230; </strong> メニューから新しいプロジェクトを作成</li>
<li>&#8220;Services&#8221; を開いて <strong> Google Cloud Messaging for Chrome API </strong> を有効化</li>
<li>&#8220;API Access&#8221; を開いて <strong> Create an OAuth 2.0 cliend ID&#8230; </strong> というボタンをクリック</li>
<li>branding information を適当に入力</li>
<li>&#8220;Application Type&#8221; という項目の &#8220;Web application&#8221; を選択</li>
<li>&#8220;Create client ID&#8221;！！</li>
</ol>


<p>Client ID と Client Secret が表示されるのでメモしておきましょう。</p>

<h3>Refresh Token を取得する</h3>

<p>次に作成したクライアントIDを使って、
OAuth2.0認証。</p>

<ol>
<li>シークレットウィンドウを開く(複数アカウント持ってない場合は必要ない)</li>
<li><a href="https://developers.google.com/oauthplayground/">OAuth 2.0 Playground</a>へアクセス</li>
<li><strong> OAuth2.0 Configuration </strong> をクリック</li>
<li>&#8220;Use your own OAuth credentials&#8221; にチェックを入れ、Client ID と Client Secret を入力。&#8221;Close&#8221;を押して画面を閉じる</li>
<li>&#8220;Step 1&#8221;セクションの&#8221;Input your own scopes&#8221;に <code>https://www.googleapis.com/auth/gcm_for_chrome</code> を入力して、&#8221;Authorize APIs&#8221;ボタンを押す</li>
<li>ログインページにリダイレクトされるので、拡張機能をアップロードする予定のアカウントで認証</li>
<li>今度はアプリの認証画面に飛ぶので &#8220;Allow Access&#8221; をクリック</li>
<li>&#8220;Step 2&#8221; セクションの &#8220;Exchange authorization code for tokens&#8221; ボタンをクリック</li>
</ol>


<p>以上の手順で Access Token と Refresh Token がもらえる。
通知を送るには Access Token があれば十分なんだけど、有効期間が1時間程度しかない。
有効期間が切れたら Refresh Token を使って再取得する必要がある。
Refresh Token の方には有効期間は無いので、大事にとっておこう。</p>

<p>(GCM for Android みたいに Sever key 作るだけじゃダメだったのかな・・・OAuth2.0認証面倒・・・)</p>

<h2>拡張機能でGCMを使う</h2>

<p>次は通知を受け取る拡張機能を作ります。</p>

<h3>パーミッションを追加</h3>

<p>まずはマニフェストを作成。
permissions という項目に &#8220;pushMessaging&#8221; を追加しておくのがポイント。</p>

<figure class='code'><figcaption><span>manifest.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;manifest_version&quot;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;Shogo GCM Test&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;It&#39;s test extension&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;1.0&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="s2">&quot;permissions&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;pushMessaging&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;notifications&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="s2">&quot;background&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;scripts&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;background.js&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>JavaScript を書く</h3>

<p>通知を受け取るプログラムを書いてみます。</p>

<figure class='code'><figcaption><span>background.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// ChannelIDを取得</span>
</span><span class='line'><span class="nx">chrome</span><span class="p">.</span><span class="nx">pushMessaging</span><span class="p">.</span><span class="nx">getChannelId</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span> <span class="c1">// 本当はサーバに送るんだけど、とりあえず、コンソールに出力しておく</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 通知を受け取るイベントハンドラを登録</span>
</span><span class='line'><span class="nx">chrome</span><span class="p">.</span><span class="nx">pushMessaging</span><span class="p">.</span><span class="nx">onMessage</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// デスクトップ通知で表示</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">notification</span> <span class="o">=</span> <span class="nx">webkitNotifications</span><span class="p">.</span><span class="nx">createNotification</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Message&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">message</span><span class="p">.</span><span class="nx">payload</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="nx">notification</span><span class="p">.</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>マーケットに公開！</h3>

<p>ローカル環境でも Channel ID の取得まではできるんだけど、
実際に Push 通知を受信するには、マーケットへのアップロードが必要。</p>

<p><a href="https://chrome.google.com/webstore/developer/dashboard">デベロッパーダッシュボード</a>で
新しいアイテムを追加ボタンを押し、さっきのファイルをzipで固めたファイルを送ります。
公開するには初回のみ5ドル必要です。
さすがに開発中のものを全世界に公開するのはまずいので、
テスターにのみ公開というオプションを選択しておきましょう。</p>

<h2>Push 通知を送る</h2>

<p>さあ、Push通知を送ってみましょう。</p>

<h3>新しい Access Token を取得する</h3>

<p>と、そのまえに</p>

<p>そろそろ最初にもらった Access Token の有効期間が切れているころだと思うので、
新しいものを取得しておきましょう。</p>

<p>最近 Perler になりつつあるので、Perlで書いてみます。
Client ID, Client Secret, Refresh Token を Post するだけの簡単なスクリプトです。</p>

<figure class='code'><figcaption><span>refresh_token.pl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/env perl</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">Encode</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Data::</span><span class="n">Dumper</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">Furl</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">JSON::</span><span class="n">XS</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$refresh</span> <span class="o">=</span> <span class="s">&#39;your_refresh_token&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$client_id</span> <span class="o">=</span> <span class="s">&#39;your_client_id.apps.googleusercontent.com&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$client_secret</span> <span class="o">=</span> <span class="s">&#39;your_client_secret&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$furl</span> <span class="o">=</span> <span class="n">Furl</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$res</span> <span class="o">=</span> <span class="nv">$furl</span><span class="o">-&gt;</span><span class="n">post</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;https://accounts.google.com/o/oauth2/token&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span> <span class="p">],</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>        <span class="n">client_id</span> <span class="o">=&gt;</span> <span class="nv">$client_id</span><span class="p">,</span>
</span><span class='line'>        <span class="n">client_secret</span> <span class="o">=&gt;</span> <span class="nv">$client_secret</span><span class="p">,</span>
</span><span class='line'>        <span class="n">refresh_token</span> <span class="o">=&gt;</span> <span class="nv">$refresh</span><span class="p">,</span>
</span><span class='line'>        <span class="n">grant_type</span> <span class="o">=&gt;</span> <span class="s">&#39;refresh_token&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">Dumper</span> <span class="n">decode_json</span><span class="p">(</span><span class="nv">$res</span><span class="o">-&gt;</span><span class="n">content</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Push! Push! Push!</h3>

<p>さあ、ようやくPush！</p>

<p>Access Token をヘッダにつけ、
メッセージをChannel IDと一緒に POST するだけ。</p>

<p>Channel ID は <code>chrome://extensions/</code> から自分の拡張機能の選択、
ビューを調査: _generated_background_page.html というところをクリックすると、
Consoleが見れるのでそこから確認できます。</p>

<figure class='code'><figcaption><span>push.pl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/env perl</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">Encode</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">Furl</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">JSON::</span><span class="n">XS</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$access</span> <span class="o">=</span> <span class="s">&#39;your_access_token&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$channelId</span> <span class="o">=</span> <span class="s">&#39;your_channel_id&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$data</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">channelId</span> <span class="o">=&gt;</span> <span class="nv">$channelId</span><span class="p">,</span>
</span><span class='line'>    <span class="n">subchannelId</span> <span class="o">=&gt;</span> <span class="s">&quot;0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">payload</span> <span class="o">=&gt;</span> <span class="n">decode_utf8</span><span class="p">(</span><span class="nb">join</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">,</span> <span class="nv">@ARGV</span><span class="p">)),</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$furl</span> <span class="o">=</span> <span class="n">Furl</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$res</span> <span class="o">=</span> <span class="nv">$furl</span><span class="o">-&gt;</span><span class="n">post</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;https://www.googleapis.com/gcm_for_chrome/v1/messages&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>        <span class="s">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s">&#39;application/json&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;Authorization&#39;</span> <span class="o">=&gt;</span> <span class="s">&quot;Bearer $access&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="n">encode_json</span> <span class="nv">$data</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>perl push.pl hogehoge
</span></code></pre></td></tr></table></div></figure>


<p>うまくいくと、デスクトップ通知が出るはず！</p>

<h2>参考</h2>

<ul>
<li><a href="http://developer.chrome.com/apps/cloudMessaging.html">Google Cloud Messaging for Chrome</a></li>
<li><a href="http://blog.maripo.org/2013/05/gcm-for-chrome/">Google Cloud Messaging for Chromeを体験してみた</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RaspberryPiからメールを送る]]></title>
    <link href="http://shogo82148.github.io/blog/2013/05/12/mail-from-raspberrypi/"/>
    <updated>2013-05-12T21:50:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/05/12/mail-from-raspberrypi</id>
    <content type="html"><![CDATA[<p>RaspberryPi に cron を仕込んで定期実行をやってみようと考えました。
cron の設定自体は <code>crontab -e</code> コマンドを実行すれば簡単にできます。
ただ、これだけだとちゃんと動いているか少し心配なので、
エラーが起きた時に何か通知して欲しい。
普通なら設定ファイルに <code>MAILTO=hogehoge@example.com</code> と書いておくと
メールが送られるはずなのですが、
メールサーバが動いてないのでうまくいかない・・・。</p>

<p>そういうわけで、RaspberryPiからメールを送るための設定をしたのでメモ。</p>

<!-- More -->


<h2>MTAをインストールする</h2>

<p>Raspberry Pi には標準でMTA(Message Transfer Agent)が入ってないようなのでインストール。
今回はPostfixを採用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install postfix
</span></code></pre></td></tr></table></div></figure>


<p>最初、Sendmailも試してみたんだけど、送信者マスカレードがなぜかうまく行かなったので断念。
後述するように、この設定がないとスパムフィルタに引っかかってしまうのです。</p>

<h2>プロバイダのSMTPにリレーしてもらう</h2>

<p>実際にメールを送りには以下の条件を満たす必要があるようです。</p>

<ul>
<li>送信元のドメインを引ける</li>
<li>固定IPからのアクセス</li>
</ul>


<p>固定IPなんて自前で持ってないし、
cron からのメールは送信元が pi@raspberrypi になってしまいドメインを引けません。
そのためそのままではスパムメールとして扱われてしまい、メールが届きません。</p>

<p>そこで、プロバイダが提供しているSMTPサーバにメールをリレーしてもらいます。
<code>/etc/postfix/main.cf</code>に以下の行を追加します。</p>

<figure class='code'><figcaption><span>/etc/postfix/main.cf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sender_canonical_maps = regexp:/etc/postfix/canonical
</span><span class='line'>
</span><span class='line'>relayhost = [smtp.example.com]:587
</span><span class='line'>smtp_sasl_auth_enable = yes
</span><span class='line'>smtp_sasl_password_maps = hash:/etc/postfix/relay_password
</span><span class='line'>smtp_sasl_security_options = noanonymous</span></code></pre></td></tr></table></div></figure>


<p>プロバイダにリレーしてもらうには SMTP-Auth で認証する必要があるので、
ユーザ名とパスワードを設定しておきます。</p>

<figure class='code'><figcaption><span>/etc/postfix/elay_password</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>smtp.example.com hogehoge:your-password</span></code></pre></td></tr></table></div></figure>


<p>postmapコマンドを使って、Postfixから扱える形式に変換します。</p>

<figure class='code'><figcaption><span>command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>postmap <span class="nb">hash</span>:/etc/postfix/relay_password
</span></code></pre></td></tr></table></div></figure>


<p>さらに、エンベロープのFromがプロバイダから提供されたメールアドレスでないと
メールをリレーしてくれないので、
すべてのメールのFromをすべて書き換えるよう設定します。</p>

<figure class='code'><figcaption><span>/etc/postfix/canonical</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/.*/ hogehoge@example.com</span></code></pre></td></tr></table></div></figure>


<p>最後にPostfixに設定を読み込ませて設定完了。
cron からメールを送れるようになるはず。</p>

<figure class='code'><figcaption><span>command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo /etc/init.d/postfix reload
</span></code></pre></td></tr></table></div></figure>


<p>・・・この設定にたどり着くのに非常に苦労した。
メールなんてもう嫌だ・・・。</p>

<h2>参考</h2>

<ul>
<li><a href="http://blog.cohtan.org/2009/03/postfixtofrom.html">PostfixでメールのToやFromを書き換える方法</a></li>
<li><a href="http://www.maruko2.com/mw/Postfix_%E3%81%A7%E3%83%A1%E3%83%BC%E3%83%AB%E3%83%AA%E3%83%AC%E3%83%BC%E3%81%AE%E8%A8%AD%E5%AE%9A_(SMTP_%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88_%2B_SMTP_Auth">Postfix でメールリレーの設定 (SMTP クライアント + SMTP Auth)</a>)</li>
<li><a href="http://www.limemo.net/blog/2013/02/raspberry-pi-not-working-cron-on-raspbian.html">【トラブル】raspberry pi(ラズベリーパイ)を使ってみる - raspbianでcronがうまく動かないような…?</a>

<ul>
<li>Sendmailでの設定。なぜかうまく行かなかった。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RaspberryPiでhttps通信が失敗するのを何とかする]]></title>
    <link href="http://shogo82148.github.io/blog/2013/05/12/raspberry-pi-https-connection/"/>
    <updated>2013-05-12T16:48:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/05/12/raspberry-pi-https-connection</id>
    <content type="html"><![CDATA[<p>RaspberryPiをネットつないでみたので、PythonからいろんなURLを叩いて遊んでいたんだけど、
一部のhttps通信が Connection Timed Out で失敗しちゃう。
プログラムの問題かと思ったけど、curlで叩いてもやっぱりタイムアウト。
Macで全く同じ事をするとうまくいく・・・。
いろいろ調べて、何とかしてみたお話。</p>

<!-- More -->


<h2>原因</h2>

<p>接続先がTLSv1にしか対応していないのにSSLv3でアクセスしようとしていたことが問題だったらしい。
明示的にTLSv1を使うように指定して curl を叩いてみるとうまくいった。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl --tlsv3 https://hogehoge
</span></code></pre></td></tr></table></div></figure>


<p>なぜRaspberryPiではダメで
Macでは成功するのか、という根本的な原因はよくわからなかった。
SSLv3に対応していないなら自動的にフォールバックしてくれてもよさそうなものだけど、
なぜうまく行かないんだろう・・・？</p>

<h2>Pythonでの対処</h2>

<p>PythonでもTLSv3を使えばうまくいくはずなんだけど、
暗号化方式を指定するオプションは見当たらない(2.7での話)。
どうやら標準ライブラリのファイルを直接書き換えるか、
実行時に中身を入れ替えるかしないとできないみたいだ。
この問題普通のUbuntuでも起こるらしく、
そのフォーラムで置き換えコードを見つけた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">httplib</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">httplib</span> <span class="kn">import</span> <span class="n">HTTPConnection</span><span class="p">,</span> <span class="n">HTTPS_PORT</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">ssl</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HTTPSConnection</span><span class="p">(</span><span class="n">HTTPConnection</span><span class="p">):</span>
</span><span class='line'>    <span class="s">&quot;This class allows communication via SSL.&quot;</span>
</span><span class='line'>    <span class="n">default_port</span> <span class="o">=</span> <span class="n">HTTPS_PORT</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">key_file</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">cert_file</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="n">strict</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">socket</span><span class="o">.</span><span class="n">_GLOBAL_DEFAULT_TIMEOUT</span><span class="p">,</span>
</span><span class='line'>            <span class="n">source_address</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="n">HTTPConnection</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">strict</span><span class="p">,</span> <span class="n">timeout</span><span class="p">,</span>
</span><span class='line'>                <span class="n">source_address</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">key_file</span> <span class="o">=</span> <span class="n">key_file</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">cert_file</span> <span class="o">=</span> <span class="n">cert_file</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">connect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="s">&quot;Connect to a host on a given (SSL) port.&quot;</span>
</span><span class='line'>        <span class="n">sock</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">create_connection</span><span class="p">((</span><span class="bp">self</span><span class="o">.</span><span class="n">host</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">port</span><span class="p">),</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">timeout</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">source_address</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_tunnel_host</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">sock</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">_tunnel</span><span class="p">()</span>
</span><span class='line'>        <span class="c"># this is the only line we modified from the httplib.py file</span>
</span><span class='line'>        <span class="c"># we added the ssl_version variable</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">sock</span> <span class="o">=</span> <span class="n">ssl</span><span class="o">.</span><span class="n">wrap_socket</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">key_file</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">cert_file</span><span class="p">,</span> <span class="n">ssl_version</span><span class="o">=</span><span class="n">ssl</span><span class="o">.</span><span class="n">PROTOCOL_TLSv1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#now we override the one in httplib</span>
</span><span class='line'><span class="n">httplib</span><span class="o">.</span><span class="n">HTTPSConnection</span> <span class="o">=</span> <span class="n">HTTPSConnection</span>
</span><span class='line'><span class="c"># ssl_version corrections are done</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを通信開始前に読みこめば、あとは<code>urllib</code>で読み込めるようになるはず。</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.abe3.net/2012/12/ruby-https-error/">RubyでHTTPS通信に失敗したのでcURLで対処した</a></li>
<li><a href="http://askubuntu.com/questions/116020/python-https-requests-urllib2-to-some-sites-fail-on-ubuntu-12-04-without-proxy">Python HTTPS requests (urllib2) to some sites fail on Ubuntu 12.04 without proxy</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tweepyでApplication-only authenticationしてみた]]></title>
    <link href="http://shogo82148.github.io/blog/2013/05/09/application-only-authentication-with-tweepy/"/>
    <updated>2013-05-09T23:29:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/05/09/application-only-authentication-with-tweepy</id>
    <content type="html"><![CDATA[<p>Twitter の API リファレンスを久しぶりに見たら、
<a href="https://dev.twitter.com/docs/auth/application-only-auth">Application-only authentication</a>とかいうのを発見。
特定のユーザと関連付けられない代わりに、普通に認証するより制限が緩いみたい。
3月に追加されてたらしい。</p>

<p>知らなかった・・・。
最近API叩いてなかったからな・・・。</p>

<p>便利そうなので、Python用のTwitterライブラリである<a href="https://github.com/tweepy/tweepy">Tweepy</a>から使ってみた。</p>

<!-- More -->


<h2>AuthHandler</h2>

<p>Tweepy用のAuthHandler。
認証部分は
<a href="http://ktkrhr.hatenablog.com/entry/2013/03/27/002447">TwitterのApplication-only authenticationを試してみた</a>
のページからほぼコピペ。</p>

<figure class='code'><figcaption><span>AppAuthHandler.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">tweepy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">urllib</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">base64</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AppAuthHandler</span><span class="p">(</span><span class="n">tweepy</span><span class="o">.</span><span class="n">auth</span><span class="o">.</span><span class="n">AuthHandler</span><span class="p">):</span>
</span><span class='line'>    <span class="n">TOKEN_URL</span> <span class="o">=</span> <span class="s">&#39;https://api.twitter.com/oauth2/token&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">consumer_key</span><span class="p">,</span> <span class="n">consumer_secret</span><span class="p">):</span>
</span><span class='line'>        <span class="n">token_credential</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">quote</span><span class="p">(</span><span class="n">consumer_key</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;:&#39;</span> <span class="o">+</span> <span class="n">urllib</span><span class="o">.</span><span class="n">quote</span><span class="p">(</span><span class="n">consumer_secret</span><span class="p">)</span>
</span><span class='line'>        <span class="n">credential</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">token_credential</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;grant_type&#39;</span><span class="p">:</span> <span class="s">&#39;client_credentials&#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlencode</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="n">req</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">TOKEN_URL</span><span class="p">)</span>
</span><span class='line'>        <span class="n">req</span><span class="o">.</span><span class="n">add_header</span><span class="p">(</span><span class="s">&#39;Authorization&#39;</span><span class="p">,</span> <span class="s">&#39;Basic &#39;</span> <span class="o">+</span> <span class="n">credential</span><span class="p">)</span>
</span><span class='line'>        <span class="n">req</span><span class="o">.</span><span class="n">add_header</span><span class="p">(</span><span class="s">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s">&#39;application/x-www-form-urlencoded;charset=UTF-8&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="n">json_response</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_access_token</span> <span class="o">=</span> <span class="n">json_response</span><span class="p">[</span><span class="s">&#39;access_token&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">apply_auth</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">parameters</span><span class="p">):</span>
</span><span class='line'>        <span class="n">headers</span><span class="p">[</span><span class="s">&#39;Authorization&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;Bearer &#39;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">_access_token</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使ってみる</h2>

<p>今まではOAuthHandlerを使っていたのを、上のAppAuthHandlerに置き換えるだけ。
あとは今までどおりAPIを叩ける。
以下は特定のユーザのツイートを取れるだけ取ってくる例。</p>

<figure class='code'><figcaption><span>crawl.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">tweepy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">codecs</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">AppAuthHandler</span>
</span><span class='line'>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">stdin</span> <span class="o">=</span> <span class="n">codecs</span><span class="o">.</span><span class="n">getreader</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)(</span><span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="p">)</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">codecs</span><span class="o">.</span><span class="n">getwriter</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)(</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">CONSUMER_KEY</span> <span class="o">=</span> <span class="s">&#39;hogehoge&#39;</span>
</span><span class='line'><span class="n">CONSUMER_SECRET</span> <span class="o">=</span> <span class="s">&#39;hogehoge&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">user_id</span> <span class="o">=</span> <span class="s">&quot;JO_RI&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">auth</span> <span class="o">=</span> <span class="n">AppAuthHandler</span><span class="o">.</span><span class="n">AppAuthHandler</span><span class="p">(</span><span class="n">CONSUMER_KEY</span><span class="p">,</span> <span class="n">CONSUMER_SECRET</span><span class="p">)</span>
</span><span class='line'>    <span class="n">api</span> <span class="o">=</span> <span class="n">tweepy</span><span class="o">.</span><span class="n">API</span><span class="p">(</span><span class="n">auth</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">arg</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;id&#39;</span><span class="p">:</span> <span class="n">user_id</span><span class="p">,</span> <span class="s">&#39;include_rts&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>    <span class="n">user_statuses</span> <span class="o">=</span> <span class="n">tweepy</span><span class="o">.</span><span class="n">Cursor</span><span class="p">(</span><span class="n">api</span><span class="o">.</span><span class="n">user_timeline</span><span class="p">,</span> <span class="o">**</span><span class="n">arg</span><span class="p">)</span><span class="o">.</span><span class="n">items</span><span class="p">(</span><span class="mi">3200</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">user_status</span> <span class="ow">in</span> <span class="n">user_statuses</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">user_status</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>  <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="https://dev.twitter.com/docs/auth/application-only-auth">Application-only authentication</a></li>
<li><a href="http://blog.k52.org/0162">TwitterAPIがApplication-only authenticationを公開。これを使うと検索API等の一部回数制限が大幅に緩和される。</a></li>
<li><a href="http://www.macminiosx.com/2013/03/twitterapplication-only_authen.html">TwitterのApplication-only authenticationをperlで試す。</a></li>
<li><a href="http://ktkrhr.hatenablog.com/entry/2013/03/27/002447">TwitterのApplication-only authenticationを試してみた</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[社内ISUCONに参加した]]></title>
    <link href="http://shogo82148.github.io/blog/2013/04/13/isucon/"/>
    <updated>2013-04-13T17:17:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/04/13/isucon</id>
    <content type="html"><![CDATA[<p>先日、社内 ISUCON(良い感じにスピードアップコンテスト) に参加してきました。
Livedoorで開催された<a href="http://blog.livedoor.jp/techblog/archives/67693255.html">ISUCON</a>のミニ版で、
Webアプリをひたすら高速化するコンテストです。</p>

<p>高速化の対象はNoPaste。
テキストを共有するWebアプリです。
テキストの投稿・投稿の閲覧・投稿にスターをつける
の3つの動作ができる簡単なアプリです。</p>

<p>新卒 vs 先輩ということで、それぞれ4チームが参戦。
チームは二人一組で僕は @Maco_Tasu くんと一緒でした。
<a href="http://macotasu.hatenablog.com/entry/2013/04/12/233500">@Maco_Tasuくんのブログ</a>も参照。</p>

<h2>Recent Posts 生成クエリの高速化</h2>

<p>高速化前のアプリのベンチマークの結果、スコアは77(≒1分あたりの捌いたリクエスト数)。
何も考えずにデータベースの全行を舐めるクエリを書いていたので、まあ、妥当なスコアですね。</p>

<p>重いのはサイドバーに表示される Recent Posts。
Recent Posts は表示回数が多く、
複数の行、複数のテーブルへのアクセスが発生するため、
きっとここがボトルネックになるだろうと予測してました。
そこで最初にこの部分を解決することにしました。</p>

<ul>
<li>とりあえずインデックスを張る</li>
<li>クエリを修正してアクセスする行を最小化</li>
<li>スターのカウントした結果をテーブルに格納

<ul>
<li>オリジナルのデータベース構成では、スターした回数だけ行が増えてました</li>
<li>必要なのは投稿ごとのスター数なので、独立したテーブルに</li>
<li>この時点で早くも重大なバグを組み込んでしまったことに、この時はまだ気がついていなかった・・・</li>
</ul>
</li>
</ul>


<h2>nginxによる静的ファイル配信</h2>

<p>僕がクエリをいじっている間、@Maco_Tasuくんには
サーバの設定をお願いしました。</p>

<p>ログの様子を眺めてみると、cssとかjsとかの静的ファイルが結構な量ありました。
最初のスクリプトでは静的ファイルの配信もアプリでやってたので、
これをnginxを使って配信するように変更。
その他のリクエストはリバースプロキシを設定してアプリに投げます。</p>

<h2>Starlet と Server::Starter</h2>

<p>リバースプロキシを設定する際にアプリの起動スクリプトを編集する必要があったので、
ついでに起動時の設定を色々変更。
PSGI実行のStarletというのが速いと聞いてこれを採用。
Starlet使い方調べてたら、Server::Starterを使った例が出てきたので一緒にインストール。
ワーカーの数の数は適当に10個にしました。</p>

<p>ここで2回目のベンチマークを実行。
スコア1300程度で、その時点のトップ！</p>

<h2>SSIを使ったサイドバーの埋め込み</h2>

<p>お昼を挟んで、さらなる高速化を目指します。</p>

<p>topコマンドを眺めているとPerlで作ったアプリの負荷が大きい。
ほとんどテンプレートエンジンを呼び出しているだけの単純なコードなので、
ここを高速化するのは面倒くさい。
そこで、前段のnginxでキャッシュする作戦を採用することにしました。</p>

<p>もっともキャッシュが有効なのはサイドバーだろうと予想。
クエリの最適化をしたとは言え、サイドバーには100件程度の投稿が表示されるので、
クエリ実行にもレンダリングにも時間がかかるはず。
さらにすべてのページでサイドバーは共有できるので、大幅な高速化が期待できるはずです。</p>

<p>過去のISUCONの記事にSSI(Server Side Include)を使った例があったのを思い出し、
これを使ってサイドバーのみキャッシュ、nginx内でサイドバーを埋め込むように。</p>

<p>僕が SSIのタグ埋め込み、
@Maco_Tasu くんにnginxのキャッシュ設定を行ってもらうという役割分担で作業を再開しました。</p>

<h2>サイドバーのキャッシュ</h2>

<p>僕の作業はテンプレートを書き換えるだけだったのですぐ終わったんですが、
nginxのキャッシュがうまくいかない。
設定変えてnginxの再起動を何度も繰り返して、ここで2〜3時間時間を浪費してしまいました。</p>

<p>数時間悩んだ挙句、Set-Cookieがレスポンスヘッダーに入っているとキャッシュされないことが判明。
考えてみれば当たり前だ・・・人ごとに違うページが表示されるからサーバーでキャッシュされたら困る。
アプリ側でサイドバーだけクッキー返さないのが正攻法かなとは思ったのですが、
実際どうやるのかが時間内に調べられなかったので、
<code>proxy_ignore_headers set-cookie Cache-Control Expires;</code>をサイドバーのURLに指定し、
ヘッダーを無視するようにしました。</p>

<p>この時のベンチでスコア1700！</p>

<p>キャシュする時間は長いほどいいけど、長くするとサイドバーとスターの数etcが食い違い、テストにFAIL。
そこで、Cache Purgeをnginxにインストールして、Perl側からキャッシュ削除。
削除するキャッシュのキーを指定する方法でしばらく悩んで、結局決めうちというひどい設定
(本当はURLなどを決定するはずだけどなぜかうまくいかなかった)。
なにはともあれ、これでFAILはなくなるはず！</p>

<p>・・・と思ったけど、なんだか時々FAILする。
スコアは確実に上昇して2300前後をとれるようになったけど、本番でテストFAILしたら一環の終わり。
キャッシュの寿命の設定だと思って、終了直前までキャッシュの長さの調整してました。</p>

<h2>結果</h2>

<p>テストFAILした！！ No Score！！</p>

<h2>敗因</h2>

<p>敗因はただ一つ。<strong> データベースの初期化スクリプトが間違ってた！！ </strong></p>

<p>スターの個数を数えてテーブルに挿入するSQL文をベンチ開始前に走らせたんだけど、
「テーブルにすでに値が存在したときのことを考慮してなかった」
「スターが0個のときを考慮していなかった」
という致命的なバグがあり、
データベースが不完全な状態でした。</p>

<p>うわあああああああ！！！！
完全に僕のミスじゃいですかあああああああああ！！！</p>

<p>Cache Purgeインストール後FAILしていたのもおそらく
これが原因です。</p>

<p>FAILしてなければ、事前のベンチでは先輩方と遜色がない程度のスコアが出てただけに、悔しい終わり方になってしまいました。
さらに新卒組は全チームテストFAILという残念な結果。</p>

<p>速いことよりも正しく動作することのほうが大事、
ということを身を以て体験できた一日でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[出、出〜〜〜〜wwww emacsをふたつ以上実行奴〜〜〜〜www(emacsclient編)]]></title>
    <link href="http://shogo82148.github.io/blog/2013/03/05/emacsclient/"/>
    <updated>2013-03-05T12:35:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/03/05/emacsclient</id>
    <content type="html"><![CDATA[<p>emacsを使って編集している最中にシェル操作をしたくなって，
C-z を押してバックグラウンドにしてシェル操作．
その後，emacsに戻ってくるには fg コマンドを打つ必要があるんだけど，
間違えてもう一回 emacs を新しく立ち上げるというミスを何度もやってしまう・・・．</p>

<!-- More -->


<p>これに対し，猫型さんが複数起動しようとすると警告を出してくれるようにしてくれました．
(<a href="http://nekogata.hatenablog.com/entry/2013/02/28/211447">出、出〜〜〜〜wwww emacsをふたつ以上実行奴〜〜〜〜www</a>)</p>

<p>警告してくれるのはありがたいんだけど，
これだとシェル操作中に別のファイルの編集をしたいと思っても，警告が返ってくるだけ．
emacs をフォアグラウンドに出して，ファイルの指定をやり直さなきゃいけない．
僕はファイルの編集をしたいんだ！！
わかったから早く編集させろ！！！</p>

<h2>emacsclient</h2>

<p>単なる警告じゃなくて，
「裏で動いていたemacsを復帰させ，新しいバッファを開く」
ところまで自動的にやってくれると嬉しいですね．</p>

<p>まず，emacs をデーモンモードで起動しておきます．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>emacs --daemon
</span></code></pre></td></tr></table></div></figure>


<p>emacsclient コマンドでファイルを開くと，
emacs デーモンさんが新しいバッファで開いてくれます．
オプションに -nw を指定しておくと現在の端末で閲覧編集することができます．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>emacsclient -nw hoge.txt
</span></code></pre></td></tr></table></div></figure>


<p>終了するには<code>C-x 5 0</code>．
<code>C-x C-c</code>でも終了できるけど，
デーモンにバッファが残ってしまうみたい．</p>

<p>aオプションでemacs デーモンが起動してないときに
編集に使うエディタを指定できる．
空っぽにしておくと，emacs をデーモンモードで起動してくれる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>emacsclient -nw -a <span class="s1">&#39;&#39;</span> hoge.txt
</span></code></pre></td></tr></table></div></figure>


<p>emacs デーモンを終了させるのは以下のコマンド．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>emacsclient -e <span class="s1">&#39;(kill-emacs)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>emacsclient に対して alias を作っておけば，
複数起動かどうか意識せずに使えますね．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">emacs</span><span class="o">=</span><span class="s1">&#39;emacsclient -nw -a &quot;&quot;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/syohex/20101224/1293206906">emacsclientを使おう</a></li>
<li><a href="http://k-ui.jp/blog/2010/07/28/emacsclient_%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9%E3%81%AE%E7%A8%AE%E9%A1%9E%E3%81%A8%E3%80%81%E4%BE%BF%E5%88%A9%E3%81%AA%E4%BD%BF%E3%81%84%E6%96%B9/">emacsclient の使い方の種類と、便利な使い方</a></li>
<li><a href="http://blog.naru.se/2012/11/emacsclient.html">emacsclientを終了する方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LaTeX2EPUBで電子書籍を作ってみる]]></title>
    <link href="http://shogo82148.github.io/blog/2013/03/02/latex2epub/"/>
    <updated>2013-03-02T16:20:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/03/02/latex2epub</id>
    <content type="html"><![CDATA[<p>LaTeXで書いた文章を電子書籍にしたくなったので，
<a href="http://kmuto.jp/d/index.cgi/computer/latex2epub.htm">LaTeX2EPUB</a>を使ってみました．</p>

<!-- More -->


<p><a href="http://kmuto.jp/d/index.cgi/computer/latex2epub.htm">LaTeX2EPUB</a>は<a href="http://dlmf.nist.gov/LaTeXML/">LaTeXML</a>と<a href="https://github.com/kmuto/review/">ReVIEW</a>に依存しているようなので，
それぞれインストールしていきます．
あと，数式の変換とかにLaTeXを使っているので別途用意する必要あり．
いろんなディストリビューションがあるけど，
ここでは TeX Live 2012 を使いました．</p>

<h2>LaTeXML のインストール</h2>

<p><a href="http://dlmf.nist.gov/LaTeXML/">LaTeXML</a>はLaTeXの文章をXML形式に変換するソフト．
そこからさらにXSLTを使ってXHTMLへ変換できる．
<a href="http://dlmf.nist.gov/LaTeXML/get.html">ドキュメント</a>に従って
依存するライブラリをインストール．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>perl -MCPAN -e shell
</span><span class='line'>cpan&gt; install DB_File, Parse::RecDescent, File::Which
</span><span class='line'>cpan&gt; install XML::LibXML, XML::LibXSLT
</span></code></pre></td></tr></table></div></figure>


<p>ドキュメントが少し古いらしく，これだけでは不十分だった．
追加でParse::RecDescentとImage::Magickもインストールしておく．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cpan&gt; install Parse::RecDescent
</span><span class='line'>cpan&gt; quit
</span><span class='line'>yum install ImageMagick-perl
</span></code></pre></td></tr></table></div></figure>


<p>後はソースを取ってきてmakeするだけ．
現時点での最新版0.7.0をインストールした．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://dlmf.nist.gov/LaTeXML/releases/LaTeXML-0.7.0.tar.gz
</span><span class='line'>tar zxvf LaTeXML-0.7.0.tar.gz
</span><span class='line'><span class="nb">cd </span>LaTeXML-0.7.0
</span><span class='line'>perl Makefile.PL
</span><span class='line'>make
</span><span class='line'>make <span class="nb">test</span>
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<h2>ReVIEW のインストール</h2>

<p><a href="https://github.com/kmuto/review/">ReVIEW</a>は簡単なマークアップ言語で書かれたテキストから
PDFやEPUBを作成するためのスクリプトです．
このなかのEPUB作成機能に依存しているようなのでインストールしておきます．
<a href="https://github.com/kmuto/review/">ReVIEW</a>はgemで簡単インストール．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install review
</span></code></pre></td></tr></table></div></figure>


<h2>LaTeX2EPUB のインストール</h2>

<p><a href="http://kmuto.jp/d/index.cgi/computer/latex2epub.htm">LaTeX2EPUB</a>本体をインストール．
本家の日本語化対応が少し不十分だったので
改造版を上げといた．
これをダウンロードしてパスの通ったところに置けばインストール完了．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/shogo82148/latex2epub
</span></code></pre></td></tr></table></div></figure>


<h2>日本語化対応</h2>

<p>自分の環境だと
数式中に日本語を上手く扱えませんでした．
どうやらGhostscriptの設定が不十分だった模様．
<a href="http://www.ice.is.kit.ac.jp/~umehara/misc/comp/20110817a.html">ここ</a>
を参考に設定変更．
自分の環境では/usr/share/ghostscript/8.70/Resource/Init/cidfmap
に次の内容を追加することで変換できました．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/TakaoMincho &lt;&lt; /FileType /TrueType /Path (/usr/share/fonts/ipa-mincho/ipam.ttf) /SubfontID 0 /CSI [(Japan1) 2] &gt;&gt; ;
</span><span class='line'>/TakaoGothic &lt;&lt; /FileType /TrueType /Path (less /usr/share/fonts/ipa-gothic/ipag.ttf) /SubfontID 0 /CSI [(Japan1) 2] &gt;&gt; ;
</span><span class='line'>/Ryumin-Light /TakaoMincho ;
</span><span class='line'>/GothicBBB-Medium /TakaoGothic ;</span></code></pre></td></tr></table></div></figure>


<h2>電子書籍を作ってみる</h2>

<p>yaml形式の設定ファイルを適当に編集して</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>latex2epub.rb sample.tex sample.yaml
</span></code></pre></td></tr></table></div></figure>


<p>と打てば変換してくれる．</p>

<p>デフォルトの設定ではスタイルファイルを読んでくれないので，
自前スタイルファイル中でマクロを定義している場合はそのままでは変換できない．
*.sty.ltxml というファイルを代わりに作っておくと，そっちを代わりに読んでくれる．
中身はPerlスクリプト．
書き方は<a href="http://dlmf.nist.gov/LaTeXML/manual/customization/customization.latexml.xhtml">LaTeXMLのドキュメント</a>を参照．</p>

<p>Perlのソースを頑張って読んで，以下の問題は一応解決した．
画像の変換もできた．</p>

<ul>
<li>数式内に日本語を含めるとエラーになる．</li>
<li>画像はまだ実験していない</li>
</ul>


<p>次の問題はまだ解決してない．
XSLよくわかんない．</p>

<ul>
<li>目次に「〜 in 〜」とどうしても入ってしまう．</li>
<li>対応TeXクラスがまだ少ない．</li>
<li>数式部分を(出来れば画像も)SVG化できるようにしたい．</li>
<li>もうちょっといいCSSが必要．</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWSをはじめてみた]]></title>
    <link href="http://shogo82148.github.io/blog/2013/02/21/starting-aws/"/>
    <updated>2013-02-21T01:01:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/02/21/starting-aws</id>
    <content type="html"><![CDATA[<p><a href="https://aws.amazon.com/jp/">Amazon Web Services(AWS)</a>でEC2でも使ってみようかと，
登録を試みました．</p>

<p>が，しかし，電話認証の段階で何度やってもシステムエラー・・・．</p>

<blockquote><p>An Error Has Occured
システムエラー
電話確認要求を処理できません。後でもう一度お試しください。</p></blockquote>

<!-- More -->


<p>こういう時は，とりあえずエラーメッセージでググってみましょう．
なんだかそれっぽい記事が見つかりました．</p>

<ul>
<li><a href="http://daipresents.com/2012/aws%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E9%96%8B%E8%A8%AD%E3%81%A7%E9%9B%BB%E8%A9%B1%E7%A2%BA%E8%AA%8D%E8%A6%81%E6%B1%82%E3%82%92%E5%87%A6%E7%90%86%E3%81%A7%E3%81%8D%E3%81%BE/">AWSアカウント開設で”電話確認要求を処理できません。後でもう一度お試しください。”と怒られ続けた</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=76330">Amazon Developer Forums: 電話による身元確認でエラー発生</a></li>
</ul>


<p>どうやら，登録時に入力した「支払い方法」と「アドレス情報」が正しく反映されていないことが原因のようです．</p>

<p><a href="https://aws-portal.amazon.com/gp/aws/manageYourAccount">アカウントの管理</a>
画面から，「支払い方法」を選び，クレジットカードや請求先を記入します．
アドレス情報は「登録内容の変更」から変更可能です．</p>

<p>AWSをはじめてみたというエントリだけど，
実はじょりぼっとの「買うべき？」機能を実装するために，
AWSのProduct Advertising APIを前々から使っていたのでした．
このAPI使うだけなら支払い方法などの入力は不要だったので，
必要最低限の情報しか入力していませんでした．
住所とかの入力もしなかったのですが，
自分が確認したときはアドレス情報の国設定が何故かアメリカになってました．
これのせいですかね？</p>

<p>詳しい原因はよくわかりませんが，とりあえず，「支払い方法」と「登録内容の変更」の全項目を正しく入力したら認証が出来ました．
1年は無料でいろいろ遊べるらしいので，何か動かして遊んでみましょう．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[じょりぼっとが起動して一年がたちました]]></title>
    <link href="http://shogo82148.github.io/blog/2013/01/22/jo-ri-bot-1st-anniversary/"/>
    <updated>2013-01-22T13:57:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/01/22/jo-ri-bot-1st-anniversary</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/JO_RI_bot">じょりぼっと</a>が初めてつぶやいてから
今日でちょうど一年となりました．</p>

<!-- More -->


<p><a href="http://togetter.com/li/260576">突然の凍結</a>，74回にも及ぶバルスなどなどを乗り越え，
今日まで生き延びられたことを嬉しく思います．</p>

<p>ちなみに一番最初のツイートはこんなのでした．</p>

<blockquote class="twitter-tweet" lang="ja"><p>自分の教科にしましたというわけで終わりー。どっちも一部の断面図</p>&mdash; 狼とボットさん (@JO_RI_bot) <a href="https://twitter.com/JO_RI_bot/status/160941771273146368">2012年1月22日</a></blockquote>


<script async src="http://shogo82148.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h1>学食メニュー</h1>

<p>じょりぼっとが一周年を迎えるということは，
起動当初から続けてきた学食メニュー表示機能も一周年ということです．
一年分のメニューは<a href="https://docs.google.com/spreadsheet/ccc?key=0AmjmnXFuHdP0dDh0UHE4LU5EYXZtMzBZNUtOZnRnWmc&amp;hl=ja#gid=0">こちら</a>にストックしてあります．
どんなメニューが出されることが多いのか，簡単な統計を取って見ました．</p>

<h2>1食昼食A定</h2>

<ol>
<li>回鍋肉 13</li>
<li>鶏肉と味噌漬け焼き 9</li>
<li>チキン唐揚げ 8</li>
<li>豚肉キムチ炒め 7</li>
<li>ちきんカツ 7</li>
<li>チキン唐揚げ&lt;スパイシーカレー> 7</li>
<li>豚肉朝鮮焼き 7</li>
<li>焼肉とピーマン肉詰めフライ 7</li>
<li>チキンソテーさわやかソース 7</li>
<li>チキンマスタード焼き 7</li>
<li>鶏肉キムチ焼き 7</li>
<li>チキンピザソース焼 7</li>
</ol>


<h2>1食夕食A定</h2>

<ol>
<li>チキンピザソース焼 13</li>
<li>酢豚 11</li>
<li>豚カツ 9</li>
<li>チキンソテーさわやかソース 9</li>
<li>グリルドチキンイタリア風 9</li>
<li>鶏肉と味噌漬け焼き 8</li>
<li>エッグ焼肉 8</li>
<li>Bigメンチ 8</li>
<li>焼肉と春巻き 8</li>
<li>チキンステーキタルタルソース 8</li>
</ol>


<h2>1食昼食B定</h2>

<ol>
<li>筑前煮 16</li>
<li>いりどり 13</li>
<li>八宝菜 12</li>
<li>白身魚フライの卵とじ 11</li>
<li>白身魚のピリピリ漬け 10</li>
<li>鯖の生姜焼き 9</li>
<li>白身魚フライチーズ焼き 9</li>
<li>うずら卵と野菜の五目煮 8</li>
<li>鶏肉の酢豚風 8</li>
<li>シューマイの中華風旨煮 8</li>
<li>チキンブラウンソース煮 8</li>
<li>サーモンシチュー 8</li>
<li>アジフライとツナサラダ 8</li>
<li>白身魚の磯辺揚げ 8</li>
</ol>


<h2>1食夕食B定</h2>

<ol>
<li>すき焼き風旨煮 19</li>
<li>うずら卵と野菜の五目煮 13</li>
<li>スペイン風オムレツとコロッケ 13</li>
<li>ピザ卵とコロッケ 12</li>
<li>鶏肉と野菜の七味炒め 12</li>
<li>鮭の野菜あんかけ 11</li>
<li>鶏肉とヤングコーンの豆板醤炒め 10</li>
<li>アジフライとツナサラダ 9</li>
<li>チキンブラウンソース煮 9</li>
<li>白身魚のピリピリ漬け 9</li>
</ol>


<h2>1食昼食セット</h2>

<ol>
<li>オムライス 16</li>
<li>五目あんかけ焼きそば 13</li>
<li>鮭チャーハン 12</li>
<li>ねぎトロ丼 12</li>
<li>鶏肉ときのこのチャーハン 11</li>
<li>トルコライス 11</li>
<li>三色丼 9</li>
<li>鶏の照り焼き丼 9</li>
<li>ビビンバ丼 9</li>
<li>親子丼 9</li>
<li>麻婆丼 9</li>
</ol>


<h2>1食夕食セット</h2>

<ol>
<li>キーマカレー 13</li>
<li>ビビンバ丼 10</li>
<li>肉たれうどんとぶっ玉丼 10</li>
<li>海の幸うどん 9</li>
<li>すき焼き丼 8</li>
<li>肉うどんとカレーライス 8</li>
<li>ねぎトロ丼 8</li>
<li>イタリア風チキンカツ丼 8</li>
<li>鶏の照り焼き丼 6</li>
<li>とろろそばとミニカツ丼 6</li>
<li>鮭茶漬け 6</li>
</ol>


<h2>1食昼食単品</h2>

<ol>
<li>鶏肉とブロッコリー炒め 16</li>
<li>さつま汁 15</li>
<li>揚ギョーザ 13</li>
<li>のっぺ 13</li>
<li>イカ野菜カツ 13</li>
<li>揚げ豆腐の旨煮 13</li>
<li>かぼちゃのそぼろあんかけ 12</li>
<li>ハムチーズサンドフライ 12</li>
<li>エビ風味グラタンコロッケ 12</li>
<li>鶏肉とタケノコの旨煮 12</li>
<li>ブロッコリーとカリフラワーの炒め 12</li>
<li>茄子の中華風旨煮 12</li>
<li>豚肉と野菜の煮込み 12</li>
<li>卵と玉ねぎのソテー 12</li>
</ol>


<h2>1食夕食単品</h2>

<ol>
<li>鶏肉とチーズ焼き 17</li>
<li>レバニラ炒め 15</li>
<li>豆腐きのこあんかけ 13</li>
<li>ゆで卵 13</li>
<li>ちくわの二色揚げ 12</li>
<li>鶏肉と里芋の煮物 11</li>
<li>蒸シューマイ 11</li>
<li>けんちん汁 11</li>
<li>五目金平 11</li>
<li>五目肉じゃが 10</li>
<li>シューマイのカレー揚げ 10</li>
<li>ブロッコリーとカリフラワーの炒め 10</li>
</ol>


<h2>2食お昼ごはん定食</h2>

<ol>
<li>ピーマン肉詰めフライ 13</li>
<li>ちきんチーズ焼き 13</li>
<li>ハッシュドビーフ 12</li>
<li>鶏肉のピリカラ味噌焼き 10</li>
<li>カレーコロッケ 8</li>
<li>春巻き 7</li>
<li>野菜コロッケ 7</li>
<li>鰹の刺し丼 7</li>
<li>ちきんカツ 7</li>
<li>豚玉丼 7</li>
<li>レッドホットチキン 7</li>
<li>きじ焼き丼 7</li>
<li>ちきん南蛮漬け 7</li>
<li>ハンバーグ 7</li>
<li>海老グラタンコロッケ 7</li>
</ol>


<h2>2食晩御飯定食</h2>

<ol>
<li>545円定食 34</li>
<li>545円丼 16</li>
<li>フライアンドフライ 13</li>
<li>ちきん南蛮 11</li>
<li>新潟タレカツどん 11</li>
<li>中華角煮丼 10</li>
<li>ねぎトロ丼 9</li>
<li>スパイシードライカレー 9</li>
<li>レッドほっとマヨ 9</li>
<li>545丼 8</li>
</ol>


<p>2食に関しては，集計か3月からなのでまだ一年たっていません．
それにしても圧倒的な545円定食の出現頻度．
結局何が食べられるのか全くわからないのですが・・・．</p>

<h1>おわりに</h1>

<p>今年も<a href="https://twitter.com/JO_RI_bot">じょりぼっと</a>をお願いします．
来年度から僕が学食メニューの更新を行えなくなるので，<strong> 後継者も探してます </strong>．
誰か手伝って！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UDPのパケットをSSHを通してトンネルする]]></title>
    <link href="http://shogo82148.github.io/blog/2012/12/28/tunneling-udp-via-ssh/"/>
    <updated>2012-12-28T16:38:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2012/12/28/tunneling-udp-via-ssh</id>
    <content type="html"><![CDATA[<p>SSHには標準でTCPのトンネリング機能は付いているのですが，
UDPはトンネリングしてくれません．
なんとかできないものかと試行錯誤してみました．</p>

<!-- More -->


<h2>TCP をトンネル</h2>

<p>TCPのトンネリングの復習から．
以下のコマンドでクライアントの8080番ポートを，リモートの80番ポートに転送することができます．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh -L 8080:localhost:80 remote
</span></code></pre></td></tr></table></div></figure>


<p>SOCKS proxyとして動作させることも出来ます．
ブラウザのプロキシとして設定すれば，リモートのサーバがすべての通信を中継してくれます．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh -D 8080 remote
</span></code></pre></td></tr></table></div></figure>


<h2>UDP をトンネル</h2>

<p>NetCatを使うと TCP/UDP の通信内容と標準入出力をつなげることが出来るらしいです．
これを使って，クライアント側で UDP サーバを立て，その通信内容をSSH経由でリモートの UDP クライアントに送ってあげます．
最後にリモートからクライアント側へのパケットを名前付きパイプで転送してあげればトンネル完成です．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkfifo tunnel
</span><span class='line'>nc -ul 8080 &lt; tunnel | ssh remote nc -u localhost 8080 &gt; tunnel
</span></code></pre></td></tr></table></div></figure>


<h2>Mosh をトンネル</h2>

<p>なんでこんなことをしようと思ったかというと，<a href="http://mosh.mit.edu/">Mosh</a>をファイヤーウォール越しに使いたかったから．
<a href="http://mosh.mit.edu/">Mosh</a>はUDPで通信しているので，SSHしか通らない環境では使えません．
そこでUDPをSSHでトンネリングしてできないかとやって見ました．
セッションの確立にSSHも使っているので，以下のようにして Mosh用のUDPトンネルと SSH用のTCPトンネルを作ります．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkfifo tunnel
</span><span class='line'>nc -ul 60000 &lt; tunnel | ssh -L 10000:localhost:22 remote nc -u localhost 60000 &gt; tunnel &amp;
</span><span class='line'>mosh -p 60000 --ssh<span class="o">=</span><span class="s2">&quot;ssh -p 10000&quot;</span> localhost
</span></code></pre></td></tr></table></div></figure>


<p>外部からのSSH通信が遅かったので，<a href="http://mosh.mit.edu/">Mosh</a>のローカルエコーでなんとかならないかと挑戦してみました．
実際の効果は未確認．またあとで試してみます．</p>

<h2>追記</h2>

<p>試してみました．
一応通信できることは確認したのですが，非常に不安定で頻繁に通信に失敗します．</p>

<p>NetCatがパケットの境界を出力しないので，パケットがズタズタに切り裂かれ，
パケットのデコードに失敗してしまうようです．</p>

<p>回線が十分速い＆UDPパケットが非常に小さいときにしか上手く動きません．
NetCat のオプションを見てみましたがパケット境界の指定はできないようです．
ここでの方法はお手軽に試せるという利点はありますが，
もっと安定したUDP通信を望むならUDP転送コマンドを真面目に作るか，
いっそのことVPNを構築するのが一番ですね．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript版WaveZutaZuta作ってみた]]></title>
    <link href="http://shogo82148.github.io/blog/2012/12/24/wavezutazutajs/"/>
    <updated>2012-12-24T13:51:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2012/12/24/wavezutazutajs</id>
    <content type="html"><![CDATA[<p>「<a href="http://nekogata.hatenablog.com/entry/2012/12/23/155250">WaveZutaZutaというおもちゃを書いている話</a>」
という記事を見ていたら，誰かがツイッターで
「いっちーがJavaScriptに移植してくれる」と発言．</p>

<p>あ，はい．やってみましょう．</p>

<!-- More -->


<h2>どんな感じのものなの？</h2>

<p>音声ファイルをテキトーに切り貼りできるライブラリです．
<a href="http://shogo82148.github.com/WaveZutaZutaJS/">WaveZutaZutaJS</a>にブラウザで実行出来るサンプルを置いたので
実際試してみるのが一番わかりやすいと思います．
適当な音声ファイルをドラッグ＆ドロップして，playボタンを押すと音が流れるので，いろいろ遊んでみてください．</p>

<p>テキストボックスには楽譜が書かれています．
楽譜の書き方は「<a href="http://nekogata.hatenablog.com/entry/2012/12/23/155250">WaveZutaZutaというおもちゃを書いている話</a>」
と同じです．</p>

<blockquote><p>ちなみに、楽譜ファイルの読み方、書き方ですが、aからzまでの文字それぞれにずたずたにされたwaveファイルの&#8221;破片&#8221;がアサインされていて、-は音をのばす(タイ)を意味し、0は休符を意味します。*を指定すると、a-zのうちどれかをランダムで鳴らします。1文字が64分音符ひとつ分の長さです。空白文字は無視されます。</p></blockquote>

<h2>使い方</h2>

<p><a href="https://github.com/shogo82148/WaveZutaZutaJS">リポジトリ</a>の WaveZutaZutaJS.js がライブラリの本体です．
次のように使います．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ArrayBuffer</span><span class="p">();</span> <span class="c1">// ずたずたにしたい音声データを入れておく</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AudioContext</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">zuta</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WaveZutaZuta</span><span class="p">(</span><span class="nx">context</span><span class="p">);</span>
</span><span class='line'><span class="nx">zuta</span><span class="p">.</span><span class="nx">onSuccess</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">self</span><span class="p">,</span> <span class="nx">source</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 元の音声の先頭5秒から3秒間流す</span>
</span><span class='line'>    <span class="nx">zuta</span><span class="p">.</span><span class="nx">setNote</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">zuta</span><span class="p">.</span><span class="nx">getAudioNode</span><span class="p">([{</span><span class="nx">sound</span><span class="o">:</span> <span class="s1">&#39;a&#39;</span><span class="o">:</span> <span class="nx">length</span><span class="o">:</span> <span class="mi">3</span><span class="p">}]);</span>
</span><span class='line'>    <span class="nx">node</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">destination</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">zuta</span><span class="p">.</span><span class="nx">loadAudio</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>data</code> には入力音声のバイナリデータを入れておきます．
形式はブラウザが対応していれば何でもOKです．
Chromeなら wav, mp3, mp4 など，メジャーな形式はたいてい読めると思います．</p>

<p><code>getAudioNode</code>で返ってくるのは AudioNode なので，WaveZutzZutaJS の出力にさらにエフェクトをかけることができます．
例えば，次のコードで周波数フィルタを通すことができます．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ArrayBuffer</span><span class="p">();</span> <span class="c1">// ずたずたにしたい音声データを入れておく</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AudioContext</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">zuta</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WaveZutaZuta</span><span class="p">(</span><span class="nx">context</span><span class="p">);</span>
</span><span class='line'><span class="nx">zuta</span><span class="p">.</span><span class="nx">onSuccess</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">self</span><span class="p">,</span> <span class="nx">source</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 元の音声の先頭5秒から3秒間流す</span>
</span><span class='line'>    <span class="nx">zuta</span><span class="p">.</span><span class="nx">setNote</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">zuta</span><span class="p">.</span><span class="nx">getAudioNode</span><span class="p">([{</span><span class="nx">sound</span><span class="o">:</span> <span class="s1">&#39;a&#39;</span><span class="o">:</span> <span class="nx">length</span><span class="o">:</span> <span class="mi">3</span><span class="p">}]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 周波数フィルタを用意</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">filter</span> <span class="o">=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">createBiquadFilter</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">filter</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s2">&quot;lowpass&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">filter</span><span class="p">.</span><span class="nx">frequency</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 接続</span>
</span><span class='line'>    <span class="nx">node</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">filter</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">filter</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">destination</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">zuta</span><span class="p">.</span><span class="nx">loadAudio</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>簡単な技術解説</h2>

<h3>decodeAudioData</h3>

<p>WebAudioの<code>decodeAudioData</code>を使うと音声データからPCMデータを得ることができます．
これを使うと音声データを配列として得ることができるので，
WeveZutaZutaJSではこの配列を切り貼りしてずたずたにしています．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ArrayBuffer</span><span class="p">()</span> <span class="c1">// 音声データ</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AudioContext</span><span class="p">();</span>
</span><span class='line'><span class="nx">context</span><span class="p">.</span><span class="nx">decodeAudioData</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//buf には AudioBuffer 型の音声データが入っている</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">float32array</span> <span class="o">=</span> <span class="nx">getChannelData</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// float32array を適当にいじる</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>JavaScriptNode</h3>

<p>JavaScriptNode は音源やフィルタ・アナライザを JavaScript のコードを使って書くことの出来るものです．
例えば，正弦波を生成するコードは次のようになります．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AudioContext</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">createJavaScriptNode</span><span class="p">(</span><span class="mi">2048</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// バッファの大きさ，入力の数，出力の数</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'><span class="nx">node</span><span class="p">.</span><span class="nx">onaudioprocess</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">buf</span><span class="p">.</span><span class="nx">outputBuffer</span><span class="p">.</span><span class="nx">getChannelData</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">x</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">node</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">destination</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TinySegmenterをLaTeXに移植してみた]]></title>
    <link href="http://shogo82148.github.io/blog/2012/12/16/tinysegmenter-for-tex/"/>
    <updated>2012-12-16T13:11:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2012/12/16/tinysegmenter-for-tex</id>
    <content type="html"><![CDATA[<p>この記事は<a href="http://atnd.org/events/34318">TeX &amp; LaTeX Advent Calendar</a>の傘下記事です．
15日はk16.shikanoさんの「<a href="http://note.golden-lucky.net/2012/12/tex.html">TeX がむかついたので実装したけど挫折してる話</a>」,
17日は@egtraさんの「<a href="http://dev.activebasic.com/egtra/2012/12/18/522/">LCDF TypetoolsでOpenTypeフォントを使う(DVIPDFMXで)</a>」です．</p>

<p>neruko3114が参加しているのを見てなんだか楽しそうだったで参加してみました．
とはいってもネタも思いつかなったので，過去に作ったものをTeXに移植してみました．
ターゲットは<a href="http://chasen.org/~taku/software/TinySegmenter/">TinySegmenter</a>．
以前作った<a href="https://github.com/shogo82148/TinySegmenterMaker">TinySegmenterMaker</a>でLaTeXを出力できるようになったよ！</p>

<!-- More -->


<h2>使ってみる</h2>

<p><a href="https://github.com/shogo82148/TinySegmenterMaker">TinySegmenterMaker</a>のレポジトリをダウンロードするなり<code>git clone</code>するなりして
落としてきます．
レポジトリに入っているのはモデルファイルとスクリプトだけです．
これらを使ってTeXのスタイルファイルを作ります．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /path/to/TinySegmenterMaker/
</span><span class='line'><span class="nv">$ </span>./maker tex &lt; RWCP.model
</span></code></pre></td></tr></table></div></figure>


<p>カレントディレクトリにtinysegmenter.styができます．
TeX から見えるところにおいておきましょう．
これを使うソースコードは次のようになります．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='tex'><span class='line'><span class="k">\documentclass</span><span class="nb">{</span>jarticle<span class="nb">}</span>
</span><span class='line'><span class="k">\usepackage</span><span class="nb">{</span>tinysegmenter<span class="nb">}</span>
</span><span class='line'><span class="k">\begin</span><span class="nb">{</span>document<span class="nb">}</span>
</span><span class='line'><span class="k">\TinySegmenter</span><span class="nb">{</span>-<span class="nb">}{</span>私の名前は中野です<span class="nb">}</span>
</span><span class='line'><span class="k">\end</span><span class="nb">{</span>document<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>platexで処理するとこんな感じに表示されるはず．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>私-の-名前-は-中野-です</span></code></pre></td></tr></table></div></figure>


<h2>仕組み</h2>

<p>TinySegmeneterは元の文章の一部を切り取ってハッシュに入れる動作をしている．
でも，LaTeXにはハッシュみたいなデータ構造がないのでコントロールシーケンスで代用．
<code>\@ifundefined</code>で有無を確認し，<code>\csname\endcsname</code>で置き換え．
コントロールシーケンスの一部に日本語を使わないといけないので，日本語LaTeX環境でしか動かない．
ただ，一部句点などの扱いが違う？よくわからない．</p>

<p>あとは，文字種の取得が必要なんだけど，ここでも同じことをしてます．
すべてのアルファベット・ひらがな・カタカナ・数字について，その文字種をベタ書き．
それ以外は全部漢字扱い．
そのため，それ以外の文字を使うとオリジナルとは違う結果になるかも．</p>

<p>最後は足し算．これはカウンタを使えば簡単ですね．</p>

<h2>応用編</h2>

<p>TinySegmenterMakerでは自由にモデルを差し替えることができます．
以前JavaScript版のTinySegmenterを使って，
<a href="http://shogo82148.github.com/blog/2012/12/05/kikoemasuka/">聞こえますか…自動生成…してみた…よ…</a>
ということをしてみました．
LaTeXだってできるはず．</p>

<p><a href="https://github.com/shogo82148/kikoemasuka">聞こえますか…</a>
に心に呼びかけるためのモデルファイルが含まれています．
これをダウンロードして読み込ませます．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./maker tex &lt; model
</span></code></pre></td></tr></table></div></figure>


<p>これを自分のドキュメントに読み込ませてみます．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='tex'><span class='line'><span class="k">\documentclass</span><span class="nb">{</span>jarticle<span class="nb">}</span>
</span><span class='line'><span class="k">\usepackage</span><span class="nb">{</span>tinysegmenter<span class="nb">}</span>
</span><span class='line'><span class="k">\begin</span><span class="nb">{</span>document<span class="nb">}</span>
</span><span class='line'>(…<span class="k">\TinySegmenter</span><span class="nb">{</span>…<span class="nb">}{</span>聞こえますか聞こえますかあなたの心に直接語りかけています<span class="nb">}</span>…)
</span><span class='line'><span class="k">\end</span><span class="nb">{</span>document<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>私の声が聞こえましたか・・・？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(…聞こえますか…聞こえますか…あなたの…心に…直接語りかけています…)</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MeCabをPythonから使う注意点とか]]></title>
    <link href="http://shogo82148.github.io/blog/2012/12/15/mecab-python/"/>
    <updated>2012-12-15T17:38:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2012/12/15/mecab-python</id>
    <content type="html"><![CDATA[<p>日本語の文章をコンピュータで色々いじるときに，
必ずと言っていいほどよく使うのが形態素解析器．
スペースなどの明示的な区切りの無い日本語を単語に分割してくれるツールです．
中でもMeCabが非常に有名で，さまざまなところで使われています．</p>

<p>MeCabはいろいろな言語から呼び出すことができます．
自然言語処理の分野ではPythonが人気のようですね．僕も使っています．
しかし，MeCabをPythonから使う場合，注意する点がいくつかあります．
そこにハマっている後輩を見かけたので，文章として残しておくことにします．
Python2系が対象です(3系はよくわからない)．
注意するのは以下の二点です．</p>

<ul>
<li>MeCabに渡す文字列はencode，戻ってきた文字列はdecodeする</li>
<li>MeCabに渡した文字列は必ず変数に入れておく</li>
</ul>


<!-- More -->


<h2>EncodeとDecode</h2>

<p>Python2系の文字列には，バイト列として扱われる文字列(str)と，Unicodeで表現された文字列(unicode)があります．
日本語を扱う場合，strだといろいろ問題があるので，特に理由がなければunicodeを使うべきです．
しかし，MeCabはstrしか受け付けません．
そこでMeCabに渡す直前・直後でencode・decodeするようにします．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">MeCab</span>
</span><span class='line'><span class="n">tagger</span> <span class="o">=</span> <span class="n">MeCab</span><span class="o">.</span><span class="n">tagger</span><span class="p">(</span><span class="s">&#39;-Owakati&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="s">u&#39;MeCabで遊んでみよう！&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">tagger</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="c"># エラー！</span>
</span><span class='line'>
</span><span class='line'><span class="n">encoded_text</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span> <span class="c"># encodeが必要</span>
</span><span class='line'><span class="n">encoded_result</span> <span class="o">=</span> <span class="n">tagger</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span> <span class="c"># 必ずdecode</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>'utf-8'</code>の部分は辞書の文字コードに合わせて適宜書き換えてください．
デフォルトはeuc-jpですが，utf-8の方が幸せになれると思います．</p>

<h2>必ず変数に入れる</h2>

<p>次にMeCabの作ったノードに直接アクセスして，品詞情報などを取ってくることを考えます．
適当に書いてみるとこんな感じでしょうか．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">MeCab</span>
</span><span class='line'><span class="n">tagger</span> <span class="o">=</span> <span class="n">MeCab</span><span class="o">.</span><span class="n">tagger</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="s">u&#39;MeCabで遊んでみよう！&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">node</span> <span class="o">=</span> <span class="n">tagger</span><span class="o">.</span><span class="n">parseToNode</span><span class="p">(</span><span class="n">text</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">))</span>
</span><span class='line'><span class="k">while</span> <span class="n">node</span><span class="p">:</span>
</span><span class='line'>    <span class="c">#printはstrを渡す必要があるのでdecodeは不要</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">node</span><span class="o">.</span><span class="n">surface</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">node</span><span class="o">.</span><span class="n">feature</span>
</span><span class='line'>    <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">next</span>
</span></code></pre></td></tr></table></div></figure>


<p>MeCabに渡す直前にencodeもしているので上手く動きそうです．
(decodeしてないのはprintに渡すためなので気にしなくておｋ)
しかし，このコードの出力は下のような悲惨なものとなるのです
(ブラウザさんに配慮して一部修正，環境によっても違うと思います)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    BOS/EOS,*,*,*,*,*,*,*,*
</span><span class='line'>MeCab   名詞,一般,*,*,*,*,*
</span><span class='line'>    ??   助詞,格助詞,一般,*,*,*,で,デ,デ
</span><span class='line'>?詞,?   動詞,自立,*,*,五段・バ行,連用タ接続,遊ぶ,アソン,アソン
</span><span class='line'>???     助詞,接続助詞,*,*,*,*,で,デ,デ
</span><span class='line'>??,*,*       動詞,非自立,*,*,一段,未然ウ接続,みる,ミヨ,ミヨ
</span><span class='line'>,*,     助動詞,*,*,*,不変化型,基本形,う,ウ,ウ
</span><span class='line'>*,*     記号,一般,*,*,*,*,！,！,！
</span><span class='line'>    BOS/EOS,*,*,*,*,*,*,*,*</span></code></pre></td></tr></table></div></figure>


<p>なぜこのようなことが起きてしまったのでしょう？
答えは<code>text.encode('utf-8')</code>の戻り値の寿命と，MeCabノードの構造にあります．</p>

<p>みんなさんが普段お使いのPythonは，C言語で実装されたCPythonだと思います．
「CPythonでは、ガベージコレクションの方式として参照カウント方式とマーク・アンド・スイープ方式を併用」しています
(<a href="http://ja.wikipedia.org/wiki/Python#.E3.83.87.E3.83.BC.E3.82.BF.E5.9E.8B">Python - Wikipedia</a>)．
参照カウント方式おかげでCPythonは不要になったオブジェクトを不要になった瞬間に検出し，そのオブジェクトを解放することができます．
つまり実際には5行目を少し細かく見ると，Pythonは以下の処理をします．</p>

<ol>
<li><code>text.encode('utf-8')</code>を呼び出し，&#8221;エンコード済みtext&#8221;を作成</li>
<li><code>tagger.parseToNode</code>を呼び出し，結果を<code>node</code>に代入</li>
<li>不要になった<strong> &#8220;エンコード済みtext&#8221;を破棄 </strong></li>
</ol>


<p>ポイントは3番ですね．6行目を実行する前に，&#8221;エンコード済みtext&#8221;は破棄されてしまいます．</p>

<p>さて，次にMeCabがどのようにノードの情報を扱っているか見てみましょう．
MeCabの言語バインディングのページには，ノードのsurfaceは文字列型であるような定義が書いてありますが，あれは嘘です．
<a href="http://code.google.com/p/mecab/source/browse/trunk/mecab/src/mecab.h">ソース</a>を見ればわかりますが，みんな大好きポインタとして定義されています．
実はこのポインタ，<strong> &#8220;エンコード済みtext&#8221;上の開始点を指し示しています </strong>．</p>

<p>つまり，どういうことかというと，</p>

<ul>
<li>MeCabはsurfaceを作るのに毎回&#8221;エンコード済みtext&#8221;からコピペしてた</li>
<li>しかし，MeCabはPythonにそのことを伝えていなかった</li>
<li>不要と判断したPythonによって&#8221;エンコード済みtext&#8221;はすでに破棄されており，そこには何もなかった</li>
</ul>


<p>これを解決するにはPythonに&#8221;エンコード済みtext&#8221;が使用中であることを伝え，破棄されないようにする必要があります．
一番簡単な方法は変数に保存しておくことです．変数のスコープにいる間は&#8221;エンコード済みtext&#8221;が破棄される心配はありません．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">MeCab</span>
</span><span class='line'><span class="n">tagger</span> <span class="o">=</span> <span class="n">MeCab</span><span class="o">.</span><span class="n">tagger</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="s">u&#39;MeCabで遊んでみよう！&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">encoded_text</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">node</span> <span class="o">=</span> <span class="n">tagger</span><span class="o">.</span><span class="n">parseToNode</span><span class="p">(</span><span class="n">encoded_text</span><span class="p">)</span> <span class="c"># 変数に入れる！</span>
</span><span class='line'><span class="k">while</span> <span class="n">node</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">node</span><span class="o">.</span><span class="n">surface</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">node</span><span class="o">.</span><span class="n">feature</span>
</span><span class='line'>    <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">next</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで上手く行きます．</p>

<p>encode_textとnodeの寿命が一致している必要があります．
nodeの結果を何度も利用する場合は一度nodeの内容をすべてPythonのリストか何かに格納しましょう．
一度変換してしまえば，ガーベージコレクションは正しく動きます．</p>

<h2>まとめ</h2>

<ul>
<li>MeCabに渡す文字列はencode，戻ってきた文字列はdecodeする</li>
<li>MeCabに渡した文字列は必ず変数に入れておく</li>
</ul>


<p>面倒なのでラッパーを書くかといいかもしれませんね．
もしくは自前で実装とか．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[聞こえますか…自動生成…してみた…よ…]]></title>
    <link href="http://shogo82148.github.io/blog/2012/12/05/kikoemasuka/"/>
    <updated>2012-12-05T23:07:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2012/12/05/kikoemasuka</id>
    <content type="html"><![CDATA[<p>聞こえますか…あなたの心に直接…で始まるこのテンプレート．
誰かが「文章入力したら…を自動で入れてくれるのないかな」って呟いてたのでつくってみた．</p>

<!-- More -->


<h2>サクッと作成</h2>

<p><a href="http://chasen.org/~taku/software/TinySegmenter/">TinySegmenter</a>で単語分割，
ランダムに…を単語の間に挿入して出力してみた．</p>

<ul>
<li><a href="http://shogo82148.github.com/kikoemasuka/">聞こえますか…</a></li>
</ul>


<p>この程度なら数十分あれば作れますね．</p>

<h2>挿入位置を学習してみる</h2>

<p>さて，実際やってみるとちょっと挿入位置が不自然な気がします．
世の中に出回っているツイートでは単語間ではなく文節の間に挿入しているのが多いように見えます．</p>

<p>しかし，TinySegmenterは品詞情報をつけてはくれないので文節の判定は少し面倒ですね．</p>

<p>・・・待てよ・・・このテンプレートを使ったツイートなんて大量に手に入る・・・これから学習すればいいんじゃね？</p>

<p>はい，やってみましょう．</p>

<h3>ツイートを集める</h3>

<p>Twitter APIを使ってテンプレートを使っているようなツイートを拾ってきます．
<strong> 「聞こえますか OR きこえますか -RT」</strong> で検索してみました．</p>

<p>普段Twitter APIを叩くときは<a href="https://github.com/tweepy/tweepy">Tweepy</a>を使っているのですが，これで検索するとあまり古いツイートは取れません．
API 1.1 を使うと古いツイートも取ってこれるらしいので，強引にTweepyを書き換えて1.1対応．
<strong> 72,529ツイートの取得に成功しました． </strong>
プログラムについてはTweepyの書き換えでゴチャゴチャしているのでまた今度．</p>

<h3>TinySegmenterMakerに放り込む</h3>

<p>カッコで囲まれている部分を抽出，点々を空白に置換，パクリツイッタラー消去などの処理をした後，
<a href="https://github.com/shogo82148/TinySegmenterMaker">TinySegmentermaker</a>に放り込みます．
実際に学習に使ったツイートは49,573ツイートです．
10000回の繰り返しで，学習結果は以下のようになりました．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Result:
</span><span class='line'>Accuracy: 94.794% (3466578/3656961)
</span><span class='line'>Precision: 90.9504% (526277/578642)
</span><span class='line'>Recall: 79.2234% (526277/664295)
</span><span class='line'>System/Answer p/p p/n n/p n/n: 526277 52365 138018 2940301</span></code></pre></td></tr></table></div></figure>


<p>約95%の精度という非常に高い性能を示してくれましたが，
区切るところ(p)よりも区切らないところ(n)のほうが多いためですね．
Recallが8割しかありませんが，人によるばらつきが大きそうなので，まあこんなもんでしょう．</p>

<p>学習が終わったら最後にオリジナルのTinySegmenterを学習後のもので置き換えるだけ．
チェックボックスで単語分割とツイートの学習結果，どちらを使うか選択できます．
なんだかそれっぽくなりましたかね・・・？</p>

<h2>元ネタについて</h2>

<p>ところでこのテンプレートの元ネタについて調査している方がいらっしゃるようです．</p>

<ul>
<li><a href="http://notes.vanu.jp/post/36656640146/kikoemasuka">「聞こえますか…心に直接…」のオリジナル検証</a></li>
</ul>


<p>ゲームが元ネタだ，っていう人を時々見かけたけど，
検証してみると微妙に内容が違うらしい．
もちろん影響は受けているんだろうけどね．
マンガとかゲームで始めて心に直接語りかけたのって何なんだろう？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OAuthの認証にWebViewを使うのはやめよう]]></title>
    <link href="http://shogo82148.github.io/blog/2012/11/24/no-more-webview/"/>
    <updated>2012-11-24T23:06:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2012/11/24/no-more-webview</id>
    <content type="html"><![CDATA[<p>AndroidからTwitterへアクセスするためのライブラリとして，<a href="http://twitter4j.org/ja/index.html">Twitter4J</a>が有名です．
これを使ってみようと，「Android Twitter4J」と検索すると
認証にWebViewを使った例がたくさん出てきます．</p>

<p>・・・いや，ちょっとまて．
それはちょっとまずいだろう．</p>

<p>そういうわけでもうちょっと賢い方法を探してみました．</p>

<!-- More -->


<h2>何がまずいのさ</h2>

<p>「Android Twitter4J」と検索すると，上位にこんなページが出てきます．</p>

<ul>
<li><a href="http://andante.in/i/android%E3%82%A2%E3%83%97%E3%83%AAtips/twitter4j%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6oauth%E8%AA%8D%E8%A8%BC%E3%82%92%E3%82%A2%E3%83%97%E3%83%AA%E5%86%85%E3%81%A7%E8%A1%8C%E3%81%86%E6%96%B9%E6%B3%95/">Twitter4jを使ってOAuth認証をアプリ内で行う方法</a></li>
<li><a href="http://blog.kyosuke25.com/2011/12/twitter4j-22xoauth.html">Twitter4j-2.2.xを使ったOAuth認証のコーディング例</a></li>
<li><a href="http://init0.net/wp/archives/171">twitter4jでツイートする</a></li>
<li><a href="http://wada811.blog.fc2.com/blog-entry-103.html">Android+Twitter4JでOAuthするためのソースコード</a></li>
</ul>


<p>上のサイトでは次の様は方法をとっています．</p>

<ul>
<li>アプリ内にWebViewを貼り付け</li>
<li>WebViewでTwitterの認証画面を表示</li>
<li>onPageStarted や onPageFinished をオーバーライドして callback URL へのアクセスを検出</li>
<li>URL に入っている認証コードで認証</li>
</ul>


<p>アプリ内でWebViewを使うとURLが表示されません．
つまり <strong> 本当にツイッターにアクセスしているかわからない </strong> のです．
もし，表示されるのが偽の認証画面だったら，アプリから簡単にパスワードがわかってしまいます．</p>

<p>じゃあ，URL を表示させればいいかというとそういうわけでもありません．
画面上のURL表示なんて簡単に偽装できてしまいます．
どんな工夫をしても <strong> アプリがパスワードの要求をしていることには変わりありません </strong> ．
アプリはパスワードを簡単に取得できます．</p>

<p>アプリのユーザはTwitterに限らずSNSへのログイン時にブラウザを開かないアプリは信用しないようにしましょう．
どこかでパスワードの抜かれている可能性があります．
(ただし，公式アプリは除く．公式アプリが信用できないならそもそもサービスを利用できないもんね．)</p>

<h2>じゃあどうするのさ</h2>

<p>じゃあ，開発者はどうするのかって話ですが，もう少し詳しく検索してみましょう．
他の方法を使っているページもでてきます．</p>

<ul>
<li>PINコードを利用

<ul>
<li><a href="http://techbooster.org/android/mashup/14064/">TwitterでPIN番号認証を行う</a></li>
</ul>
</li>
<li>Intent Fileterを利用しコールバック

<ul>
<li><a href="http://d.hatena.ne.jp/yujimny/20110204/1296805905">twitter4jを使用したAndroid Twitterアプリケーション作成</a></li>
<li><a href="http://d.hatena.ne.jp/itog/20120214/1329193954">Twitter4Jを使ってAndroidアプリでStreamingAPIのUserTimelineを取得する</a></li>
<li>TwitterでOAuth認証を行う

<ol>
<li><a href="http://techbooster.org/android/mashup/4525/">Twitterへのアプリケーション登録</a></li>
<li><a href="http://techbooster.org/android/5040/">Twitterの認証ページをブラウザで開く</a></li>
<li><a href="http://techbooster.org/android/mashup/5301/">Access Tokenを取得する</a></li>
</ol>
</li>
</ul>
</li>
</ul>


<h3>PIN コードを利用</h3>

<p>一つ目の方法はPC版クライアントでよく使われる方法．
認証後にPINコードと呼ばれる数字が表示されるので，それをアプリに入力します．
twiccaなんかでも使われてますね．
Twitter へのアプリケーション登録のときにコールバックURLを入力しないとこの認証方式になります．</p>

<p>認証画面に，ブラウザを開くボタン，PINコードの入力ボックス，ログインボタンを用意しておきます．</p>

<figure class='code'><figcaption><span>activity_oauth.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/button_start_login&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Twitterへアクセス&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>   <span class="nt">&lt;EditText</span>
</span><span class='line'>      <span class="na">android:id=</span><span class="s">&quot;@+id/edit_pin_code&quot;</span>
</span><span class='line'>      <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>      <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>      <span class="na">android:ems=</span><span class="s">&quot;10&quot;</span>
</span><span class='line'>      <span class="na">android:inputType=</span><span class="s">&quot;number&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>   <span class="nt">&lt;Button</span>
</span><span class='line'>      <span class="na">android:id=</span><span class="s">&quot;@+id/button_login&quot;</span>
</span><span class='line'>      <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>      <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>      <span class="na">android:layout_below=</span><span class="s">&quot;@+id/edit_pin_code&quot;</span>
</span><span class='line'>      <span class="na">android:text=</span><span class="s">&quot;ログイン&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとはボタンが押されたときにブラウザを呼ぶだけです．
認証したらPINコードを入力してもらいます．</p>

<figure class='code'><figcaption><span>OAuthActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">net</span><span class="o">.</span><span class="na">sorablue</span><span class="o">.</span><span class="na">shogo82148</span><span class="o">.</span><span class="na">yuire</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">twitter4j.AsyncTwitter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">twitter4j.AsyncTwitterFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">twitter4j.TwitterAdapter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">twitter4j.TwitterException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">twitter4j.TwitterListener</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">twitter4j.TwitterMethod</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">twitter4j.auth.AccessToken</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">twitter4j.auth.RequestToken</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.net.Uri</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.Intent</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.View.OnClickListener</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.EditText</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OAuthActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="kd">implements</span> <span class="n">OnClickListener</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">EXTRA_CONSUMER_KEY</span> <span class="o">=</span> <span class="s">&quot;consumer_key&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">EXTRA_CONSUMER_SECRET</span> <span class="o">=</span> <span class="s">&quot;consumer_secret&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">EXTRA_ACCESS_TOKEN</span> <span class="o">=</span> <span class="s">&quot;access_token&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">EXTRA_ACCESS_TOKEN_SECRET</span> <span class="o">=</span> <span class="s">&quot;access_token_secret&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">RequestToken</span> <span class="n">mRequestToken</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">AsyncTwitterFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AsyncTwitterFactory</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">AsyncTwitter</span> <span class="n">twitter</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 非同期版 Twitter4J のリスナ</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">TwitterListener</span> <span class="n">listener</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TwitterAdapter</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">gotOAuthRequestToken</span><span class="o">(</span><span class="n">RequestToken</span> <span class="n">token</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">mRequestToken</span> <span class="o">=</span> <span class="n">token</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">gotOAuthAccessToken</span><span class="o">(</span><span class="n">AccessToken</span> <span class="n">token</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// Access Token 取得成功</span>
</span><span class='line'>                <span class="c1">// 呼び出し元に Access Token を返す</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
</span><span class='line'>                <span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">EXTRA_ACCESS_TOKEN</span><span class="o">,</span> <span class="n">token</span><span class="o">.</span><span class="na">getToken</span><span class="o">());</span>
</span><span class='line'>                <span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">EXTRA_ACCESS_TOKEN_SECRET</span><span class="o">,</span> <span class="n">token</span><span class="o">.</span><span class="na">getTokenSecret</span><span class="o">());</span>
</span><span class='line'>                <span class="n">setResult</span><span class="o">(</span><span class="n">Activity</span><span class="o">.</span><span class="na">RESULT_OK</span><span class="o">,</span> <span class="n">intent</span><span class="o">);</span>
</span><span class='line'>                <span class="n">finish</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_oauth</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Request Token をリクエスト</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="n">getIntent</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">String</span> <span class="n">consumer_key</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getStringExtra</span><span class="o">(</span><span class="n">EXTRA_CONSUMER_KEY</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">String</span> <span class="n">consumer_secret</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getStringExtra</span><span class="o">(</span><span class="n">EXTRA_CONSUMER_SECRET</span><span class="o">);</span>
</span><span class='line'>        <span class="n">twitter</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="n">listener</span><span class="o">);</span>
</span><span class='line'>        <span class="n">twitter</span><span class="o">.</span><span class="na">setOAuthConsumer</span><span class="o">(</span><span class="n">consumer_key</span><span class="o">,</span> <span class="n">consumer_secret</span><span class="o">);</span>
</span><span class='line'>        <span class="n">twitter</span><span class="o">.</span><span class="na">getOAuthRequestTokenAsync</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// EventListener をセット</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">View</span> <span class="n">start_login</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button_start_login</span><span class="o">);</span>
</span><span class='line'>        <span class="n">start_login</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">View</span> <span class="n">login</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button_login</span><span class="o">);</span>
</span><span class='line'>        <span class="n">login</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="o">(</span><span class="n">v</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button_start_login</span><span class="o">:</span>
</span><span class='line'>            <span class="o">{</span>
</span><span class='line'>                <span class="c1">// 認証画面をブラウザで開く</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_VIEW</span><span class="o">,</span>
</span><span class='line'>                                                 <span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">mRequestToken</span><span class="o">.</span><span class="na">getAuthorizationURL</span><span class="o">()));</span>
</span><span class='line'>                <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button_login</span><span class="o">:</span>
</span><span class='line'>            <span class="o">{</span>
</span><span class='line'>                <span class="c1">// PINコードを取得</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">String</span> <span class="n">pin</span> <span class="o">=</span> <span class="n">editPin</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Access Token をリクエスト</span>
</span><span class='line'>                <span class="n">twitter</span><span class="o">.</span><span class="na">getOAuthAccessTokenAsync</span><span class="o">(</span><span class="n">mRequestToken</span><span class="o">,</span> <span class="n">pin</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Token の取得にはインターネットアクセスが必要なので，
Twitter4J に含まれている非同期版のライブラリを使っています．</p>

<p>Consumer Key と Consumer Secret はアクティビティの呼び出し時にインテントに設定します．</p>

<figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="kt">int</span> <span class="n">REQUEST_ACCESS_TOKEN</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="kd">final</span> <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">OAuthActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">intent</span><span class="o">.</span><span class="na">setExtraString</span><span class="o">(</span><span class="n">OAuthActivity</span><span class="o">.</span><span class="na">EXTRA_CONSUMER_KEY</span><span class="o">,</span> <span class="s">&quot;Your Cosumer Key&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">intent</span><span class="o">.</span><span class="na">setExtraString</span><span class="o">(</span><span class="n">OAuthActivity</span><span class="o">.</span><span class="na">EXTRA_CONSUMER_SECRET</span><span class="o">,</span> <span class="s">&quot;Your Consumer Secret&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">startActivityForResult</span><span class="o">(</span><span class="n">intent</span><span class="o">,</span> <span class="n">REQUEST_ACCESS_TOKEN</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>認証が完了すると <code>onAcivityResult</code> が呼び出されるので，
Access Token を保存するなり，つぶやくのに使うだけです．</p>

<figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onActivityResult</span><span class="o">(</span><span class="kt">int</span> <span class="n">requestCode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">resultCode</span><span class="o">,</span> <span class="n">Intent</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">requestCode</span> <span class="o">==</span> <span class="n">REQUEST_ACCESS_TOKEN</span> <span class="o">&amp;&amp;</span> <span class="n">resultCode</span> <span class="o">==</span> <span class="n">Activity</span><span class="o">.</span><span class="na">RESULT_OK</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">String</span> <span class="n">token</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getStringExtra</span><span class="o">(</span><span class="n">OAuthActivity</span><span class="o">.</span><span class="na">EXTRA_ACCESS_TOKEN</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">String</span> <span class="n">token_secret</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getStringExtra</span><span class="o">(</span><span class="n">OAuthActivity</span><span class="o">.</span><span class="na">EXTRA_ACCESS_TOKEN_SECRET</span><span class="o">);</span>
</span><span class='line'>        <span class="n">twitter</span><span class="o">.</span><span class="na">setOAuthAccessToken</span><span class="o">(</span><span class="k">new</span> <span class="n">AccessToken</span><span class="o">(</span><span class="n">token</span><span class="o">,</span> <span class="n">token_secret</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Intent Filterを利用</h3>

<p>二つ目の方法は Intent Fileter を使って
callback URL へアクセスしたときに，ブラウザにインテントを発行してもらう方法です．
ユーザがPINコードを覚える必要がないので楽ちんです．</p>

<p><strong> (2013-03-09追記) </strong>
この記事を公開したらギルティ言われてしまいました．
(<a href="https://gist.github.com/mala/5062931">TwitterのOAuthの問題まとめ</a>・<a href="https://gist.github.com/mala/5107120">TwitterのOAuthの問題の補足とか</a>)
「Consumer Key が漏れる可能性を否定できないクライアントアプリでは，Callback URL をつかべきではない」とのご指摘です．
ごもっとなご意見です．
この方法は<strong> 非推奨 </strong>です．
PINコードを使った認証を使いましょう．</p>

<p>その分開発は面倒ですが．
ポイントは以下の点です．</p>

<ul>
<li>Twitter へのアプリケーション登録時に Callback URL にテキトーなURLを入れておく</li>
<li>独自スキーマを定義して，受け取れるようにしておく</li>
<li><code>getOAuthRequestToken</code> 呼び出し時に，Callback URL を明示的に渡す</li>
<li>アクティビティの多重起動を防止しておく</li>
</ul>


<p>Intent Filter に http:// で始まるURLでも設定してしまうと，
アプリケーションの選択画面が開いてしまったり，
ブラウザによってはリダイレクト時にインテントを飛ばしてくれなかったりします．
そのため， myapplication:// のような独自スキーマを使う必要があるのですが，
Twitterへアプリケーション登録時に設定する Callback URL は http:// で始まっていないと受け付けてくれません．
かと言って空にしておくとうまく動かないので callback URL にはテキトーな URL を入れておいて，
<code>getOAuthRequestToken</code> 呼び出し時に Callback URL を指定します(なぜかこっちは独自スキーマが使える)．</p>

<p>具体的なプログラムは以下のような感じ．</p>

<figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">net</span><span class="o">.</span><span class="na">sorablue</span><span class="o">.</span><span class="na">shogo82148</span><span class="o">.</span><span class="na">yuire</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">twitter4j.AsyncTwitter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">twitter4j.AsyncTwitterFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">twitter4j.TwitterAdapter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">twitter4j.TwitterException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">twitter4j.TwitterListener</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">twitter4j.TwitterMethod</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">twitter4j.auth.AccessToken</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">twitter4j.auth.RequestToken</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.net.Uri</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Handler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.Intent</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">CALLBACK</span> <span class="o">=</span> <span class="s">&quot;myappsheme://callback/&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">CONSUMER_KEY</span> <span class="o">=</span> <span class="s">&quot;Your consumer_key&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">CONSUMER_SECRET</span> <span class="o">=</span> <span class="s">&quot;Your consumer secret&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">RequestToken</span> <span class="n">mRequestToken</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">AsyncTwitterFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AsyncTwitterFactory</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">AsyncTwitter</span> <span class="n">twitter</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">TwitterListener</span> <span class="n">listener</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TwitterAdapter</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">gotOAuthRequestToken</span><span class="o">(</span><span class="n">RequestToken</span> <span class="n">token</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// ブラウザを開く</span>
</span><span class='line'>                <span class="n">mRequestToken</span> <span class="o">=</span> <span class="n">token</span><span class="o">;</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_VIEW</span><span class="o">,</span>
</span><span class='line'>                                                 <span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">mRequestToken</span><span class="o">.</span><span class="na">getAuthorizationURL</span><span class="o">()));</span>
</span><span class='line'>                <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">gotOAuthAccessToken</span><span class="o">(</span><span class="n">AccessToken</span> <span class="n">token</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// 永続化とかする</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_oauth</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">twitter</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="n">listener</span><span class="o">);</span>
</span><span class='line'>        <span class="n">twitter</span><span class="o">.</span><span class="na">setOAuthConsumer</span><span class="o">(</span><span class="n">CONSUMER_KEY</span><span class="o">,</span> <span class="n">CONSUMER_SECRET</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 認証開始</span>
</span><span class='line'>        <span class="c1">// Request Token を取得する</span>
</span><span class='line'>        <span class="n">twitter</span><span class="o">.</span><span class="na">getOAuthRequestTokenAsync</span><span class="o">(</span><span class="n">CALLBACK</span><span class="o">);</span> <span class="c1">// ここで CALLBACK URL を渡す！</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onNewIntent</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// callback してきた</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Uri</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">uri</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">String</span> <span class="n">verifier</span> <span class="o">=</span> <span class="n">uri</span><span class="o">.</span><span class="na">getQueryParameter</span><span class="o">(</span><span class="s">&quot;oauth_verifier&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">twitter</span><span class="o">.</span><span class="na">getOAuthAccessTokenAsync</span><span class="o">(</span><span class="n">mRequestToken</span><span class="o">,</span> <span class="n">verifier</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>多重起動防止と独自スキーマの定義はマニフェストに記述します．</p>

<figure class='code'><figcaption><span>Manifest.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;activity</span>
</span><span class='line'>    <span class="na">android:name=</span><span class="s">&quot;.MainActivity&quot;</span>
</span><span class='line'>    <span class="na">android:label=</span><span class="s">&quot;@string/title_activity_main&quot;</span>
</span><span class='line'>    <span class="na">android:launchMode=</span><span class="s">&quot;singleTask&quot;</span> <span class="nt">&gt;</span> <span class="c">&lt;!-- 多重起動防止 --&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>        <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.action.MAIN&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.LAUNCHER&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- 独自スキーマの定義 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>        <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.action.VIEW&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.DEFAULT&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.BROWSABLE&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;data</span> <span class="na">android:scheme=</span><span class="s">&quot;myappsheme&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'><span class="nt">&lt;/activity&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>launchMode</code> に <code>singleTask</code> を指定すると，
多重起動のときに新しいアクティビティを起動する代わりに，すでに起動していたアクティビティの <code>onNewIntent</code> が実行されます．</p>

<p>PINコードを同じインターフェース(<code>startActivityForResult</code> で認証用アクティビティを呼び出すと，戻り値に Access Token が入っている)にしたかったけど，
認証用アクティビティが <code>singleTask</code> だと，ブラウザを開いた時に呼び出し元の<code>onActivityResult</code>が呼び出されてしまう．
誰かいい案ありません？</p>

<h2>まとめ</h2>

<p>WebViewはアプリからブラウザの機能を扱うのに非常に便利ですが，
あくまでもアプリの管理下にあるもので，ブラウザとは少し性質が違うものということに注意．
<a href="http://ierae.co.jp/uploads/webview.pdf">WebViewの脆弱性</a>に関する資料を見つけてビクビクしています．
認証画面にかぎらず WebView を使うときはセキュリティに注意しましょう．</p>

<p>今回調べたことを使って，
じょりぼっとにお湯入れたとつぶやくだけのアプリ<a href="https://github.com/shogo82148/yuire">「お湯入れた」</a>を
作りました．
3分間計りたいときにどうぞ．</p>

<p><a href="https://twitter.com/JO_RI_bot" class="twitter-follow-button" data-show-count="false" data-lang="ja">@JO_RI_botさんをフォロー</a></p>

<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>


<h2>おへんじ</h2>

<p>たくさんシェアしてもらったのでお返事書いておきます．</p>

<blockquote class="twitter-tweet" lang="ja"><p>たしかにそうなんだけど、PIN形式は実装が手間だし、PINコピペするのも手間だし、IntentFilter形式は空のブラウザー窓が残るのがものすごく気になるんだよなぁ… / “OAuthの認証にWebViewを使うのはやめよう - S…” <a href="http://t.co/NS0kyGg2" title="http://htn.to/hZZLhx">htn.to/hZZLhx</a></p>&mdash; たくじさん (@takuji31) <a href="https://twitter.com/takuji31/status/272987171202424833" data-datetime="2012-11-26T08:56:28+00:00">11月 26, 2012</a></blockquote>


<script src="http://shogo82148.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>WebViewでURLフックを入れるよりは，PINコードのほうがコードもわかりやすく簡単かと．
ただPINコードのコピペが面倒なのはそのとおりなので，Android アプリの場合採用は難しいかもしれません．</p>

<p>Intent Filterはマニフェストに手を入れる必要がある分面倒．ブラウザにタブが残るのも厄介です．
ここは利便性とセキュリティとのトレードオフと割り切るしか無いでしょう．
Web上での本人確認の方法がパスワードくらいしかない以上，パスワード流出の危険性はかなり重大な欠陥だと言えます．
手間なのは最初の一回だけですし，Intent Filter を使うのが賢い方法だと思います．</p>

<blockquote class="twitter-tweet" lang="ja"><p>追記。あと標準ブラウザも絶対ダメ。。→そもそもWebViewを使っちゃダメなのよ。。Android版のChromeだけ使いましょう。。 / “OAuthの認証にWebViewを使うのはやめよう - Shogo&#8217;s Blog” <a href="http://t.co/jjo1o4Gb" title="http://htn.to/ybxt7Y">htn.to/ybxt7Y</a></p>&mdash; Kietaさん (@typex20) <a href="https://twitter.com/typex20/status/273001101798813696" data-datetime="2012-11-26T09:51:49+00:00">11月 26, 2012</a></blockquote>


<script src="http://shogo82148.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>はい．おっしゃるとおりです．
わざわざ反論してまで WebView を使う理由が思い浮かびません．
代替手法を考えるべきだと思います．</p>

<blockquote class="twitter-tweet" lang="ja"><p>安全に実装できるんならこしたことはないけど、悪意のある実装を前提にするのならWebViewでも他のコンポーネントでもかわらないかな。どっちかというと外部サイトビューワーの役割を持つWebViewでフィッシング開くじょとの方がリスク高そう<a href="http://t.co/QB2HoJSc" title="http://shogo82148.github.com/blog/2012/11/24/no-more-webview/">shogo82148.github.com/blog/2012/11/2…</a></p>&mdash; laiso(レイソー)さん (@laiso) <a href="https://twitter.com/laiso/status/273027828126187520" data-datetime="2012-11-26T11:38:01+00:00">11月 26, 2012</a></blockquote>


<script src="http://shogo82148.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" data-in-reply-to="273027828126187520" lang="ja"><p>@<a href="https://twitter.com/laiso">laiso</a> 普段使ってるブラウザでログイン済みの場合なら、少なくともパスワード取られないことが保証できるので、WebViewだろうとブラウザっぽいものだろうとパスワード聞かれたタイミングで警戒すべき、という方が分かりやすいんじゃないかと思う。</p>&mdash; malaさん (@bulkneets) <a href="https://twitter.com/bulkneets/status/273029308254154753" data-datetime="2012-11-26T11:43:54+00:00">11月 26, 2012</a></blockquote>


<script src="http://shogo82148.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>このポストで取り上げているのは「認証画面を偽装してパスワードを盗む」ことが可能という，まさしくフィッシングの話題です．
開発者は，自前で「<strong> ブラウザっぽいもの </strong> 」を実装するのではなく，「 <strong> 本物のブラウザ </strong> 」を使いましょう，という紹介でした．</p>

<p>問題なのは「パスワードを聞かれる or 聞かれない」ではなく，「どのアプリがパスワードを聞いているか」です．
ログインしていなければ当然Webブラウザでもパスワードは聞かれます．
認証を求めているアプリとは別の，<strong> 信用のできるアプリ </strong> がパスワードを聞いてくるということが重要なのです．
Webブラウザを信用出来ないというのであれば，そもそもWebサービスを使うべきではありません．</p>

<blockquote class="twitter-tweet" lang="ja"><p>OAuthの認証にWebViewを使うのはやめよう - Shogo&#8217;s Blog<a href="http://t.co/EQElowcq" title="http://bit.ly/S75tRa">bit.ly/S75tRa</a> WebView使って怪し気な事してたらどうせパケットキャプチャでばれない？ まぁ、PINの方が確実に安全だと思うのでそこは賛成だけど</p>&mdash; nakamura001さん (@nakamura001) <a href="https://twitter.com/nakamura001/status/273012182357266432" data-datetime="2012-11-26T10:35:51+00:00">11月 26, 2012</a></blockquote>


<script src="http://shogo82148.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>パケットキャプチャだけでは見抜けないと思います．
認証画面のDOM要素を直接見れば，通信にまったく介入しなくてもパスワードなんて簡単に抜けます．
実際には WebView からDOM要素を見ることはできないようですが，
DOM 操作が可能な WebView を自前実装することだって技術的には可能です．
そのため，パスワードを盗みとっているかどうかを外からみた動作だけで判断することは非常に難しく，
内部構造を解析する必要があると思います．</p>

<p>パケットキャプチャやらリバースエンジニアリングを駆使すれば理論的はすべての不正は防げるとは思いますが，
それをすべてのアプリでやるのは非常に面倒ですし，一般ユーザが実践するのは困難です．
こういうことをやらなくてもある程度安全にサービスを使えるようにするのが OAuth の役割．
積極的に利用していくべきでしょう．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TinySegmenterの学習ツールを作ってみた]]></title>
    <link href="http://shogo82148.github.io/blog/2012/11/23/tinysegmentermaker/"/>
    <updated>2012-11-23T14:37:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2012/11/23/tinysegmentermaker</id>
    <content type="html"><![CDATA[<p><a href="http://chasen.org/~taku/software/TinySegmenter/">TinySegmenter</a>は工藤さん作のJavaScriptだけで書かれたコンパクトな分かち書きソフトウェアです．
わずか20kバイト程度のサイズしかなく，お手軽に使える分かち書きソフトウェアですが，
当たり前のことながら学習データに使った新聞記事以外の文章の精度はイマイチ．
改善しようにも学習用のプログラムが公開されていないのでモデルの修正が大変です．</p>

<p>ないなら作ってしまいましょう！</p>

<!-- More -->


<h2>ダウンロード</h2>

<p>ソースはgithubで公開しています．cloneするなりzipファイルを落としてくるなりしてください．</p>

<ul>
<li><a href="https://github.com/shogo82148/TinySegmenterMaker">TinySegmenterMaker</a></li>
</ul>


<h2>学習方法</h2>

<p>スペースで分かち書きしたコーパスをあらかじめ準備しておきます．
コーパスから分かち書きの情報と素性を取り出します．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./extract &lt; corpus.txt &gt; features.txt
</span></code></pre></td></tr></table></div></figure>


<p>AdaBoostを用いて学習します．
新しい弱分類器の分類精度が0.001以下，繰り返し回数が10000回以上となったら学習を終了します．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>g++ -O3 -o train train.cpp <span class="c"># コンパイル</span>
</span><span class='line'><span class="nv">$ </span>./train -t 0.001 -n 10000 features.txt model <span class="c"># 学習</span>
</span></code></pre></td></tr></table></div></figure>


<p>きちんと分割できるが実際に試してみます．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./segment model
</span><span class='line'>私の名前は中野です
</span><span class='line'>私 の 名前 は 中野 です
</span></code></pre></td></tr></table></div></figure>


<h2>ライブラリの作成</h2>

<p><a href="http://chasen.org/~taku/software/TinySegmenter/">TinySegmenter</a>は実装が簡単なためいろいろな言語へ移植されています．
モデルの更新のたびにそれらへの言語の移植バージョンを作るのは大変です．
というわけで，makerコマンドで各種言語用のライブラリを作れます．
学習結果のモデルはライブラリのなかに組み込まれ，ファイル単体で簡単に使用することができます．
allを指定することで，対応しているすべての言語向けのライブラリを出力します．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./maker javascript &lt; model
</span><span class='line'><span class="nv">$ </span>./maker perl &lt; model
</span><span class='line'><span class="nv">$ </span>./maker ruby &lt; medel
</span><span class='line'><span class="nv">$ </span>./maker python &lt; model
</span><span class='line'><span class="nv">$ </span>./maker cpp &lt; model
</span><span class='line'><span class="nv">$ </span>./maker all &lt; model <span class="c"># 上のライブラリをすべて作成します</span>
</span></code></pre></td></tr></table></div></figure>


<h2>AdaBoostについておさらい</h2>

<p><a href="http://en.wikipedia.org/wiki/AdaBoost">AdaBoost</a>が面白そうだと前々から思っていて，
現実逃避にこれを使っているという<a href="http://chasen.org/~taku/software/TinySegmenter/">TinySegmenter</a> の実装をしてみました．
簡単に<a href="http://en.wikipedia.org/wiki/AdaBoost">AdaBoost</a>についてお勉強しておきましょう．</p>

<p>性能が悪い分類器だってたくさん集まれば高性能な分類器になれるはず！という
三人よれば文殊の知恵みたいな考え方としてBoostingがあります．
その学習方法の一つが<a href="http://en.wikipedia.org/wiki/AdaBoost">AdaBoost</a>です．</p>

<h3>初期化</h3>

<p>データxが与えられたときのyを推定する問題を考えます．
あらかじめm個の学習データが与えられたとしましょう．</p>

<script type="math/tex; mode=display">
(x_1, y_1), \cdots, (x_m, y_m) ただし，y_i \in \{-1, +1\}
</script>


<p>与えられたすべてのデータを判別するのが最終目標ですが，
弱い分類器にそこまで求めるのは酷です．
そこで分類器の評価の際に，間違えては困るデータに重み付けをすることにします．
その重みをDとしましょう．
はじめはどれが重要かわからないので重みは全て同じ，
扱いやすいように合計1になるように正規化しておきます．</p>

<script type="math/tex; mode=display">
D_1(i) = \frac{1}{m}, i = 1, \cdots, m.
</script>


<h3>弱分類器の選択</h3>

<p>弱分類器 h_t を選びます．
弱分類器の作り方はなんでもいいのですが，+1か-1を結果として返し，<script type="math/tex">| 0.5 - \epsilon_t|</script> がなるべく大きくなるようなものを選びます．</p>

<script type="math/tex">\epsilon_t</script>


<p> は分類に失敗したデータの割合(重み考慮)で，次式で定義されます．</p>

<script type="math/tex; mode=display">
\epsilon_t = \sum_{i=1}^m D_t(i) [y_i \not = h_t]
</script>


<p>εが0か1に近い分類器は分類性能が高いということなので，最終的な分類器を構成するときに重みを大きくしたほうがいいような気がします．
εが1に近いということはほとんどの分類に失敗しているということなので，性能が高いというのは変な気がするけど，
必ず間違うのなら負号を反対にしてしまえばいいのです．</p>

<p>整理すると，重み関数の条件は，0か1に近くなると絶対値が大きく，0.5以上で負，0.5以下で正となるような関数，ということになります．
このような条件を満たす関数は無限に考えられますが，次の式使うといいらしいです(論理的背景があるんだろうけど理解はしていない)．</p>

<script type="math/tex; mode=display">
\alpha_t = \frac{1}{2} \log \frac{1-\epsilon_t}{\epsilon}
</script>


<h3>重みの更新</h3>

<p>弱分類器の選択を何度も繰り返せば性能がどんどん上がっていくはずですが，ただ単に良い分類器を選ぶだけでは性能は上がりません．
今ある弱分類器で正しく分類できなかったデータを正しく分類してくれる(つまり今の欠点を補ってくれる)
弱分類器を次の候補とするべきです．</p>

<p>そこで，うまく分類できたデータの重みを少なく，分類できなかったデータの重みを大きくしましょう．</p>

<script type="math/tex; mode=display">
D_{t+1}(i) = \frac{D_t(i)\exp (-\alpha_t y_i h_t(x_i))}{Z_t}
</script>


<p>Z_tは正規化のための係数です．
弱分類器の選択と重みの更新を繰り返すことで分類精度が上がっていきます．</p>

<h3>分類する</h3>

<p>最終的な分類器は</p>

<script type="math/tex; mode=display">
H(x) = \sum_{t=1}^T \alpha_t h_t(x)
</script>


<p>となります．H(x)の負号が分類器の予測結果です．</p>

<h2>実演</h2>

<p>数式だけだとわかりにくと思うので分類の実演．
青丸と赤丸をAdaBoostで分類するテスト．弱分類器として座標軸と平行な直線を選択します．
重みの大きいデータは色が濃くなります．
分類に失敗しているデータは色が濃く，優先的に分類されることを確認できると思います．</p>

<script type="text/javascript" src="http://jsdo.it/blogparts/1XZV/js"></script>


<h2>単語分割に応用</h2>

<p>さて，学習の方法が分かったので単語分割への応用を考えます．
<a href="http://chasen.org/~taku/software/TinySegmenter/">TinySegmenter</a>は，単語分割を文字と文字の間を分割するか/しないかという二値分類の問題と捉えます．
分類の手がかりとなる素性には，前後の文字列，文字種，以前の分類結果を使っています．</p>

<p>弱分類器には素性の有無を使っています．
このようなxが○以上とか素性がある/ないみたいな
ANDとかORを使わずに作れる弱分類器を 決定株(decision stump) というらしいです．
こうすることで弱分類器の重みが，そのまま素性の重みになります．</p>

<h2>再学習機能</h2>

<p><a href="http://en.wikipedia.org/wiki/AdaBoost">AdaBoost</a>の更新式を眺めていると</p>

<script type="math/tex; mode=display">
D_{T}(i) = \frac{\exp (H(x_i))}{Z_T}
</script>


<p>と表すことができるということがわかります．
これはつまり，学習済みのモデルから学習中に使う変数がすべて復元できるということです．</p>

<p>この考えに基づいてTinySegmenterMakerでは再学習機能を実装してみました．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./train -t 0.0001 -n 10000 -M model_old features.txt model_new
</span></code></pre></td></tr></table></div></figure>


<p>この機能を使えば10000回とりあえず回してみて，不十分だからもう10000回追加，みたいなことができます．
同じコーパスを使っていれば，10000+10000回と20000回の結果はほぼ同じ結果になるはずです(もちろん浮動小数点演算の誤差が多少あるけど)．</p>

<p>この変数の復元は，元のモデルの学習に使ったものとは違うコーパスでも可能なので，
リポジトリに登録されているモデルを元に自分で用意したコーパスで学習することも可能なはず．
(どの程度性能が変わるのかとか論理的な解析・評価はしてないので，実際使えるものなのかはよくわからない)</p>

<p>オリジナルTinySegmenterのモデルからも再学習は可能だけど，こちらはスケールをいじってあるから再学習の効果はもっとよくわからない．</p>

<h2>ダイナミックプログラミング版TinySegmenter</h2>

<p>分類器が返すスコアの絶対値は分類の確信度を表していると仮定して，
文章全体の確信度の合計が最大になる単語分割を採用するプログラムも書いてみた(tinysegmenter.dp.jp)．
AdaBoost自身がこの値をデータの重み付けに使っているくらいなので，この仮定はだいたいあっているんじゃないか
と勝手に考えているけど，論理的な裏付けをとったわけじゃないし性能評価もしてない．</p>

<h2>参考</h2>

<ul>
<li><a href="http://chasen.org/~taku/software/TinySegmenter/">TinySegmenter</a></li>
<li><a href="http://en.wikipedia.org/wiki/AdaBoost">Adaboost</a></li>
<li><a href="http://ultraist.hatenablog.com/entry/20120603/1338675881">BimyouSegmenter</a></li>
<li><a href="http://search.cpan.org/dist/Text-TinySegmenter/">Text::TinySegmenter</a></li>
<li><a href="http://www.programming-magic.com/20080726203844/">TinySegmenterをPythonで書いてみた</a></li>
<li><a href="http://d.hatena.ne.jp/llamerada/20080224/1203818061">TinySegmenterをRubyに移植</a></li>
<li><a href="http://d.hatena.ne.jp/repeatedly/20101105/1288946662">TinySegmenter in D</a></li>
<li><a href="http://code.google.com/p/tinysegmenter-cpp/">tinysegmenter-cpp</a></li>
<li><a href="http://www.programming-magic.com/20080816010106/">PHP版TinySegmenter作ってみた</a></li>
<li><a href="http://pub.ne.jp/arihagne/?entry_id=2768818">VBAでTinySegmenterしてみる</a></li>
<li><a href="http://wiki.dobon.net/index.php?free%2FTinySegmenter.NET">TinySegmenter.NET : 分かち書きを行うC#のクラス</a></li>
<li><a href="http://blog.bornneet.com/Entry/276/">TinySegmenterをiPhone(Objective-C)に移植してみました</a></li>
<li><a href="http://blog.bornneet.com/Entry/277/">TinySegmenter.mをRegexKitLiteに対応させてみた</a></li>
<li><a href="https://code.google.com/p/cmecab-java/">cmecab-java MeCabのJavaバインディング＋Lucene/Solr用トークナイザ・フィルタ</a>

<ul>
<li>おんなじインターフェースでTinySegmenterも使えるみたい</li>
<li><a href="https://code.google.com/p/cmecab-java/source/browse/trunk/src/net/moraleboost/tinysegmenter/TinySegmenter.java">TinySegmenter.java</a></li>
</ul>
</li>
<li><a href="http://miyamuko.s56.xrea.com/xyzzy/tiny-segmenter.html">tiny-segmenter - xyzzy Lisp だけで実装されたコンパクトな分かち書きソフトウェア</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[6さいカンファレンス 第9回「マスタリングの技法 ～音圧を上げよう～」まとめ]]></title>
    <link href="http://shogo82148.github.io/blog/2012/11/09/6saiconf-9/"/>
    <updated>2012-11-09T00:13:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2012/11/09/6saiconf-9</id>
    <content type="html"><![CDATA[<p>2012/11/8に<a href="https://twitter.com/kuina_tesso">くいなちゃん</a>さん主催で開催された6さいカンファレンスのまとめ。
第9回は「マスタリングの技法 ～音圧を上げよう～」です。</p>

<p>勝手にまとめてしまったので、何か問題があれば<a href="https://twitter.com/shogo82148">@shogo82148</a>まで。</p>

<!-- More -->


<h2>よるほー</h2>

<p>くいなちゃん: みなさん、自分が作った曲が、市販のCDの曲にくらべ、
音量が小さい (最大まで波形を上げたにも関わらず)と悩んだことはありませんか？</p>

<p>くいなちゃん: しかし、心配はいりません。
今回のことを実践していただくと、
みなさんの曲も、市販の楽曲並みに、音圧をあげることができるですん！
では次の波形をご覧ください。</p>

<p>くいなちゃん: <a href="http://kuina.tes.so/6saiconf_9/img0.png">http://kuina.tes.so/6saiconf_9/img0.png</a>
はい、さっき作った曲です。
いい曲ですね！
しかし、なんだか音量が小さいですね…
それでは、波形に注目してください。
この図では、波形が-1.0～1.0 の範囲で
示されていますが、この範囲に比べ、明らかに波形が小さいです。
余白が空きすぎです！</p>

<p><img src="http://kuina.tes.so/6saiconf_9/img0.png" alt="くいなちゃんさんが作った曲" /></p>

<p>くいなちゃん: え、mp3ファイルがどこにあるかって？
ｷﾆｼﾅｲ!
では、とりあえず、この波形を -1.0～1.0 まで拡大してみましょう。
<a href="http://kuina.tes.so/6saiconf_9/img1.png">http://kuina.tes.so/6saiconf_9/img1.png</a>
はい、赤い矢印で示されたところが、確かに-1.0～1.0 の範囲に到達していますね。
素人さんは、この状態で完成、と思うでしょう。
しかし、それではダメダメですん☆</p>

<p><img src="http://kuina.tes.so/6saiconf_9/img1.png" alt="拡大してみた" /></p>

<p>くいなちゃん: なぜなら、緑の2本線で示された範囲がメインの波形であって、
そこから飛び出た いわゆる魚の骨は、音量を上げる邪魔をするものだからです。
この魚の骨さえなければ、もっと音量が上がるのに…そう考えてください。</p>

<p>くいなちゃん: 市販のCD の音楽なんかは、こんな波形をしています。
<a href="http://kuina.tes.so/6saiconf_9/img2.png">http://kuina.tes.so/6saiconf_9/img2.png</a>
これは、全体が波形で埋まった、いわゆる海苔みたいなことになっているので、
業界でもしばしば 海苔 と言われます。
ここまで来ると、相当 音量が大きく聞こえます。
波形のピークは、魚の骨と同じなんですけどね。</p>

<p><img src="http://kuina.tes.so/6saiconf_9/img2.png" alt="市販のCDの波形" /></p>

<p>くいなちゃん: で、素人さんは、この状態にしようと、魚の骨を無視して、
波形のレベルを上げるわけです。
しかし、これには問題があるのです。</p>

<p>くいなちゃん: <a href="http://kuina.tes.so/6saiconf_9/img3.png">http://kuina.tes.so/6saiconf_9/img3.png</a>
この図を見ればわかるのですが、青のラインが -1.0 ～ 1.0 の範囲をしめしています。
で、無理やり波形を拡大すると、青のラインを超えた部分が潰されて、
右の波形のようなことになってしまいます。これは、元の波形から変わっているので、
当然音も変わります。大抵、ノイズが入った汚い音になってしまいますですー</p>

<p>くいなちゃん: じゃあ、どうするのか。
それは、波形を潰すことなく、波形のピークを下げて
-1.0 ～ 1.0 の範囲に余白を作り、更に音量を上げる余地を作ればいいのです☆
では、そのための具体的に手法を、説明しましょう。</p>

<h2>聞こえない音を削る</h2>

<p>くいなちゃん: まず、この図を見てください。
<a href="http://kuina.tes.so/6saiconf_9/img4.png">http://kuina.tes.so/6saiconf_9/img4.png</a>
左の複雑な波形も、実は 単純なサイン波の集まりであることが、数学的に証明されています。
つまり、どんな曲も、高低さまざまな周波数のサイン派 が集まってできているというわけなのです。</p>

<p><img src="http://kuina.tes.so/6saiconf_9/img4.png" alt="サイン波" /></p>

<p>くいなちゃん: よく皆さんが目にするイコライザ というのは、この周波数ごとに波形を分解したものです。
<a href="http://kuina.tes.so/6saiconf_9/img5.png">http://kuina.tes.so/6saiconf_9/img5.png</a>
左になるほど、周波数が低く(低い音)、右にいくほど高く(高い音)なっています</p>

<p><img src="http://kuina.tes.so/6saiconf_9/img5.png" alt="イコライザ" /></p>

<p>くいなちゃん: ２つあるのは、ステレオだからですん☆
で、人間の耳は、このうち 60Hz ～ 16000Hz 程度の音を聴くことができます。
本当はもうちょっと聴くことができる人もいるんですが、大体この程度と考えてください。</p>

<p>くいなちゃん: ということは逆に言えば、60Hz未満、16000Hz以上の音は、
カットしても判らないということです。
<a href="http://kuina.tes.so/6saiconf_9/img6.png">http://kuina.tes.so/6saiconf_9/img6.png</a>
聴こえない音のくせに、波形データには含まれていますので、これを削るだけで、
少しは波形のピークも減らせるはずなのです☆(理論値)</p>

<p><img src="http://kuina.tes.so/6saiconf_9/img6.png" alt="周波数カット" /></p>

<p>くいなちゃん: 実際に削ってみましょう。
どんなイコライザを使ってくださっても構いません。
くいなちゃんは、愛用のイコライザで削りました。
http://kuina.tes.so/6saiconf_9/img7.png
この曲線を見ても、60～16000Hz 外を削っていることが解りますね。</p>

<p><img src="http://kuina.tes.so/6saiconf_9/img7.png" alt="くいなちゃんさん愛用のイコライザ" /></p>

<p>くいなちゃん: 気になる波形の変化を見てみましょう。
<a href="http://kuina.tes.so/6saiconf_9/img8.png">http://kuina.tes.so/6saiconf_9/img8.png</a>
おや、さっき -1.0～1.0 に到達していた赤矢印の部分に、ちょっと余裕が生まれていますね！
ということは、このぶんだけ、さらに全体の音量を上げてもOKということなのです☆
音圧が上がりますね</p>

<p><img src="http://kuina.tes.so/6saiconf_9/img8.png" alt="削った後の波形" /></p>

<h2>波形を潰さずピークを減らす</h2>

<p>くいなちゃん: 次に、波形を潰すことなく、ピークを減らす方法を考えてみましょう。
<a href="http://kuina.tes.so/6saiconf_9/img9.png">http://kuina.tes.so/6saiconf_9/img9.png</a>
(1) は元データ、(2) は素人が無理やり波形を上げて潰したもの、(3) は潰さずに波形の高さを低くしたものです。
(3) は、下に描かれている通り、青線の超過部分の割合を1/3にしています。
これだけで、ノイズが乗ることなく、波形のピークを綺麗に抑えることができるのですん☆</p>

<p><img src="http://kuina.tes.so/6saiconf_9/img9.png" alt="波形を潰さずピークを減らす" /></p>

<p>くいなちゃん: それを実現するのが、コンプレッサ (コンプ) です。
<a href="http://kuina.tes.so/6saiconf_9/img10.png">http://kuina.tes.so/6saiconf_9/img10.png</a>
こんな感じの画面が一般的です。
基本的なパラメータは、スレッショルド、アタック、リリース、レシオ、ゲイン　になります。
それぞれ説明します。</p>

<p><img src="http://kuina.tes.so/6saiconf_9/img10.png" alt="コンプレッサ" /></p>

<p>くいなちゃん: スレッショルドは、さっきの絵の青線に相当するものです。
どのレベルから波形を圧縮し始めるのかを指定します。
アタックは、スレッショルドを波形が超えてから、圧縮し始めるまでの時間です。音圧を上げる場合は、すぐ圧縮したいので、一番短くしましょう。
リリースは、圧縮する必要がなくなってから、圧縮をやめるまでの時間です。
これもなるべく短くすべきですが、あまりに短いとノイズが乗るので、綺麗になるよう調整してください。</p>

<p>くいなちゃん: レシオは、圧縮率です。
この図では、5.00 になっていますが、これは 1/5 に圧縮することを意味します。
1/3 にしたい場合は、3.00 にします。
ゲインは、この装置(コンプ)から波形を吐くときに、ついでに音量を上げることができるんですが、その値です。
ここで注意なのは、ゲインで上げると、結局素人さんが波形の音量を無理やり上げるのと同じことなので、これに頼っては意味がないということです。
基本的な考え方としては、波形を圧縮してピークを下げる→ピークが下がったぶんだけ全体を上げるという流れですね</p>

<p>くいなちゃん: また、かなり多くの人がここで罠にかかるのですが、魚の骨部分だけを圧縮してください。
本体の波形を圧縮してはいけません。
というのは、本体を圧縮すると、全体の音量が下がってしまいますので、全体の音量が下がる→ゲインで上げる＝もとの音量と変わらない
ということになってしまい、結局音がコンプによって圧縮されただけという結果になります。
もちろん、それが目的なら良いのですが、音圧を稼ぎたい場合は避けましょう。</p>

<p>くいなちゃん: ついでに言うと、安っぽい音源を使ったせいで、音が薄っぺらいなー
という人は、このコンプで本体の波形を圧縮すると、そこそこ迫力のある太い音に変化しますのでオススメです。
軽くその楽器にリバーブをかけると、効果倍増ですん☆
いろいろ試してみてください</p>

<p>くいなちゃん: はい、以上のことをするだけで、波形のピークが減ります。
あとは、ひたすら音量を上げていき、ノイズが乗る寸前まで音量を上げると そこそこ音圧のある曲になります。
また、パートごとにコンプをかけてピークを下げておくと、一層音圧は上がりますね。
では、ここからちょっと上級者向けのテクに突入です。</p>

<p>くいなちゃん: とその前に、ここまで質問はないですかー生きてます？？</p>

<p>くいなちゃん: どうやら、このまま進むと
みなさん 息しなくなりそうなので、上級者向けテクは
くいなちゃんの心の中にしまっておいて、今日はこの辺にしましょうか。
というわけで、以上ですんーおしまい！</p>

<h2>実際やってみよう</h2>

<p>信号処理とかの授業でフーリエ変換とか扱ったことはあるのですが，
コンプレッサのお話とか今回のカンファレンスで初めて知りました．
音楽とか僕には難しいです・・・．</p>

<p>しかし，そのためのツールを作る事ならできます！
現在策定が進んでいる Web Audio を使えばブラウザから音を簡単に出すことができます．
そして，周波数フィルタとかコンプレッサもはじめから付いているので，
設定をちょこちょこっと書いてあげるだけでこれらの機能を簡単に使うことが可能です．</p>

<p>ということで簡単なツールを作ってみました．
Chomeのみ対応です．
音楽ファイルをドラッグアンドドロップで元の音楽を読み込みます．
元の音楽→Lowパスフィルタ→Highパスフィルタ→コンプレッサ→音量調整，
の順番で音を加工します．
上の画面は音の波形，下は周波数アナライザの結果です．
灰色が元の音，緑が加工後を表しています．
スクロールバーを動かして遊んでみてください．</p>

<p><canvas id="timeDomain" width="800" height="300" style="max-width:100%"></canvas>
<canvas id="frequency" width="800" height="300" style="max-width:100%"></canvas>
<input id="play" type="button" value="Play"></p>

<div>Gain:<span id="gainValue">1</span></div>


<p><input id="gain" type="range" min="0" max="200" value="10" style="width:100%"></p>

<div>High Pass Filter:<span id="lowValue">0</span>Hz</div>


<p><input id="lowFreq" type="range" min="1" max="2000" value="2" style="width:100%"></p>

<div>Low Pass Filter:<span id="highValue">0</span>Hz</div>


<p><input id="highFreq" type="range" min="1" max="2000" value="1600" style="width:100%"></p>

<div>Threshold:<span id="thresholdValue">0</span>dB</div>


<p><input id="threshold" type="range" min="-600" max="0" value="0" style="width:100%"></p>

<div>Ratio:<span id="ratioValue">0</span>dB</div>


<p><input id="ratio" type="range" min="0" max="30" value="10" style="width:100%"></p>

<div id="reduction"></div>


<script src="http://shogo82148.github.io/files/2012-11-09-6saiconf-9.js"></script>

]]></content>
  </entry>
  
</feed>
