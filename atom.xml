<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shogo's Blog]]></title>
  <link href="http://shogo82148.github.io/atom.xml" rel="self"/>
  <link href="http://shogo82148.github.io/"/>
  <updated>2014-07-05T18:37:26+09:00</updated>
  <id>http://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PerlのXS中に起きたシグナルの扱い]]></title>
    <link href="http://shogo82148.github.io/blog/2014/07/05/signal-in-xs/"/>
    <updated>2014-07-05T11:56:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/07/05/signal-in-xs</id>
    <content type="html"><![CDATA[<p><a href="https://metacpan.org/pod/Redis::Fast">Redis::Fast</a> にIssueが来ていたので、
それに関して調査したお話です。</p>

<ul>
<li>接続タイムアウトすると double free check に引っかかる</li>
<li><code>brpop</code> みたいな長時間ブロックするコマンド中にシグナルが入ると、最初の1回が無視される</li>
</ul>


<p>前者はC言語つらいって話で頑張って double free になる条件を探せばいいんですが、
後者はシグナル時のPerlやPOSIX APIの挙動を知らなくと解決できなそう。
そういうわけで、主に後者について調べた結果をまとめておきます。</p>

<!-- More -->


<h2>PERL_ASYNC_CHECKってXS中から呼んでもいいの？</h2>

<p>言いたいことは最初に書いとけって偉い人に言われたので、最初にこの記事の結論を。
「よしななタイミングでPERL_ASYNC_CHECKを呼べばいいっぽい」みたいです。
でも、 <strong> 「PERL_ASYNC_CHECKってXS中から呼んでもいいの？」 </strong> という点に確証が持ててないので、
識者のご意見を募集してます！</p>

<h2>selectの挙動を調べる</h2>

<p>Redis::FastはRedisからのレスポンスを待つのにLinuxのselect apiを叩いてます。
ファイルとかが読み書き可能になるまで処理をブロックしてくれるいいやつです。
しかし、select が処理をブロックしている間にシグナルを受信すると、うまく処理ができてないらしい。
そこで割り込み発生時の挙動を確認してみます。</p>

<p>困った時の<a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man2/select.2.html">manページ(select)</a>
をちゃんと読めば書いてありますね。</p>

<blockquote><p>エラーならば -1 を返し、 errno にエラーを示す値が設定される;</p>

<p>EINTR
シグナルを受信した。</p></blockquote>

<p>Redis::Fastは<code>errno</code>を特に確認せず、とにかくエラーが発生したらリトライになってたのでダメだったみたいです。
通信にエラーが起きたわけではないので、再接続処理とかみたいな複雑なリトライ処理は必要なく、
単にもう一度selectしなおせば良さそうです。</p>

<h2>Perlさんのシグナル処理のタイミング</h2>

<p>「割り込みかかったら再度select」っていうふうに修正してみたんですが、
今度はPerlのシグナルハンドラがなかなか呼び出されない！！</p>

<figure class='code'><figcaption><span>signal.pl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">Fast</span><span class="p">;</span>
</span><span class='line'><span class="nv">$SIG</span><span class="p">{</span><span class="n">TERM</span><span class="p">}</span><span class="o">=</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>    <span class="nb">warn</span> <span class="s">&quot;TERM handler called&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$c</span> <span class="o">=-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">reconnect</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">,</span> <span class="n">every</span> <span class="o">=&gt;</span> <span class="mi">100</span><span class="p">,</span> <span class="n">server</span> <span class="o">=&gt;</span> <span class="s">&quot;localhost:6379&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$c</span><span class="o">-&gt;</span><span class="n">brpop</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span> <span class="c1"># 100秒経ったら諦めて戻ってくる</span>
</span></code></pre></td></tr></table></div></figure>


<p>このコードを実行中にSIGTERMを送ると、送った瞬間に&#8221;TERM handler called&#8221;と表示されて欲しいのですが、
<code>brpop</code>コマンドが終わるまで実行されない……。</p>

<p>ググってみるとPerlはシグナルハンドラを即座に処理しているのではなく、
シグナルハンドラを安全に実行できるタイミングを見計らって実行しているみたいです。</p>

<ul>
<li><a href="http://perl-users.jp/articles/advent-calendar/2009/data-model/03.html">Q4M を使ってる時のシグナル処理に注意</a></li>
</ul>


<p>この記事では「Low Levelなシグナルハンドラを使おう」っていうことになってますが、できることならライブラリ側で対応したい。
安全にシグナルハンドラを実行できるタイミングで<code>PERL_ASYNC_CHECK</code>を呼び出しているので、
XS中でもこいつを呼べばできるのでは！ってことでやってみたら動いてるっぽい……？</p>

<p>ただDBIでもシグナルの扱いに同様の問題があるらしく、
これで解決するならDBIが解決してるよな・・・何か罠があるんだろうか。不安だ・・・。</p>

<h2>まとめ</h2>

<ul>
<li>selectはシグナルを受信するとエラーを返すので、<code>errno</code> をみて適切に扱うこと</li>
<li>Perlはシグナルハンドラを安全に実行できるタイミングでしか実行しない</li>
<li><code>PERL_ASYNC_CHECK</code>を使えば解決しそうだけど、どこからか椅子が飛んでくるんじゃないだろうか怖い</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IRCに癒やしボットを入れてみた]]></title>
    <link href="http://shogo82148.github.io/blog/2014/06/04/irc-healing-bot/"/>
    <updated>2014-06-04T07:37:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/06/04/irc-healing-bot</id>
    <content type="html"><![CDATA[<p>別チームがIRCに癒やしボットを入れてたので、自分のチームのチャンネルにも入れてみた。</p>

<!-- More -->


<h2>Instagramに登録する</h2>

<p><a href="http://instagram.com/developer/">InstagramのDeveloperサイト</a>に開発者として登録します。
<a href="http://instagram.com/developer/authentication/">Authentication</a>
のページを見ながら、Server-side (Explicit) Flow を参考にアクセストークンを取得します。</p>

<h2>Instagram APIを叩く</h2>

<p><code>https://api.instagram.com/v1/tags/$TAGNAME/media/recent?access_token=YOUR_ACCESS_TOKEN</code>を叩くと
TAGNAMEに関連する画像の情報がJSONで帰ってくるので、
Perlからこのエンドポイントを叩きます。
IRCとのやりとりには<a href="http://www.songmu.jp/riji/entry/2013-09-09-unazusan.html">UnazuSan</a>を使いました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="o">!</span><span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">perl</span>
</span><span class='line'><span class="k">use</span> <span class="mf">5.014</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">Encode</span> <span class="sx">qw/encode_utf8/</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">Furl</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">JSON</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">UnazuSan</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">neko</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">state</span> <span class="nv">$data</span> <span class="o">=</span> <span class="nb">undef</span><span class="p">;</span>
</span><span class='line'>    <span class="n">state</span> <span class="nv">$time</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nv">$data</span> <span class="o">||</span> <span class="nb">time</span> <span class="o">-</span> <span class="nv">$time</span> <span class="o">&gt;</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$time</span> <span class="o">=</span> <span class="nb">time</span><span class="p">;</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$furl</span> <span class="o">=</span> <span class="n">Furl</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$res</span> <span class="o">=</span> <span class="nv">$furl</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;https://api.instagram.com/v1/tags/%E7%8C%AB/media/recent?access_token=YOUR_ACCESS_TOKEN&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$hash</span> <span class="o">=</span> <span class="nn">JSON::</span><span class="n">decode_json</span><span class="p">(</span><span class="nv">$res</span><span class="o">-&gt;</span><span class="n">content</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$hash</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$media</span> <span class="o">=</span> <span class="nv">$data</span><span class="o">-&gt;</span><span class="p">[</span><span class="nb">rand</span><span class="p">(</span><span class="nb">scalar</span> <span class="nv">@$data</span><span class="p">)];</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$media</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">images</span><span class="p">}{</span><span class="n">standard_resolution</span><span class="p">}{</span><span class="n">url</span><span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$unazu_san</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$NICKNAME</span> <span class="o">=</span> <span class="s">&#39;iyashi&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$unazu_san</span> <span class="o">=</span> <span class="n">UnazuSan</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span>
</span><span class='line'>    <span class="n">host</span>       <span class="o">=&gt;</span> <span class="s">&#39;127.0.0.1&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">enable_ssl</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">join_channels</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s">&#39;#test&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="n">respond_all</span>   <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">nickname</span>      <span class="o">=&gt;</span> <span class="nv">$NICKNAME</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$unazu_san</span><span class="o">-&gt;</span><span class="n">on_message</span><span class="p">(</span>
</span><span class='line'>    <span class="sx">qr/^\s+$NICKNAME:/</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$receive</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$receive</span><span class="o">-&gt;</span><span class="n">reply</span><span class="p">(</span><span class="s">&#39;うんうん&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="sx">qr/(.*)/</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="p">(</span><span class="nv">$receive</span><span class="p">,</span> <span class="nv">$match</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>        <span class="n">say</span> <span class="nv">$match</span><span class="p">;</span>
</span><span class='line'>        <span class="n">say</span> <span class="nv">$receive</span><span class="o">-&gt;</span><span class="n">message</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$unazu_san</span><span class="o">-&gt;</span><span class="n">on_command</span><span class="p">(</span>
</span><span class='line'>   <span class="s">&#39; 癒やし&#39;</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="p">(</span><span class="nv">$receive</span><span class="p">,</span> <span class="nv">@args</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$receive</span><span class="o">-&gt;</span><span class="n">reply</span><span class="p">(</span><span class="n">neko</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$unazu_san</span><span class="o">-&gt;</span><span class="n">run</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>「癒して」と話しかけると猫画像を検索して返してくれます。</p>

<h2>引数をMeCabで解析する</h2>

<p>実際に入れてみたら、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>acidlemon unazu_san: 癒やしをうさぎで頼む
</span><span class='line'>acidlemon ネコやん! ('-'#)</span></code></pre></td></tr></table></div></figure>


<p>みたいなことがあったので、「癒して」のあとも見ることにしました。
MeCabを使って名詞っぽいものを抽出して、タグ名に使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">state</span> <span class="nv">$mecab</span> <span class="o">=</span> <span class="nn">Text::</span><span class="n">MeCab</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$n</span> <span class="o">=</span> <span class="nv">$mecab</span><span class="o">-&gt;</span><span class="n">parse</span><span class="p">(</span><span class="nb">join</span> <span class="s">&#39; &#39;</span><span class="p">,</span> <span class="nv">@_</span><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$keyword</span> <span class="o">=</span> <span class="nb">undef</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$f</span> <span class="o">=</span> <span class="n">decode_utf8</span> <span class="nv">$n</span><span class="o">-&gt;</span><span class="n">feature</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$keyword</span> <span class="sr">//</span><span class="o">=</span> <span class="n">decode_utf8</span><span class="p">(</span><span class="nv">$n</span><span class="o">-&gt;</span><span class="n">surface</span><span class="p">)</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$f</span> <span class="o">=~</span><span class="sr"> /^名詞,/</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">$f</span> <span class="o">!~</span> <span class="sr">/^名詞,代名詞,/</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$n</span> <span class="o">=</span> <span class="nv">$n</span><span class="o">-&gt;</span><span class="k">next</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$keyword</span> <span class="sr">//</span><span class="o">=</span> <span class="s">&#39;猫&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$word</span> <span class="o">=</span> <span class="n">uri_escape_utf8</span><span class="p">(</span><span class="nv">$keyword</span><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$res</span> <span class="o">=</span> <span class="nv">$furl</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;https://api.instagram.com/v1/tags/$word/media/recent?access_token=ACCESS_TOKEN&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで癒やしをうさぎで頼まれてもウサギ画像を返せるようになりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[キレイになったコトバとハートを元に戻すツール作った]]></title>
    <link href="http://shogo82148.github.io/blog/2014/06/01/anti-sizukatter/"/>
    <updated>2014-06-01T00:24:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/06/01/anti-sizukatter</id>
    <content type="html"><![CDATA[<p>現実世界にご満足の方消えてなくなってほしいの！！！</p>

<p><a href="http://www.toyotown.jp/sizukatter/">しずかったー</a>を使うと個性あふれるコトバを使ってもキレイにしてくれるので
とっても便利ですね！
でも、本当は何を言っているのか真意を知りたい・・・。</p>

<p>そんな人のために、キレイになったコトバとハートを元に戻す
<a href="http://shogo82148.github.io/anti-sizukatter/">アンチしずかったー</a>
を作りました。</p>

<!-- More -->


<h2>仕組み</h2>

<p>しずかったーは単純な文字列置換で動いているみたいなので、
対応表を頑張って作りました。
それを<a href="http://mecab.googlecode.com/svn/trunk/mecab/doc/index.html">MeCab</a>用の辞書に変換し、
<a href="http://igo.sourceforge.jp/">Igo</a>を使ってバイナリ辞書に変換、
<a href="https://github.com/shogo82148/igo-javascript">igo-javascript</a>でブラ失礼しちゃう上で解析できるようにしました。</p>

<h2>既知の問題点</h2>

<p>しずかったー前後の文脈関係なく変換しちゃうので、
同音異義語は元に戻らないことがあります。
特にひらがな・カタカナは失敗することが多いです。(「（お昼寝したい）ふわふわ」だとか「ブラ失礼しちゃう」だとか)</p>

<p>あと、マシュマロ的な内緒の言葉はさすがのしずかちゃんでも代替表現が思いつかなかったらしく、
全部ハートになってしまいます。
元に戻せと言う方が頑張ればなんとかできそうなので期待しないでく時代が変わればかっこいい。</p>

<h2>まとめ</h2>

<p>またおもしろいものを作ってしまいましたが、
igo-javascriptのバグを発見できたりしたので、いいのです。</p>

<p>自宅警備員でお時間ある方の皆様、天才だと思ったらぜひおしゃべり広場や「いいね！」広場で共有をお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C#のconditional attributeのコンパイル結果を見てみる]]></title>
    <link href="http://shogo82148.github.io/blog/2014/05/29/conditional-attribute/"/>
    <updated>2014-05-29T19:20:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/05/29/conditional-attribute</id>
    <content type="html"><![CDATA[<p>C#で「ある環境では関数の定義ごと消したい」みたいな要件があって、
そういう用途にconditinal attributeが使えるのかなーと話題のあがったので、実際に確認してみました。</p>

<p>結論から言えばできないのですが、せっかく調べたのでメモとして残しておきます。</p>

<!-- More -->


<h2>conditional attribute</h2>

<p>「デバッグ時のみにしか実行して欲しくない関数」みたいなものを定義するための機能です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Diagnostics</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">ConditionalAttributeTest</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">MainClass</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span> <span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="p">(</span><span class="s">&quot;fugu&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">        [ConditionalAttribute(&quot;DEBUG&quot;)]</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Log</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんなふうに書いておくと <code>DEBUG</code> シンボルが定義されている時にだけ<code>Log</code>の呼び出しが行われます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; mcs -d:DEBUG ConditionalAttributeTest.cs
</span><span class='line'>&gt; mono ConditionalAttributeTest
</span><span class='line'>fugu
</span><span class='line'>&gt; mcs ConditionalAttributeTest.cs
</span><span class='line'>&gt; mono ConditionalAttributeTest
</span></code></pre></td></tr></table></div></figure>


<h2>逆アセンブルしてみる</h2>

<p>DEBUG付きでコンパイルした結果を逆アセンブルしてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ...前略
</span><span class='line'>// method line 2
</span><span class='line'>.method public static hidebysig
</span><span class='line'>    default void Main (string[] args)  cil managed
</span><span class='line'>{
</span><span class='line'>    // Method begins at RVA 0x2058
</span><span class='line'>    .entrypoint
</span><span class='line'>    // Code size 11 (0xb)
</span><span class='line'>    .maxstack 8
</span><span class='line'>    IL_0000:  ldstr "fugu"
</span><span class='line'>    IL_0005:  call void class ConditionalAttributeTest.MainClass::Log(string)
</span><span class='line'>    IL_000a:  ret
</span><span class='line'>} // end of method MainClass::Main
</span><span class='line'>
</span><span class='line'>// method line 3
</span><span class='line'>.method public static hidebysig
</span><span class='line'>    default void Log (string message)  cil managed
</span><span class='line'>{
</span><span class='line'>    .custom instance void class [mscorlib]System.Diagnostics.ConditionalAttribute::'.ctor'(string) =  (01 00 05 44 45 42 55 47 00 00 ) // ...DEBUG..
</span><span class='line'>
</span><span class='line'>    // Method begins at RVA 0x2064
</span><span class='line'>    // Code size 7 (0x7)
</span><span class='line'>    .maxstack 8
</span><span class='line'>    IL_0000:  ldarg.0
</span><span class='line'>    IL_0001:  call void class [mscorlib]System.Console::WriteLine(string)
</span><span class='line'>    IL_0006:  ret
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>DEBUGを付けなかったときとのDIFFをとってみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>15c15
</span><span class='line'>&lt; .module ConditionalAttributeTest.exe // GUID = {A54F3644-5083-4EC7-B846-8A354DD113AA}
</span><span class='line'><span class="gd">---</span>
</span><span class='line'>&gt; .module ConditionalAttributeTest.exe // GUID = {436FE462-17D6-4FDB-9AA7-15DA92658168}
</span><span class='line'>42c42
</span><span class='line'>&lt;  // Code size 11 (0xb)
</span><span class='line'><span class="gd">---</span>
</span><span class='line'>&gt;  // Code size 1 (0x1)
</span><span class='line'>44,46c44
</span><span class='line'>&lt;  IL_0000:  ldstr &quot;fugu&quot;
</span><span class='line'>&lt;  IL_0005:  call void class ConditionalAttributeTest.MainClass::Log(string)
</span><span class='line'>&lt;  IL_000a:  ret
</span><span class='line'><span class="gd">---</span>
</span><span class='line'>&gt;  IL_0000:  ret
</span><span class='line'>55c53
</span><span class='line'>&lt;         // Method begins at RVA 0x2064
</span><span class='line'><span class="gd">---</span>
</span><span class='line'>&gt;         // Method begins at RVA 0x205a
</span></code></pre></td></tr></table></div></figure>


<p>変わったのは呼び出し側であるmain関数だけで、
ConditionalAttributeがついたメソッド自体はDEBUGの有無に関係なく同じコードが吐かれます。</p>

<h2>SEE ALSO</h2>

<p>例によってこのことはドキュメントにバッチリ載っております。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/system.diagnostics.conditionalattribute.aspx">ConditionalAttribute クラス</a></li>
</ul>


<blockquote><p>指定した条件付きコンパイルのシンボルが定義されていない限り、メソッド呼び出しまたは属性を無視するようにコンパイラに指示します。</p></blockquote>

<p>ドキュメントには「呼び出しを無視する」としか書かれてないので、定義がなくなるわけではないですね。
そもそも関数定義がなくなったら、リンク時に Conditional Attribute があるかないか確認する方法がないじゃないですか・・・。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初期化なしのusing文ってOK？]]></title>
    <link href="http://shogo82148.github.io/blog/2014/05/27/using-statement-without-instantiating/"/>
    <updated>2014-05-27T13:48:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/05/27/using-statement-without-instantiating</id>
    <content type="html"><![CDATA[<p>C# の using ステートメント、普通は変数の初期化とか new とかをまとめてやるものだと思ってたんですが、
某プロジェクトでusing文をこんな感じで使っているのを見かけました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">hoge</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Hoge</span><span class="p">();</span>
</span><span class='line'><span class="n">using</span><span class="p">(</span><span class="n">hoge</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// using( var hoge = new Hoge() ) { ならよく見る</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>見慣れない書き方だったので、本当にリソース解放が行われているのか不安・・・。
リソース解放が行われているのか調べてみました。</p>

<!-- More -->


<h2>まずは結論</h2>

<ul>
<li>リソース解放自体は行われているので、ちゃんと書いてあれば問題なし</li>
<li>しかしエラーをコンパイル時に見つけられない場合があるので非推奨</li>
</ul>


<h2>逆アセンブルして調べてみた</h2>

<p>コンパイル結果見ればちゃんとリソース解放されているかわかるよね！
ってことでバイナリを逆アセンブルして調べてみました。</p>

<h3>サンプルコード</h3>

<p>検証に使ったのはこんなコード。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">UsingTest</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">MainClass</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span> <span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">sr</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamReader</span> <span class="p">(</span><span class="s">&quot;hoge.txt&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="s">&quot;Hoge: {0}&quot;</span><span class="p">,</span> <span class="n">sr</span><span class="p">.</span><span class="n">ReadLine</span> <span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>僕はMac使いに転向したので、Monoを使います。
<code>mcs</code>を使ってコンパイル、<code>monodis</code> ってのを使うとILを見れるらしいです。
Windowsだったら .NET Framework SDK に <code>ildasm</code> ってのが付属してるので、それで見れるはず。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mcs UsingTest.cs
</span><span class='line'>monodis UsingTest.exe
</span></code></pre></td></tr></table></div></figure>


<p>標準出力にILが吐かれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.assembly extern mscorlib
</span><span class='line'>// ... 中略 ...
</span><span class='line'>.namespace UsingTest
</span><span class='line'>{
</span><span class='line'>  .class private auto ansi beforefieldinit MainClass
</span><span class='line'>       extends [mscorlib]System.Object
</span><span class='line'>  {
</span><span class='line'>
</span><span class='line'>    // method line 1
</span><span class='line'>    .method public hidebysig specialname rtspecialname
</span><span class='line'>           instance default void '.ctor' ()  cil managed
</span><span class='line'>    {
</span><span class='line'>        // Method begins at RVA 0x2050
</span><span class='line'>  // Code size 7 (0x7)
</span><span class='line'>  .maxstack 8
</span><span class='line'>  IL_0000:  ldarg.0
</span><span class='line'>  IL_0001:  call instance void object::'.ctor'()
</span><span class='line'>  IL_0006:  ret
</span><span class='line'>    } // end of method MainClass::.ctor
</span><span class='line'>
</span><span class='line'>    // method line 2
</span><span class='line'>    .method public static hidebysig
</span><span class='line'>           default void Main (string[] args)  cil managed
</span><span class='line'>    {
</span><span class='line'>        // Method begins at RVA 0x2058
</span><span class='line'>  .entrypoint
</span><span class='line'>  // Code size 29 (0x1d)
</span><span class='line'>  .maxstack 2
</span><span class='line'>  .locals init (
</span><span class='line'>      class [mscorlib]System.IO.StreamReader  V_0)
</span><span class='line'>      IL_0000:  nop
</span><span class='line'>      IL_0001:  ldstr "hoge.txt"
</span><span class='line'>      IL_0006:  newobj instance void class [mscorlib]System.IO.StreamReader::'.ctor'(string)
</span><span class='line'>      IL_000b:  stloc.0
</span><span class='line'>      IL_000c:  ldstr "Hoge: {0}"
</span><span class='line'>      IL_0011:  ldloc.0
</span><span class='line'>      IL_0012:  callvirt instance string class [mscorlib]System.IO.TextReader::ReadLine()
</span><span class='line'>      IL_0017:  call void class [mscorlib]System.Console::WriteLine(string, object)
</span><span class='line'>      IL_001c:  ret
</span><span class='line'>    } // end of method MainClass::Main
</span><span class='line'>
</span><span class='line'>  } // end of class UsingTest.MainClass
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Disposeが呼ばれてない！
リソース解放されてないぞ！！</p>

<h3>usingと一緒に初期化してみる</h3>

<p>usingステートメントを使って解放処理をしてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">sr</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamReader</span> <span class="p">(</span><span class="s">&quot;hoge.txt&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="s">&quot;Hoge: {0}&quot;</span><span class="p">,</span> <span class="n">sr</span><span class="p">.</span><span class="n">ReadLine</span> <span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Code size 49 (0x31)
</span><span class='line'>.maxstack 2
</span><span class='line'>.locals init (
</span><span class='line'>    class [mscorlib]System.IO.StreamReader    V_0)
</span><span class='line'>IL_0000:  nop
</span><span class='line'>IL_0001:  ldstr "hoge.txt"
</span><span class='line'>IL_0006:  newobj instance void class [mscorlib]System.IO.StreamReader::'.ctor'(string)
</span><span class='line'>IL_000b:  stloc.0
</span><span class='line'>.try { // 0
</span><span class='line'>  L_000c:  nop
</span><span class='line'>  IL_000d:  ldstr "Hoge: {0}"
</span><span class='line'>  IL_0012:  ldloc.0
</span><span class='line'>  IL_0013:  callvirt instance string class [mscorlib]System.IO.TextReader::ReadLine()
</span><span class='line'>  IL_0018:  call void class [mscorlib]System.Console::WriteLine(string, object)
</span><span class='line'>  IL_001d:  nop
</span><span class='line'>  IL_001e:  leave IL_0030
</span><span class='line'>
</span><span class='line'>} // end .try 0
</span><span class='line'>finally { // 0
</span><span class='line'>  IL_0023:  ldloc.0
</span><span class='line'>  IL_0024:  brfalse IL_002f
</span><span class='line'>
</span><span class='line'>  IL_0029:  ldloc.0
</span><span class='line'>  IL_002a:  callvirt instance void class [mscorlib]System.IDisposable::Dispose()
</span><span class='line'>  IL_002f:  endfinally
</span><span class='line'>} // end handler 0
</span><span class='line'>IL_0030:  ret
</span><span class='line'>} // end of method MainClass::Main</span></code></pre></td></tr></table></div></figure>


<p>自動的に try-finall節が作られ、その中でDisposeが呼ばれています。(たぶん。ILよくわかんないけど)</p>

<h3>usingでは初期化しない</h3>

<p>次にusingの外で初期化</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">sr</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamReader</span> <span class="p">(</span><span class="s">&quot;hoge.txt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">using</span> <span class="p">(</span><span class="n">sr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="s">&quot;Hoge: {0}&quot;</span><span class="p">,</span> <span class="n">sr</span><span class="p">.</span><span class="n">ReadLine</span> <span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Code size 51 (0x33)
</span><span class='line'>.locals init (
</span><span class='line'>    class [mscorlib]System.IO.StreamReader V_0,
</span><span class='line'>    class [mscorlib]System.IO.StreamReader V_1)
</span><span class='line'>IL_0000:  nop
</span><span class='line'>IL_0001:  ldstr "hoge.txt"
</span><span class='line'>IL_0006:  newobj instance void class [mscorlib]System.IO.StreamReader::'.ctor'(string)
</span><span class='line'>IL_000b:  stloc.0
</span><span class='line'>IL_000c:  ldloc.0
</span><span class='line'>IL_000d:  stloc.1
</span><span class='line'>.try { // 0
</span><span class='line'>  IL_000e:  nop
</span><span class='line'>  IL_000f:  ldstr "Hoge: {0}"
</span><span class='line'>  IL_0014:  ldloc.0
</span><span class='line'>  IL_0015:  callvirt instance string class [mscorlib]System.IO.TextReader::ReadLine()
</span><span class='line'>  IL_001a:  call void class [mscorlib]System.Console::WriteLine(string, object)
</span><span class='line'>  IL_001f:  nop
</span><span class='line'>  IL_0020:  leave IL_0032
</span><span class='line'>
</span><span class='line'>} // end .try 0
</span><span class='line'>finally  { // 0
</span><span class='line'>  IL_0025:  ldloc.1
</span><span class='line'>  IL_0026:  brfalse IL_0031
</span><span class='line'>
</span><span class='line'>  IL_002b:  ldloc.1
</span><span class='line'>  IL_002c:  callvirt instance void class [mscorlib]System.IDisposable::Dispose()
</span><span class='line'>  IL_0031:  endfinally
</span><span class='line'>} // end handler 0
</span><span class='line'>IL_0032:  ret</span></code></pre></td></tr></table></div></figure>


<p>お、ちゃんとDispose呼ばれてるみたい！
リソース解放はされてますね。</p>

<p>上のILをよく見ると、ローカル変数が２つ定義されています。
どうやらusingの中と外では同じ<code>sr</code>を指定しても別変数として扱われているようです。
そのためにコピーするコードが追加されているので、コードサイズが2byteほど増えてます。</p>

<h3>ブロックの外でインタンスを使う</h3>

<p><code>sr</code> のスコープは<code>Main</code>メソッドの中全体なので、usingのあとに<code>sr</code> をいじってもコンパイルは通ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">sr</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamReader</span> <span class="p">(</span><span class="s">&quot;hoge.txt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">using</span> <span class="p">(</span><span class="n">sr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="s">&quot;Hoge: {0}&quot;</span><span class="p">,</span> <span class="n">sr</span><span class="p">.</span><span class="n">ReadLine</span> <span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="s">&quot;Hoge: {0}&quot;</span><span class="p">,</span> <span class="n">sr</span><span class="p">.</span><span class="n">ReadLine</span> <span class="p">());</span> <span class="c1">// 例外を吐いて死ぬ</span>
</span></code></pre></td></tr></table></div></figure>


<p>しかし、最後の行で例外を吐いて死にます。
使えるけど使うと死ぬインスタンスが残ってるの気持ち悪いですね・・・。</p>

<h2>再び結論</h2>

<p>ちゃんと Dispose は呼ばれるので、usingを抜けたところでリソース解放は行われます。
(たった2byteだけど)意味の無いILが生成されたり、コンパイル時のチェックがされなかったり、
あんまりいいことが無いので積極的に使う理由はないですね。</p>

<h2>SEE ALSO</h2>

<p>ちゃんとドキュメントに書いてあった。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/yh598w02.aspx">using ステートメント (C# リファレンス)</a></li>
</ul>


<blockquote><p>リソース オブジェクトをインスタンス化して、変数を using ステートメントに渡すことは可能ですが、これはベスト プラクティスではありません。
You can instantiate the resource object and then pass the variable to the using statement, but this is not a best practice.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# でお手軽にMessagePack解析！]]></title>
    <link href="http://shogo82148.github.io/blog/2014/05/25/mini-message-pack/"/>
    <updated>2014-05-25T01:38:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/05/25/mini-message-pack</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/shogo82148/MiniMessagePack">MiniMessagePack.cs</a>ってのを作った。
C#のプロジェクトにファイルひとつ導入するだけで、お手軽にMessagePackの解析ができます。</p>

<!-- More -->


<h2>なんで作ったの？</h2>

<p><a href="https://gist.github.com/darktable/1411710">MiniJSON</a> の置き換えが目的です。
とあるUnityプロジェクトでMB単位のJSONをパースする箇所があってですね・・・
パースにはMiniJSONを使っているのですが、さすがに対象がでかすぎて重たい。
そこでMessagePackへの置き換えを検討してみたわけです。</p>

<p>もちろん C# で動く MessagePack のパーサはすでにあって、
<a href="https://github.com/msgpack/msgpack-cli">messagepack-cli</a>とか<a href="https://github.com/southwudang/msgpack-unity">messagepack-unity</a>とか見つけました。
しかし、Unityのちょっと古いMonoで動かすためにちょっとゴニョゴニョしないといけなかったり、
MiniJSON との互換性を取るためにもゴニョゴニョしないといけなかったり(実際やってみたらキャストが大量に失敗して辛かった・・・)、
今回の用途にはちょっと高機能かなーと思ったので作っちゃいました！</p>

<h2>つかいかた</h2>

<h3>デコードする</h3>

<p><code>byte</code>の配列を渡すとパースして返してくれます。
配列は<code>List&lt;object&gt;</code>で、マップは<code>Dictionary&lt;string, object&gt;</code>になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">MiniMessagePack</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// it means {&quot;compact&quot;:true,&quot;schema&quot;:0} in JSON</span>
</span><span class='line'><span class="kt">var</span> <span class="n">msgpack</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="p">[]</span> <span class="p">{</span>
</span><span class='line'>    <span class="m">0</span><span class="n">x82</span><span class="p">,</span> <span class="m">0</span><span class="n">xa7</span><span class="p">,</span> <span class="m">0</span><span class="n">x63</span><span class="p">,</span> <span class="m">0</span><span class="n">x6f</span><span class="p">,</span> <span class="m">0</span><span class="n">x6d</span><span class="p">,</span> <span class="m">0</span><span class="n">x70</span><span class="p">,</span> <span class="m">0</span><span class="n">x61</span><span class="p">,</span> <span class="m">0</span><span class="n">x63</span><span class="p">,</span> <span class="m">0</span><span class="n">x74</span><span class="p">,</span> <span class="m">0</span><span class="n">xc3</span><span class="p">,</span>
</span><span class='line'>  <span class="m">0</span><span class="n">xa6</span><span class="p">,</span> <span class="m">0</span><span class="n">x73</span><span class="p">,</span> <span class="m">0</span><span class="n">x63</span><span class="p">,</span> <span class="m">0</span><span class="n">x68</span><span class="p">,</span> <span class="m">0</span><span class="n">x65</span><span class="p">,</span> <span class="m">0</span><span class="n">x6d</span><span class="p">,</span> <span class="m">0</span><span class="n">x61</span><span class="p">,</span> <span class="m">0</span><span class="n">x00</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">packer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MiniMessagePacker</span> <span class="p">();</span>
</span><span class='line'><span class="kt">object</span> <span class="n">unpacked_data</span> <span class="p">=</span> <span class="n">packer</span><span class="p">.</span><span class="n">Unpack</span> <span class="p">(</span><span class="n">msgpack</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">unpacked_data = new Dictionary&lt;string, object&gt; {</span>
</span><span class='line'><span class="cm">    { &quot;compact&quot;, true },</span>
</span><span class='line'><span class="cm">    { &quot;schema&quot;, 0},</span>
</span><span class='line'><span class="cm">};</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h3>エンコードする</h3>

<p>オブジェクトを渡すと MessagePack にエンコードして返してくれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">MiniMessagePack</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">unpacked_data</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">{</span> <span class="s">&quot;compact&quot;</span><span class="p">,</span> <span class="k">true</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="s">&quot;schema&quot;</span><span class="p">,</span> <span class="m">0</span><span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">packer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MiniMessagePacker</span> <span class="p">();</span>
</span><span class='line'><span class="n">bytep</span><span class="p">[]</span> <span class="n">msgpack</span> <span class="p">=</span> <span class="n">packer</span><span class="p">.</span><span class="n">Pack</span> <span class="p">(</span><span class="n">unpacked_data</span><span class="p">);</span>
</span><span class='line'><span class="c1">// msgpack = new byte[] { 0x82, 0xa7, ...};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>制限事項</h2>

<p>MiniJSON との互換性を取るために、色々と制限事項があります。</p>

<ul>
<li>デコード時、整数型は全て<code>long</code>型

<ul>
<li>整数の大きさに関係なく全て<code>long</code>型になります</li>
<li>符号なし64bit整数型も<code>long</code>として扱われるので、表現できる範囲が狭くなっていることに注意してください</li>
</ul>
</li>
<li>デコード時、浮動小数点型は全て<code>double</code>型

<ul>
<li><code>float</code>も<code>double</code>として扱われます(拡張される方向への変換だから問題ないとは思うけど)</li>
</ul>
</li>
<li>デコード時、マップ型のキーは文字列にキャストされます

<ul>
<li>MessagePackの仕様にはキーの型に制限が無いっぽい(？)けど、扱えるのは文字列の場合のみです</li>
</ul>
</li>
<li>Extended は今のところ扱えません</li>
</ul>


<h2>ちょっとだけ使ってみた結果</h2>

<p>正確なベンチマークとかはとってないのですが、
実際のプロジェクトに組み込んでみた結果、MiniJSONとくらべて約2倍の速さでパースできました！</p>

<p>MiniJSON を使っているプロジェクトであれば簡単に導入できるはずなので、ぜひ試してみてみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[travis-ciでC++11のテストをする]]></title>
    <link href="http://shogo82148.github.io/blog/2014/05/22/use-cpp11-in-travis/"/>
    <updated>2014-05-22T23:34:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/05/22/use-cpp11-in-travis</id>
    <content type="html"><![CDATA[<p>今 C++ を書くなら C++11 だよね！と言うわけでC++11の新機能を使ってコードを書いたので、
<a href="https://travis-ci.org/">travis-cli</a>でテストしたらFAIL。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ g++ -std=gnu++0x hogehoge.cpp
</span><span class='line'>sorry, unimplemented: non-static data member initializers</span></code></pre></td></tr></table></div></figure>


<p>unimplemented・・・だと・・・。</p>

<p>頑張って動かしてみたのでメモ。</p>

<!-- More -->


<h2>autoconf の設定をする</h2>

<p>autotoolsを使っていたので、
C++11 に対応しているかのチェックを追加しておきます。</p>

<p><a href="https://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx_11.html">ax_cxx_compile_stdcxx_11.m4</a>をダウンロードし、
configure.ac でm4ファイルをダウンロードするようにしておきます。</p>

<figure class='code'><figcaption><span>configure.ac</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>m4_include([m4/ax_cxx_compile_stdcxx_11.m4])
</span><span class='line'>AX_CXX_COMPILE_STDCXX_11
</span><span class='line'>AC_LANG([C++])</span></code></pre></td></tr></table></div></figure>


<h2>travis.yaml を設定する</h2>

<p>ぐぐったら<a href="http://stackoverflow.com/questions/22111549/travis-ci-with-clang-3-4-and-c11">stackoverflowでやり方を見つけました</a>。
標準でテストに使われるコンパイラは古いようなので、新しいバージョンのものをインストールするように設定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>language: cpp
</span><span class='line'>
</span><span class='line'>compiler:
</span><span class='line'>  - clang
</span><span class='line'>  - gcc
</span><span class='line'>
</span><span class='line'>before_install:
</span><span class='line'>  # g++4.8.1
</span><span class='line'>  - if [ "$CXX" == "g++" ]; then sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test; fi
</span><span class='line'>
</span><span class='line'>  # clang 3.4
</span><span class='line'>  - if [ "$CXX" == "clang++" ]; then sudo add-apt-repository -y ppa:h-rayflood/llvm; fi
</span><span class='line'>
</span><span class='line'>  - sudo apt-get update -qq
</span><span class='line'>
</span><span class='line'>install:
</span><span class='line'>  # g++4.8.1
</span><span class='line'>  - if [ "$CXX" = "g++" ]; then sudo apt-get install -qq g++-4.8; fi
</span><span class='line'>  - if [ "$CXX" = "g++" ]; then export CXX="g++-4.8"; fi
</span><span class='line'>
</span><span class='line'>  # clang 3.4
</span><span class='line'>  - if [ "$CXX" == "clang++" ]; then sudo apt-get install --allow-unauthenticated -qq clang-3.4; fi
</span><span class='line'>  - if [ "$CXX" == "clang++" ]; then export CXX="clang++-3.4"; fi</span></code></pre></td></tr></table></div></figure>


<p>これで、clangとgccでテストが走るようになります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Test を使ってC++のテストしてみた]]></title>
    <link href="http://shogo82148.github.io/blog/2014/05/18/test-with-google-test/"/>
    <updated>2014-05-18T21:24:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/05/18/test-with-google-test</id>
    <content type="html"><![CDATA[<p>C++ なライブラリを書こうと思い、C++のテストってどうやるんだろうと調べたメモ。
テストフレームワークとして <a href="https://code.google.com/p/googletest/">Google C++ Testing Framework</a> を使用、
コンパイルにはautotoolを使ってtravis-ciでテストするところまでやってみました。</p>

<p>やってみた結果→
<a href="https://github.com/shogo82148/cpp-test">cpp-test</a></p>

<!-- More -->


<h2>Testを書く</h2>

<p>Google Test の<a href="http://opencv.jp/googletestdocs/primer.html">入門ガイド</a>に書いてあったテストをコピペしてきました。</p>

<figure class='code'><figcaption><span>test/factorial.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &quot;gtest/gtest.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">Factorial</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">TEST</span><span class="p">(</span><span class="n">FractionTest</span><span class="p">,</span> <span class="n">hoge</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">Factorial</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>    <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">Factorial</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>    <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="n">Factorial</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span>
</span><span class='line'>    <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="mi">40320</span><span class="p">,</span> <span class="n">Factorial</span><span class="p">(</span><span class="mi">8</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>テストの対象となる関数はこちら。</p>

<figure class='code'><figcaption><span>src/factorial.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// calculate 1 * 2 * 3 * ... * n</span>
</span><span class='line'><span class="kt">int</span> <span class="n">Factorial</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span> <span class="o">*</span> <span class="n">Factorial</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>テスト用実行ファイルのビルドをする</h2>

<p>せっかくならしっかりしたものをつくろうと、Autotoolsを使ってビルドしてみました。
<a href="http://www.spa.is.uec.ac.jp/~kinuko/slidemaker/autotools/">新しめの Autotools (Autoconf&amp;Automake) を使ってみよう</a> を参考に
Makefileのひな形を書いていきます。</p>

<p><a href="http://kikuchy.hatenablog.com/entry/2014/01/12/Google_Test_%E3%81%A8_Travice_CI_%E3%81%A7%E3%80%81C%E8%A8%80%E8%AA%9E%E3%81%A7%E6%9B%B8%E3%81%84%E3%81%9F%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E7%B6%99%E7%B6%9A%E7%9A%84%E3%82%A4">Google Test と Travice CI で、C言語で書いたライブラリの継続的インテグレーションをしてみた結果</a>
ではGoogle Testをシステムにインストールしていますが、
システムへのインストールは推奨されていないのと、手元で動かすのが面倒だったので
<a href="https://code.google.com/p/googletest/wiki/V1_6_AdvancedGuide#Fusing_Google_Test_Source_Files">Fused Source File</a>
を作ってGoogle Testを自分のプロジェクトに同梱しちゃいました。</p>

<p>Google Testのプロジェクトで<code>python fuse_gtest_files.py OUTPUT_DIR</code> を実行すると
<code>gtest/gtest.h</code> と <code>gtest/gtest-all.cc</code> が作られるので、
この２つのファイルを自分のプロジェクトにコピーしてきます。
あとは Makefile.am でこれらのファイルをコンパイル＆リンクするように設定します。
自分のプロジェクトでは使っていなくても、Google Test のコンパイルには pthread が必要なので忘れずに。
(clangでは無くても動くらしく、clangで試していたらgccで動かなくてちょっとはまった)</p>

<figure class='code'><figcaption><span>test/Makefile.am</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nv">TESTS</span> <span class="o">=</span> factorial_test
</span><span class='line'><span class="nv">check_PROGRAMS</span> <span class="o">=</span> factorial_test
</span><span class='line'><span class="nv">factorial_test_SOURCES</span> <span class="o">=</span> factorial.cpp gtest_main.cc gtest-all.cc
</span><span class='line'><span class="nv">factorial_test_LDADD</span> <span class="o">=</span> ../src/libfactorial.a
</span><span class='line'><span class="nv">factorial_test_LDFLAGS</span> <span class="o">=</span> -pthread
</span></code></pre></td></tr></table></div></figure>


<p><code>make check</code> でテストが走るようになります。
Google Test のソースがプロジェクトに含まれているので、
新しくプログラムをインストールしたり、特別な設定をしたりといったことは必要ありません。</p>

<h2>travis-ci でテストする</h2>

<p>travisのC++のテストは、標準で<code>./configure &amp;&amp; make &amp;&amp; make test</code>を実行してくれますが、
autotoolsで作ったMakefileだと上手く動かないので以下のように.travis.ymlを設定します。</p>

<figure class='code'><figcaption><span>.travis.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cpp</span>
</span><span class='line'><span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">autoreconf -fi &amp;&amp; ./configure &amp;&amp; make &amp;&amp; make check</span>
</span></code></pre></td></tr></table></div></figure>


<p>gnuなプロジェクトのお作法にしたがって、以下のように書き換えてあります。</p>

<ul>
<li>configureスクリプトはautotoolsで自動生成されるファイルなのでレポジトリには入れず、テスト前に生成する</li>
<li>make check でテストが走るのが普通らしい</li>
</ul>


<p>configureスクリプトを自動生成するのでautoconfのバージョンに注意してください。
autoconfは2014/05/18現在2.69が最新版ですが、travis-ciは2.68がインストールされているようです。
最新版のautoconfでconfigure.acのひな形を作ると<code>AC_PREREQ([2.69])</code>のように必要バージョンが設定されてしまい、
テストのときにconfigureファイルを作れなくて死にます。
バージョン指定を削除するか、古いバージョンに書き換えましょう。</p>

<p>C++のお作法がよくわかっていないですが、ちょっとずつ頑張っていきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis::Fast 0.07 をリリースしました！]]></title>
    <link href="http://shogo82148.github.io/blog/2014/05/17/redis-fast-0-dot-07-released/"/>
    <updated>2014-05-17T16:27:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/05/17/redis-fast-0-dot-07-released</id>
    <content type="html"><![CDATA[<p><a href="https://metacpan.org/release/Redis-Fast">Redis::Fast 0.07</a> をリリースしました。
現時点での最新バージョンである Redis.pm 1.974 とコンパチブルになります。</p>

<!-- More -->


<p>主な修正点は以下の通りです</p>

<ul>
<li>Redis Sentinel 対応</li>
<li>トランザクション内での再接続禁止</li>
<li>再接続にDB選択し直し</li>
</ul>


<h2>Redis Sentinel 対応</h2>

<p>Redis Sentinel というのは自動フェールオーバーの仕組みらしいです。
(ソースはコピペしたきただけで仕組みはあまり理解していない)
どんなものかは本家ドキュメントや実際に検証してみた人の記事をご参照ください。</p>

<ul>
<li><a href="http://redis.io/topics/sentinel">Redis Sentinel Documentation</a></li>
<li><a href="http://chrone.hatenablog.com/entry/2014/02/28/212616">Redis 2.8 の Sentinel の動きを検証してみた</a></li>
<li><a href="http://blog.kenjiskywalker.org/blog/2013/01/24/redis-sentiel-howto/">Redis Sentinelを動かしてみた</a></li>
</ul>


<p>前から移植作業は進めてたのですが、本家 Redis.pm でもテストがコケたりしてちょっと不安だったのでリリースを見送ってました。
今日 Redis.pm の安定版がリリースされたのでこっちも追従しますよ！！</p>

<p>コネクションを作るときに <code>sentinels</code> を渡すと Redis Sentinel から接続情報を取ってきてくれます。
一緒に <code>reconnect</code> を設定しておいてあげると、Masterに何かあった時に接続情報を再取得→
自動的に Slave へフェールオーバーしてくれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">Fast</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$redis</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Fast</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span>
</span><span class='line'>    <span class="n">sentinels</span> <span class="o">=&gt;</span> <span class="p">[</span> <span class="s">&#39;127.0.0.1:26379&#39;</span> <span class="p">],</span>
</span><span class='line'>  <span class="n">service</span> <span class="o">=&gt;</span> <span class="s">&#39;mymaster&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">reconnect</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>トランザクション内での再接続禁止</h2>

<p>Redisにも簡単な<a href="http://redis.io/topics/transactions">トランザクション機能</a>があって、
複数の命令を同時に実行することができます。
トランザクション中に再接続が発生するとトランザクションがリセットされてしまうので、
接続前の命令を再投入する必要があるのですが、Redis.pm/Redis::Fastの再接続処理はそこまで面倒を見てくれません。
以前のバージョンではそこの面倒を見てくれないのに適当に処理してしまい、
トランザクションが中途半端なまま実行されてしました。</p>

<p>0.07 からはトランザクション内では再接続を行わずに例外を吐きます。
トランザクションを最初からやり直すなど、よしなに対応してください。</p>

<h2>再接続時にDB選択し直し</h2>

<p>一つのRedis-Serverが複数のデータベースを持てるようになっていて、
<a href="http://redis.io/commands/select">SELECT</a>コマンドを使って切り替え可能です。
今までのバージョンでは、SELECTコマンドでデータベースを切り替えていても、
再接続時にリセットされてしまう問題がありました。
0.07では再接続の中でSELECTを実行し直すので、再接続を気にする必要はありません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Androidのバイナリファイルを解析するgoのライブラリ]]></title>
    <link href="http://shogo82148.github.io/blog/2014/05/07/androidbinary/"/>
    <updated>2014-05-07T13:29:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/05/07/androidbinary</id>
    <content type="html"><![CDATA[<p>Androidのアプリの実態はzipファイルなのでunzipすれば簡単に中身を見ることができるわけですが、
開いてもバイナリファイルが入っているだけでよくわかりません。
AndroidSDKに付属しているaaptというツールを使えば読めるんだけどインストールが大変で苦しんでいる人がいたので、
お手軽に解析できるgolangのライブラリを書いてみました。</p>

<!-- More -->


<h2>使い方</h2>

<h3>go getしてくる</h3>

<p><a href="https://github.com/shogo82148/androidbinary">githubのレポジトリ</a> からダウンロードしてきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>go get github.com/shogo82148/androidbinary
</span></code></pre></td></tr></table></div></figure>


<h3>AndroidManifest.xmlを解析する</h3>

<p><code>io.ReaderAt</code>インターフェースを満たすオブジェクトを<code>androidbinary.NewXMLFile</code>に渡すと解析してくれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">f</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;AndroidManifest.xml&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">xmlFile</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">androidbinary</span><span class="p">.</span><span class="nx">NewXMLFile</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span><span class='line'><span class="nx">reader</span> <span class="o">:=</span> <span class="nx">xmlFile</span><span class="p">.</span><span class="nx">Reader</span><span class="p">()</span>
</span><span class='line'><span class="c1">// reader を読むと普通のXMLファイルとして読める</span>
</span></code></pre></td></tr></table></div></figure>


<h3>resources.arscを解析する</h3>

<p>アプリ名などの設定はAndroidManifest.xmlには直接書かれておらず、
リソースファイルに書いてあることがほとんどです(開発者がよほどものぐさでなければ)。
リソースの情報はapk内のresources.arscに書かれているので、
このファイルを読む機能もついてます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">f</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;resources.arsc&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">tableFile</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">androidbinary</span><span class="p">.</span><span class="nx">NewTableFile</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ID 0x7F040000 に対応するリソースを読む</span>
</span><span class='line'><span class="nx">config</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">ResTableConfig</span><span class="p">{}</span>
</span><span class='line'><span class="nx">val</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">tableFile</span><span class="p">.</span><span class="nx">GetResource</span><span class="p">(</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">ResId</span><span class="p">(</span><span class="mh">0x7f040000</span><span class="p">),</span> <span class="nx">config</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>アプリ名はロケールによって変わったりするので、
<code>config</code>で設定できます。
例えば日本語の名前を取得したい場合はこんな感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// ID 0x7F040000 に対応するリソース(日本語)を読む</span>
</span><span class='line'><span class="nx">config</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">ResTableConfig</span><span class="p">{}</span>
</span><span class='line'><span class="nx">config</span><span class="p">.</span><span class="nx">Language</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="sc">&#39;j&#39;</span>
</span><span class='line'><span class="nx">config</span><span class="p">.</span><span class="nx">Language</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="sc">&#39;a&#39;</span>
</span><span class='line'><span class="nx">val</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">tableFile</span><span class="p">.</span><span class="nx">GetResource</span><span class="p">(</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">ResId</span><span class="p">(</span><span class="mh">0x7f040000</span><span class="p">),</span> <span class="nx">config</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>サンプルコード</h3>

<p>apkを解析してアプリの日本語名を取得する例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;archive/zip&quot;</span>
</span><span class='line'>  <span class="s">&quot;bytes&quot;</span>
</span><span class='line'>  <span class="s">&quot;encoding/xml&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/shogo82148/androidbinary&quot;</span>
</span><span class='line'>  <span class="s">&quot;io/ioutil&quot;</span>
</span><span class='line'>  <span class="s">&quot;strconv&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">XMLManifest</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">XMLName</span>      <span class="nx">xml</span><span class="p">.</span><span class="nx">Name</span>          <span class="s">`xml:&quot;manifest&quot;`</span>
</span><span class='line'>  <span class="nx">Applications</span> <span class="p">[]</span><span class="o">*</span><span class="nx">XMLApplication</span> <span class="s">`xml:&quot;application&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">XMLApplication</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">XMLName</span> <span class="nx">xml</span><span class="p">.</span><span class="nx">Name</span> <span class="s">`xml:&quot;application&quot;`</span>
</span><span class='line'>  <span class="nx">Label</span>   <span class="kt">string</span>   <span class="s">`xml:&quot;http://schemas.android.com/apk/res/android label,attr&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">r</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">zip</span><span class="p">.</span><span class="nx">OpenReader</span><span class="p">(</span><span class="s">&quot;sample.apk&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// read manifest and resource</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">xmlFile</span> <span class="o">*</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">XMLFile</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">tableFile</span> <span class="o">*</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">TableFile</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">f</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">r</span><span class="p">.</span><span class="nx">File</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Name</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;AndroidManifest.xml&quot;</span><span class="p">:</span>
</span><span class='line'>          <span class="nx">rc</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Open</span><span class="p">()</span>
</span><span class='line'>          <span class="nx">buf</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadAll</span><span class="p">(</span><span class="nx">rc</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">xmlFile</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">androidbinary</span><span class="p">.</span><span class="nx">NewXMLFile</span><span class="p">(</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">NewReader</span><span class="p">(</span><span class="nx">buf</span><span class="p">))</span>
</span><span class='line'>          <span class="nx">rc</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;resources.arsc&quot;</span><span class="p">:</span>
</span><span class='line'>          <span class="nx">rc</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Open</span><span class="p">()</span>
</span><span class='line'>          <span class="nx">buf</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadAll</span><span class="p">(</span><span class="nx">rc</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">tableFile</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">androidbinary</span><span class="p">.</span><span class="nx">NewTableFile</span><span class="p">(</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">NewReader</span><span class="p">(</span><span class="nx">buf</span><span class="p">))</span>
</span><span class='line'>          <span class="nx">rc</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// parse xml</span>
</span><span class='line'>  <span class="nx">decoder</span> <span class="o">:=</span> <span class="nx">xml</span><span class="p">.</span><span class="nx">NewDecoder</span><span class="p">(</span><span class="nx">xmlFile</span><span class="p">.</span><span class="nx">Reader</span><span class="p">())</span>
</span><span class='line'>  <span class="nx">xmlManifest</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">XMLManifest</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">decoder</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="nx">xmlManifest</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// get application label</span>
</span><span class='line'>  <span class="nx">labelId</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">ParseInt</span><span class="p">(</span><span class="nx">xmlManifest</span><span class="p">.</span><span class="nx">Applications</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Label</span><span class="p">[</span><span class="mi">3</span><span class="p">:],</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">config</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">ResTableConfig</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">config</span><span class="p">.</span><span class="nx">Language</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="sc">&#39;j&#39;</span>
</span><span class='line'>  <span class="nx">config</span><span class="p">.</span><span class="nx">Language</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="sc">&#39;a&#39;</span>
</span><span class='line'>  <span class="nx">label</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">tableFile</span><span class="p">.</span><span class="nx">GetResource</span><span class="p">(</span><span class="nx">androidbinary</span><span class="p">.</span><span class="nx">ResId</span><span class="p">(</span><span class="nx">labelId</span><span class="p">),</span> <span class="nx">config</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Application Name:&quot;</span><span class="p">,</span> <span class="nx">label</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>エラー処理とか完全に省いているので上手く補ってください。</p>

<h2>制限事項</h2>

<p>GW中頑張ったけど途中で力尽きたので、今のところ以下のような制限があります。</p>

<ul>
<li>リソース名を扱えない

<ul>
<li>普通AndroidManifest.xmlにリソースを埋め込むときは<code>@string/app_name</code>みたいな名前を埋め込みますが、リソースファイルとの連携機能がないため<code>@0x7F04000000</code>のような数値を返します</li>
<li>resources.arsc からリソース名を読み取ったり、リソース名からリソースを取得する機能はありません</li>
</ul>
</li>
<li>configの設定が一部しか対応していない

<ul>
<li>ロケール、画面サイズ、SDKバージョン等にしか対応してません</li>
<li>IMEの設定や画面の細かいオプションとかも指定はできるけど、<code>GetResource</code>が解釈してくれないので誤った結果を返すかも</li>
</ul>
</li>
<li>リソースタイプ

<ul>
<li>文字列、整数、ブーリアン値にしか対応してません</li>
<li>string-array とかいうのとかあったりするけど、そんなの知らない</li>
</ul>
</li>
</ul>


<p>いろいろ制限はありますが、アプリ名を読み取ったり、パーミッションを解析するくらいはできるんじゃないですかね。
golang初心者なのでイケてないところがあったら教えて下さい。</p>

<h2>参考</h2>

<ul>
<li><a href="http://dsas.blog.klab.org/archives/52011424.html">エンコードされた AndroidManifest.xml を読む</a></li>
<li><a href="https://gist.github.com/cielavenir/4365521">ruby_apk Android::Resource can relate string pool (partially)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tweepyの2.3.0が出ました]]></title>
    <link href="http://shogo82148.github.io/blog/2014/04/27/tweepy-2-dot-3-0-released/"/>
    <updated>2014-04-27T21:51:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/04/27/tweepy-2-dot-3-0-released</id>
    <content type="html"><![CDATA[<p>Tweepyの2.3.0が出ました。
「<a href="http://shogo82148.github.io/blog/2014/04/18/tweepy-will-application-only-auth/">Tweepy が Application-only Authentication に対応します</a>」僕のprも取り込まれていて、
Application-only Authentication が標準で使えるようになりました。
というわけで、早速遊んでみます。</p>

<h2>Application-only Authenticationで遊ぶ</h2>

<p>使い方は「<a href="http://shogo82148.github.io/blog/2013/05/09/application-only-authentication-with-tweepy/">tweepyでApplication-only Authenticationしてみた</a>」のときとほぼ同じ。
Tweepy本体に取り込んでもらったので、名前空間がちょこっと変わったくらいです。
Consumer Key と Consumer Secretだけ設定すればいいので、簡単に使えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">tweepy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">codecs</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">stdin</span> <span class="o">=</span> <span class="n">codecs</span><span class="o">.</span><span class="n">getreader</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)(</span><span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="p">)</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">codecs</span><span class="o">.</span><span class="n">getwriter</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)(</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">CONSUMER_KEY</span> <span class="o">=</span> <span class="s">&#39;YOUR CONSUMER KEY&#39;</span>
</span><span class='line'><span class="n">CONSUMER_SECRET</span> <span class="o">=</span> <span class="s">&#39;YOUR CONSUMER SECRET&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">user_id</span> <span class="o">=</span> <span class="s">&quot;JO_RI&quot;</span>
</span><span class='line'>    <span class="n">auth</span> <span class="o">=</span> <span class="n">tweepy</span><span class="o">.</span><span class="n">AppAuthHandler</span><span class="p">(</span><span class="n">CONSUMER_KEY</span><span class="p">,</span> <span class="n">CONSUMER_SECRET</span><span class="p">)</span>
</span><span class='line'>    <span class="n">api</span> <span class="o">=</span> <span class="n">tweepy</span><span class="o">.</span><span class="n">API</span><span class="p">(</span><span class="n">auth</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">arg</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;id&#39;</span><span class="p">:</span> <span class="n">user_id</span><span class="p">,</span> <span class="s">&#39;include_rts&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>    <span class="n">user_statuses</span> <span class="o">=</span> <span class="n">tweepy</span><span class="o">.</span><span class="n">Cursor</span><span class="p">(</span><span class="n">api</span><span class="o">.</span><span class="n">user_timeline</span><span class="p">,</span> <span class="o">**</span><span class="n">arg</span><span class="p">)</span><span class="o">.</span><span class="n">items</span><span class="p">(</span><span class="mi">3200</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">user_status</span> <span class="ow">in</span> <span class="n">user_statuses</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">user_status</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tweepy が Application-only authentication に対応します]]></title>
    <link href="http://shogo82148.github.io/blog/2014/04/18/tweepy-will-application-only-auth/"/>
    <updated>2014-04-18T06:37:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/04/18/tweepy-will-application-only-auth</id>
    <content type="html"><![CDATA[<p>以前 「<a href="http://shogo82148.github.io/blog/2013/05/09/application-only-authentication-with-tweepy/">tweepyでApplication-only Authenticationしてみた</a>」で
書いたTweepyのAuthHandlerを本体に取り込んでもらいました。
リリースタイミングとかよくわかってないですが、次のリリースとかでApplication-only Authenticationを簡単に使えるようになります、たぶん。</p>

<p>(2014-04-27追記)
このprを取り込んだTweepy 2.3.0がリリースされました。早速遊んでみたのでこちらもどうぞ><a href="http://shogo82148.github.io/blog/2014/04/27/tweepy-2-dot-3-0-released/">Tweepyの2.3.0が出ました</a></p>

<!-- More -->


<h2>取り込まれるまでの経緯</h2>

<ul>
<li>「Application-only Authentication 対応しないの？」って質問は去年からあった(<a href="https://github.com/tweepy/tweepy/issues/318">tweepy#318</a>)</li>
<li>先日「ここに動くコード載ってるよ」と<a href="https://github.com/tweepy/tweepy/issues/318#issuecomment-40291735">僕の記事が紹介される</a></li>
<li>昨日の夕方「コントリビュートしてみない？」とブログやgithub経由で頼まれる</li>
<li>やるしか無い！と思って昨日のうちにpr作成</li>
<li>朝起きたら取り込まれてた</li>
</ul>


<p>日本語なんてマイナーな言語で記事が書いてあっても、読んでくれる人は読んでくれるんですね。
Tweepy は僕も何度か使ったことがあるので Issue とかみて開発状況をチェックしていたんですが、
見覚えのある名前が見えたときはびっくりしました。</p>

<p>ちょっとしたコードでも公開しておくといいことがあるよ、というお話でした。
最近ここも全然更新してないので、もっとアウトプットしていかないと・・・。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スパコンで約2時間36分かかったという、5×5の魔方陣の全解列挙を、おねえさんのコンピュータで試す]]></title>
    <link href="http://shogo82148.github.io/blog/2014/03/19/letscount-magic-square/"/>
    <updated>2014-03-19T18:26:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/03/19/letscount-magic-square</id>
    <content type="html"><![CDATA[<p>高校生がスパコンを使って5x5の魔方陣の全解を求めたというニュースをきっかけに、
魔方陣の全解列挙が流行っているようです。</p>

<ul>
<li><a href="http://www.ccs.tsukuba.ac.jp/pr/media/140228_press">高校生がスーパーコンピュータを使って5×5魔方陣の全解を求めることに成功(筑波大プレスリリース)</a></li>
<li><a href="http://blog.unfindable.net/archives/7179">スパコンで約2時間36分かかったという、5×5の魔方陣の全解列挙を、パソコンで試す（C++）</a></li>
</ul>


<p>「全解列挙」「数え上げ」「組み合わせ爆発」・・・そして整然とならんだこのマス目・・・
<a href="http://www.youtube.com/watch?v=Q4gTV4r0zRs">あのおねえさん</a>を思い出しますね。</p>

<!-- More -->


<p>と、いうわけで、「<a href="http://shogo82148.github.io/letscount">おねえさんのコンピュータ</a>」の魔方陣版を作ってみました。</p>

<ul>
<li><a href="http://shogo82148.github.io/letscount-magic-square">おねえさんのコンピュータ(魔方陣編)</a></li>
</ul>


<p>「全解列挙をパソコンで試す」の記事と同じような感じで、頭の悪いコードをずらずらと書いてあります。
以下の様な特徴があります。</p>

<ul>
<li>マスを埋める順番はスパコンで求めたものをベース

<ul>
<li>ただし、対称な位置にあるマスを優先(反転・回転の検索を早い段階で打ち切るため)</li>
</ul>
</li>
<li>asm.js による最適化！

<ul>
<li>firefoxで特に高速に動作します</li>
<li>わかってはいたけど、asm.jsは人間の書くものではない</li>
</ul>
</li>
<li>WebWorkerを使った並列計算</li>
</ul>


<p>実はまだ5x5の計算結果を見てないのですが、
途中までの計算スピードから推測すると十数時間程度で計算が終わるかと・・・。
(Mac Book Air Mid 2012, 4並列)</p>

<p>コンパイルの手間が無いのでお手軽に試せます。
もっと速いマシンでやればすぐに結果がでてくると思うので、みなさんのレポートお待ちしています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[githubのタブサイズを変えるChrome拡張を作った]]></title>
    <link href="http://shogo82148.github.io/blog/2014/02/10/github-tab-change/"/>
    <updated>2014-02-10T08:01:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/02/10/github-tab-change</id>
    <content type="html"><![CDATA[<p>にゃんぱすー。
最近 C# のコードを見ることが多くなってきました。
開発はVSやMonoDevelop等のIDEを使っているのですが、
diffの確認程度ならgithub上で行っています。
しかし、github上の表示は崩れて非常に読みづらい・・・。</p>

<!-- More -->


<p>githubのコードプレビューはタブストップが8文字幅で表示されます。
しかし、有名ドコロのIDEはデフォルトがタブインデント、4文字幅で設定されているので、
どうしても表示が狂ってしまいます。
タブインデントではなくスペースインデントを使えば解決☆
なのですが、スペースインデントの中にタブインデントを混入する場合が多々あるので、僕は疲れました・・・。
混在したときのコードなんて、読めたものじゃないですよ。</p>

<p>そこで、githubのタブサイズを変更する Chrome拡張を作ってみました。
ユーザスタイルシートでもできるんですが、まあ、勉強を兼ねて。</p>

<ul>
<li><a href="https://chrome.google.com/webstore/detail/github-tab-change/ljioaacdegnnenakodladamafjodehnd">GithubTabChange</a></li>
</ul>


<p>インストール後、github上のレポジトリを開くと≡みたいなマークがURLの横に表示されます。
それをクリックでタブサイズの設定変更が可能です。
githubのプレビューの一斉設定だけでなく、
レポジトリ単位でタブサイズを切り替えることができます。</p>

<p>アイコンとか設定画面のデザインとかちゃんとしたものを作る気力はなかったので、
皆さんのprをお待ちしております。</p>

<ul>
<li><a href="https://github.com/shogo82148/GithubTabChange">GithubTabChange on github</a></li>
</ul>


<p>(これ作ってるときに、githubのHTMLソースの中にtab-size-8というクラスを見つけたのですが、実はどこかに隠し機能としてあるんですかね？)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis::Fast 0.06 released]]></title>
    <link href="http://shogo82148.github.io/blog/2014/02/01/redis-fast-0-dot-06-released/"/>
    <updated>2014-02-01T21:36:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/02/01/redis-fast-0-dot-06-released</id>
    <content type="html"><![CDATA[<p>こんにちは、もうすぐ17才と100ヶ月を迎えるいっちーです。
今朝、<a href="https://metacpan.org/release/Redis-Fast">Redis::Fast 0.06</a>をリリースしました。
主な変更点はメモリーリークの修正と、エラー発生時にSegmentation Faltで落ちる問題の修正です。</p>

<!-- More -->


<h2>メモリーリーク</h2>

<p>Redis::Fastをサブスクライバーモードで動作させると、メモリを無限に食い続ける問題をついに！ついに！修正しました。
原因は、一言で言ってしまえば、Perlのリファレンスカウントの扱いの勉強不足です・・・。</p>

<p>XSの中でPerlのオブジェクトを作るとき、プログラマが手動でリファレンスカウントを制御する必要があります。
とはいうものの、全てのオブジェクトのリファレンスカウントを制御するのは大変なので、
XSには「揮発性」という考え方があります。
<code>sv_2motral</code>を使って変数を揮発性に設定しておけば、よしななタイミングでオブジェクトを解放してくれます。
<a href="http://d.hatena.ne.jp/gfx/20100519/1274247355">gfx先生のブログ</a>にもあるように、
オブジェクト作成したら原則<code>sv_2motral</code>をつけるようにすれば、
メモリーリークはほとんどなくなるはずです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">SV</span> <span class="o">*</span> <span class="n">s</span> <span class="o">=</span> <span class="n">newSVpv</span><span class="p">(</span><span class="s">&quot;Hello World&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>  <span class="c1">// Perl の文字列オブジェクト</span>
</span><span class='line'><span class="n">sv_2motral</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="c1">// 揮発性にすることで、使われなくなったら自動的に解放してくれる</span>
</span></code></pre></td></tr></table></div></figure>


<p>この「よしななタイミング」をよく理解していなかったのでリークしてました・・・。
XSからオブジェクトへアクセスできなくなったときでないとオブジェクトを解放できないので、
揮発性のオブジェクトが実際に解放されるのは「XSで書かれた関数が終了してPerlに戻るとき」です。
メッセージを待ち続ける<code>wait_for_messages</code>関数は
(タイムアウトをしない限り)ずっと終了しないので、
揮発性のオブジェクトを解放するタイミングが一切なかったのです。</p>

<p>不要になったら解放されるよう、揮発性オブジェクトの有効範囲を明示的に指定しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">sv_2motral</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'><span class="n">ENTER</span><span class="p">;</span>
</span><span class='line'><span class="n">SAVETMPS</span><span class="p">;</span>
</span><span class='line'><span class="n">sv_2motral</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="n">FREETMPS</span><span class="p">;</span>
</span><span class='line'><span class="n">LEAVE</span><span class="p">;</span>
</span><span class='line'><span class="c1">// v はココで解放される</span>
</span><span class='line'><span class="c1">// s は生き残ってる</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://perldoc.jp/docs/perl/5.18.1/perlcall.pod">perlcall</a>とかちゃんとドキュメントを読みましょう > 自分</p>

<h2>Segmentation Falt</h2>

<p>同期的にコマンドを実行してる最中にSIGNAL等で実行が中断されると、
Segmentation Faltが起こる問題を修正しました。
Redis::Fastは同期モードでコマンドを発行したときでも、
hiredisの非同期モードの機能を使って通信しています。
コマンド実行中にエラーが発生すると、
コールバック関数の呼び出しタイミングが変わってしまい、
メモリの確保・解放のタイミングが狂ってしまっていました。</p>

<p>このバグ、試した環境の中ではUbuntu+Perl5.14でしか再現しませんでした。
他の環境ではたまたま解放後もアクセスできてしまって、
正常に動作してしまっていたようです。
嫌なバグだ・・・。</p>

<h2>まとめ</h2>

<p>C言語でメモリ管理するコードは書くべきでない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unity Test Tools を使ってみる]]></title>
    <link href="http://shogo82148.github.io/blog/2013/12/21/unity-test-tools/"/>
    <updated>2013-12-21T21:02:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/12/21/unity-test-tools</id>
    <content type="html"><![CDATA[<p>みなさんこんにちは、
最近つらいことばかりで元気のないいっちーです。
少しでもつらいことを解消できないかと Unity Test Tools ってので遊んでみました。</p>

<!-- More -->


<h2>背景</h2>

<p>最近あったつらいことのひとつに「Unityで作ってるプロジェクトで、機能拡張したときに間違えて一行消しちゃった！！！」
ってのがあります。</p>

<p>もちろん僕が消したわけじゃないですよ！！！
僕サーバサイドエンジニアですから、Unityはいじりません。
でも、一応修正コミットは見ていたはずなので、気がつけなかったのは残念です・・・。</p>

<p>どんなにコード書く人が頑張っても、レビューする人が頑張っても、
人間誰だってミスします。
じゃあ、機械にやらせよう！テストコードだ！って話なんですが、
コードカバレッジが低く、今回のつらい事例でもテストがありませんでした。
一部書いてあるテストも、担当者が代わってからなんか怪しい・・・。</p>

<p>あと、自分も手元でテスト動かしてみたのですが、今のテスト面倒・・・。</p>

<ul>
<li>Unityのコンソールにドバッと流れる

<ul>
<li>テストが全部通ったのか、失敗したのかよくわからない</li>
</ul>
</li>
<li>ユニットテストを1項目だけやりたいとかどうやるんだろう

<ul>
<li>「テストの実行」が「シーンの再生」なので1項目とかどうすんの？</li>
</ul>
</li>
</ul>


<h2>Unity Test Tools</h2>

<p>つらいので解決方法を探るべくインターネットの海をさまよっていたら Unity Test Tools なるものを発見。</p>

<ul>
<li><a href="http://blogs.unity3d.com/2013/12/18/unity-test-tools-released/">Unity Test Tools Released</a></li>
</ul>


<p>これを書いてる時点で、3日前のリリースです！
タイムリーだ！！</p>

<p>英語でよくわかんないけど、スクリーンショットはわかりやすくてかっこいいぞ！
遊んでみよう！</p>

<h2>事前準備</h2>

<p>まず、Unity Testing Tools をダウンロードしてこよう！
Aseet Store に並んでるので、ダウンロードボタンを押してしばらく待ってれば Unity が勝手に使える状態にしてくれます。</p>

<h2>簡単なユニットテストを書いてみる</h2>

<p>以前れもんさんが書いた「<a href="http://tech.kayac.com/archive/merry_christmas_2012.html">#24 「Unityでコルーチンも単体テストしよう」 tech.kayac.com Advent Calendar 2012</a>」を
Unity Testing Tools でやってみました。</p>

<p>テストの対象はこんな感じのクラスです(短く書けそうな部分があったのでちょっと変えた)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">MyProject</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Plan</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">string</span> <span class="n">Title</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">string</span> <span class="n">Text</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="nf">Plan</span><span class="p">(</span><span class="kt">string</span> <span class="n">title</span><span class="p">,</span> <span class="kt">string</span> <span class="n">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Title</span> <span class="p">=</span> <span class="n">title</span><span class="p">;</span>
</span><span class='line'>            <span class="n">Text</span> <span class="p">=</span> <span class="n">text</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>れもんさんの記事ではSharpUnitを使っていましたが、
Unity Test Tools は NUnit というテストフレームワークを使うようです。
Plan のテストをNUnitを使って書きなおしてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">NUnit.Framework</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">MyProject.Tests</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">PlanTest</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'><span class="na">        [TestCase(&quot;Christmas&quot;, &quot;Let&#39;s play tennis!&quot;)]</span>
</span><span class='line'><span class="na">        [TestCase(&quot;Christmas&quot;, null)]</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Constractor</span> <span class="p">(</span><span class="kt">string</span> <span class="n">title</span><span class="p">,</span> <span class="kt">string</span> <span class="n">text</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Plan</span> <span class="n">plan</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Plan</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">text</span><span class="p">);</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">plan</span><span class="p">.</span><span class="n">Title</span><span class="p">,</span> <span class="n">title</span><span class="p">);</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">plan</span><span class="p">.</span><span class="n">Text</span><span class="p">,</span> <span class="n">text</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>TestCaseのお陰でずいぶんシンプルになりました。
(にわかC#erの僕はアトリビュートが出てきてドキドキです)</p>

<p>気をつけないといけないのは、このテストをEditorというフォルダの中に入れないといけないことです。
Editorってフォルダの中に入っていると、普段のプロジェクトとは別のプロジェクトに所属するようになります。
Unity Editor の動作を変更するようなスクリプトをかけるらしいので、その一つとして実装するってことですかね・・・？
(そのへんよくわかってない)</p>

<p>テストスクリプトを保存したら、あとはメニューから「Unity Test Tools」「Run all unit tests」をクリックするだけ！
テスト用シーンを追加する必要もありません。簡単！</p>

<p>「Unit Test Runner」を使えば、テストを1項目だけテストすることもできるし、
ファイルを右クリックしたときのメニューから「Load tests from this file」を選べばファイルごとにテストもできます。</p>

<h2>結合テストをやってみる</h2>

<p>次にネットワーク周りのテストをやってみます。
テストするのはこのクラスです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">MyProject</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">InternetPlanFactory</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="n">Plan</span> <span class="n">Plan</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 特定のURLにアクセスし、1行目をタイトル、2行目をテキストとしてオブジェクトを生成</span>
</span><span class='line'>        <span class="k">public</span> <span class="n">IEnumerator</span> <span class="nf">PlanFromUrl</span><span class="p">(</span><span class="kt">string</span> <span class="n">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">WWW</span> <span class="n">www</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WWW</span><span class="p">(</span><span class="n">url</span><span class="p">);</span>
</span><span class='line'>            <span class="k">yield</span> <span class="k">return</span> <span class="n">www</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">www</span><span class="p">.</span><span class="n">error</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// ノープランだ</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="n">Plan</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 適当にPlanつくる</span>
</span><span class='line'>                <span class="kt">string</span><span class="p">[]</span> <span class="n">lines</span> <span class="p">=</span> <span class="n">www</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">Split</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span><span class='line'>                <span class="kt">string</span> <span class="n">title</span> <span class="p">=</span> <span class="n">lines</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'>                <span class="kt">string</span> <span class="n">text</span> <span class="p">=</span> <span class="n">lines</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">1</span> <span class="p">?</span> <span class="n">lines</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">:</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="n">Plan</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Plan</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">text</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このクラスのテストには <code>GameObject</code> が必要みたいです。
<code>GameObject</code> って何者？とUnity情弱の僕は思うのですが、なにやらシーンから取ってこないといけないものらしいです。
ユニットテストでも頑張ればとってこれるのかもしれないけど、
結合テストとしてシーンの中で実行してみます。</p>

<p>結合テストを作るには、新しいシーンを追加し、
そのシーンを開いた状態で「Integration Test Runner」を開きます。
ここで緑の「＋」ボタンを押すとシーンに「TestRunner」と新しいテストが現れます。
さらにテストの子として新しい<code>GameObject</code>を追加しておきましょう。</p>

<p>次に以下の様なスクリプトを書きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">MyProject</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Hoge</span> <span class="p">:</span> <span class="n">MonoBehaviour</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">void</span> <span class="nf">Start</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">StartCoroutine</span><span class="p">(</span><span class="n">TestPlanFromUrlOk</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">IEnumerator</span> <span class="nf">TestPlanFromUrlOk</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">InternetPlanFactory</span> <span class="n">factory</span> <span class="p">=</span> <span class="k">new</span> <span class="n">InternetPlanFactory</span><span class="p">();</span>
</span><span class='line'>        <span class="k">yield</span> <span class="k">return</span> <span class="nf">StartCoroutine</span><span class="p">(</span><span class="n">factory</span><span class="p">.</span><span class="n">PlanFromUrl</span><span class="p">(</span><span class="s">&quot;http://example.com&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">factory</span><span class="p">.</span><span class="n">Plan</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">&quot;Plan is null&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">factory</span><span class="p">.</span><span class="n">Plan</span><span class="p">.</span><span class="n">Title</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">&quot;Plan.Title is null&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">factory</span><span class="p">.</span><span class="n">Plan</span><span class="p">.</span><span class="n">Text</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">&quot;Plan.Text is null&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">IntegrationTest</span><span class="p">.</span><span class="n">Pass</span><span class="p">(</span><span class="n">gameObject</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// IntegrationTest.Fail(gameObject); // と書くとテスト失敗できる</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(アサーションの仕方が残念すぎるけど力尽きた)</p>

<p>このスクリプトをさっき作った<code>GameObject</code>にアタッチすれば準備完了です。
「Integration Test Runner」からテスト可能になります。</p>

<h2>おわり</h2>

<p>今日はここまで。
今までも一応テストあったけど、Unity Testing Tools使うともっと便利に書けそう。
きっとぴーちんとかがもっと便利な機能を見つけてくれる。</p>

<p>ちなみに <code>Plan("Christmas", null)</code> なので、
<code>Text != null</code> なURLを募集してます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ark-View-DataTable グラフや表やCSVを簡単に表示したい]]></title>
    <link href="http://shogo82148.github.io/blog/2013/12/07/ark-view-datatable/"/>
    <updated>2013-12-07T20:11:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/12/07/ark-view-datatable</id>
    <content type="html"><![CDATA[<p>こんにちは、最近ログの解析をして遊んでいるいっちーです。
解析の結果は最終的にグラフに出すわけなのですが、
先輩方がよく使っているのもあって <a href="https://developers.google.com/chart/">Google Charts</a> を使ってます。</p>

<p>で、このグラフを他の人に見せると「その元データCSVでちょうだい！」と言われるんです&#8230;。</p>

<!-- More- -->


<p>もちろんcsvを作るなんてこと簡単にできるんですが、
今のプログラムにはグラフ用のテンプレートとHTMLで表出力するためのテンプレートとCSV用のテンプレートがあって、
グラフが追加されるたびにコピペして微妙に書き直し、
という不毛な作業が発生してしまうのです。つらい。</p>

<h2>Ark::View::DataTable</h2>

<p>使い回しの効かないテンプレートとかなんのためのテンプレートなのか。
データだけ用意してあとはそれぞれのテンプレートに入れるだけとなるのが理想的だよねー、と思い続けて早数ヶ月。
ようやく重い腰を上げて <a href="https://github.com/shogo82148/Ark-View-DataTable">Ark::View::DataTable</a>ってのを書きました。</p>

<h2>使い方</h2>

<p><a href="https://metacpan.org/pod/Data::Google::Visualization::DataTable">Data::Google::Visualization::DataTable</a> をレンダリングするための
ArkのViewです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Ark::View::</span><span class="n">DataTable</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Data::Google::Visualization::</span><span class="n">DataTable</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">gvis</span> <span class="p">:Local {</span>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$self</span><span class="p">,</span> <span class="nv">$c</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$datatable</span> <span class="o">=</span> <span class="nn">Data::Google::Visualization::</span><span class="n">DataTable</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$datatable</span><span class="o">-&gt;</span><span class="n">add_columns</span><span class="p">(</span>
</span><span class='line'>        <span class="p">{</span> <span class="n">id</span> <span class="o">=&gt;</span> <span class="s">&#39;x&#39;</span><span class="p">,</span>   <span class="n">label</span> <span class="o">=&gt;</span> <span class="s">&quot;X&quot;</span><span class="p">,</span> <span class="n">type</span> <span class="o">=&gt;</span> <span class="s">&#39;number&#39;</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="n">id</span> <span class="o">=&gt;</span> <span class="s">&#39;y&#39;</span><span class="p">,</span>   <span class="n">label</span> <span class="o">=&gt;</span> <span class="s">&quot;Y&quot;</span><span class="p">,</span> <span class="n">type</span> <span class="o">=&gt;</span> <span class="s">&#39;number&#39;</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 〜〜〜〜正弦波を描きましょう〜〜〜〜</span>
</span><span class='line'>    <span class="nv">$datatable</span><span class="o">-&gt;</span><span class="n">add_rows</span><span class="p">(</span>
</span><span class='line'>        <span class="nb">map</span> <span class="p">{</span> <span class="p">[</span><span class="nv">$_</span><span class="p">,</span> <span class="nb">sin</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="mf">3.1415926535</span><span class="o">*</span><span class="nv">$_</span><span class="o">/</span><span class="mi">500</span><span class="p">)]</span> <span class="p">}</span> <span class="mi">1</span><span class="o">..</span><span class="mi">1000</span><span class="p">,</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">stash</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">table</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$datatable</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">forward</span><span class="p">(</span> <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">view</span><span class="p">(</span> <span class="s">&#39;DataTable&#39;</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Controllerに感じでかくと使えます。
「/gvis?tqx=out:html」にアクセスするとHTMLの表が、
「/gvis?tqx=out:csv」にアクセスするとCSV形式のファイルが、
「/gvis?tqx=out:tsv-excel」にアクセスするとExcelで開けるファイルがそれぞれダウンロードできます。</p>

<h2>グラフを書く</h2>

<p>このViewは<a href="https://developers.google.com/chart/interactive/docs/dev/implementing_data_source">Chart Tools Datasource Protocol</a>に対応したレスポンスを返すので、
Google Charts からも簡単に扱えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;linechart&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://www.google.com/jsapi&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="nx">google</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="s2">&quot;visualization&quot;</span><span class="p">,</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">packages</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;corechart&#39;</span><span class="p">]});</span>
</span><span class='line'><span class="nx">google</span><span class="p">.</span><span class="nx">setOnLoadCallback</span><span class="p">(</span><span class="nx">drawChart</span><span class="p">);</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">drawChart</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">visualization</span><span class="p">.</span><span class="nx">Query</span><span class="p">(</span><span class="s1">&#39;/gvis&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">query</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">handleQueryResponse</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">handleQueryResponse</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">getDataTable</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">chart</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">visualization</span><span class="p">.</span><span class="nx">LineChart</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;linechart&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="nx">chart</span><span class="p">.</span><span class="nx">draw</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISUCON3の本戦に参加してきた]]></title>
    <link href="http://shogo82148.github.io/blog/2013/11/09/isucon3/"/>
    <updated>2013-11-09T23:58:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/11/09/isucon3</id>
    <content type="html"><![CDATA[<p><a href="http://shogo82148.github.io/blog/2013/10/07/isucon3-qualify/">ISUCON3の予選</a>を何とか通過し、
本戦へと参戦してきました。</p>

<p>大会中の方針とか考えたこととかメモ。</p>

<h2>お題</h2>

<ul>
<li>Tw○tter&#8211;likeな画像投稿サービス

<ul>
<li>ユーザをフォローできる</li>
<li>フォローしたユーザが画像を投稿すると、タイムラインに画像が流れる</li>
<li>公開範囲を全員に公開・フォロワーのみに公開・自分だけに公開から選べる</li>
</ul>
</li>
<li>タイムラインはロングポーリングを使ってリアルタイム反映

<ul>
<li>JSON-APIが用意されていて、Javascriptから叩く</li>
</ul>
</li>
<li>使用できるサーバは5台</li>
</ul>


<p>画像を扱うお題と聞いて、会場がざわめきました。</p>

<h2>MySQLのクエリを見てみる</h2>

<p>開始直後、鍵を用意したり、gitのレポジトリを立てたりなんだりした後、
一回目の計測。</p>

<p>topコマンドで走っているプロセスを見ていると、大量のconvertが！！
プロセス名とお題から考えるに、こいつら確実にImage Magickだ・・・。
CPUのほとんどが画像の変換にくわれていたので、
まずは「どこかでキャッシュする」作戦をとることに。
キャッシュするならフロントに近いほうがいいだろうということで、
フロントのnginxでキャッシュする作戦をとることにしました
(アクセス制限があるimageは難しいかもしれないけど、全部publicなiconならすぐできるだろうとこのときは思ってました)。</p>

<p>僕はnginxがconvertを駆逐してくれると信じて、MySQLに投げているクエリを中心にPerlのコードを見てました。
役割分担はこんな感じ。</p>

<ul>
<li>サーバの設定とか(@mackee_wさん)</li>
<li>nginxでキャッシュする設定(@9reさん)</li>
<li>コード読む、主にMySQLに投げてるクエリとか(@shogo82148)</li>
</ul>


<p>毎回、ひどいクエリが仕込まれているようなイメージがあったけど、
今回はそこまでひどくない。
クエリチューニング全然効果なさそうと判断して、次の作戦を考えることにしました。</p>

<h2>No Image Magick, use Imager!</h2>

<p>やっぱり一番のボトルネックは画像変換。
nginxでキャッシュするとはいえ軽いほうがいいよね、ということで、
外部プロセスで実行している画像変換をImagerを使ってPerlと同じプロセスでやる作戦。</p>

<p>Imagerに置き換え後ベンチにかけたら、若干スコアが・・・上がった・・・ような・・・？
しかし、画像が変化していると怒られて、スコアは無効。
画像エラーを修正するコストと、スコアの上がり具合を見て、Image Magickのままにすることにしました。</p>

<p>予選でも同じように外部プロセス起動している部分をPerlのライブラリにしたけど、
その時はあっさり動いた。
あれは外部プロセス起動をやめたらスコア上がると思い込ませるための布石だったんだ・・・。
(今回の場合、プロセスの起動より画像の変換のほうが重いので、スコアが上がらないのは当たり前)</p>

<h2>いろいろ諦めてPerl側でファイルキャッシュ</h2>

<p>Imagerはテストを通らず、nginxの設定キャッシュ設定も上手く動作しなかったので、
Perlでファイルキャッシュする方針に変更。
convertの結果にmvで適当な場所にコピーして保存。
これだけでスコアが5倍くらいに跳ね上がり、一気に上位に浮上！
最初からやっておくべきだった・・・。
もうちょっと早ければ特別賞もらえたかもしれないのに。</p>

<h2>rsync! rsync!</h2>

<p>ファイルキャッシュの作業をやっている間に、@mackee_wさんがnfsの設定をやってくれたので、
アップロードされたファイルやキャッシュファイルの保存先をnfsに変更。</p>

<p>あとは物量作戦でいくしかないだろうということで、rsyncで他のサーバにコピーして調整を繰り返してた。
(並行してnginxのキャッシュ設定にも再チャレンジしてたけど、nginx力が足りなかった)</p>

<h2>最終結果</h2>

<p>テストFAILした!! No Score!!</p>

<p>なんかこんなの前もあった！</p>

<h2>反省点</h2>

<ul>
<li>画像変換をGETでやってたけど、POSTでやったほうがよかったかも</li>
<li>nginxについて勉強しよう</li>
<li>nfsについて勉強しよう</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第10回６さいカンファレンス「C言語のポインタ復習」]]></title>
    <link href="http://shogo82148.github.io/blog/2013/10/30/6saiconf-10/"/>
    <updated>2013-10-30T23:42:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/10/30/6saiconf-10</id>
    <content type="html"><![CDATA[<p>気づかぬ間に第10回６さいカンファレンスが開催されていました。</p>

<ul>
<li><a href="https://tes.so/snslog/index/3">第10回６さいカンファレンス「C言語のポインタ復習」</a></li>
</ul>


<p>くいなちゃんSNS上で行われ、ログも残っているのでそちらを参照。
「６さいカンファレンス」のカテゴリから辿れるように記事にしておきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis::NamespaceとRedis::Keyをリリースしました]]></title>
    <link href="http://shogo82148.github.io/blog/2013/10/18/redis-namespace-and-redis-key/"/>
    <updated>2013-10-18T23:21:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2013/10/18/redis-namespace-and-redis-key</id>
    <content type="html"><![CDATA[<p>こんばんは、最近シングルトン恐怖症になっているいっちーです。
<a href="https://metacpan.org/release/Redis-Namespace">Redis::Namespace</a>と
<a href="https://metacpan.org/release/Redis-Key">Redis::Key</a>をリリースしました。</p>

<!-- More -->


<h2>Redis::Namespace</h2>

<p>「<a href="http://shogo82148.github.io/blog/2013/09/14/redis-namespace-perl/">Redis::NamespaceのPerl版書いた</a>」
で紹介したモジュールをCPANizeしました。
コマンドのキー名に当たる部分に、自動にプレフィックスをつけてくれる賢い奴です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">Redis</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">Namespace</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$redis</span> <span class="o">=</span> <span class="n">Redis</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$ns</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Namespace</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">redis</span> <span class="o">=&gt;</span> <span class="nv">$redis</span><span class="p">,</span> <span class="n">namespace</span> <span class="o">=&gt;</span> <span class="s">&#39;fugu&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ns</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">,</span> <span class="s">&#39;bar&#39;</span><span class="p">);</span>    <span class="c1"># $redis-&gt;set(&#39;fugu:foo&#39;, &#39;bar&#39;);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$foo</span> <span class="o">=</span> <span class="nv">$ns</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">);</span> <span class="c1"># my $foo = $redis-&gt;get(&#39;fugu:foo&#39;);</span>
</span></code></pre></td></tr></table></div></figure>


<p>RedisにはKey-Value Storeなんてかっこいい名前が付いているけど、
結局はシステム全体で使えるグローバル変数なわけです。
グローバル変数は駆逐するべきです。
いちいちプレフィックスつけて名前の衝突を回避するなんて人間のやることとは思えません。</p>

<p>せめてモジュールローカルとか、クラスローカルとかある程度スコープを制限したいですよね。
Redis::Namespaceを使えば簡単に実現できます。</p>

<h2>Redis::Key</h2>

<p>Redis::Key は Redisのキーの簡単なラッパークラスです。
毎回毎回「接続先のRedisサーバ」と「キーの名前」を指定するのは面倒です。
この2つをセットにして、一つのオブジェクトとして扱うことができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">Redis</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">Key</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$redis</span> <span class="o">=</span> <span class="n">Redis</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$key</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Key</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">redis</span> <span class="o">=&gt;</span> <span class="nv">$redis</span><span class="p">,</span> <span class="n">key</span> <span class="o">=&gt;</span> <span class="s">&#39;hoge&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$key</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="s">&#39;fugu&#39;</span><span class="p">);</span> <span class="c1"># $redis-&gt;set(&#39;hoge&#39;, &#39;fuga&#39;);</span>
</span><span class='line'><span class="nv">$key</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">;</span>         <span class="c1"># $redis-&gt;get(&#39;hoge&#39;);</span>
</span></code></pre></td></tr></table></div></figure>


<p>普通に使っている限りは他のキーにアクセスすることができなくなるので、
Redis::Keyのオブジェクトを他のクラスに渡す、とかしても安心です。</p>

<p>あと、キーの名前の一部をプレースホルダーにして、あとから値を埋め込むこともできます。
キー名の一部に日付やIDを埋め込むっていうことが多いのでつけてみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$user_keys</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Key</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">redis</span> <span class="o">=&gt;</span> <span class="nv">$redis</span><span class="p">,</span> <span class="n">key</span> <span class="o">=&gt;</span> <span class="s">&#39;user:{id}&#39;</span><span class="p">,</span> <span class="n">need_bind</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$user_keys</span><span class="o">-&gt;</span><span class="nb">bind</span><span class="p">(</span><span class="n">id</span> <span class="o">=&gt;</span> <span class="mi">1001</span><span class="p">);</span>
</span><span class='line'><span class="nv">$user</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">;</span>  <span class="c1"># $redis-&gt;get(&#39;user:1001&#39;);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Key-Value Store はお手軽ではありますが、キーの名前に一定のルールを設けてあげないと
さすがに管理できなくなります。
Redis::Key を使ってルールを書くのが楽になるといいですね。</p>

<h2>Redis::Fast と Redis::Namespace と Redis::Key を組み合わせる</h2>

<p>Redis::Fast と Redis::Namespace は Redis.pm 互換なので組み合わせて使えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$redis</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Fast</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$ns1</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Namespace</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">redis</span> <span class="o">=&gt;</span> <span class="nv">$redis</span><span class="p">,</span> <span class="n">namespace</span> <span class="o">=&gt;</span> <span class="s">&#39;hoge&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$ns2</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Namespace</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">redis</span> <span class="o">=&gt;</span> <span class="nv">$ns1</span><span class="p">,</span> <span class="n">namespace</span> <span class="o">=&gt;</span> <span class="s">&#39;fuga&#39;</span><span class="p">);</span> <span class="c1"># Redis::Namespaceのネストもできる</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$key</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Key</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">redis</span> <span class="o">=&gt;</span> <span class="nv">$ns2</span><span class="p">,</span> <span class="n">key</span> <span class="o">=&gt;</span> <span class="s">&#39;key&#39;</span><span class="p">);</span> <span class="c1"># hoge:fuga:key という名前になる</span>
</span></code></pre></td></tr></table></div></figure>


<p>なんだか最近Redis関連のモジュールばかり書いてますが、
なんでもRedisに突っ込めばいいと思っているわけではありません。
Redisを使ったコードを読んでいたら目眩がしたからです。
ISUCON3の予選で使ったのはRedisを使いたかったらというより、
Redis::Fastを使いたかったからです。</p>
]]></content>
  </entry>
  
</feed>
