<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shogo's Blog]]></title>
  <link href="https://shogo82148.github.io/atom.xml" rel="self"/>
  <link href="https://shogo82148.github.io/"/>
  <updated>2017-02-23T18:41:02+09:00</updated>
  <id>https://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WEB+DB PRESS Vol.97にPerlとRedisの記事を寄稿しました]]></title>
    <link href="https://shogo82148.github.io/blog/2017/02/23/perl-webdb-vol97/"/>
    <updated>2017-02-23T18:27:53+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/02/23/perl-webdb-vol97</id>
    <content type="html"><![CDATA[<p>昨年末に<a href="https://twitter.com/songmu">Songmu</a>さんからお話を頂き、
<a href="http://gihyo.jp/magazine/wdpress/archive/2017/vol97">WEB+DB PRESS Vol.97</a>内の連載「第43回Perl Hackers Hub」に
「PerlでのRedis活用法」というタイトルで寄稿しました。
発売日は<strong>2月24日</strong>です。</p>

<!-- More -->


<h2>内容</h2>

<p>簡単に内容を紹介しておきます。
Perl使いではじめてRedisを使う人向けに書いたつもりです。</p>

<h3>Redisの簡単な説明</h3>

<p>Redisのインストール方と、Perlからの接続方法、そしてRedisの型の説明です。
記事の中でも紹介していますが、Redisはその豊富な型が特長です。
読者はきっとPerl使いだろうということで、Perlの型(Perlにも型はあるんだよ！！)と
比較しながら簡単に紹介しています。</p>

<h3>Redisの応用例とCPANモジュールの紹介</h3>

<p>Redisを使うとこんなことができるよ、という紹介です。
CPANで公開されているRedis関連のモジュールも合わせて紹介しています。</p>

<h3>Redis自体の注意点</h3>

<p>以前Redisを使ったサービスの運用に携わっていたのですが、
そのなかで実際に起きたことを元に、Redisの注意点について書きました。
さいわいサービスが停止するような事故にはありませんでしたが、
メトリックスを眺めながらエンジニア勢でヤバイヤバイ騒いでましたね・・・。
みなさんも気をつけて下さい。</p>

<h2>執筆してみての感想</h2>

<p>昔から文章を書くのにはだいぶ苦手意識があり、
今回の執筆も非常に苦労しました。
一文の前半を書いた時点で
「今から書こうとしている情報は本当に必要なのか」
「自分の記憶違いで間違った情報なのでは」と不安になり、
色々考えているうちに、何書こうとしてたのかわからなくなるんですよね。
まずは適当に書き上げて、後からちゃんと推敲しよう、
とは思いつつもなかなか進められず・・・。
スループットを上げたい。</p>

<p>細かい表現とかも気になってなかなか進まないので、
こういうの入れて頑張ろうと思います！</p>

<ul>
<li><a href="http://qiita.com/azu/items/2c565a38df5ed4c9f4e1">VS Codeでtextlintを使って文章をチェックする</a></li>
<li><a href="http://takemikami.com/2017/02/14/gitbook.html">gitbookで技術書を書く環境の構築手順</a></li>
</ul>


<p>(執筆が進まないと、こういう環境構築に時間をかけてしまうのもよくないと思うんだ・・・)</p>

<h2>余談</h2>

<p>ところで、<strong>Vol.97</strong>と<strong>第43回</strong>ってどっちも<strong>素数</strong>ですね！
雑なプログラムを書いて調べてみたところ、
両方素数になるのはVol.83, 第29回以来、<strong>7回目</strong>(これも<strong>素数</strong>だ！)。
次はVol.101, 第47回です。
そのときのPerl Hackerは誰になるのでしょうか。楽しみですね！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">is_prime</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$n</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="nv">$n</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="nv">$i</span><span class="o">*</span><span class="nv">$i</span><span class="o">&lt;=</span><span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="nv">$n</span> <span class="nv">%</span> <span class="err">$</span><span class="nv">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="k">my</span> <span class="nv">$n</span><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$m</span> <span class="o">=</span> <span class="nv">$n</span><span class="o">-</span><span class="mi">43</span><span class="o">+</span><span class="mi">97</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">is_prime</span><span class="p">(</span><span class="nv">$n</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">is_prime</span><span class="p">(</span><span class="nv">$m</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">printf</span> <span class="s">&quot;%3d: Vol.%3d, No.%3d\n&quot;</span><span class="p">,</span> <span class="nv">$i</span><span class="p">,</span> <span class="nv">$m</span><span class="p">,</span> <span class="nv">$n</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go言語でコンパイル時フィボナッチ数列計算]]></title>
    <link href="https://shogo82148.github.io/blog/2017/02/19/golang-compile-time-fib/"/>
    <updated>2017-02-19T09:06:05+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/02/19/golang-compile-time-fib</id>
    <content type="html"><![CDATA[<p><a href="http://postd.cc/fibonacci/">整数の公式でフィボナッチ数列を求める</a>という記事を読んで、
「これコンパイル時ならGoでも簡単に計算できるのでは？」と思いやってみたメモ。</p>

<!-- More -->


<h2>背景</h2>

<p>みんな大好きフィボナッチ数列(要出典)。
漸化式で定義されているため、再帰やループを使って書くことが多いと思いますが、
閉じた式で書くことが知られています。
ただし、この一般式には無理数の演算が入るので、コンピュータで厳密に扱うことはできません。
ところが、さきほど紹介した記事で紹介された方法を使うと、整数の演算のみで実現できるそうです。</p>

<p>原理などはネタ元の記事を参照してもらうとして、
Python3では以下のように書けるらしいです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="mi">4</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="o">*</span><span class="p">(</span><span class="mi">3</span><span class="o">+</span><span class="n">n</span><span class="p">))</span> <span class="o">//</span> <span class="p">((</span><span class="mi">4</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="o">*</span><span class="n">n</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="mi">2</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">((</span><span class="mi">2</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ある程度大きなフィボナッチ数を求める場合、
計算途中の値が非常に大きくなるため、多倍長整数が必要となります。
Python3は多倍長整数に組み込みで対応していますが、
Goでは<a href="https://golang.org/pkg/math/big/">math/bigパッケージ</a>を利用する必要があります。</p>

<p>なんか面倒だなGolangと思っていたのですが、
<a href="http://qiita.com/sonatard/items/464a9d45c689386edfe1">Better C - Go言語と整数 #golang</a>を読んで、
「Goの定数には型がない(場合がある)」「任意の精度で計算してくれる」ということを知り、
「つまりコンパイル時に定数として計算すれば楽にいけるのでは！！」と考えたわけです。</p>

<h2>結果</h2>

<p>ちょっと複雑な式ですが、個々の演算自体はPython3もGoも変わらないので、
翻訳は簡単ですね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">const</span> <span class="nx">Fib0</span> <span class="p">=</span> <span class="mi">1</span> <span class="c1">// 0だけはうまくいかない</span>
</span><span class='line'>
</span><span class='line'><span class="kd">const</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">_</span>    <span class="p">=</span> <span class="p">(</span><span class="mi">4</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="kc">iota</span> <span class="o">*</span> <span class="p">(</span><span class="mi">3</span> <span class="o">+</span> <span class="kc">iota</span><span class="p">)))</span> <span class="o">/</span> <span class="p">((</span><span class="mi">4</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="kc">iota</span><span class="p">))</span> <span class="o">-</span> <span class="p">(</span><span class="mi">2</span> <span class="o">&lt;&lt;</span> <span class="kc">iota</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">((</span><span class="mi">2</span> <span class="o">&lt;&lt;</span> <span class="kc">iota</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">Fib1</span>
</span><span class='line'>  <span class="nx">Fib2</span>
</span><span class='line'>  <span class="nx">Fib3</span>
</span><span class='line'>  <span class="nx">Fib4</span>
</span><span class='line'>  <span class="nx">Fib5</span>
</span><span class='line'>  <span class="nx">Fib6</span>
</span><span class='line'>  <span class="nx">Fib7</span>
</span><span class='line'>  <span class="nx">Fib8</span>
</span><span class='line'>  <span class="nx">Fib9</span>
</span><span class='line'>  <span class="nx">Fib10</span>
</span><span class='line'>  <span class="nx">Fib11</span>
</span><span class='line'>  <span class="nx">Fib12</span>
</span><span class='line'>  <span class="nx">Fib13</span>
</span><span class='line'>  <span class="nx">Fib14</span>
</span><span class='line'>  <span class="nx">Fib15</span>
</span><span class='line'>  <span class="nx">Fib16</span>
</span><span class='line'>  <span class="nx">Fib17</span>
</span><span class='line'>  <span class="nx">Fib18</span>
</span><span class='line'>  <span class="nx">Fib19</span>
</span><span class='line'>  <span class="nx">Fib20</span>
</span><span class='line'>  <span class="nx">Fib21</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fibs</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Fib0</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib1</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib2</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib3</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib4</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib5</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib6</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib7</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib8</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib9</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib10</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib11</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib12</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib13</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib14</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib15</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib16</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib17</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib18</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib19</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib20</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Fib21</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">fib</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">fibs</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">fib</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行結果です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go run fibconst.go
</span><span class='line'>0 1
</span><span class='line'>1 1
</span><span class='line'>2 2
</span><span class='line'>3 3
</span><span class='line'>4 5
</span><span class='line'>5 8
</span><span class='line'>6 13
</span><span class='line'>7 21
</span><span class='line'>8 34
</span><span class='line'>9 55
</span><span class='line'>10 89
</span><span class='line'>11 144
</span><span class='line'>12 233
</span><span class='line'>13 377
</span><span class='line'>14 610
</span><span class='line'>15 987
</span><span class='line'>16 1597
</span><span class='line'>17 2584
</span><span class='line'>18 4181
</span><span class='line'>19 6765
</span><span class='line'>20 10946
</span><span class='line'>21 17711</span></code></pre></td></tr></table></div></figure>


<p><code>Fibxxx</code>をたくさん書くのはつらかったので、ソースコードはPerlで自動生成しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">print</span> <span class="s">&lt;&lt;EOF;</span>
</span><span class='line'><span class="s">package main</span>
</span><span class='line'>
</span><span class='line'><span class="s">import &quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s">const Fib0 = 1</span>
</span><span class='line'>
</span><span class='line'><span class="s">const (</span>
</span><span class='line'><span class="s">    _    = (4 &lt;&lt; (iota * (3 + iota))) / ((4 &lt;&lt; (2 * iota)) - (2 &lt;&lt; iota) - 1) &amp; ((2 &lt;&lt; iota) - 1)</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;    Fib$_\n&quot;</span> <span class="k">for</span> <span class="mi">1</span><span class="o">..</span><span class="mi">21</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&lt;&lt;EOF;</span>
</span><span class='line'><span class="s">)</span>
</span><span class='line'>
</span><span class='line'><span class="s">func main() {</span>
</span><span class='line'><span class="s">    fibs := []int{</span>
</span><span class='line'><span class="s">        Fib0,</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;        Fib$_,\n&quot;</span> <span class="k">for</span> <span class="mi">1</span><span class="o">..</span><span class="mi">21</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&lt;&lt;EOF</span>
</span><span class='line'><span class="s">    }</span>
</span><span class='line'><span class="s">    for i, fib := range fibs {</span>
</span><span class='line'><span class="s">        fmt.Println(i, fib)</span>
</span><span class='line'><span class="s">    }</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>21までしかないのは、
22以降を求めようとしたらコンパイルが通らなかったためです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go run fibconst.go
</span><span class='line'># command-line-arguments
</span><span class='line'>./fibconst.go:29: shift count too large: 550</span></code></pre></td></tr></table></div></figure>


<p>どうやら512bitまでしか扱えないらしい。
任意精度扱えるって書いてあったのに！！！</p>

<ul>
<li><a href="https://github.com/golang/go/blob/go1.8/src/cmd/compile/internal/gc/mpint.go#L211">mpint.go</a></li>
<li><a href="https://github.com/golang/go/blob/go1.8/src/cmd/compile/internal/gc/mpfloat.go#L18">mpfloat.go</a></li>
</ul>


<p>おとなしく多倍長整数が組込の言語でやれっている話ではありますが、
なんとなくやってみたかったんです。</p>

<h2>参考</h2>

<ul>
<li><a href="http://postd.cc/fibonacci/">整数の公式でフィボナッチ数列を求める</a>

<ul>
<li>Source: <a href="http://paulhankin.github.io/Fibonacci/">An integer formula for Fibonacci numbers</a></li>
</ul>
</li>
<li><a href="http://qiita.com/sonatard/items/464a9d45c689386edfe1">Better C - Go言語と整数 #golang</a></li>
</ul>


<p>ネタ元にある「母関数」という概念は、数学ガールを読んで知りました。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=shogo82148-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=4797341378&linkId=be2c6011ca1a5f15d96c370e494b0f95"></iframe>


<p>フィボナッチ数列に触れている部分はWebでも公開されているので、そちらもどうぞ(<a href="http://www.hyuki.com/story/genfunc.html">ミルカさんとフィボナッチ数列</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go-sql-proxyがcontextに対応しました]]></title>
    <link href="https://shogo82148.github.io/blog/2017/02/16/go-sql-proxy-in-go18/"/>
    <updated>2017-02-16T07:16:44+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/02/16/go-sql-proxy-in-go18</id>
    <content type="html"><![CDATA[<p>Go1.8ではdatabase/sqlのcontextサポートが入ります。
(きっと今日の<a href="https://eventdots.jp/event/611405">Go 1.8 Release Party</a>で詳しく説明があるはず、たぶん)
それにともない<a href="https://shogo82148.github.io/blog/2015/05/13/golang-sql-proxy/">Go言語でSQLのトレースをする</a>で紹介した
<a href="https://github.com/shogo82148/go-sql-proxy">shogo82148/go-sql-proxy</a>でもcontextを扱えるようにしました。</p>

<!-- More -->


<h2>Go1.8新機能のサポート</h2>

<p><a href="http://mattn.kaoriya.net/software/lang/go/20161106232834.htm">Golang 1.8 でやってくる database/sql の変更点</a>で
mattnさんが紹介しているように、Go1.8ではdatabase/sqlにいくつか新機能が追加されます。
(mattnさんの対応が早すぎて、メソッド名とか微妙に変更が入っているので注意)</p>

<p>特に大きなのがcontextのサポートでしょう。以下のようなコードでクエリのキャンセルが可能になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">WithCancel</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Background</span><span class="p">())</span>
</span><span class='line'><span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 1秒待ってからキャンセル</span>
</span><span class='line'>    <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">cancel</span><span class="p">()</span>
</span><span class='line'><span class="p">}()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">rows</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">QueryContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="s">&quot;SELECT name FROM test where id = ?&quot;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>go-sql-proxyでもcontext対応を行ったので、
proxyを経由した場合でも、キャンセルが可能になります。
(もちろん、originとなるドライバの対応も必要です)</p>

<p>Go1.8ではcontextサポート以外にもいくつか新機能が追加される予定です。
これらについても、originとなるドライバが対応していれば、go-sql-proxy経由でも全く同じように扱えます。</p>

<h2>contextとHookの関連付け</h2>

<p>contextにHookを関連付けて、一部のクエリにだけHookを付けることができるようになりました。
例えば以下のようなコードでctxに関連したクエリだけログを出力できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;context&quot;</span>
</span><span class='line'>  <span class="s">&quot;database/sql&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/shogo82148/go-sql-proxy&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">tracer</span> <span class="p">=</span> <span class="nx">proxy</span><span class="p">.</span><span class="nx">NewTraceHooks</span><span class="p">(</span><span class="nx">proxy</span><span class="p">.</span><span class="nx">TracerOptions</span><span class="p">{})</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 何もしないproxyをインストール</span>
</span><span class='line'>  <span class="nx">proxy</span><span class="p">.</span><span class="nx">RegisterProxy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 末尾に&quot;:proxy&quot;がついた名前でアクセス</span>
</span><span class='line'>  <span class="nx">db</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">sql</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;origin:proxy&quot;</span><span class="p">,</span> <span class="s">&quot;data source&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// このコンテキストに関連したクエリだけでログが有効になります</span>
</span><span class='line'>  <span class="nx">ctx</span> <span class="o">:=</span> <span class="nx">proxy</span><span class="p">.</span><span class="nx">WithHooks</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Background</span><span class="p">(),</span> <span class="nx">tracer</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">db</span><span class="p">.</span><span class="nx">ExecContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="s">&quot;CREATE TABLE t1 (id INTEGER PRIMARY KEY)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>グローバルなproxyに既にHookが設定してあった場合は上書きされます。
上書きされたHookは実行されないので注意してください。</p>

<p>「トレースの負荷が気になるから、全体の1%だけ出力したい！」とか
「このAPIだけ重たいから、この部分だけトレースしたい！」とか
そういう場合に便利ではないでしょうか。</p>

<h2>トレースオプションの追加</h2>

<p>Tracerに色々オプションをつけたいなと思ったので、<code>proxy.TracerOptions</code>を追加しました。
例えばSlowQueryに時間を設定すると、この時間以上経ったクエリだけ表示されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">tracer</span> <span class="p">=</span> <span class="nx">proxy</span><span class="p">.</span><span class="nx">NewTraceHooks</span><span class="p">(</span><span class="nx">proxy</span><span class="p">.</span><span class="nx">TracerOptions</span><span class="p">{</span>
</span><span class='line'>  <span class="nx">SlowQuery</span><span class="p">:</span> <span class="mi">10</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに初期のトレーサーは<code>logger.Output(6, "Begin")</code>みたいな感じで書いてたので、
案の定Go1.8の変更でぶっ壊れました。
頑張ってスタックトレースを辿って、関数名をパースしてパッケージ名を取得(ダイレクトにパッケージ名だけ取る機能は見つからなかった)して、
フィルタリングするようにしたので、もう大丈夫なはず。
その代わりにパフォーマンスが犠牲になったので、
あまり高負荷のところに突っ込まないでくださいね。</p>

<h2>フック関数の変更</h2>

<p>context対応に伴い、Hookの差し込み方も変わっています。
<code>proxy.Hooks</code>は非推奨の扱いで、<code>proxy.HooksContext</code>を使って下さい。
以下の例のようにcontext.Contextが第一引数に追加されています。
デバッグ情報の受け渡しに使えるかも？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;database/sql&quot;</span>
</span><span class='line'>  <span class="s">&quot;database/sql/driver&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/mattn/go-sqlite3&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/shogo82148/go-sql-proxy&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">sql</span><span class="p">.</span><span class="nx">Register</span><span class="p">(</span><span class="s">&quot;sqlite3-proxy&quot;</span><span class="p">,</span> <span class="nx">proxy</span><span class="p">.</span><span class="nx">NewProxyContext</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">sqlite3</span><span class="p">.</span><span class="nx">SQLiteDriver</span><span class="p">{},</span> <span class="o">&amp;</span><span class="nx">proxy</span><span class="p">.</span><span class="nx">HooksContext</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">PreExec</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">_</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">_</span> <span class="o">*</span><span class="nx">proxy</span><span class="p">.</span><span class="nx">Stmt</span><span class="p">,</span> <span class="nx">_</span> <span class="p">[]</span><span class="nx">driver</span><span class="p">.</span><span class="nx">NamedValue</span><span class="p">)</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// The first return value(time.Now()) is passed to both `Hooks.Exec` and `Hook.ExecPost` callbacks.</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">(),</span> <span class="kc">nil</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">PostExec</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">_</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">ctx</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">stmt</span> <span class="o">*</span><span class="nx">proxy</span><span class="p">.</span><span class="nx">Stmt</span><span class="p">,</span> <span class="nx">args</span> <span class="p">[]</span><span class="nx">driver</span><span class="p">.</span><span class="nx">NamedValue</span><span class="p">,</span> <span class="nx">_</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">Result</span><span class="p">,</span> <span class="nx">_</span> <span class="kt">error</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// The `ctx` parameter is the return value supplied from the `Hooks.PreExec` method, and may be nil.</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Query: %s; args = %v (%s)\n&quot;</span><span class="p">,</span> <span class="nx">stmt</span><span class="p">.</span><span class="nx">QueryString</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Since</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">)))</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>  <span class="p">}))</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">db</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sql</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;sqlite3-proxy&quot;</span><span class="p">,</span> <span class="s">&quot;:memory:&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatalf</span><span class="p">(</span><span class="s">&quot;Open filed: %v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">db</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span>
</span><span class='line'>      <span class="s">&quot;CREATE TABLE t1 (id INTEGER PRIMARY KEY)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go1.8のGraceful Shutdownとgo-gracedownの対応]]></title>
    <link href="https://shogo82148.github.io/blog/2017/01/21/golang-1-dot-8-graceful-shutdown/"/>
    <updated>2017-01-21T12:44:32+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/01/21/golang-1-dot-8-graceful-shutdown</id>
    <content type="html"><![CDATA[<p>Go1.8beta1が出た時に、Go1.8で追加される予定のGraceful Shutdownについて書く！
とTwitterに書き込んで早1ヶ月。
この前の金曜日に<a href="https://twitter.com/golang/status/822201571928731648">Go1.8rc2がリリースされ</a>、正式リリースも間近になってきて、
さすがに書かねばという気持ちになって来たので、がんばって検証してみます。</p>

<!-- More -->


<h2>公式サポートで増える予定の機能</h2>

<p>以前<a href="https://shogo82148.github.io/blog/2015/11/23/golang-graceful-restart-2nd/">Go言語でGraceful Restartをするときに取りこぼしを少なくする</a>で
紹介したように<a href="https://github.com/shogo82148/go-gracedown">shogo82148/go-gracedown</a>というものを書きました。
あれから時は経ち、ついにGo1.8からは<a href="https://github.com/golang/go/issues/4674">Graceful Shudownがbuild-inの機能として提供</a>される予定です。
公式サポートが入ることによって、以下のような機能を使えるようになります。</p>

<h3>HTTP/2のGraceful Shutdownができる</h3>

<p>HTTP/2ではGOAWAYフレームという接続を切ることを通知する機能があります。
Go1.8からはシャットダウン時にこのGOAWAYフレームを送ってくれるようになります。
GOAWAYフレームはサーバ側から任意のタイミングで送ることができ、
どこまで正常に処理できたかをクライアントに伝えられるという利点があります。</p>

<p>余談ですが、この機能は<a href="https://github.com/golang/go/issues/18471">x/net/http2を利用している場合は動かない</a>らしいです。
<a href="https://github.com/golang/net/blob/8fd7f25955530b92e73e9e1932a41b522b22ccd9/http2/server.go#L2716-L2736">importしたときには動かないけどbundleしたときにだけ動く黒魔術</a>が使われているためです。
覚えておいても今後絶対使うことはなさそう。というか使いたくない・・・。</p>

<h3>contextが使える</h3>

<p>go-gracedownを作った頃は、contextはまだ標準パッケージに取り込まれていなかったので対応していませんでした。
(1.7のリリース時に対応を怠っていただけとも言える)
net/httpのシャットダウンはもちろんcontextに対応しています。
これにより、Graceful Shutdownを中断して強制終了する、
ということが簡単にできるようになります。</p>

<h2>公式サポートで変更になる予定の挙動</h2>

<p>Keep-Aliveでのリクエストの挙動が少し変わります。
1.7以前のgo-gracedownでは、クライアントにKeep-Aliveが無効になったのを伝え、
クライアント側から接続を切るのを待つように実装してしました。
多少接続時間が延びたとしてもクライアント側でよくわからないエラーになるよりはマシだろ、との考えからです。</p>

<p>1.8からはシャットダウン時にIdle状態(TCP接続は有効だけど、リクエストは処理していない状態)な接続は切断されます。
内部で使っている<a href="https://golang.org/pkg/net/http/#Server.SetKeepAlivesEnabled">Server.SetKeepAlivesEnabled</a>の
挙動が<a href="https://github.com/golang/go/issues/9478">変更になった</a>ためです。</p>

<p>Goの中の人的には「この挙動が原因で万が一トラブルになっても、クライアントがリトライしてくれるから大丈夫でしょ」とのことのようです。
サーバシャットダウン以外にもネットワークトラブル等でも接続は切れるので、
クライアント側で頑張ってというのは正論ですが、
どの程度エラーが増えるのかは気になるところです。</p>

<h3>go-gracedownの対応</h3>

<p>go-gracedownはGo1.8でコンパイルされたときはbuild-inの機能を直接使うようになります。
中身はほとんどがインターフェースの互換性を保つためのコードなので、
機能的なメリットは完全になくなってしまいました・・・。
HTTP/2サポートも問題なく動くはずです。
逆にパッケージの依存が増えること以外はデメリットはないともいえます。</p>

<p>Go1.7以下では今までの方法にフォールバックしてくれます。
というわけで、以下のような人には有用です。</p>

<ul>
<li>深淵な理由でGo1.7以下しか使えない人</li>
<li>Go1.8とGo1.7以下のサポートがどうしても必要な人</li>
<li>Go1.8にアップグレードしたけど、graceful shutdownの処理を書き換えるのがめんどくさい人</li>
</ul>


<p>ところで、環境が悪いときに性能を落としたり機能を制限することをフォールバック(fall back)というわけですが、
逆に環境が良いときに性能を上げたり機能を拡張することはなんていうんですかね？
モデムでは通信環境が良いときに高速な通信方式に切り変えることを「フォールフォワード(fall forward)」というらしいです。
「Go1.8ではbild-inのGraceful Shutdownにフォールフォワードする」で使い方あってます？</p>

<h2>使い方</h2>

<h3>Server.Shutdownを使う</h3>

<p><a href="http://qiita.com/advent-calendar/2016/go3">Go(その3) Advent Calendar</a>の
<a href="http://qiita.com/najeira/items/806cacb9bba96ff06ec4">最終日の記事</a>でも扱ってますが改めて。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;context&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;os/signal&quot;</span>
</span><span class='line'>  <span class="s">&quot;syscall&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/lestrrat/go-server-starter/listener&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;start pid %d\n&quot;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">listeners</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ListenAll</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ErrNoListeningTarget</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">l</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listener</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ErrNoListeningTarget</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Fallback if not running under Server::Starter</span>
</span><span class='line'>      <span class="nx">l</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listen</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="s">&quot;:8080&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">panic</span><span class="p">(</span><span class="s">&quot;Failed to listen to port 8080&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">l</span> <span class="p">=</span> <span class="nx">listeners</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 別goroutineでServeしていることに注意！</span>
</span><span class='line'>  <span class="nx">srv</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span><span class="nx">Handler</span><span class="p">:</span> <span class="nx">newHandler</span><span class="p">()}</span>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">srv</span><span class="p">.</span><span class="nx">Serve</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// mainの中でシグナルの待受をしていることに注意！</span>
</span><span class='line'>  <span class="nx">signal_chan</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">signal</span><span class="p">.</span><span class="nx">Notify</span><span class="p">(</span><span class="nx">signal_chan</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">s</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">signal_chan</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">s</span> <span class="o">==</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;SIGTERM!!!!\n&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">srv</span><span class="p">.</span><span class="nx">Shutdown</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Background</span><span class="p">())</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">newHandler</span><span class="p">()</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">mux</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">NewServeMux</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">mux</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;from pid %d.\n&quot;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">())</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">mux</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>go-gracedownからの移行するさいの注意点は以下の通りです。</p>

<ul>
<li><code>Server.Shutdown</code>を使う(<code>Serer.Close</code>もあるけど、そっちはGracefulではない)</li>
<li><code>Server.Serve</code>は<strong>シャットダウンが始まる</strong>とすぐに制御を返す(<strong>シャットダウンが終わる</strong>とではない)</li>
<li><code>Server.Shutdown</code>は<strong>シャットダウンが終わる</strong>と制御を返す(<strong>シャットダウンが始まる</strong>とではない)</li>
</ul>


<h3>go-gracedownを使う</h3>

<p>go-gracedownの使い方も再掲しておきます。
Go1.6から利用方法は一切変更はないですが、
Go1.8でコンパイルすると<code>Server.Shutdown</code>を利用してくれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;os/signal&quot;</span>
</span><span class='line'>  <span class="s">&quot;syscall&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/lestrrat/go-server-starter/listener&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/shogo82148/go-gracedown&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;start pid %d\n&quot;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">signal_chan</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">signal</span><span class="p">.</span><span class="nx">Notify</span><span class="p">(</span><span class="nx">signal_chan</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">s</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">signal_chan</span>
</span><span class='line'>          <span class="k">if</span> <span class="nx">s</span> <span class="o">==</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;SIGTERM!!!!\n&quot;</span><span class="p">)</span>
</span><span class='line'>              <span class="nx">gracedown</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">listeners</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ListenAll</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ErrNoListeningTarget</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">l</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listener</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ErrNoListeningTarget</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Fallback if not running under Server::Starter</span>
</span><span class='line'>      <span class="nx">l</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listen</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="s">&quot;:8080&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">panic</span><span class="p">(</span><span class="s">&quot;Failed to listen to port 8080&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">l</span> <span class="p">=</span> <span class="nx">listeners</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">gracedown</span><span class="p">.</span><span class="nx">Serve</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span> <span class="nx">newHandler</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">newHandler</span><span class="p">()</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">mux</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">NewServeMux</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">mux</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;from pid %d.\n&quot;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">())</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">mux</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>HTTP/2を使う</h3>

<p>せっかくHTTP/2にも対応したことなので、
Server::Starterを使ってHTTP/2サーバのGraceful Restartをする例も書いてみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;context&quot;</span>
</span><span class='line'>  <span class="s">&quot;crypto/tls&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;os/signal&quot;</span>
</span><span class='line'>  <span class="s">&quot;syscall&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/lestrrat/go-server-starter/listener&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// net/http/internal/testcert.go から拝借</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">localhostCert</span> <span class="p">=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">`-----BEGIN CERTIFICATE-----</span>
</span><span class='line'><span class="s">MIICEzCCAXygAwIBAgIQMIMChMLGrR+QvmQvpwAU6zANBgkqhkiG9w0BAQsFADAS</span>
</span><span class='line'><span class="s">MRAwDgYDVQQKEwdBY21lIENvMCAXDTcwMDEwMTAwMDAwMFoYDzIwODQwMTI5MTYw</span>
</span><span class='line'><span class="s">MDAwWjASMRAwDgYDVQQKEwdBY21lIENvMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB</span>
</span><span class='line'><span class="s">iQKBgQDuLnQAI3mDgey3VBzWnB2L39JUU4txjeVE6myuDqkM/uGlfjb9SjY1bIw4</span>
</span><span class='line'><span class="s">iA5sBBZzHi3z0h1YV8QPuxEbi4nW91IJm2gsvvZhIrCHS3l6afab4pZBl2+XsDul</span>
</span><span class='line'><span class="s">rKBxKKtD1rGxlG4LjncdabFn9gvLZad2bSysqz/qTAUStTvqJQIDAQABo2gwZjAO</span>
</span><span class='line'><span class="s">BgNVHQ8BAf8EBAMCAqQwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDwYDVR0TAQH/BAUw</span>
</span><span class='line'><span class="s">AwEB/zAuBgNVHREEJzAlggtleGFtcGxlLmNvbYcEfwAAAYcQAAAAAAAAAAAAAAAA</span>
</span><span class='line'><span class="s">AAAAATANBgkqhkiG9w0BAQsFAAOBgQCEcetwO59EWk7WiJsG4x8SY+UIAA+flUI9</span>
</span><span class='line'><span class="s">tyC4lNhbcF2Idq9greZwbYCqTTTr2XiRNSMLCOjKyI7ukPoPjo16ocHj+P3vZGfs</span>
</span><span class='line'><span class="s">h1fIw3cSS2OolhloGw/XM6RWPWtPAlGykKLciQrBru5NAPvCMsb/I1DAceTiotQM</span>
</span><span class='line'><span class="s">fblo6RBxUQ==</span>
</span><span class='line'><span class="s">-----END CERTIFICATE-----`</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">localhostKey</span> <span class="p">=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">`-----BEGIN RSA PRIVATE KEY-----</span>
</span><span class='line'><span class="s">MIICXgIBAAKBgQDuLnQAI3mDgey3VBzWnB2L39JUU4txjeVE6myuDqkM/uGlfjb9</span>
</span><span class='line'><span class="s">SjY1bIw4iA5sBBZzHi3z0h1YV8QPuxEbi4nW91IJm2gsvvZhIrCHS3l6afab4pZB</span>
</span><span class='line'><span class="s">l2+XsDulrKBxKKtD1rGxlG4LjncdabFn9gvLZad2bSysqz/qTAUStTvqJQIDAQAB</span>
</span><span class='line'><span class="s">AoGAGRzwwir7XvBOAy5tM/uV6e+Zf6anZzus1s1Y1ClbjbE6HXbnWWF/wbZGOpet</span>
</span><span class='line'><span class="s">3Zm4vD6MXc7jpTLryzTQIvVdfQbRc6+MUVeLKwZatTXtdZrhu+Jk7hx0nTPy8Jcb</span>
</span><span class='line'><span class="s">uJqFk541aEw+mMogY/xEcfbWd6IOkp+4xqjlFLBEDytgbIECQQDvH/E6nk+hgN4H</span>
</span><span class='line'><span class="s">qzzVtxxr397vWrjrIgPbJpQvBsafG7b0dA4AFjwVbFLmQcj2PprIMmPcQrooz8vp</span>
</span><span class='line'><span class="s">jy4SHEg1AkEA/v13/5M47K9vCxmb8QeD/asydfsgS5TeuNi8DoUBEmiSJwma7FXY</span>
</span><span class='line'><span class="s">fFUtxuvL7XvjwjN5B30pNEbc6Iuyt7y4MQJBAIt21su4b3sjXNueLKH85Q+phy2U</span>
</span><span class='line'><span class="s">fQtuUE9txblTu14q3N7gHRZB4ZMhFYyDy8CKrN2cPg/Fvyt0Xlp/DoCzjA0CQQDU</span>
</span><span class='line'><span class="s">y2ptGsuSmgUtWj3NM9xuwYPm+Z/F84K6+ARYiZ6PYj013sovGKUFfYAqVXVlxtIX</span>
</span><span class='line'><span class="s">qyUBnu3X9ps8ZfjLZO7BAkEAlT4R5Yl6cGhaJQYZHOde3JEMhNRcVFMO8dJDaFeo</span>
</span><span class='line'><span class="s">f9Oeos0UUothgiDktdQHxdNEwLjQf7lJJBzV+5OtwswCWA==</span>
</span><span class='line'><span class="s">-----END RSA PRIVATE KEY-----`</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;start pid %d\n&quot;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">listeners</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ListenAll</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ErrNoListeningTarget</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">l</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listener</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">listener</span><span class="p">.</span><span class="nx">ErrNoListeningTarget</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Fallback if not running under Server::Starter</span>
</span><span class='line'>      <span class="nx">l</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listen</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="s">&quot;:8080&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">panic</span><span class="p">(</span><span class="s">&quot;Failed to listen to port 8080&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">l</span> <span class="p">=</span> <span class="nx">listeners</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">cert</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tls</span><span class="p">.</span><span class="nx">X509KeyPair</span><span class="p">(</span><span class="nx">localhostCert</span><span class="p">,</span> <span class="nx">localhostKey</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">tlsConfig</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">tls</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">NextProtos</span><span class="p">:</span>   <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;h2&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">Certificates</span><span class="p">:</span> <span class="p">[]</span><span class="nx">tls</span><span class="p">.</span><span class="nx">Certificate</span><span class="p">{</span><span class="nx">cert</span><span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">srv</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Handler</span><span class="p">:</span>   <span class="nx">newHandler</span><span class="p">(),</span>
</span><span class='line'>      <span class="nx">TLSConfig</span><span class="p">:</span> <span class="nx">tlsConfig</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">l</span> <span class="p">=</span> <span class="nx">tls</span><span class="p">.</span><span class="nx">NewListener</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span> <span class="nx">tlsConfig</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">srv</span><span class="p">.</span><span class="nx">Serve</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">signal_chan</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">signal</span><span class="p">.</span><span class="nx">Notify</span><span class="p">(</span><span class="nx">signal_chan</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">s</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">signal_chan</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">s</span> <span class="o">==</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;SIGTERM!!!!\n&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">srv</span><span class="p">.</span><span class="nx">Shutdown</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Background</span><span class="p">())</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">newHandler</span><span class="p">()</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">mux</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">NewServeMux</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">mux</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;from pid %d.\n&quot;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Getpid</span><span class="p">())</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">mux</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>NextProtos</code>へ明示的に<code>h2</code>を指定する必要があるのがポイントです。
net/httpはデフォルトでHTTP/2を有効にしてくれますが、
<code>TLSConfig</code>が指定されているときは自前でやる必要があります。</p>

<h2>実験</h2>

<p>HTTP/2に対応していて証明書の検証もスキップできて・・・という条件で
ベンチマークソフトを探すのが面倒だったので、Goで自作です。
あまり詳しい統計情報は要らないので、負荷をかけるのにリソースを割きたかったというのもあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;crypto/tls&quot;</span>
</span><span class='line'>  <span class="s">&quot;flag&quot;</span>
</span><span class='line'>  <span class="s">&quot;io&quot;</span>
</span><span class='line'>  <span class="s">&quot;io/ioutil&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/kayac/parallel-benchmark/benchmark&quot;</span>
</span><span class='line'>  <span class="s">&quot;golang.org/x/net/http2&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">myWorker</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">URL</span>    <span class="kt">string</span>
</span><span class='line'>  <span class="nx">client</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Client</span>
</span><span class='line'>  <span class="nx">buf</span>    <span class="p">[]</span><span class="kt">byte</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">myWorker</span><span class="p">)</span> <span class="nx">Setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">tr</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Transport</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Proxy</span><span class="p">:</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ProxyFromEnvironment</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">DialContext</span><span class="p">:</span> <span class="p">(</span><span class="o">&amp;</span><span class="nx">net</span><span class="p">.</span><span class="nx">Dialer</span><span class="p">{</span>
</span><span class='line'>          <span class="nx">Timeout</span><span class="p">:</span>   <span class="mi">30</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">KeepAlive</span><span class="p">:</span> <span class="mi">30</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span><span class='line'>      <span class="p">}).</span><span class="nx">DialContext</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">MaxIdleConns</span><span class="p">:</span>        <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">IdleConnTimeout</span><span class="p">:</span>     <span class="mi">90</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">TLSHandshakeTimeout</span><span class="p">:</span> <span class="mi">10</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">TLSClientConfig</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">tls</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span><span class='line'>          <span class="c1">// テストなので証明書の検証はスキップ</span>
</span><span class='line'>          <span class="c1">// プロダクションでは必ず有効にしてください！</span>
</span><span class='line'>          <span class="nx">InsecureSkipVerify</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">ExpectContinueTimeout</span><span class="p">:</span> <span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http2</span><span class="p">.</span><span class="nx">ConfigureTransport</span><span class="p">(</span><span class="nx">tr</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">client</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Client</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Transport</span><span class="p">:</span> <span class="nx">tr</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">buf</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">myWorker</span><span class="p">)</span> <span class="nx">Teardown</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">myWorker</span><span class="p">)</span> <span class="nx">Process</span><span class="p">()</span> <span class="p">(</span><span class="nx">subscore</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nx">Get</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">URL</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;ERROR: %v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">CopyBuffer</span><span class="p">(</span><span class="nx">ioutil</span><span class="p">.</span><span class="nx">Discard</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">,</span> <span class="nx">w</span><span class="p">.</span><span class="nx">buf</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;ERROR: %v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">StatusCode</span> <span class="o">!=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Invalid Status: %d&quot;</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">StatusCode</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="p">(</span>
</span><span class='line'>      <span class="nx">conn</span>     <span class="kt">int</span>
</span><span class='line'>      <span class="nx">duration</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  <span class="nx">flag</span><span class="p">.</span><span class="nx">IntVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">conn</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&quot;connections to keep open&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">flag</span><span class="p">.</span><span class="nx">DurationVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">duration</span><span class="p">,</span> <span class="s">&quot;d&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span> <span class="s">&quot;duration of benchmark&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">flag</span><span class="p">.</span><span class="nx">Parse</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">url</span> <span class="o">:=</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">Args</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">workers</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="nx">benchmark</span><span class="p">.</span><span class="nx">Worker</span><span class="p">,</span> <span class="nx">conn</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">workers</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">workers</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">myWorker</span><span class="p">{</span><span class="nx">URL</span><span class="p">:</span> <span class="nx">url</span><span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">benchmark</span><span class="p">.</span><span class="nx">Run</span><span class="p">(</span><span class="nx">workers</span><span class="p">,</span> <span class="nx">duration</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>前回記事同様、Server::Starterを使って1秒毎に再起動を繰り返しながらベンチを回します。
AWSのc4.largeインスタンス上で実行しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>start_server --port <span class="m">8080</span> --pid-file app.pid -- ./main
</span><span class='line'><span class="nv">$ </span><span class="k">while</span> <span class="nb">true</span><span class="p">;</span> <span class="k">do</span> <span class="nb">kill</span> -HUP <span class="sb">`</span>cat app.pid<span class="sb">`</span><span class="p">;</span> sleep 1<span class="p">;</span> <span class="k">done</span>
</span><span class='line'><span class="nv">$ </span>./bin/bench -c <span class="m">10</span> -d<span class="o">=</span>1m http://localhost:8080/
</span></code></pre></td></tr></table></div></figure>


<h2>結果</h2>

<h3>Server.Shutdownを使った場合</h3>

<p>Server.Shutdownを使った場合の結果です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./bin/bench -c 10 -d=1m http://localhost:8080/
</span><span class='line'>2017/01/22 12:20:51 starting benchmark: concurrency: 10, time: 1m0s, GOMAXPROCS: 2
</span><span class='line'>2017/01/22 12:21:51 done benchmark: score 1174412, elapsed 1m0.002557914s = 19572.698912 / sec</span></code></pre></td></tr></table></div></figure>


<p>先程紹介したKeepAliveの挙動変更の影響で多少はエラーがでるのでは？と予想していたものの、
まったく影響はありませんでした。</p>

<h3>go-gracedownを使った場合</h3>

<p>go-gracedownを使った場合の結果です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./bin/bench -c 10 -d=1m http://localhost:8080/
</span><span class='line'>2017/01/22 12:22:26 starting benchmark: concurrency: 10, time: 1m0s, GOMAXPROCS: 2
</span><span class='line'>2017/01/22 12:23:26 done benchmark: score 1160878, elapsed 1m0.009764419s = 19344.818485 / sec</span></code></pre></td></tr></table></div></figure>


<p>中身は<code>Server.Shutdown</code>なので、当然ながら同じ結果です。</p>

<h3>HTTP/2でアクセスした場合</h3>

<p>HTTP/2でアクセスした場合の結果です。
GoのHTTP/2サポートはHTTPSで通信したときにしか有効にならないので、他のベンチとURLが違うことに注意。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./bin/bench -c 10 -d=1m https://localhost:8080/
</span><span class='line'>2017/01/22 12:30:04 starting benchmark: concurrency: 10, time: 1m0s, GOMAXPROCS: 2
</span><span class='line'>2017/01/22 12:31:04 done benchmark: score 666801, elapsed 1m0.001842465s = 11113.008745 / sec</span></code></pre></td></tr></table></div></figure>


<p>特にエラーもなく、全く問題ありませんでした。</p>

<h2>まとめ</h2>

<ul>
<li>Go1.8からサポートされる予定のHTTPサーバのGraceful Shutdownについて検証しました

<ul>
<li>HTTP/1.1とHTTP/2で検証しましたが、特に問題は見つかりませんでした</li>
</ul>
</li>
<li>go-gracedownはGo1.8でコンパイルされたときはbuild-inの機能を使うようになります

<ul>
<li>機能的にはbuild-inの機能を直接使う場合とまったく変わりありません</li>
</ul>
</li>
</ul>


<p>Go1.8の正式リリース楽しみですね！</p>

<h2>参考</h2>

<ul>
<li><a href="https://shogo82148.github.io/blog/2015/05/03/golang-graceful-restart/">Go言語でGraceful Restartをする</a></li>
<li><a href="https://shogo82148.github.io/blog/2015/11/23/golang-graceful-restart-2nd/">Go言語でGraceful Restartをするときに取りこぼしを少なくする</a></li>
<li><a href="https://github.com/golang/go/issues/4674">net/http: add built-in graceful shutdown support to Server #4674</a></li>
<li><a href="https://github.com/golang/go/issues/9478">net/http: make Server.SetKeepAlivesEnabled(false) drop currently-open connections #9478</a></li>
<li><a href="http://qiita.com/najeira/items/806cacb9bba96ff06ec4">Go 1.8 の HTTP Server Graceful Shutdown を試す</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Re:golang の http.Client を速くする]]></title>
    <link href="https://shogo82148.github.io/blog/2017/01/14/re-golang-dns-cache/"/>
    <updated>2017-01-14T17:02:12+09:00</updated>
    <id>https://shogo82148.github.io/blog/2017/01/14/re-golang-dns-cache</id>
    <content type="html"><![CDATA[<p>先日<a href="https://twitter.com/mattn_jp">mattn</a>さんの記事を読みました。</p>

<ul>
<li><a href="http://mattn.kaoriya.net/software/lang/go/20170112181052.htm">golang の http.Client を速くする</a></li>
</ul>


<p><a href="https://github.com/abursavich/nett">nett</a>というパッケージを使って
名前解決の結果をキャッシュすることで、<code>http.Client</code>を早くするというものです。
この記事に関して、ちょっと疑問に思ったことがあったので、検証してみました。</p>

<!-- More -->


<h2>疑問</h2>

<p>疑問に思ったのは以下の点です。</p>

<h3>名前解決遅すぎでは？</h3>

<p>ベンチマークの結果を見ると5億ns(=500ms)ほど速度が改善しています。
3つのURLに対してリクエストを投げているので、初回を除く2回DNSのキャッシュがヒットし、
名前解決2回分の速度改善になるはずです。
と、いうことは、名前解決1回あたり250msかかっている計算になります。
googleのsearchは302でリダイレクトがかかるので、<code>Client.Get</code>の呼び出し1回あたり2回リクエストが飛ぶ、
ということを計算に入れても100msほどかかる計算です。</p>

<p>Google先生の謎テクノロジーによってかなりの最適化がされているはずですし、
ネットワークプロバイダのDNSキャッシュにヒットする可能性も高いでしょう。
<strong>名前解決程度にこんなに時間がかかっていたらスプラトゥーンが出来ない！</strong>
(mattnさんがスプラトゥーンをプレイしているかは知らない)</p>

<p><strong>2017/01/16追記:</strong>
mattnさんはスプラトゥーンをプレイしていないそうです。残念。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr"><a href="https://twitter.com/shogo82148">@shogo82148</a> あとスプラトゥーンしてません。。。</p>&mdash; おののいも夫 (@mattn_jp) <a href="https://twitter.com/mattn_jp/status/820236711149981696">January 14, 2017</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>もちろん、ネットワークが混雑していたり、
モバイルネットワークを利用していたり、という可能性もありますが、
ちょっと不自然な印象を受けました。</p>

<h3>Keep-Aliveされてるのでは？</h3>

<p>スキーマがhttpsになっているので、Google先生相手ならHTTP2で通信していてもおかしくありません。
HTTP2は基本的にドメイン毎にコネクションを1つだけ張って、それを使いまわします。
もし仮にHTTP1.1で通信していたとしても、<code>http.Client</code>はデフォルトでKeep-Aliveが有効になっているので、
普通に使うとコネクションを再利用してくれます。</p>

<p>そういうわけで、名前解決以前にそもそもTCPのコネクション確立もスキップされている可能性が高いのでは？
と思ったわけです。
この予想が正しければ、名前解決は初回リクエストでしか行われないので、ベンチマークに差はでないはずです。</p>

<h2>HTTPリクエストの様子をトレースしてみる</h2>

<p>これらの疑問を解消するために、HTTPリクエストの様子をさらに詳細に解析してみることにしました。</p>

<h3>DNSキャッシュなし版をトレースする</h3>

<p>Go1.7から<a href="https://golang.org/pkg/net/http/httptrace/">net/http/httptrace</a>というパッケージが追加され、
名前解決やコネクション確立etcのタイミングにフックを仕込めるようになりました。
これを利用すれば各段階でどの程度時間がかかっているかが具体的に分かるはずです。</p>

<p>頑張って自前でフックを差し込んでもよいのですが、
<a href="https://twitter.com/deeeet">deeeet</a>さんの<a href="https://github.com/tcnksm/go-httpstat">go-httpstat</a>という便利パッケージがあるので、
これをありがたく利用させていただきます。
go-httpstatを使うと時間計測を行うコードを簡単に差し込むことができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;io&quot;</span>
</span><span class='line'>  <span class="s">&quot;io/ioutil&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/tcnksm/go-httpstat&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">urls</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;https://shogo82148.github.io/blog/2016/12/20/redis-fast-0-dot-19-released/&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;https://shogo82148.github.io/blog/2016/12/15/leap-second-in-datetime-dot-pm/&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;https://shogo82148.github.io/blog/2016/11/23/qr-code/&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">client</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Client</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Transport</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Transport</span><span class="p">{</span>
</span><span class='line'>          <span class="nx">Proxy</span><span class="p">:</span>             <span class="nx">http</span><span class="p">.</span><span class="nx">ProxyFromEnvironment</span><span class="p">,</span>
</span><span class='line'>          <span class="c1">// DisableKeepAlives: true,</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">url</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">urls</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;GET %s&quot;</span><span class="p">,</span> <span class="nx">url</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">req</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">NewRequest</span><span class="p">(</span><span class="s">&quot;GET&quot;</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">result</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">httpstat</span><span class="p">.</span><span class="nx">Result</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">ctx</span> <span class="o">:=</span> <span class="nx">httpstat</span><span class="p">.</span><span class="nx">WithHTTPStat</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">Context</span><span class="p">(),</span> <span class="nx">result</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">req</span> <span class="p">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">WithContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Do</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">io</span><span class="p">.</span><span class="nx">Copy</span><span class="p">(</span><span class="nx">ioutil</span><span class="p">.</span><span class="nx">Discard</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">result</span><span class="p">.</span><span class="nx">End</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">())</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%+v\n&quot;</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>元記事はGoogleを叩いていましたが、あのURLだとリダイレクトが発生して考えることが増えそうなので、
このブログのURLに変更してあります。
あと静的ページなら相手に余計な負荷をかけることも無いですしね。</p>

<p>さっそく実行してみましょう。
<strong>Keep-Aliveを有効</strong>にした場合の結果です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2017/01/14 16:14:10 GET https://shogo82148.github.io/blog/2016/12/20/redis-fast-0-dot-19-released/
</span><span class='line'>2017/01/14 16:14:10 DNS lookup:          30 ms
</span><span class='line'>TCP connection:      16 ms
</span><span class='line'>TLS handshake:      130 ms
</span><span class='line'>Server processing:   17 ms
</span><span class='line'>Content transfer:     1 ms
</span><span class='line'>Name Lookup:      30 ms
</span><span class='line'>Connect:          47 ms
</span><span class='line'>Pre Transfer:    177 ms
</span><span class='line'>Start Transfer:  195 ms
</span><span class='line'>Total:           197 ms
</span><span class='line'>2017/01/14 16:14:10 GET https://shogo82148.github.io/blog/2016/12/15/leap-second-in-datetime-dot-pm/
</span><span class='line'>2017/01/14 16:14:10 DNS lookup:           0 ms
</span><span class='line'>TCP connection:       0 ms
</span><span class='line'>TLS handshake:        0 ms
</span><span class='line'>Server processing:   17 ms
</span><span class='line'>Content transfer:     2 ms
</span><span class='line'>Name Lookup:       0 ms
</span><span class='line'>Connect:           0 ms
</span><span class='line'>Pre Transfer:      0 ms
</span><span class='line'>Start Transfer:   17 ms
</span><span class='line'>Total:            19 ms
</span><span class='line'>2017/01/14 16:14:10 GET https://shogo82148.github.io/blog/2016/11/23/qr-code/
</span><span class='line'>2017/01/14 16:14:10 DNS lookup:           0 ms
</span><span class='line'>TCP connection:       0 ms
</span><span class='line'>TLS handshake:        0 ms
</span><span class='line'>Server processing:   17 ms
</span><span class='line'>Content transfer:     4 ms
</span><span class='line'>Name Lookup:       0 ms
</span><span class='line'>Connect:           0 ms
</span><span class='line'>Pre Transfer:      0 ms
</span><span class='line'>Start Transfer:   17 ms
</span><span class='line'>Total:            22 ms</span></code></pre></td></tr></table></div></figure>


<p>二回目以降のDNS lookupやTCP connectionが0msになっています。
予想通りコネクションが再利用され、名前解決やコネクション確立がスキップされているようです。</p>

<p>次に<strong>Keep-Aliveを無効</strong>にした状態で実行してみます。
コード中の<code>DisableKeepAlives</code>のコメントを外すと都度接続になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2017/01/14 16:14:33 GET https://shogo82148.github.io/blog/2016/12/20/redis-fast-0-dot-19-released/
</span><span class='line'>2017/01/14 16:14:33 DNS lookup:          21 ms
</span><span class='line'>TCP connection:      18 ms
</span><span class='line'>TLS handshake:      131 ms
</span><span class='line'>Server processing:   15 ms
</span><span class='line'>Content transfer:     1 ms
</span><span class='line'>Name Lookup:      21 ms
</span><span class='line'>Connect:          40 ms
</span><span class='line'>Pre Transfer:    171 ms
</span><span class='line'>Start Transfer:  187 ms
</span><span class='line'>Total:           188 ms
</span><span class='line'>2017/01/14 16:14:33 GET https://shogo82148.github.io/blog/2016/12/15/leap-second-in-datetime-dot-pm/
</span><span class='line'>2017/01/14 16:14:33 DNS lookup:           1 ms
</span><span class='line'>TCP connection:      15 ms
</span><span class='line'>TLS handshake:       33 ms
</span><span class='line'>Server processing:   14 ms
</span><span class='line'>Content transfer:     1 ms
</span><span class='line'>Name Lookup:       1 ms
</span><span class='line'>Connect:          16 ms
</span><span class='line'>Pre Transfer:     49 ms
</span><span class='line'>Start Transfer:   64 ms
</span><span class='line'>Total:            65 ms
</span><span class='line'>2017/01/14 16:14:33 GET https://shogo82148.github.io/blog/2016/11/23/qr-code/
</span><span class='line'>2017/01/14 16:14:33 DNS lookup:           0 ms
</span><span class='line'>TCP connection:      17 ms
</span><span class='line'>TLS handshake:       35 ms
</span><span class='line'>Server processing:   19 ms
</span><span class='line'>Content transfer:     3 ms
</span><span class='line'>Name Lookup:       0 ms
</span><span class='line'>Connect:          18 ms
</span><span class='line'>Pre Transfer:     54 ms
</span><span class='line'>Start Transfer:   73 ms
</span><span class='line'>Total:            76 ms</span></code></pre></td></tr></table></div></figure>


<p>リクエスト毎に名前解決が行われるようになりました。
ですが、初回に比べて異様に速いですね。
OS側でキャッシュされてるんでしょうか。</p>

<p><code>GODEBUG=netdns=go</code>と環境変数を設定すると、Pure Golangで名前解決が行われるらしいので、
その場合の結果も貼っておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2017/01/14 16:15:03 GET https://shogo82148.github.io/blog/2016/12/20/redis-fast-0-dot-19-released/
</span><span class='line'>2017/01/14 16:15:03 DNS lookup:          33 ms
</span><span class='line'>TCP connection:      15 ms
</span><span class='line'>TLS handshake:      133 ms
</span><span class='line'>Server processing:   16 ms
</span><span class='line'>Content transfer:     0 ms
</span><span class='line'>Name Lookup:      33 ms
</span><span class='line'>Connect:          48 ms
</span><span class='line'>Pre Transfer:    181 ms
</span><span class='line'>Start Transfer:  197 ms
</span><span class='line'>Total:           198 ms
</span><span class='line'>2017/01/14 16:15:03 GET https://shogo82148.github.io/blog/2016/12/15/leap-second-in-datetime-dot-pm/
</span><span class='line'>2017/01/14 16:15:03 DNS lookup:          17 ms
</span><span class='line'>TCP connection:      14 ms
</span><span class='line'>TLS handshake:       32 ms
</span><span class='line'>Server processing:   19 ms
</span><span class='line'>Content transfer:     0 ms
</span><span class='line'>Name Lookup:      17 ms
</span><span class='line'>Connect:          31 ms
</span><span class='line'>Pre Transfer:     63 ms
</span><span class='line'>Start Transfer:   82 ms
</span><span class='line'>Total:            83 ms
</span><span class='line'>2017/01/14 16:15:03 GET https://shogo82148.github.io/blog/2016/11/23/qr-code/
</span><span class='line'>2017/01/14 16:15:03 DNS lookup:          18 ms
</span><span class='line'>TCP connection:      15 ms
</span><span class='line'>TLS handshake:       36 ms
</span><span class='line'>Server processing:   18 ms
</span><span class='line'>Content transfer:     2 ms
</span><span class='line'>Name Lookup:      18 ms
</span><span class='line'>Connect:          34 ms
</span><span class='line'>Pre Transfer:     70 ms
</span><span class='line'>Start Transfer:   89 ms
</span><span class='line'>Total:            91 ms</span></code></pre></td></tr></table></div></figure>


<h3>DNSキャッシュあり版をトレースする</h3>

<p>DNSキャッシュありも同様にトレースしようと思ったのですが、
残念ながら<a href="https://github.com/abursavich/nett">nett</a>は<code>context.Context</code>を引数に持つインターフェースをサポートしていません。
httptraceを利用するにはcontextが必要なので、同じ方法は使えません。</p>

<p>仕方がないので、頑張ってResolverを自作して、
時間計測するコードを埋め込んでいきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;io&quot;</span>
</span><span class='line'>  <span class="s">&quot;io/ioutil&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/abursavich/nett&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">urls</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;https://shogo82148.github.io/blog/2016/12/20/redis-fast-0-dot-19-released/&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;https://shogo82148.github.io/blog/2016/12/15/leap-second-in-datetime-dot-pm/&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;https://shogo82148.github.io/blog/2016/11/23/qr-code/&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">MyResolver</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Resolver</span> <span class="nx">nett</span><span class="p">.</span><span class="nx">Resolver</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">MyResolver</span><span class="p">)</span> <span class="nx">Resolve</span><span class="p">(</span><span class="nx">host</span> <span class="kt">string</span><span class="p">)</span> <span class="p">([]</span><span class="nx">net</span><span class="p">.</span><span class="nx">IP</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">start</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">ips</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Resolver</span><span class="p">.</span><span class="nx">Resolve</span><span class="p">(</span><span class="nx">host</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Name Lookup: %s&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">Sub</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">ips</span><span class="p">,</span> <span class="nx">err</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">dialer</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">nett</span><span class="p">.</span><span class="nx">Dialer</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Resolver</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">MyResolver</span><span class="p">{</span>
</span><span class='line'>          <span class="o">&amp;</span><span class="nx">nett</span><span class="p">.</span><span class="nx">CacheResolver</span><span class="p">{</span><span class="nx">TTL</span><span class="p">:</span> <span class="mi">5</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Minute</span><span class="p">},</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">IPFilter</span><span class="p">:</span> <span class="nx">nett</span><span class="p">.</span><span class="nx">DualStack</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Timeout</span><span class="p">:</span>  <span class="mi">10</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">client</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Client</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Transport</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Transport</span><span class="p">{</span>
</span><span class='line'>          <span class="nx">Dial</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">network</span><span class="p">,</span> <span class="nx">address</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">net</span><span class="p">.</span><span class="nx">Conn</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">start</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>              <span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">dialer</span><span class="p">.</span><span class="nx">Dial</span><span class="p">(</span><span class="nx">network</span><span class="p">,</span> <span class="nx">address</span><span class="p">)</span>
</span><span class='line'>              <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Connect: %s&quot;</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">Sub</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span><span class='line'>              <span class="k">return</span> <span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="nx">Proxy</span><span class="p">:</span>             <span class="nx">http</span><span class="p">.</span><span class="nx">ProxyFromEnvironment</span><span class="p">,</span>
</span><span class='line'>          <span class="c1">// DisableKeepAlives: true,</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">url</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">urls</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;GET %s&quot;</span><span class="p">,</span> <span class="nx">url</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Get</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">io</span><span class="p">.</span><span class="nx">Copy</span><span class="p">(</span><span class="nx">ioutil</span><span class="p">.</span><span class="nx">Discard</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こちらのコードも実行してみます。
<strong>Keep-Aliveを有効</strong>にした場合の結果です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2017/01/14 16:29:19 GET https://shogo82148.github.io/blog/2016/12/20/redis-fast-0-dot-19-released/
</span><span class='line'>2017/01/14 16:29:19 Name Lookup: 22.239218ms
</span><span class='line'>2017/01/14 16:29:19 Connect: 39.364428ms
</span><span class='line'>2017/01/14 16:29:19 GET https://shogo82148.github.io/blog/2016/12/15/leap-second-in-datetime-dot-pm/
</span><span class='line'>2017/01/14 16:29:19 GET https://shogo82148.github.io/blog/2016/11/23/qr-code/</span></code></pre></td></tr></table></div></figure>


<p>こちらも予想通り名前解決とコネクション確立が初回しか行われないので、
最初の一回だけ時間計測のログが出力されています。</p>

<p>次に、<strong>Keep-Aliveを無効</strong>にした場合の結果です。
DNSキャッシュなし版と同様に<code>DisableKeepAlives</code>のコメントを外すと無効にできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2017/01/14 16:29:41 GET https://shogo82148.github.io/blog/2016/12/20/redis-fast-0-dot-19-released/
</span><span class='line'>2017/01/14 16:29:41 Name Lookup: 27.337342ms
</span><span class='line'>2017/01/14 16:29:41 Connect: 44.552754ms
</span><span class='line'>2017/01/14 16:29:41 GET https://shogo82148.github.io/blog/2016/12/15/leap-second-in-datetime-dot-pm/
</span><span class='line'>2017/01/14 16:29:41 Name Lookup: 1.991µs
</span><span class='line'>2017/01/14 16:29:41 Connect: 14.964222ms
</span><span class='line'>2017/01/14 16:29:41 GET https://shogo82148.github.io/blog/2016/11/23/qr-code/
</span><span class='line'>2017/01/14 16:29:41 Name Lookup: 2.024µs
</span><span class='line'>2017/01/14 16:29:41 Connect: 22.782755ms</span></code></pre></td></tr></table></div></figure>


<p>二回目以降の名前解決が一瞬で終わっており、キャッシュされている様子が確認できますね。</p>

<p>最後に名前解決にPure Golangを使った結果です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2017/01/14 16:30:04 GET https://shogo82148.github.io/blog/2016/12/20/redis-fast-0-dot-19-released/
</span><span class='line'>2017/01/14 16:30:04 Name Lookup: 18.279786ms
</span><span class='line'>2017/01/14 16:30:04 Connect: 35.113831ms
</span><span class='line'>2017/01/14 16:30:04 GET https://shogo82148.github.io/blog/2016/12/15/leap-second-in-datetime-dot-pm/
</span><span class='line'>2017/01/14 16:30:04 Name Lookup: 1.628µs
</span><span class='line'>2017/01/14 16:30:04 Connect: 16.364037ms
</span><span class='line'>2017/01/14 16:30:04 GET https://shogo82148.github.io/blog/2016/11/23/qr-code/
</span><span class='line'>2017/01/14 16:30:04 Name Lookup: 1.77µs
</span><span class='line'>2017/01/14 16:30:04 Connect: 16.048895ms</span></code></pre></td></tr></table></div></figure>


<h2>異様な高速化の理由</h2>

<p>さて、ここまでの結果で、たしかにDNSキャッシュの効果があることは確認できました。
しかし、デフォルトの状態ではKeep-Aliveが有効になっているため、
事前の予想の通り<strong>名前解決が行われるのは初回のみ</strong>ということがわかりました。
mattnさんのベンチマークにはKeep-Alive無効化処理は入っていないので、
DNSキャッシュの有無で差はでないはずです。</p>

<p>思うに、<code>for i := 0; i &lt; b.N; i++ {}</code>がないのが原因なのではないかと・・・。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;testing&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">BenchmarkHoge1</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">1100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">BenchmarkHoge2</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">997</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">BenchmarkFuga1</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">1100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">BenchmarkFuga2</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">997</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>僕の手元では以下のような結果になりました。
(タイミングの問題なので、再現させるには数値の微調整が必要かも)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BenchmarkHoge1-4            1    1104960703 ns/op
</span><span class='line'>BenchmarkHoge2-4             2     500677841 ns/op
</span><span class='line'>BenchmarkFuga1-4             1    1103413336 ns/op
</span><span class='line'>BenchmarkFuga2-4             1    1001147782 ns/op
</span><span class='line'>PASS</span></code></pre></td></tr></table></div></figure>


<h2>nettの問題点</h2>

<p><a href="https://github.com/abursavich/nett">nett</a>の効果も確認できたし、
ベンチマークが異様に良い理由もわかったので、
ここで検証終了・・・といきたいところですが、
nettはあまりおすすめできないというのが僕の意見です。</p>

<h3>古い</h3>

<p>最終コミットが2年前と古いです。
まだGo1.7が出てないころなので、当然<code>context.Context</code>にも対応していないわけです。
そのため名前解決のタイムアウトやキャンセルを制御できません。
また、この検証でもhttptraceが使えなくて悲しい思いをしたので、
contextをサポートして欲しい・・・。</p>

<h3>DNSレコードのTTLを無視している</h3>

<p><code>nett.CacheResolver</code>のTTLには固定の時間しか設定できないようです。
DNSレコード自体にTTLが設定されているはずなので、本来であればそれを尊重するべきです。
短い時間のキャッシュであれば問題ないかもしれないですが、
アクセスした相手をDNS浸透問題(浸透いうな！)で悩ませてしまう可能性があるので、
できれば相手の意向を尊重したいところです。</p>

<h3>キャッシュクリアが無い</h3>

<p><code>nett.CacheResolver</code>のTTLの実装は
「前回の名前解決からの経過時間を見て再取得」という単純なものです。
ようするにガーベージコレクションがない状態です。
TTLが過ぎてもキャッシュから本当に消えるわけではないので、
多くのドメインを相手にする場合、メモリを食い尽くす可能性があります。</p>

<h3>2017/01/16追記: 同一ホストの名前解決の排他制御が甘い</h3>

<p>fujiwaraさんからの返信を受けて、ちょっと考えたことがあったので追記。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">この前Goのhttp clientで名前解決結果をキャッシュしたかったの、ベンチマークしててシナリオ的に新規接続が多かったのとローカルに立てたdnsmasqの負荷が気になるほど名前引いてからなので、キャッシュするにしても数秒で実用的には充分だった(TTLの心配するほどではない</p>&mdash; fujiwara (@fujiwara) <a href="https://twitter.com/fujiwara/status/820232828231163904">January 14, 2017</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p lang="ja" dir="ltr"><a href="https://twitter.com/shogo82148">@shogo82148</a> アプリのcacheは(dnsが1段目として)2段目のcacheになるから、dnsに負荷掛けないためにするだけなら数秒で問題ないはずなので、そこまで短くするならちゃんとやる意味がなくて、TTLは専門家(dns)に任せるべきかなあと</p>&mdash; fujiwara (@fujiwara) <a href="https://twitter.com/fujiwara/status/820255789944143876">January 14, 2017</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>名前解決をキャッシュしたい理由は「用途はベンチマーク」「キャッシュは数秒で充分」とのことです。</p>

<p>ちょっとここからは推測になりますが・・・
リソースを徐々に消費してしばらくして突然死というパターンもあるので、
ベンチマークは短くとも1分以上続けるのが普通だと思います(Mackerel等の監視間隔も最小1分ですしね)。
にも関わらず、名前解決の負荷が数秒で落ち着くということは、Keep-Aliveは有効になっていたと推測できます。
それでも名前解決の負荷が問題になるということは、それなりに高い並列度だったのではないかと。</p>

<p>ここで問題になってくるのが、<strong>nettは同一ホストの問い合わせを排他制御していない</strong>という点です。
複数クライアントが同時にキャッシュの有無を確認→ほぼ同時にDNSに問い合わせ→キャッシュ更新(ここだけは排他制御される)
というケースが考えられます。
通常用途ならさほど問題にならないかなーと思ったのですが、
ベンチマークのように極端に並列度が高い場合、TTLが切れた瞬間だけDNSの負荷があがることになります。</p>

<p>ここは、<a href="https://twitter.com/methane">methane</a>さんがGo Conference 2016 Springで発表されていた
<a href="https://docs.google.com/presentation/d/1pSywpKera0huKCHDVGPVA2jQMvy-Pk8IR9s7AAVojDM/edit#slide=id.p">zero time cache pattern</a>
を使うのが賢い気がします。
(同じくmethaneさんの<a href="http://dsas.blog.klab.org/archives/cat_50043510.html">ISUCON6の予選参戦記事</a>も参照)</p>

<p>・・・と書きましたが、あくまでも推測です。
本来はnettを導入する前後でベンチマークを取って検証するべきなのですが、
さすがにこれをpublicなネットワークでやるとDOS攻撃になってしまいます。
DNSよくわからない・・・検証環境構築つらい・・・ので、とりあえずメモとして残しておきます。
だれか詳しい人の検証求む。</p>

<p>(以上、追記終わり)</p>

<h2>解決策は？</h2>

<p>mattnさんの記事には「Go 1.8 からは Resolver提供されるので、自前で簡単に名前引きのキャッシュを実装出来る」とありますが、
<strong>1.8にはユーザがResolverの動作をカスタマイズする機能はありません</strong>。
<a href="https://github.com/golang/go/blob/ecc4474341504f5893c8333dbb68c520dbe93ca5/src/net/lookup.go#L100">TODO: optional interface impl override hook</a>
な状態です。
マイルストーンをみる限り<a href="https://github.com/golang/go/issues/12503">1.9で入るらしい</a>(？)ので、それを待ちましょう・・・。</p>

<p>また、現時点では、netパッケージにDNSレコードのTTLを取得する機能はありません。
つまり先に挙げたnettの欠点をすべて補うには、<strong>「Pure GolangなDNSクライアントの独自実装」</strong>が必要となります。
<a href="https://github.com/golang/go/issues/16218">golang.org/x/net/dnsが入る予定</a>はあるようですが、
実装は未だ存在せず、入るバージョンも決まっていないようです。</p>

<p>つらい。どう考えても「楽な方法」ではない・・・。</p>

<p>Consulにも使われているという<a href="https://github.com/miekg/dns">miekg/dns</a>は見つけたので、誰か強い人よろしくお願いします。
(ちなみにgolang.org/x/net/dnsの候補として一度は挙がったものの、別実装で行くらしい)</p>

<h2>まとめ</h2>

<ul>
<li><a href="https://github.com/abursavich/nett">nett</a>は名前解決キャッシュに効果あり

<ul>
<li>しかしコードが古いので、Go1.7が出ている現状ではおすすめできない</li>
</ul>
</li>
<li>ResolverのカスタマイズはGo1.9かららしい(Go1.8ではまだ入らない)</li>
<li>暫定的な解決策は

<ul>
<li><a href="https://github.com/abursavich/nett">nett</a>を突っついてGo1.7対応をしてもらう(ただし、DNS浸透問題(浸透いうな！)解決にはDNSクライアントの実装が必要)</li>
<li><a href="https://github.com/miekg/dns">miekg/dns</a>を使ってDNSクライアントを頑張って独自実装(つらい)</li>
</ul>
</li>
<li>ベンチの際には<code>for i := 0; i &lt; b.N; i++ {}</code>をわすれずに</li>
</ul>


<p>http.Clientで名前解決結果cacheする楽な方法、現在も絶賛募集中です。</p>

<h2>おまけ</h2>

<p>この記事書くのにnetパッケージの中を探っていたら、
ソースコードの中に<a href="https://github.com/golang/go/blob/ecc4474341504f5893c8333dbb68c520dbe93ca5/src/net/lookup.go#L39">Gopher君を見つけた</a>。</p>

<p>ʕ◔ϖ◔ʔʕ◔ϖ◔ʔʕ◔ϖ◔ʔ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis::Fast 0.19リリースのお知らせ]]></title>
    <link href="https://shogo82148.github.io/blog/2016/12/20/redis-fast-0-dot-19-released/"/>
    <updated>2016-12-20T22:38:27+09:00</updated>
    <id>https://shogo82148.github.io/blog/2016/12/20/redis-fast-0-dot-19-released</id>
    <content type="html"><![CDATA[<p><a href="https://metacpan.org/pod/Redis::Fast">Redis::Fast 0.19</a> をリリースしました。
主な変更点は以下の通りです。</p>

<ul>
<li><code>reconnect_on_error</code> オプションの追加</li>
<li>Sentinelのノード一覧が更新されない不具合の修正</li>
<li>IPv6の実験的サポート</li>
</ul>


<!-- More -->


<h2><code>reconnect_on_error</code> オプションの追加</h2>

<p><a href="https://github.com/yoheimuta">@yoheimuta</a>さんからのプルリクエストです。
今まではネットワークエラーが発生した時のみ再接続処理が走っていましたが、
Redisがエラーを返した場合にも再接続を行うようになります。
マスタースレーブ構成をしているときに、
何らかの原因によりRedis::Fastからのコネクションを維持したまま、
マスターがスレーブに降格してしまった場合に対処するための機能です。
以下のように設定することで、新しいマスターに再接続を行うことが可能になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$r</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Fast</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span>
</span><span class='line'>    <span class="n">reconnect</span>          <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="c1"># 0以上で再接続有効</span>
</span><span class='line'>    <span class="n">reconnect_on_error</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="p">(</span><span class="nv">$error</span><span class="p">,</span> <span class="nv">$ret</span><span class="p">,</span> <span class="nv">$command</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$error</span> <span class="o">=~</span><span class="sr"> /READONLY You can&#39;t write against a read only slave/</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="c1"># 再接続を行う。次の再接続まで最低1秒空ける</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="c1"># 再接続は行わない</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Sentinelのノード一覧が更新されない不具合の修正</h2>

<p>Redis::FastにはどれかひとつのSentinelノードに接続すると、
他のノードの情報を自動的に収集する機能があります。
この機能が最新のRedisでは動いていなかったので修正しました。
具体的にいつからなのかまでは追ってないのですが、
Redisのバージョン3.0.6から3.2.6の間のどこかで
ノード一覧の形式が変わってしまったようです。</p>

<p>(最近Sentinelの話題を聞かないけど、みんな使ってるのかな・・・)</p>

<h2>IPv6の実験的サポート</h2>

<p>サーバの指定にIPv6のアドレスが使えるようになりました。
<code>Redis::Fast-&gt;new(server =&gt; "[::1]:6379")</code> のような指定ができます。</p>

<p>バックエンドのhiredis自体は以前からIPv6に対応していたのですが、
今までRedis::Fastでは正しく動きませんでした。</p>

<p>とりあえずlocalhostに接続できることは確認しましたが、
手元にIPv6のネットワークがなくて検証もできていないため、
実験的サポートという扱いで・・・。
 誰かIPv6に詳しい方、検証お願いします。</p>

<h2>感想</h2>

<ul>
<li>テストがなかなか通らず辛かった</li>
<li>CPAN Autherを変な幾何学模様から変えたい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DateTime.pmにうるう秒の修正が入った話]]></title>
    <link href="https://shogo82148.github.io/blog/2016/12/15/leap-second-in-datetime-dot-pm/"/>
    <updated>2016-12-15T22:17:47+09:00</updated>
    <id>https://shogo82148.github.io/blog/2016/12/15/leap-second-in-datetime-dot-pm</id>
    <content type="html"><![CDATA[<p>こんにちは、<a href="https://metacpan.org/pod/DateTime">DateTime.pm</a> Watcherのいっちーです。
本日面白いパッチがDateTime.pmに取り込まれたので、ご紹介したいと思います。</p>

<!-- More -->


<p>そのpullreqがこちらです。Closedになっていますが、該当コミットはmasterに取り込まれています。</p>

<ul>
<li><a href="https://github.com/houseabsolute/DateTime.pm/pull/48">The leap second in 2012 was on 2012-07-01 not 2012-06-01. #48</a></li>
</ul>


<blockquote><p>per <a href="https://confluence.qps.nl/display/KBE/UTC+to+GPS+Time+Correction">https://confluence.qps.nl/display/KBE/UTC+to+GPS+Time+Correction</a> the leap second in 2012 was on 2012-07-01 not 2012-06-01. It&rsquo;s is well known that leap seconds only occur directly before Jan 1st or July 1st.</p></blockquote>

<p>適当な和訳「2012年に挿入されたうるう秒は2012年6月1日ではなく2012年7月1日です。よく知られているように、今までに挿入されたうるう秒は1月1日と7月1日の直前だけです。」</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/lib/DateTime/LeapSecond.pm b/lib/DateTime/LeapSecond.pm</span>
</span><span class='line'><span class="gh">index 66e1b2b..4a38be2 100644</span>
</span><span class='line'><span class="gd">--- a/lib/DateTime/LeapSecond.pm</span>
</span><span class='line'><span class="gi">+++ b/lib/DateTime/LeapSecond.pm</span>
</span><span class='line'><span class="gu">@@ -108,7 +108,7 @@ sub _initialize {</span>
</span><span class='line'>             1999  Jan. 1  +1
</span><span class='line'>             2006  Jan. 1  +1
</span><span class='line'>             2009  Jan. 1  +1
</span><span class='line'><span class="gd">-            2012  Jun. 1  +1</span>
</span><span class='line'><span class="gi">+            2012  Jul. 1  +1</span>
</span><span class='line'>             2015  Jul. 1  +1
</span><span class='line'>             2017  Jan. 1  +1
</span><span class='line'>             )
</span></code></pre></td></tr></table></div></figure>


<p>なぜ4年間誰も気が付かなかった。</p>

<h2>このバグの影響</h2>

<p>結論から言うと、<strong>この修正によるDateTime.pmの挙動への影響はありません</strong>。
これを書いている時点で最新版のver1.41には、上記の修正は取り込まれていませんが、
うるう秒は2012年7月1日に正しく挿入されます。</p>

<p>以前<a href="//shogo82148.github.io/blog/2015/12/09/perl-datetime/">Perl の DateTime 利用上の注意点</a>で
うるう秒の確認をしたときと同様に検証してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">feature</span> <span class="sx">qw(say)</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">DateTime</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$dt</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2012</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">7</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">hour</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$dt</span><span class="o">-&gt;</span><span class="n">subtract</span><span class="p">(</span><span class="n">seconds</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$dt</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2012</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">6</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">hour</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$dt</span><span class="o">-&gt;</span><span class="n">subtract</span><span class="p">(</span><span class="n">seconds</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ perl datetime.pl
</span><span class='line'>2012-07-01T08:59:60
</span><span class='line'>2012-06-01T08:59:59
</span><span class='line'>
</span><span class='line'>$ PERL_DATETIME_PP=1 perl datetime.pl
</span><span class='line'>2012-07-01T08:59:60
</span><span class='line'>2012-06-01T08:59:59</span></code></pre></td></tr></table></div></figure>


<p>DateTime.pmにはXSの実装とPurePerlの実装が含まれていますが、
どちらの実装でも2012年7月1日に正しくうるう秒が挿入され、2012年6月1日にはうるう秒はありません。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">プログラム書いてると「書いたとおりに動くんじゃなくて思った通りに動けよ」って思うけど、たまに「コード見たら絶対動かないはずなのになぜか思った通りにちゃんと動く」みたいな奴に出くわすと恐ろしくて夜も眠れなくなるのでやっぱり書いたとおりに動いて欲しい</p>&mdash; かずー (@kazoo04) <a href="https://twitter.com/kazoo04/status/808195587518578688">December 12, 2016</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>まさに、「コード見たら絶対動かないはずなのになぜか思った通りにちゃんと動く」といった感じです。</p>

<h2>なぜ正しく動くのか</h2>

<p>なぜ正しく動くのか、その答えはうるう秒一覧の解析を行う部分にありました。</p>

<ul>
<li><a href="https://github.com/houseabsolute/DateTime.pm/blob/ff0e3780ea1c841eb17a0245f5f8061cf10c28d3/lib/DateTime/LeapSecond.pm#L40-L41">DateTime.pm/lib/DateTime/LeapSecond.pm</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$utc_epoch</span>
</span><span class='line'>    <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="n">_ymd2rd</span><span class="p">(</span> <span class="nv">$year</span><span class="p">,</span> <span class="p">(</span> <span class="nv">$mon</span> <span class="o">=~</span><span class="sr"> /Jan/i</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="mi">7</span> <span class="p">),</span> <span class="nv">$mday</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Jan.(1月)以外はすべて7月として扱っている！</strong></p>

<p>Janか否かが重要なので、JunだろうがJulだろうが7月として扱われるので、結果的に正しく動くわけです。
「バグを埋め込んでいたけど、実装が適当でたまたま動いていた」というよくあるパターンですね。
将来3月末や9月末に挿入されるようになったとき大丈夫なんでしょうか・・・。
まあ、必要になるのは数百年後とかなので、僕には関係ない・・・そう、関係ないのです・・・。</p>

<h2>まとめ</h2>

<ul>
<li>DateTime.pmのうるう秒一覧にbug fix</li>
<li>動作に影響は無いので、ユーザ側では特に気にする必要はない

<ul>
<li>うるう秒自体を気にしないといけないのは仕方がない・・・</li>
</ul>
</li>
<li>JanとかJunとかJulとか似てて紛らわしいんだよ！！数字書け！！</li>
</ul>


<h2>ちなみに</h2>

<p>最新版のver1.41は来年(2017年)の1月1日のうるう秒に対応済みです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">feature</span> <span class="sx">qw(say)</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">DateTime</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$dt</span> <span class="o">=</span> <span class="n">DateTime</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="n">year</span> <span class="o">=&gt;</span> <span class="mi">2017</span><span class="p">,</span> <span class="n">month</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">day</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">hour</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">,</span> <span class="n">time_zone</span> <span class="o">=&gt;</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$dt</span><span class="o">-&gt;</span><span class="n">subtract</span><span class="p">(</span><span class="n">seconds</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ perl datetime.pl
</span><span class='line'>2017-01-01T08:59:60</span></code></pre></td></tr></table></div></figure>


<p>みなさん準備は出来ていますか 😇</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitterの二次元コード問題と、QRコード・フレームQRの見分け方]]></title>
    <link href="https://shogo82148.github.io/blog/2016/11/23/qr-code/"/>
    <updated>2016-11-23T10:32:43+09:00</updated>
    <id>https://shogo82148.github.io/blog/2016/11/23/qr-code</id>
    <content type="html"><![CDATA[<p>先日Twitterの公式アプリがQRコード®
(<a href="https://blog.twitter.com/ja/2016/1117qrcode">お店やお友達を簡単にフォローするために</a>)
の作成と読み取りに対応しました。
しかし、生成されるQRコードが標準規格に準拠していないため、
「他のリーダーで読めない」「法的に問題があるのでは？」等々の指摘が出ていました。
人事ながらTwitterさんのことが心配になったので少し調べてみました。</p>

<p>なお、僕は法律の専門家ではないため、本記事の正確性は保証できません。
あくまで個人的な見解なので、
実際にQRコード®を使用するさいは各自の判断でお願いします。</p>

<!-- More -->


<h2>指摘ツイート</h2>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Twitterが生成するQRコード、規格(JIS X 0510・ISO/IEC 18004)を大幅に逸脱しているので「QRコード®」を名乗ること自体に法的なリスクがある。</p>&mdash; 祥太(2日目 東Q30a) (@shota_) <a href="https://twitter.com/shota_/status/799066842694197248">November 17, 2016</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">「デンソーウェーブは、JIS、ISOの規格に沿ったQRコードに限っては特許権を行使しませんが、規格を逸脱したQRコードについてはこの限りではございませんので、特許権を行使させていただくこともございます。」<br><br>(出典: <a href="https://t.co/SKXgBGSb8E">https://t.co/SKXgBGSb8E</a> )</p>&mdash; 祥太(2日目 東Q30a) (@shota_) <a href="https://twitter.com/shota_/status/799066960466034689">November 17, 2016</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">明暗暗転で読み取らないという話を多数見かけますけど、そちらについては「ISO/IEC 18004からは逸脱」「JIS X 0510には準拠」(規格票7.3.8参照)という微妙な状況なのです。多分ISOには準拠しているのでアプリは悪くないと思います。</p>&mdash; 祥太(2日目 東Q30a) (@shota_) <a href="https://twitter.com/shota_/status/799104490095808512">November 17, 2016</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>たしかに <a href="http://www.qrcode.com/faq.html">qrcode.comのFAQ</a>には
特許について以下の記述があります。</p>

<blockquote><p>色を付けたりイラストを入れるような使い方をしても問題ありませんか？
(中略)
また、QRコードにイラストを重ねたりデザインを乗せるということは、QRコードの規格から外れ「QRコードではないもの」となってしまう可能性がございます。
デンソーウェーブは、JIS、ISOの規格に沿ったQRコードに限っては特許権を行使しませんが、規格を逸脱したQRコードについてはこの限りではございませんので、特許権を行使させていただくこともございます。</p></blockquote>

<h2>問題点</h2>

<p>公式アプリの生成する二次元コードは以下のような問題があります。</p>

<ul>
<li>データパターンの20%近くがアイコンで上書きされている</li>
<li>「アライメントパターン」がTwitterのロゴで欠けている</li>
<li>明暗暗転している(一応JISには沿っているらしい)</li>
</ul>


<p>法的リスク以前に、
読み取り性能/互換性が劣化するので使わない方が無難でしょう。</p>

<p>自分のプロフィールのURL
(僕の場合は <a href="https://twitter.com/shogo82148">https://twitter.com/shogo82148</a> )を
QRコードに変換すれば公式アプリのリーダーでも読めるので、
こちらの方がオススメです。</p>

<p><img src="http://chart.apis.google.com/chart?cht=qr&amp;chs=130x130&amp;chl=https://twitter.com/shogo82148" alt="僕のQRコード" /></p>

<h2>QRコード関連の権利</h2>

<h3>特許</h3>

<p>QRコード®のJIS規格JIS X 0510には、
関連する特許として特許第2938338号「二次元コード」があげられています。
ただし、特許の保護期間は20年なので、1994年に出願されたこの特許は2014年で消滅しています。
したがってこの特許を理由に訴えられることはなさそうです。</p>

<p>ところがQRコードには実はモデル1とモデル2の二種類があり、
モデル2に関しては特許第3716527号「２次元コードおよび２次元コードの読取方法」が
該当しそうです。
この特許は「アライメントパターン」という特殊なパターンを二次元コードに埋め込んで、
大きなコードや曲面に印刷されたコードも読み取れるようにするというものです。
こちらは2017年1月28日までが保護期間で、この記事を書いている時点ではまだ保護期間内です。</p>

<p>Twitter公式アプリの二次元コードはモデル2にが該当するので、
この特許を理由に訴えられる可能性は依然としてありそうです。
ただし、期限が切れる2017年1月29日以降であれば、堂々と規格違反のQRコードを作れるはず(?)
(繰り返しになりますが、僕が関連特許を見落としている可能性もあるので、実際の使用は各自の判断で)</p>

<h3>商標</h3>

<p>商標にも保護期限ってあるのかなあと調べてみたところ、
10年の期限はあるものの上限なく延長できるそうです。
したがって、QRコード®でないものをQRコード®として公開するのはまずそうです。</p>

<p>なお、作った二次元コード自体は商標ではないので、
公式アプリで作ったコードを利用するだけであれば何も問題はないはずです。
ユーザが訴えられる可能性はほとんどないのでご安心を。</p>

<h2>フレームQRについて</h2>

<p>QRコード®も進化していて、今はフレームQR®というものがあり、
コードの中に画像を埋め込めるそうです。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr"><a href="https://twitter.com/shota_">@shota_</a> フレームQRという既存技術なので問題ないのではないでしょうか？<a href="https://t.co/sYsAIQiNWW">https://t.co/sYsAIQiNWW</a></p>&mdash; かおる (@awKaoru) <a href="https://twitter.com/awKaoru/status/799074365572644865">November 17, 2016</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>ググって調べてみたところ、これには特許第5057560号「プログラム、情報記憶媒体、２次元コード、印刷物、２次元コード画像、２次元コード画像の表示制御方法、２次元コード生成システム」
が関連していそうです。
この特許、出願人がQRコード®の開発元であるデンソーウェーブではなく、
株式会社バンダイナムコエンターテインメントなんですよね。
QRコード®が比較的オープンなのに対してフレームQR®関連の資料がないのは
この辺が関連しているのでしょうか・・・。</p>

<h3>QRコードとフレームQR見分け方</h3>

<p>さて気になるのは、Twitterの二次元コードがフレームQR®に該当するか、ですよね。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">QRフレームと違うらいいけどそもそもQRフレームの定義がわからないせいで違いがわからない・・・  自由に使えるキャンパス領域に描いてるように見えるような気もするんだけど</p>&mdash; オウカ♥ドール (@rofi) <a href="https://twitter.com/rofi/status/799088728035598336">November 17, 2016</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>結論から言うと、<strong>QRコード®とフレームQR®は別物</strong> であり、
 <strong>Twitterの二次元コードはフレームQR®ではありません</strong>。</p>

<p>具体的な見分け方ですが、QRコード®に特徴的な「位置検出パターン」「タイミングパターン」「アライメントパターン」は
フレームQR®にもあるため、「型式情報」を頑張って読み取るしかないようです。
「型式情報」は<a href="https://ja.wikipedia.org/wiki/BCH%E7%AC%A6%E5%8F%B7">BCH符号</a>で符号化されているため、
人間が手動で復号するのは少し大変です。
「型式情報」はたったの32パターンしかないので、
<strong>すべてのパターンを覚えるのが一番楽</strong> な方法です。
というわけで、パターン一覧を作ってみました。</p>

<ul>
<li><a href="https://shogo82148.github.io/images/2016-11-23-qrlist.svg">パターン一覧</a></li>
<li><a href="https://gist.github.com/shogo82148/07018ddad8f001e149a5aa34b0dff2c4">生成プログラム</a></li>
</ul>


<p>QRコード®やフレームQR®には「位置検出パターン」と呼ばれる「回」のようなパターンが3つあります。
このうち左上のパターンの周りに「型式情報」があります
(本当は冗長性のために他の2つの位置検出パターンの周りにもあるけど、左上のが一番みやすい)。
先ほどの<a href="https://shogo82148.github.io/images/2016-11-23-qrlist.svg">パターン一覧</a>から一番近いものを探しましょう。
各行の一番左を手掛かりにすると探しやすいです。
その隣に「QRコード®モデル1」「QRコード®モデル2」「フレームQR®」に並んでいます。
以下は僕のコードを調べてみたときの例です。</p>

<p><img src="https://shogo82148.github.io/images/2016-11-23-sample.svg" alt="解析例" /></p>

<p><strong>さあ、これで君もQRコードーリーダーになれる！！</strong></p>

<h2>まとめ</h2>

<ul>
<li>Twitterの二次元コードはQRコード®でもフレームQR®でもない</li>
<li>やっぱり法的リスクはありそう(な気がする)

<ul>
<li>少なくとも2017年1月28日までは特許権を理由に訴えられる可能性あり</li>
<li>QRコード®の商標を使っているのは危なそう</li>
</ul>
</li>
<li>ユーザに対しての法的リスクはないので、公式アプリの二次元コードの利用はご自由に

<ul>
<li>でも、法的に問題なくても、規格違反なので使わない方が無難</li>
</ul>
</li>
</ul>


<h2>参考</h2>

<ul>
<li>JIS X 0510 二次元コードシンボル―ＱＲコード―基本仕様</li>
<li>特許第2938338号「二次元コード」</li>
<li>特許第3716527号「２次元コードおよび２次元コードの読取方法」</li>
<li>特許第5057560号「プログラム、情報記憶媒体、２次元コード、印刷物、２次元コード画像、２次元コード画像の表示制御方法、２次元コード生成システム」</li>
</ul>


<p>QRコード®およびフレームQR®は<a href="http://www.denso-wave.com/">(株)デンソーウェーブ</a>の登録商標です</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Pagesがhttpsをサポートしたので切り替えてみた]]></title>
    <link href="https://shogo82148.github.io/blog/2016/06/10/github-page-supports-https/"/>
    <updated>2016-06-10T00:53:51+09:00</updated>
    <id>https://shogo82148.github.io/blog/2016/06/10/github-page-supports-https</id>
    <content type="html"><![CDATA[<p>このブログを設置しているGithub PagesがHTTPSに正式対応したらしいので、HTTPSを強制するように設定してみました。</p>

<ul>
<li><a href="https://github.com/blog/2186-https-for-github-pages">HTTPS for GitHub Pages</a></li>
</ul>


<!-- More -->


<h2>やったこと</h2>

<p>ページ内にHTTP経由で取得したリソースが含まれていると、
警告が出たり取得自体がブロックされたりしてしまうので、
全てHTTPS経由で取得するように書きなおす必要があります。
画像・CSS・Javascript等のURLを、以下のようにnetwork-path referenceへの置き換えましょう。
HTTPでページを開いた場合はHTTPで、HTTPSでページを開いた場合はHTTPSで、リソースを取得してくれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;a href="http://google.co.jp"&gt;
</span><span class='line'>&lt;a href="//google.co.jp"&gt;</span></code></pre></td></tr></table></div></figure>


<p>このサイトはHTTPのレンダリングに<a href="https://github.com/imathis/octopress">Octopress</a>を使っています。
最新版のOctopressではnetwork-path referenceを使ってくれるので特に対応は不要です。
このサイトの場合は古すぎてHTTP参照だったので、
「<a href="http://blog.glidenote.com/blog/2014/02/14/octopress-update/">Octopressをアップデートした</a>」を参考にしてアップデートしました。
はてなブックマーク連携など、自分でカスタマイズした部分に関しては手作業で対応したました。</p>

<h3>HTTPS強制の設定</h3>

<p><a href="https://help.github.com/articles/securing-your-github-pages-site-with-https/">Securing your GitHub Pages site with HTTPS</a> どおりに設定を有効化すればOKです。
ユーザ毎ではなくプロジェクト毎の設定のようなので、
プロジェクト用のページを作っている場合は個別に設定が必要です。</p>

<h2>はてなブックマークについて</h2>

<p>HTTPとHTTPSは別URLとして扱われるようなので、過去の記事に対するはてブ数はリセットされてしまいます。
解決方法は無いかと調べてみたものの、現象無理っぽいです。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">自分のブログは http から https に移行したけど、記事についたはてブを移行することは出来なかった（はてなのサポートに聞いた）。分からないでもないけど、https 移行の躊躇材料になるという点においてはイケてない。</p>&mdash; Takashi Masuda (@masutaka) <a href="https://twitter.com/masutaka/status/739747936318283776">June 6, 2016</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>はてなさんの方で対応してくれないかな・・・</p>

<h2>2016/06/30追記: DISQUSのマイグレーション</h2>

<p>記事にコメントをつけるのに使っている<a href="https://disqus.com/">DISQUS</a>をマイグレーションするのを忘れてて、
過去のコメントが見れなくなっていたので追記。</p>

<p><a href="https://disqus.com/">DISQUS</a>のホームから「Admin」「Edit Settings」で設定画面を開き、
Website URLの近くの「Changing domains? Learn how.」をクリックします。
すると「Migration Tools」が開くので、「Start URL mapper」「you can download a CSV here」をクリック。
5分くらいするとDISQUSがコメントを管理しているURL一覧がメールで届くので、
それを元に新旧URLの対応表を作ります。</p>

<p>今回はプロトコルの変更なので、以下のような雑なワンライナーで変換しました。
(改行コードがCRLFで地味に面倒だった)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grep http:// links.csv | perl -e '$/="\r\n";while(&lt;&gt;){chomp;print "$_,@{[$_=~s/^http:/https:/r]}$/"}' &gt; new-links.csv</span></code></pre></td></tr></table></div></figure>


<p>最後に設定画面からCSVをアップロードします。
以上で作業完了です。
最後に「24時間以内に反映するよ」的なメッセージが表示されましたが、僕の場合は5分くらいで反映が確認できました。</p>

<p>残るははてブ。はてなさん頼む〜〜〜。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Net/httpで安全に静的ファイルを返す]]></title>
    <link href="https://shogo82148.github.io/blog/2016/04/13/serving-static-files-in-golang/"/>
    <updated>2016-04-13T02:29:00+09:00</updated>
    <id>https://shogo82148.github.io/blog/2016/04/13/serving-static-files-in-golang</id>
    <content type="html"><![CDATA[<p><a href="http://konboi.hatenablog.com/entry/2016/04/12/121105">net/httpで静的ファイルを返す</a>で、
<code>http.ServeFile</code>を使っていてアレ？と思ったのでちょっと詳しく調べてみました。
(<code>http.FileServer</code>を使うものだと思ってたため)</p>

<p>結論だけ先に書いておくと</p>

<ul>
<li>やはり、特に理由がなければ<code>http.FileServer</code>を使ったほうが良さそう</li>
<li>どうしても<code>http.ServeFile</code>を使う場合は定数でパス指定をする</li>
<li>「自作パスルータを使っている」かつ「Go 1.6.1 未満を使っている」場合はとくに要注意</li>
</ul>


<!-- More -->


<h2>ディレクトリトラバーサル脆弱性</h2>

<p>紹介されているのは以下のコードです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/static/&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">ServeFile</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>しかし、参照先の「<a href="http://stackoverflow.com/questions/25945538/go-golang-to-serve-a-specific-html-file">Go Golang to serve a specific html file</a>」には
<strong>Actually, do not do that.</strong> (やっちゃいけない)とコメントされています。
<a href="https://ja.wikipedia.org/wiki/%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%83%88%E3%83%A9%E3%83%90%E3%83%BC%E3%82%B5%E3%83%AB">ディレクトリトラバーサル</a>により
脆弱性の原因となってしまう可能性があるためです。</p>

<p>脆弱性再現のために、以下の様なコードを書いてGo1.5でコンパイルして実行してみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;strings&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3000&quot;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">HasPrefix</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span><span class="p">,</span> <span class="s">&quot;/static/&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">http</span><span class="p">.</span><span class="nx">ServeFile</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">http</span><span class="p">.</span><span class="nx">NotFound</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>..</code>を含んだパスをリクエストしてみます。(実行した場所によって<code>..</code>の数は変わるので適宜調整してみてください)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -v http://localhost:3000/static/../../../.ssh/id_rsa
</span><span class='line'>* About to connect() to localhost port 3000 (#0)
</span><span class='line'>*   Trying ::1... connected
</span><span class='line'>* Connected to localhost (::1) port 3000 (#0)
</span><span class='line'>&gt; GET /static/../../../.ssh/id_rsa HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.19.1 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2
</span><span class='line'>&gt; Host: localhost:3000
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt;
</span><span class='line'>&lt; HTTP/1.1 200 OK
</span><span class='line'>&lt; Accept-Ranges: bytes
</span><span class='line'>&lt; Content-Length: 1679
</span><span class='line'>&lt; Content-Type: text/plain; charset=utf-8
</span><span class='line'>&lt; Last-Modified: Fri, 13 Jun 2014 04:57:05 GMT
</span><span class='line'>&lt; Date: Tue, 12 Apr 2016 17:53:19 GMT
</span><span class='line'>&lt;
</span><span class='line'>-----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>(中略)
</span><span class='line'>-----END RSA PRIVATE KEY-----
</span><span class='line'>* Connection #0 to host localhost left intact
</span><span class='line'>* Closing connection #0</span></code></pre></td></tr></table></div></figure>


<p>macのcurlで試したらクライアント側で相対パスを解決した状態でリクエストが飛んでしまって上手く行きませんでした。
オプションで外す方法がよくわかなかったので、<code>telnet</code>で叩いてみた例も載せておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ telnet localhost 3000
</span><span class='line'>Trying ::1...
</span><span class='line'>Connected to localhost.
</span><span class='line'>Escape character is '^]'.
</span><span class='line'>GET /static/../../../.ssh/id_rsa HTTP/1.0
</span><span class='line'>
</span><span class='line'>HTTP/1.0 200 OK
</span><span class='line'>Accept-Ranges: bytes
</span><span class='line'>Content-Length: 1679
</span><span class='line'>Content-Type: text/plain; charset=utf-8
</span><span class='line'>Last-Modified: Fri, 13 Jun 2014 04:57:05 GMT
</span><span class='line'>Date: Tue, 12 Apr 2016 18:02:56 GMT
</span><span class='line'>
</span><span class='line'>-----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>(中略)
</span><span class='line'>-----END RSA PRIVATE KEY-----
</span><span class='line'>Connection closed by foreign host.</span></code></pre></td></tr></table></div></figure>


<p>ああ、僕の秘密鍵が・・・。</p>

<h2>脆弱性を回避する</h2>

<h3>Go1.6以降を使う</h3>

<p>Go1.6以降では修正されており、
同じコードをGo1.6でコンパイルしてcurlで叩くと400が帰ってきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -v http://localhost:3000/static/../../../.ssh/id_rsa
</span><span class='line'>* About to connect() to localhost port 3000 (#0)
</span><span class='line'>*   Trying ::1... connected
</span><span class='line'>* Connected to localhost (::1) port 3000 (#0)
</span><span class='line'>&gt; GET /static/../../../.ssh/id_rsa HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.19.1 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2
</span><span class='line'>&gt; Host: localhost:3000
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt; 
</span><span class='line'>&lt; HTTP/1.1 400 Bad Request
</span><span class='line'>&lt; Content-Type: text/plain; charset=utf-8
</span><span class='line'>&lt; X-Content-Type-Options: nosniff
</span><span class='line'>&lt; Date: Tue, 12 Apr 2016 18:12:46 GMT
</span><span class='line'>&lt; Content-Length: 17
</span><span class='line'>&lt; 
</span><span class='line'>invalid URL path
</span><span class='line'>* Connection #0 to host localhost left intact
</span><span class='line'>* Closing connection #0</span></code></pre></td></tr></table></div></figure>


<h3><code>http.ServeMux</code>を使う</h3>

<p><code>http.ServeMux</code>にはパスの正規化機能が組み込まれており、
正規化されていないURLにアクセスが来た場合は自動的リダイレクトしてくれるようです。
HTTPハンドラに渡ってくるときには、必ず相対パスが含まれていない状態になっています。
(これに最初は気が付かず、脆弱性が再現しないので困ってた。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 内部でhttp.ServeMuxを使ってくれる</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/static/&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// r.URLには相対パスが含まれない形で渡ってくる</span>
</span><span class='line'>    <span class="nx">http</span><span class="p">.</span><span class="nx">ServeFile</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3000&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>相対パスを含んだリクエストを投げてもアクセスはできません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -v http://localhost:3000/static/../../../.ssh/id_rsa
</span><span class='line'>* About to connect() to localhost port 3000 (#0)
</span><span class='line'>*   Trying ::1... connected
</span><span class='line'>* Connected to localhost (::1) port 3000 (#0)
</span><span class='line'>&gt; GET /static/../../../.ssh/id_rsa HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.19.1 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2
</span><span class='line'>&gt; Host: localhost:3000
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt; 
</span><span class='line'>&lt; HTTP/1.1 301 Moved Permanently
</span><span class='line'>&lt; Location: /.ssh/id_rsa
</span><span class='line'>&lt; Date: Tue, 12 Apr 2016 18:14:49 GMT
</span><span class='line'>&lt; Content-Length: 47
</span><span class='line'>&lt; Content-Type: text/html; charset=utf-8
</span><span class='line'>&lt; 
</span><span class='line'>&lt;a href="https://shogo82148.github.io/.ssh/id_rsa"&gt;Moved Permanently&lt;/a&gt;.
</span><span class='line'>
</span><span class='line'>* Connection #0 to host localhost left intact
</span><span class='line'>* Closing connection #0</span></code></pre></td></tr></table></div></figure>


<h3><code>http.FileServer</code>を使う</h3>

<p><code>http.Dir</code>と<code>http.FileServer</code>を使うとルートディレクトリを指定でき、
その外へはアクセスできなくなるので想定外のファイルが見えてしまうことはありません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;strings&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fileServer</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StripPrefix</span><span class="p">(</span><span class="s">&quot;/static/&quot;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">FileServer</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">Dir</span><span class="p">(</span><span class="s">&quot;static&quot;</span><span class="p">)))</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3000&quot;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">HasPrefix</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span><span class="p">,</span> <span class="s">&quot;/static/&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fileServer</span><span class="p">.</span><span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">http</span><span class="p">.</span><span class="nx">NotFound</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">}))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>相対パスを含んだURLにアクセスしても404になって見れません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -v http://localhost:3000/static/../../../.ssh/id_rsa
</span><span class='line'>* About to connect() to localhost port 3000 (#0)
</span><span class='line'>*   Trying ::1... connected
</span><span class='line'>* Connected to localhost (::1) port 3000 (#0)
</span><span class='line'>&gt; GET /static/../../../.ssh/id_rsa HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.19.1 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2
</span><span class='line'>&gt; Host: localhost:3000
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt; 
</span><span class='line'>&lt; HTTP/1.1 404 Not Found
</span><span class='line'>&lt; Content-Type: text/plain; charset=utf-8
</span><span class='line'>&lt; X-Content-Type-Options: nosniff
</span><span class='line'>&lt; Date: Tue, 12 Apr 2016 18:39:34 GMT
</span><span class='line'>&lt; Content-Length: 19
</span><span class='line'>&lt; 
</span><span class='line'>404 page not found
</span><span class='line'>* Connection #0 to host localhost left intact
</span><span class='line'>* Closing connection #0</span></code></pre></td></tr></table></div></figure>


<h3><code>http.ServeFile</code>に定数を渡す</h3>

<p>どうしても特定のファイルを指定したい場合は、<code>http.ServeFile</code>に渡すファイルパスを定数で指定するべきです。
例えば、「<a href="http://stackoverflow.com/questions/25945538/go-golang-to-serve-a-specific-html-file">Go Golang to serve a specific html file</a>」の質問者が上げている例を
正しく書きなおすと以下のようになると思います。</p>

<blockquote><p><code>http.Handle("/", http.FileServer(http.Dir("static")))</code>
Serves the html file in static directory.</p>

<p>Is there any way in Go that we can specify the html file to serve?</p>

<p>Something like render_template in Flask</p>

<p>I want to do something like:</p>

<p><code>http.Handle("/hello", http.FileServer(http.Dir("static/hello.html")))</code></p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/hello&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">http</span><span class="p">.</span><span class="nx">ServeFile</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="s">&quot;static/hello.html&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3000&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>回答者がActually, do not do thatとコメントしているのは<code>http.ServeFile</code>に<code>r.URL.Path[1:]</code>を渡すことで、
<code>http.ServeFile</code>自体が悪いわけではありません。
正しく安全に使いましょう。</p>

<h2>まとめ</h2>

<p>まとめ再掲。</p>

<ul>
<li>やはり、特に理由がなければ<code>http.FileServer</code>を使ったほうが良さそう</li>
<li>どうしても<code>http.ServeFile</code>を使う場合は定数でパス指定をする</li>
<li>「自作パスルータを使っている」かつ「Go 1.6.1 未満を使っている」場合はとくに要注意</li>
</ul>


<h2>まとめのまとめ</h2>

<p><a href="https://golang.org/pkg/net/http/#example_FileServer">godocのexample</a>どおりにやるのが一番。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/static/&quot;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StripPrefix</span><span class="p">(</span><span class="s">&quot;/static/&quot;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">FileServer</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">Dir</span><span class="p">(</span><span class="s">&quot;static&quot;</span><span class="p">))))</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3000&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PerlでもGoでも実行できるQuine書いた]]></title>
    <link href="https://shogo82148.github.io/blog/2016/04/06/ployglot-quine-of-golang-and-perl/"/>
    <updated>2016-04-06T10:07:00+09:00</updated>
    <id>https://shogo82148.github.io/blog/2016/04/06/ployglot-quine-of-golang-and-perl</id>
    <content type="html"><![CDATA[<p><a href="http://shogo82148.github.io/blog/2016/04/05/polyglot-of-perl-and-golang/">昨日のPolyglot</a>を元にPerlでもGoでも実行できるQuine書いた。</p>

<!-- More -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package main;import("fmt");var(q=`printf'package main;import("fmt");var(q%c%c%s%c/*%c);sub import{}sub var{$_%cshift%c~s!%c(.*)%c/\*!$1!gr;eval}%c__END__%c',61,96,$_,96,61,61,61,96,96,10,10;print&lt;DATA&gt;`/*=);sub import{}sub var{$_=shift=~s!`(.*)`/\*!$1!gr;eval}
</span><span class='line'>__END__
</span><span class='line'>*/);func main(){s:=`package main;import("fmt");var(q=%c%s%c/*=);sub import{}sub var{$_=shift=~s!%c(.*)%c/\*!$1!gr;eval}
</span><span class='line'>__END__
</span><span class='line'>*/);func main(){s:=%c%s%c;fmt.Printf(s,96,q,96,96,96,96,s,96)}
</span><span class='line'>`;fmt.Printf(s,96,q,96,96,96,96,s,96)}</span></code></pre></td></tr></table></div></figure>


<p>Perlで実行してもGoで実行しても自分自身を出力します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PerlとGolangで実行できるPolyglot書いてみた]]></title>
    <link href="https://shogo82148.github.io/blog/2016/04/05/polyglot-of-perl-and-golang/"/>
    <updated>2016-04-05T12:27:00+09:00</updated>
    <id>https://shogo82148.github.io/blog/2016/04/05/polyglot-of-perl-and-golang</id>
    <content type="html"><![CDATA[<p>Rubyの会社をPerlの会社に変えてしまおう計画。
Golangのフリをして忍び込ませれば行けるのではという話になったので、
GoでもPerlでも実行できるコードを書いてみた。</p>

<!-- More -->


<p>出来上がったのがこちら。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package main;
</span><span class='line'>import ("fmt");
</span><span class='line'>var (s=0/*==);
</span><span class='line'>sub import {}
</span><span class='line'>sub var { print "Hello macotasu"; }
</span><span class='line'>__END__
</span><span class='line'>*/)
</span><span class='line'>func main() { fmt.Println("Hello macotasu") }</span></code></pre></td></tr></table></div></figure>


<p>一番のポイントは<code>var (s=0/*==);</code>の行ですね。
Perlで解釈すると正規表現置換<code>s///</code>として解釈され、<code>/*</code>が無視されます。
Goで解釈すると変数<code>s</code>への代入として解釈され、<code>/*</code>がコメントとして扱われます。</p>

<p>あとはGoのキーワードをPerlが解釈できないので、ちょっと書き方を工夫します。</p>

<ul>
<li><code>package main</code> はGoでもPerlでも似たような意味で解釈されるのでそのまま</li>
<li>Goの <code>import</code>, <code>var</code> はPerlで解釈できないので、()を省略せずに書いてPerlの関数呼び出しっぽくする</li>
<li>省略可能なセミコロンをちゃんと書く</li>
</ul>


<p>GoとPerlのコードは分かれているのでどんな処理でも自由に書くことができますが、
<code>import</code> だけGoでもPerlでも解釈されてしまうというという制限があります。
<code>import</code> するパッケージが一個だけなら問題ないんですが、
複数書く場合は以下のように２個め以降をすべてドットインポートする必要があって男気あふれる感じです。
(Perlでは文字列結合として解釈される。Goでは<code>var</code>のあとに<code>import</code>かけないっぽいので、ここに押し込むしかない。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package main;
</span><span class='line'>import (
</span><span class='line'>  "fmt"
</span><span class='line'>  . "math"
</span><span class='line'>);
</span><span class='line'>var (s=0/*==);
</span><span class='line'>sub import {}
</span><span class='line'>sub var { print "Hello macotasu"; }
</span><span class='line'>__END__
</span><span class='line'>*/)
</span><span class='line'>func main() { fmt.Println("Hello macotasu", Pi) }</span></code></pre></td></tr></table></div></figure>


<p>もっと簡潔にかけないかな。</p>

<h2>追記</h2>

<p>シンタックスハイライトしてみたらわかりやすいかなと思ってやってみた。</p>

<p>Perlのシンタックスハイライト。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nb">package</span> <span class="n">main</span><span class="p">;</span>
</span><span class='line'><span class="nb">import</span> <span class="p">(</span><span class="s">&quot;fmt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">var</span> <span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="mi">0</span><span class="o">/*==</span><span class="p">);</span>
</span><span class='line'><span class="k">sub </span><span class="nf">import</span> <span class="p">{}</span>
</span><span class='line'><span class="k">sub </span><span class="nf">var</span> <span class="p">{</span> <span class="k">print</span> <span class="s">&quot;Hello macotasu&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="cp">__END__</span>
</span><span class='line'><span class="cp">*/)</span>
</span><span class='line'><span class="cp">func main() { fmt.Println(&quot;Hello macotasu&quot;) }</span>
</span></code></pre></td></tr></table></div></figure>


<p>Goのシンタックスハイライト。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span><span class="p">;</span>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span><span class="s">&quot;fmt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="p">(</span><span class="nx">s</span><span class="p">=</span><span class="mi">0</span><span class="cm">/*==);</span>
</span><span class='line'><span class="cm">sub import {}</span>
</span><span class='line'><span class="cm">sub var { print &quot;Hello macotasu&quot;; }</span>
</span><span class='line'><span class="cm">__END__</span>
</span><span class='line'><span class="cm">*/</span><span class="p">)</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Hello macotasu&quot;</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="https://golang.org/ref/spec">The Go Programming Language Specification</a></li>
<li><a href="http://d.hatena.ne.jp/sugyan/20110306/1299418878">polyglot 基礎の基礎</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webブラウザを使って電波を出してみた]]></title>
    <link href="https://shogo82148.github.io/blog/2016/03/29/web-jjy/"/>
    <updated>2016-03-29T12:19:00+09:00</updated>
    <id>https://shogo82148.github.io/blog/2016/03/29/web-jjy</id>
    <content type="html"><![CDATA[<p>読者の持っている至って普通のコンピューターは、実は電波時計の時刻合わせを行うために必要な標準電波の発信装置が備わっている。</p>

<p>コードは以下から入手できる。</p>

<ul>
<li><a href="https://github.com/shogo82148/web-jjy">shogo82148/web-jjy</a></li>
<li><a href="http://shogo82148.github.io/web-jjy/">JJYシミュレータWeb版</a></li>
</ul>


<!-- More -->


<h2>動かし方</h2>

<p>パソコンのイヤホンジャックにアンテナ(普通のイヤホンで十分です)を接続し、電波時計の近くに置きます。
音量を最大にし、「Start」ボタンを押すと信号が送信されます。
電波時計を強制受信モードにし、時刻が設定されるのを待ちましょう。</p>

<p>パソコンの時間を基準にするので、あらかじめntpとかで時刻設定をしておくといいと思います。</p>

<h2>原理</h2>

<p><a href="http://jjy.nict.go.jp/jjy/trans/index.html">標準電波JJY</a>は日本標準時のタイムコードを送信する電波で、
東日本では40kHz、西日本では60kHzの周波数で発信されています。
電波時計はこの信号を使って時刻合わせをしています。</p>

<p>この信号をオーディオデバイスから出力する<a href="http://www.starstonesoft.com/jjy_simulator.htm">電波時計用JJYシミュレータ</a>というものがあるのを知り、
「今のWebブラウザならjavascriptだけで実装できるのでは？」と思いやってみました。
一般的なオーディオデバイスは、20kHz以上の周波数の再生には適していないため、そのままでは40kHz/60kHzの信号は出せません。
そこで、<a href="http://www.starstonesoft.com/jjy_simulator.htm">電波時計用JJYシミュレータ</a>は、歪んだ波形に含まれる高調波を利用しています。
ボリュームを大きくして音が割れた状態になると、音声信号は矩形波に近いかたちになります。
矩形波には3倍、5倍、7倍&hellip;の奇数倍の周波数成分が含まれているため、
(<a href="http://togetter.com/li/942071">世はまさに大フーリエ時代</a>とか見ると楽しい)
13.333kHzの矩形波を出力することで、39.999kHzの信号を出せるというわけです。</p>

<p>元のソフトウェアはWindowsのバイナリ形式でしたが、
WebAudioの登場によりWebブラウザからも同様のことが行えるようになりました。</p>

<h2>最後に</h2>

<p>少し前にCPUから出るノイズを使ってAMラジオの電波を発信するという記事が話題になりましたね。</p>

<ul>
<li><a href="http://cpplover.blogspot.jp/2016/03/am.html">普通のコンピューターからAMラジオを鳴らそう</a></li>
</ul>


<p>CPUやオーディオデバイスも電気で動いている以上、電波が出ているのは当たり前のことなのですが、
こうやって改めて確認できると面白いですね。</p>

<p>パソコンから出る程度の電波強度では、電波法に抵触することはないと思いますが、
うっかり強力な電波を発信しないよう気をつけてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数値と文字列がごちゃ混ぜになっているJSONをよしなにParseするやつ作った]]></title>
    <link href="https://shogo82148.github.io/blog/2016/03/23/go-weaktyping/"/>
    <updated>2016-03-23T20:44:00+09:00</updated>
    <id>https://shogo82148.github.io/blog/2016/03/23/go-weaktyping</id>
    <content type="html"><![CDATA[<p>Goは数値と文字列を厳格に区別しますが、他の言語もそうとは限りません。
例えばPerlは数値と文字列を自動変換してくれるので、気をつけていないといつの間にか数値が文字列になっていたりします。
その言語の中に閉じていいれば問題ないのですが、Goとやり取りしようとすると困ります。
そんなときに使えるライブラリを書いてみました。</p>

<ul>
<li><a href="https://github.com/shogo82148/go-weaktyping">shogo82148/go-weaktyping</a></li>
</ul>


<!-- More -->


<h2>背景</h2>

<p><code>map[string][]*string</code>を返してくるライブラリがあって、
そのままだと扱いにくいのでなんとか構造体にできないかと頭を悩ませていました。
JSONに一旦変換すれば楽かなーとも思ったのですが、一部フィールドを数値に変換する必要がありました。
JSONの数値と文字列を区別するため、JSONの文字列をGoの数値型に変換するのは厄介です。
タグに<code>json:",string"</code>と指定すると変換可能になりますが、逆にJSONの数値を受け付けなくなりますし、
JSONに変換すると文字列になってしまいます。
変換先の構造体は普通のJSONの操作にも使いたかったので、これでは困ります。
「数値も文字列もUnmarshalできて、Marshalするときには数値になる」ようなJSONライブラリが必要でした。</p>

<p><code>"encoding/json"</code>に代わる新しいJSONライブラリを・・・とも考えたのですが、
よく考えるとUnmarshal時の挙動は<code>"encoding/json".Unmarshaler</code>インターフェースを実装することでカスタマイズ可能です。
こうして作ったのが go-weaktyping です。</p>

<h2>使い方</h2>

<p>builtinの型の先頭を大文字にしたものを用意しているので、
適当にUnmarshalして欲しいところでbuiltinの型の代わりに指定するだけです。
以下は整数型をUnmarshalする例です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/shogo82148/go-weaktyping&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ptr</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">Foo</span> <span class="nx">weaktyping</span><span class="p">.</span><span class="nx">Int</span> <span class="s">`json:&quot;foo&quot;`</span>
</span><span class='line'>  <span class="p">}{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">`{&quot;foo&quot;:123}`</span><span class="p">),</span> <span class="nx">ptr</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Foo:&quot;</span><span class="p">,</span> <span class="nx">ptr</span><span class="p">.</span><span class="nx">Foo</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">`{&quot;foo&quot;:&quot;456&quot;}`</span><span class="p">),</span> <span class="nx">ptr</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Foo:&quot;</span><span class="p">,</span> <span class="nx">ptr</span><span class="p">.</span><span class="nx">Foo</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>{"foo":123}</code>が正常にUnmarshalできるのはもちろん、
通常はエラーになってしまう<code>{"foo":"456"}</code>のUnmarshalも問題なく行えます。
Marshal時は通常のint型と同様に振る舞います。</p>

<p>数値型だけでなく<code>weaktyping.String</code>も用意されていて、
通常はエラーになってしまう <code>{"foo":123}</code> も <code>struct { Foo weaktyping.String }{"123"}</code>にUnmarshal可能です。</p>

<p>その他使える型は <a href="https://godoc.org/github.com/shogo82148/go-weaktyping">godoc</a> をどうぞ。</p>

<h2>各種Boolたち</h2>

<p>builtinの<code>bool</code>に対応する<code>weaktyping.Bool</code>も実装してみたのですが、
何を持って真偽を判断するか難しい・・・。
例えば空のARRAYは真とみなすべきか、偽とみなすべきか。
普段触っている言語によって意見が分かれるのではないでしょうか。
(そもそも型が違うからエラーという人もいるだろうけど、そういうときは普通に<code>bool</code>を使いましょう)</p>

<p>JSONはもともとJavaScriptから派生した形式なので、JavaScriptに合わせるのが妥当かなと思い、
<code>weaktyping.Bool</code>の挙動はJavaScriptに合わせてあります。
「<a href="http://blog.mirakui.com/entry/20090604/truefalse">各言語におけるtrue/falseまとめ</a>」を参考に言語別のBoolも用意しています。</p>

<ul>
<li><code>Bool</code>/<code>JavaScriptBool</code>: <code>false</code>, <code>0</code>, <code>0.0</code>, <code>""</code>, <code>null</code> は偽、それ以外は真</li>
<li><code>RubyBool</code>: <code>false</code>, <code>null</code> は偽、それ以外は真</li>
<li><code>PHPBool</code>: <code>false</code>, <code>0</code>, <code>0.0</code>, <code>""</code>, <code>null</code>, <code>"0"</code>, <code>[]</code> は偽、それ以外は真</li>
<li><code>PerlBool</code>: <code>false</code>, <code>0</code>, <code>0.0</code>, <code>""</code>, <code>null</code>, <code>"0"</code> は偽、それ以外は真</li>
<li><code>PythonBool</code>: <code>false</code>, <code>0</code>, <code>0.0</code>, <code>""</code>, <code>null</code>, <code>[]</code>, <code>{}</code> は偽、それ以外は真</li>
</ul>


<p>ややこしい・・・なるべく使わない方がいいと思います。</p>

<h2>最後に</h2>

<p>これを作るきっかけになった問題ですが、reflectで解決しました。reflect最強。
go-weaktypingを使うとすべてのUnmarshal時に有効になってしまって怖いなと考えたためです。</p>

<p>今後もなるべく go-weaktyping を使わずに済むよう祈ってます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redisのトランザクション・スクリプト・ランキングを扱うPerlモジュールを公開しました]]></title>
    <link href="https://shogo82148.github.io/blog/2016/03/18/releaes-redis-modules/"/>
    <updated>2016-03-18T22:16:00+09:00</updated>
    <id>https://shogo82148.github.io/blog/2016/03/18/releaes-redis-modules</id>
    <content type="html"><![CDATA[<p>以前<a href="http://shogo82148.github.io/blog/2016/02/06/redis-leader-board-multi/">Redisでスコアを複数設定できるランキングを作ってみた</a>けど、
Githubの肥やしになっていてもあれなので、CPANizeしました。
あわせて、この実装のために作ったユーティリティモジュールも別モジュールとして公開しました。</p>

<ul>
<li><a href="https://metacpan.org/pod/Redis::LeaderBoardMulti">Redis::LeaderBoardMulti</a></li>
<li><a href="https://metacpan.org/pod/Redis::Script">Redis::Script</a></li>
<li><a href="https://metacpan.org/pod/Redis::Transaction">Redis::Transaction</a></li>
</ul>


<!-- More -->


<h2>Redis::LeaderBoardMulti</h2>

<p>最初の基準で順位を決められなかった場合の第二基準が欲しいというときに使うモジュールです。
インターフェースがRedis::LeaderBoard互換になるように調整したので、
前回とインターフェースがちょっと変わっています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">se</span> <span class="n">Redis</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">LeaderBoard</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$redis</span> <span class="o">=</span> <span class="n">Redis</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$lb</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">LeaderBoardMulti</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span>
</span><span class='line'>    <span class="n">redis</span> <span class="o">=&gt;</span> <span class="nv">$redis</span><span class="p">,</span>
</span><span class='line'>    <span class="n">key</span>   <span class="o">=&gt;</span> <span class="s">&#39;leader_board:1&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">order</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s">&#39;asc&#39;</span><span class="p">,</span> <span class="s">&#39;desc&#39;</span><span class="p">],</span> <span class="c1"># asc/desc, desc as default</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="c1"># Redis::LeaderBoardに合わせて複数指定できるようになりました</span>
</span><span class='line'><span class="nv">$lb</span><span class="o">-&gt;</span><span class="n">set_score</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="nb">time</span><span class="p">],</span>
</span><span class='line'>    <span class="s">&#39;two&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span> <span class="mi">50</span><span class="p">,</span> <span class="nb">time</span><span class="p">],</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="p">(</span><span class="nv">$rank</span><span class="p">,</span> <span class="nv">$score</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$lb</span><span class="o">-&gt;</span><span class="n">get_rank_with_score</span><span class="p">(</span><span class="s">&#39;one&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Redis::LeaderBoard互換なのでそのまま入れ替えられるはずですが、以下のような実装上の制限があります。</p>

<ul>
<li>スコアはすべて64bit符号付き整数

<ul>
<li>Redis::LeaderBoardのスコアは倍精度浮動小数点型なので小数も扱えるが、Redis::LeaderBoardMultiは整数だけ</li>
</ul>
</li>
<li>Redis 2.8.9以降のみで動きます</li>
<li>同順の場合の出現順

<ul>
<li>Redis::LeaderBoard は ZRANK, ZREVRANK を使い分けているので、orderパラメータによって昇順/降順が変わります</li>
<li>Redis::LaederBoardMulti は ZRANK しか使わないので、必ず昇順になります</li>
</ul>
</li>
</ul>


<p>一応 Lua Script を使わないオプションもそのまま残してありますが、特に理由がない限りデフォルト(Lua Script を使う)で使うといいと思います。
どうしてもロックの範囲が広くなってしまう場合があり、楽観的ロックでは効率が悪いケースがあるためです。</p>

<h2>Redis::Script</h2>

<p>EVALSHAを簡単に使うためのモジュールです。
EVALコマンドを使うとLua Scriptの実装ができますが、毎回毎回実行するスクリプト全体を送る必要があります。
EVALSHAコマンドはその代わりにスクリプトのSHA1ハッシュを送ることで、帯域の節約ができるというコマンドです。
しかしEVALSHAはSHA1ハッシュを事前に登録する必要があり、どのタイミングで登録を行うかが問題になってきます。</p>

<p><a href="http://redis.io/commands/eval">EVALコマンドのドキュメント</a>によると、
「EVALSHAで実行してみて <code>NOSCRIPT No matching script</code> で失敗したらEVALでやり直す」というのがおすすめらしいです。
EVALコマンドはSHA1ハッシュの登録も行ってくれるので、初回 <code>NOSCRIPT</code> になっても次回からはEVALSHAが成功します。</p>

<p>そんなに複雑なことではないのですが、毎回書くのも大変なのでモジュールとして切り出したのが Redis::Script です。
以下のようにスクリプトオブジェクトを作っておいて、パラメータを渡して実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">Redis</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">Script</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$script</span> <span class="o">=</span> <span class="nn">Redis::</span><span class="n">Script</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">script</span> <span class="o">=&gt;</span> <span class="s">&quot;return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="p">(</span><span class="nv">$key1</span><span class="p">,</span> <span class="nv">$key2</span><span class="p">,</span> <span class="nv">$arg1</span><span class="p">,</span> <span class="nv">$arg2</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$script</span><span class="o">-&gt;</span><span class="nb">eval</span><span class="p">(</span><span class="n">Redis</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;key1&#39;</span><span class="p">,</span> <span class="s">&#39;key2&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s">&#39;arg1&#39;</span><span class="p">,</span> <span class="s">&#39;arg2&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>$script</code> が計算済みのSHA1ハッシュを保存しておいてくれるので、計算リソースの節約にもなるはずです。
(ベンチとってみたところ、スクリプトのサイズが1kBから10kBくらいにならないと効果なさそうでしたが・・・)</p>

<h2>Redis::Transaction</h2>

<p>Redisのトランザクションを簡単に行うためのモジュールです。</p>

<p>MULTI-EXECは単に実行するだけなら、MULTIとEXECで囲うだけでよいので簡単です。
例えば、 <code>foo</code> と <code>bar</code> を同時にインクリメントしたい場合、以下のようにすると実現できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">multi</span><span class="p">;</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">incr</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">incr</span><span class="p">(</span><span class="s">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="nb">exec</span><span class="p">;</span> <span class="c1"># 他のクライアントからはfooとbarが全く同時にインクリメントされたように見える</span>
</span></code></pre></td></tr></table></div></figure>


<p>ただ、このような素朴な実装だと、途中でネットワークが不調になった場合などに再接続処理が止まったままになる可能性があります。
例えば以下のようにトランザクションの中で例外が発生すると、以後そのコネクションを使おうとしたときにエラーになります。
コネクションの永続化をしている場合はしばらくエラーが出続けることになり問題です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nb">eval</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">multi</span><span class="p">;</span> <span class="c1"># トランザクション開始</span>
</span><span class='line'>    <span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">incr</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">incr</span><span class="p">(</span><span class="s">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">die</span> <span class="s">&quot;ネットワークトラブル！&quot;</span>
</span><span class='line'>    <span class="nv">$redis</span><span class="o">-&gt;</span><span class="nb">exec</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">ping</span><span class="p">;</span> <span class="c1"># 繋がらなくなる</span>
</span></code></pre></td></tr></table></div></figure>


<p>Redis::Transaction はこのような問題を防ぐためのモジュールです。
トランザクションが失敗したときの後始末をよしなにやってくれるので、万が一エラーになっても安心です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">multi_exec</span> <span class="n">Redis</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sub </span><span class="p">{</span> <span class="c1"># 1は失敗したときのリトライ回数</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$redis</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">incr</span><span class="p">(</span><span class="s">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">incr</span><span class="p">(</span><span class="s">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">die</span> <span class="s">&quot;ネットワークトラブル！&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">ping</span><span class="p">;</span> <span class="c1"># 繋がる！</span>
</span></code></pre></td></tr></table></div></figure>


<p>WATCH-MULTI-EXECを使った楽観的ロックも扱えます。
Redisのトランザクションは楽観的ロックなので、
処理中に他のクライアントが書き換えを行った場合に失敗する可能性があります。
その場合でもリトライを行ってくれて便利です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># $redis-&gt;incr(&#39;mykey&#39;) をトランザクションを使って実現する</span>
</span><span class='line'><span class="n">watch_multi_exec</span> <span class="n">Redis</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;mykey&#39;</span><span class="p">],</span> <span class="mi">10</span><span class="p">,</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$redis</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;mykey&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$redis</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$redis</span><span class="o">-&gt;</span><span class="n">set</span><span class="p">(</span><span class="s">&#39;mykey&#39;</span><span class="p">,</span> <span class="nv">$value</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>Redisのトランザクション・スクリプト・ランキングを扱うPerlモジュールを紹介しました。
それぞれは小さなモジュールですが、
トラブル発生時にも問題にならないようちゃんとした実装しようとすると、
意外と考えることが多く面倒なものです(特にトランザクション周りとか)。
適当に実装してしまったこころ当たりのある人は、ぜひ試してみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ngrokみたいなHTTPプロキシを書いてみた]]></title>
    <link href="https://shogo82148.github.io/blog/2016/03/14/http2-over-websocket/"/>
    <updated>2016-03-14T22:59:00+09:00</updated>
    <id>https://shogo82148.github.io/blog/2016/03/14/http2-over-websocket</id>
    <content type="html"><![CDATA[<p>開発中のWebアプリをみんなに試してほしいけど、
サーバなんてなくて開発環境がローカルにしか無くて公開できないということは、
開発初期段階だとよくあることだと思います。
もちろん本格的にやるならテスト用にサーバを建てるべきですが、
小さなものなら<a href="https://ngrok.com/">ngrok</a>を使うと簡単です。
<a href="https://ngrok.com/">ngrok</a>の公開サーバへのHTTPリクエストをローカルにリレーして、
ローカルのサーバをお手がるに公開できるサービスです。</p>

<p>びっくりするほど簡単に公開できて便利ですが、
一応oAuthで制限とかかけたいなーとかカスタマイズしてみたくなってきたので、
似たようなものを自作できないかといろいろ遊んでみました。</p>

<p>その結果、HTTP2 over Websocketみたいな謎なものが出来上がってしまったというお話です。</p>

<!-- More -->


<h2>HTTP2 over Websocketというアイデア</h2>

<p><a href="https://ngrok.com/">ngrok</a>っぽいものを実現するためには、
サーバが受け取ったHTTPリクエストをローカルの環境に転送する必要があります。
ご存知のとおり通常のHTTPではサーバ側からのプッシュ配信が難しいので、Websocketを使うのが良さそうです。
しかし、複数のコネクションで並列にやってくるHTTPリクエストを、一本のWebsocketに束ねる必要があり、
上手く制御するのは大変そうです。</p>

<p>さて、HTTP2は一つのTCPコネクションで複数のリクエストを並行処理する仕様があります。
「複数のリクエストを一本に束ねる」という点ではなんか似ているので、なんだか流用できそうな気がしてきました。
Golangならきっと上手いこと<code>interface</code>を実装すれば、なんとかできるのではとやってみました。</p>

<h2>実装</h2>

<p>HTTP2は暗号化や複雑なフロー制御を行っていますが、
外から見れば<code>net.Conn</code>インターフェースに読み書きしている何かに過ぎません。
そして、<code>websocket.Conn</code>も<code>net.Conn</code>を実装しているので、そのままHTTP2のライブラリに渡せるはずです。</p>

<p>そうしてできたのが以下のサーバです。</p>

<figure class='code'><figcaption><span>server.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;errors&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http/httputil&quot;</span>
</span><span class='line'>  <span class="s">&quot;sync&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;golang.org/x/net/http2&quot;</span>
</span><span class='line'>  <span class="s">&quot;golang.org/x/net/websocket&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">transport</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">m</span>      <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span><span class='line'>  <span class="nx">t</span>      <span class="nx">http</span><span class="p">.</span><span class="nx">RoundTripper</span>
</span><span class='line'>  <span class="nx">closed</span> <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">t</span> <span class="o">*</span><span class="nx">transport</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">t</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">transport</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">s</span> <span class="o">:=</span> <span class="nx">websocket</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span><span class="nx">Handler</span><span class="p">:</span> <span class="nx">websocket</span><span class="p">.</span><span class="nx">Handler</span><span class="p">(</span><span class="nx">Handler</span><span class="p">)}</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3000&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:3001&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">httputil</span><span class="p">.</span><span class="nx">ReverseProxy</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Transport</span><span class="p">:</span> <span class="nx">t</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Director</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">req</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Handler</span><span class="p">(</span><span class="nx">ws</span> <span class="o">*</span><span class="nx">websocket</span><span class="p">.</span><span class="nx">Conn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;start new connection&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">t2</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http2</span><span class="p">.</span><span class="nx">Transport</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">t2</span><span class="p">.</span><span class="nx">NewClientConn</span><span class="p">(</span><span class="nx">ws</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">Lock</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">t</span><span class="p">.</span><span class="nx">t</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">t</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;already connected.&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">t</span> <span class="p">=</span> <span class="nx">conn</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class='line'>  <span class="o">&lt;-</span><span class="nx">t</span><span class="p">.</span><span class="nx">closed</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;close connection&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">transport</span><span class="p">)</span> <span class="nx">RoundTrip</span><span class="p">(</span><span class="nx">req</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Response</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">Lock</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">t2</span> <span class="o">:=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">t</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">t2</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;connection not found&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">t2</span><span class="p">.</span><span class="nx">RoundTrip</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">t</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">Lock</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">t</span><span class="p">.</span><span class="nx">t</span> <span class="p">=</span> <span class="kc">nil</span>
</span><span class='line'>      <span class="nx">t</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">t</span><span class="p">.</span><span class="nx">closed</span> <span class="o">&lt;-</span> <span class="kd">struct</span><span class="p">{}{}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">res</span><span class="p">,</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>複数Websocketのコネクションが張られた場合の処理が少し煩雑ですが、思いのほか短くかけました。
3001番ポートに来たリクエストをWebsocket経由で転送します。
Websocketは3000番ポートで待ち受けです。</p>

<p>これにアクセスするためのクライアントがこちら。</p>

<figure class='code'><figcaption><span>client.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http/httputil&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/url&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;golang.org/x/net/http2&quot;</span>
</span><span class='line'>  <span class="s">&quot;golang.org/x/net/websocket&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">origin</span> <span class="o">:=</span> <span class="s">&quot;http://localhost:3000/&quot;</span>
</span><span class='line'>  <span class="nx">u</span> <span class="o">:=</span> <span class="s">&quot;ws://localhost:3000/&quot;</span>
</span><span class='line'>  <span class="nx">ws</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">websocket</span><span class="p">.</span><span class="nx">Dial</span><span class="p">(</span><span class="nx">u</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="nx">origin</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">target</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">Parse</span><span class="p">(</span><span class="s">&quot;http://localhost:8000/&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">s</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http2</span><span class="p">.</span><span class="nx">Server</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">s</span><span class="p">.</span><span class="nx">ServeConn</span><span class="p">(</span><span class="nx">ws</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">http2</span><span class="p">.</span><span class="nx">ServeConnOpts</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Handler</span><span class="p">:</span> <span class="nx">httputil</span><span class="p">.</span><span class="nx">NewSingleHostReverseProxy</span><span class="p">(</span><span class="nx">target</span><span class="p">),</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Websocket経由でリクエストを受け付け、それを8000番ポートに転送します。
こちらも非常に短くかけました。
サーバーとクライアントを立ち上げて<code>http://localhost:3001/</code>にアクセスすると、
<code>http://localhost:8000/</code>の内容が見れるはずです。</p>

<h2>ngrok1.xについて</h2>

<p>ところでngrokの旧バージョンはソースコードが公開されているから、こっちを使ったほうが早い？
でも、開発中止って書かれてて不安になる。</p>

<ul>
<li><a href="https://github.com/inconshreveable/ngrok">ngrok1.x</a></li>
</ul>


<h2>まとめ</h2>

<p>ローカルのサーバをお手軽に公開するためのngrokというサービスを紹介しました。
自作のためのアイデアとして、http2 over websocketを試してみました。</p>

<p>設定の読み込みとかエラー処理とかセキュリティ周りとかいろいろ足りてない部分はありますが、
たったあれだけのコードで、ヘッダの圧縮転送、リクエストの並行処理等のHTTP2の機能が使えるのは面白いですね。</p>

<p>もうちょっと手を加えて多少は使えるものにしてみたいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx-omniauth-adapterのGolangポート作った]]></title>
    <link href="https://shogo82148.github.io/blog/2016/03/10/go-nginx-oauth2-adapter/"/>
    <updated>2016-03-10T12:51:00+09:00</updated>
    <id>https://shogo82148.github.io/blog/2016/03/10/go-nginx-oauth2-adapter</id>
    <content type="html"><![CDATA[<p>「<a href="http://techlife.cookpad.com/entry/2015/10/16/080000">nginx で omniauth を利用してアクセス制御を行う</a>」という記事で、
<a href="http://nginx.org/en/docs/http/ngx_http_auth_request_module.html">ngx_http_auth_request_module</a>の存在を知ったので、
Golangで<a href="https://github.com/sorah/nginx_omniauth_adapter">nginx_omniauth_adapter</a>と似たようなものを作ってみました。</p>

<ul>
<li><a href="https://github.com/shogo82148/go-nginx-oauth2-adapter">shogo82148/go-nginx-oauth2-adapter</a></li>
</ul>


<!-- More -->


<h2>背景</h2>

<p><a href="https://github.com/typester/gate">typester/gate</a>は単体でも動くようになっていますが、
例えばIP制限などちょっと高度なことをしたい場合には結局nginxを前段に置く必要があります。
nginxとgateの設定を同時にいじる必要があって煩雑だと感じていました。</p>

<p>そんな中「<a href="http://techlife.cookpad.com/entry/2015/10/16/080000">nginx で omniauth を利用してアクセス制御を行う</a>」という記事で、
<a href="http://nginx.org/en/docs/http/ngx_http_auth_request_module.html">ngx_http_auth_request_module</a>の存在を知りました。
gateが認証＋Proxyをやってしまうのに対して、認証だけRubyのomniauthモジュールで行いProxyはnginxに任せるという方法です。</p>

<p>以前から記事の存在は知っていたのですが、Rubyの実行環境をそろえるのが億劫で手を出せずにいました。
小さなアプリなので自分の慣れた言語で実装しても大したことないのではと思い、Goで実装してみることにしました。</p>

<h2>使い方</h2>

<p><code>go get</code>で落として来れます。
最低限client_idとclient_secretの指定が必要です。
nginx_omniauth_adapterと同じ環境変数名で設定できるほか、YAML形式の設定ファイルを読みこませることができます。
YAMLの形式はREADMEを参照してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go get github.com/shogo82148/go-nginx-oauth2-adapter/cli/go-nginx-oauth2-adapter
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">NGX_OMNIAUTH_GOOGLE_KEY</span><span class="o">=</span>YOUR_CLIENT_ID
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">NGX_OMNIAUTH_GOOGLE_SECRET</span><span class="o">=</span>YOUR_CLIENT_SECRET
</span><span class='line'><span class="nv">$ </span>go-nginx-oauth2-adapter
</span><span class='line'><span class="nv">$ </span>go-nginx-oauth2-adapter -c conf.yaml <span class="c"># 設定ファイルでの指定も可能</span>
</span></code></pre></td></tr></table></div></figure>


<p>PerlでHTTPサーバ書いているひとにはおなじみのServer::Starterにも対応しているので、
それ経由で立ち上げておくと設定の更新・プログラム自身の更新等が楽になると思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>start_server --port 18081 -- go-nginx-oauth2-adapter -c conf.yaml
</span></code></pre></td></tr></table></div></figure>


<p>nginx側の設定は<a href="https://github.com/shogo82148/go-nginx-oauth2-adapter/blob/master/examples/nginx/nginx-site.conf">examples</a>ディレクトリを参照してください。
ヘッダ名・パス名等を合わせてあるので、nginx_omniauth_adapterと同じ設定で動くはずです。</p>

<p>また、<a href="https://h2o.examp1e.net/">h2o</a>の設定はプログラマブルだからh2oでもちゃんと設定ファイルを書けば動くのではと考え、
<a href="https://github.com/shogo82148/go-nginx-oauth2-adapter/blob/master/examples/h2o/oauth.rb">h2oの設定</a>も書いてみました。
mrubyからproxyに渡るリクエストを書き換える方法がない(？)っぽいので、アプリ側で認証情報をとることはできないですが、一応制限はできます。
basic認証の実装を見る限りremote-userヘッダだけは渡せるようなので、これを使えばなんとかなるかもしれないですが、未確認です。
(Ruby慣れてないからってGoで実装したけど、結局Rubyを書いていて面白い)</p>

<h2>nginx_omniauth_adapterとの違い</h2>

<p>厳密に同じ挙動を実装するのが面倒だったため、挙動に若干の違いがあります。
一番大きなものは認証後のリダイレクト先です。</p>

<p>nginx_omniauth_adapterは認証後、一度adapterのURLにリダイレクトしてから、アプリサーバの<code>/_auth/callback</code>にリダイレクトします。
それに対してgo-nginx-oauth2-adapterは認証後、アプリサーバの<code>/_auth/callback</code>に直接リダイレクトします。
この違いのため、Google Developers Consoleの「承認済みのリダイレクト URI」に設定するべきURIが異なることに注意してください。
nginx_omniauth_adapterはadapter自身のURI、go-nginx-oauth2-adapterはアプリサーバの<code>/_auth/callbak</code>を指定します。</p>

<p>この挙動のため、go-nginx-oauth2-adapterはアプリの追加のたびにnginxの設定に加え「承認済みのリダイレクト URI」に正しいURIを追加する必要があります。
もちろん設定箇所がGoogle Developers Consoleではないだけで、nginx_omniauth_adapterもリダイレクト先の設定は必要です。
GoogleでもFacebookでも認証できるようにしたいという場合、nginx_omniauth_adapterは設定を一箇所変えればOKですが、go-nginx-oauth2-adapterは各サービスに登録し直す必要があります。
現状、認証に使うサービスをユーザが選ぶ仕組みがないので、そのまま放置してあります。</p>

<h2>まとめ</h2>

<p><a href="https://github.com/sorah/nginx_omniauth_adapter">nginx_omniauth_adapter</a>のGolangポート
<a href="https://github.com/shogo82148/go-nginx-oauth2-adapter">shogo82148/go-nginx-oauth2-adapter</a>を紹介しました。</p>

<p>adapter自身の公開設定をしなくて良い分簡単にセットアップできます。
nginx_omniauth_adapter互換ですぐに乗り換えもできるので、ぜひお気軽にお試し下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[転職して一週間がたちました]]></title>
    <link href="https://shogo82148.github.io/blog/2016/03/08/join-fuller/"/>
    <updated>2016-03-08T15:55:00+09:00</updated>
    <id>https://shogo82148.github.io/blog/2016/03/08/join-fuller</id>
    <content type="html"><![CDATA[<p>転職して1週間がたち，新しい生活サイクルにも慣れてきましたので近況報告をします．
<a href="http://www.kayac.com/">面白法人</a>を卒業し、3月1日から <a href="http://fuller.co.jp/">Fuller 株式会社</a>で働き始めました！
アプリの視聴率調査の<a href="https://analytics.appa.pe/">App Ape Analytics</a>の提供を中心に、スマフォアプリの開発・分析をやってる会社です。</p>

<!-- More -->


<h2>Pythonの会社なのか？</h2>

<p>私も入るまでみんなPythonを使っている会社だと思っていたのですが、
実際はPythonとjavascript半々くらいで使われています。（若干javascript勢の方が多いかも？）
最近は一部Goが導入されつつあるようでが、残念ながらPerlは影も形もありません。
折角Perlな会社にいたので、Perlの布教活動に勤しみたいと思っています。</p>

<h2>業務の感じ</h2>

<p>チームみんなで改善点を話し合って、みんなで解決していくような感じです。
慣れないツールばっかりで苦労してますが、頑張ります。</p>

<h2>会社の雰囲気</h2>

<p>ひとことで言うと大学の研究室みたいな感じです。（こう言えば多くの人に伝わるんじゃないかなと）
社員の高専卒の割合が非常に高く僕自身も高専の出身なので、懐かしい感じです。</p>

<h2>最後に一言</h2>

<p>TLを追ってなかったので全然気が付かなかったけど、退職と転職のタイミングがamacbee氏と完全に一致していてびっくりした。
僕も26日退社、1日入社だったのです。</p>

<ul>
<li><a href="http://amacbee.hatenablog.com/entry/2016/02/28/210544">転職して一週間がたちました</a></li>
<li><a href="http://amacbee.hatenablog.com/entry/2016/02/28/210544">退職します</a></li>
</ul>


<p>折角なので、記事の中身もamacbee氏に合わせてみました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[グロンギ語翻訳辞書をアップデートしました]]></title>
    <link href="https://shogo82148.github.io/blog/2016/02/27/update-grongish-dictionary/"/>
    <updated>2016-02-27T10:27:00+09:00</updated>
    <id>https://shogo82148.github.io/blog/2016/02/27/update-grongish-dictionary</id>
    <content type="html"><![CDATA[<p>やることがたくさんあるときに限ってどうでもいいことが捗ってこまっているいっちーです。
先日、挑戦状を受け取ったので、グロンギ語翻訳の品質改善に挑戦しました。</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">《緊急告知》2月26日(金)、何かが起こる!!「仮面ライダークウガ」にまつわる新商品のようですが・・・。ページに書かれているのは、グロンギ語？お客様の中で、リントの言葉に翻訳できる方はいらっしゃいますか～？ <a href="https://t.co/hMDQCST6Tz">https://t.co/hMDQCST6Tz</a></p>&mdash; プレミアムバンダイ (@p_bandai) <a href="https://twitter.com/p_bandai/status/699790752985931776">February 17, 2016</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<ul>
<li><a href="http://nlab.itmedia.co.jp/nl/articles/1602/17/news123.html">仮面ライダークウガより衝撃の新アイテム登場 ボンジ・ジュグギゾ・ガギバギ・グスと判明!(投げやり)</a></li>
</ul>


<p>お手軽に試せるページも作ったので、こちらでお試し下さい。</p>

<ul>
<li><a href="http://shogo82148.github.io/Grongish/">グロンギ語翻訳</a></li>
</ul>


<!-- More -->


<h2>変換の仕組み</h2>

<p>変換の仕組みの詳細は<a href="http://shogo82148.hatenablog.com/entry/2012/02/11/181441">以前書いた記事</a>をどうぞ。
概略だけ書いておくと、
日本語からグロンギ語への変換は<a href="http://taku910.github.io/mecab/">MeCab</a>を使った読み・品詞推定の結果もとに、
変換ルールを適用して翻訳しています。
グロンギ語から日本語への翻訳は、この翻訳問題が実は仮名漢字変換と同じ問題だということを利用して、
IMEの辞書をグロンギ語対応したものを使っています。</p>

<h2>変換ロジックの修正</h2>

<h3>旧版の問題点</h3>

<ul>
<li>ボンジジュグギゾガギバギグス: 紺地重視を再開する</li>
<li>ゲゲルンギバブゾロヅボパザセザ: ゲームのしなくっ持つのはだれだ</li>
<li>ゲゲルゾザジレスゾ: ゲームを始めるぞ</li>
</ul>


<p>「この日」は「ボンジ」が正しいのですが、「ボボジ」と変換していたため正しく認識できていませんでした。
「の」は通常「ガ」になるのですが、助詞として現れたときは「ン」になります。
さらに連体詞の一部として出てきたときも「ン」になるのですが、こちらのルールが抜けていました。</p>

<h3>さらなる改良</h3>

<p>旧版は<a href="http://chasen.org/~taku/software/mecab-skkserv/">mecab-skkdic</a>を元にした辞書を使っていましたが、
<a href="https://github.com/google/mozc">mozc</a>ベースに変更しました。
mozcの辞書はクラスタリングや語彙化のような粒度調整が行われており、変換精度の向上が期待できます。
どのようが調整が行われたかは<a href="http://www.slideshare.net/nokuno/tokyotextmining02-mozc">Mozcソースコード徹底解説 </a>や
<a href="http://www.anlp.jp/proceedings/annual_meeting/2011/pdf_dir/C4-3.pdf">言語処理学会でのMozcの資料</a>を見るとよいと思います。</p>

<p>mozcの変換エンジンをそのまま使えると良かったのですが、すごく面倒なことがわかったのでギブアップしました。
(依存モジュールの関係で32bit版しかビルドできず64bitのプログラムからは直接呼び出せないとか、C++とかC++とかC++とか)
mozcとMeCabの辞書構造は非常に似ているので、MeCabの辞書形式に変換して利用しています。
mozcには共起辞書を使った補正機能(例えば同じ「かいたい」という読みでも、「猫を飼いたい」「マグロを解体」を出し分ける機能)など、
MeCabにはない機能も入っているので、そのうち挑戦してみたいですね。
ただし、mozcには機能だけ組み込まれていて辞書が入っていないので、mozcを使っただけだと大差ないかもしれません。</p>

<h3>改良の結果</h3>

<ul>
<li>ボンジジュグギゾガギバギグス: この日重視を再開する</li>
<li>ゲゲルンギバブゾロヅボパザセザ: ゲームの資格を持つ子は誰だ</li>
<li>ゲゲルゾザジレスゾ: ゲームを始めるぞ</li>
</ul>


<p>だいぶ近くなりました。
「重視」と「遊戯」はグロンギ語で同じ音なので、難しいですね。</p>

<h2>変換サーバの実装</h2>

<p>ライブラリはPythonで書いてあるので、
PythonのWebフレームワークである<a href="http://www.pylonsproject.org/">Pyramid</a>を使ってAPI化してみました。</p>

<h3>デプロイ時のファイル置き換えをアトミックにする</h3>

<p>sakuraのVPS上で<a href="http://yuuki.hatenablog.com/entry/droot">droot</a>を使って起動しています。
kazuhoさんの「<a href="https://twitter.com/kazuho/status/671489245895221248">server-starter が SIGHUP 受け取ると pull 型のデプロイツールが起動して、そいつが新しいディレクトリにイメージを展開して、そこに chroot してアプリケーションが動き出すスタイル</a>」を実践してみたくなったので、以下のようなスクリプトを書いてみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">CONTAINER_DIR</span><span class="o">=</span>/var/containers/hogehoge-<span class="nv">$$</span>
</span><span class='line'>tar zfx hogehoge.tar.gz -C <span class="nv">$CONTAINER_DIR</span>
</span><span class='line'>
</span><span class='line'>droot run --root <span class="nv">$CONTAINER_DIR</span> <span class="nb">exec </span>gunicorn server:application &amp;
</span><span class='line'><span class="nv">CHILD</span><span class="o">=</span><span class="nv">$!</span>
</span><span class='line'>
</span><span class='line'>_term<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">kill</span> -TERM <span class="s2">&quot;$CHILD&quot;</span> 2&gt;/dev/null
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">trap </span>_term SIGTERM
</span><span class='line'>
</span><span class='line'>_cleanup_child<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    droot rm --root <span class="nv">$CONTAINER_DIR</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">trap </span>_cleanup_child EXIT
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span> <span class="s2">&quot;$CHILD&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>起動時にイメージの展開を行い、終了時には展開したディレクトリのお掃除をします。
<a href="https://twitter.com/kazuho/status/671489766689341440">「デプロイ時のファイルの置き換えを atomic にする」</a>ことができている・・・はず。
MeCabの辞書って上書きして大丈夫なの？とか余計なことを考えなくて済むので楽ちんですね。
(mmapしているから直接書き換えるとまずそう。mvすればinodeが変わるから行けるかもしれないけど、単語辞書と品詞辞書とで不整合起きたらまずくないか？とか)
モジュールが遅延ロードされて一部のモジュールだけ最新版になってしまい新旧の互換性が無くて死んだり、
テンプレートだけ都度読み込みになっていたため新旧の互換性が無くて死んだり、といったつらい経験があるのでこれは嬉しいです。</p>

<p>ただ、Dockerイメージをtarで固めたものはそこそこサイズがあって展開に時間がかかるのが不安です。
もたもたしていると Server::Starter が旧プロセスを殺してしまうので、ここは迅速に行う必要があります。
timeoutを付けてパラメータ調整すれば少しは安心かな・・・。</p>

<h3>graceful restart</h3>

<p>前述のスクリプトを Server::Starter 経由で起動すれば、プロセスの入れ替わりはできるのですが、
graceful restartするにはサーバのプログラムが Server::Starter に対応している必要があります。
PerlであればStarlet,Starman,Gazelleといった対応モジュールが出回っていますが、
残念ながら今回の変換器はPythonです。</p>

<p>PythonのWSGIサーバであるgunicornはRuby版のunicornと大体同じ作りになっているっぽいので、
<a href="http://d.hatena.ne.jp/limitusus/20131225/1387993119">Server::Starterに対応するとはどういうことか</a>
で紹介されているのと同じ方法が使えます。</p>

<p>どこでフックして変換コードを差し込めばいいかよくわかなかったので、さっきの起動スクリプトに差し込んでみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> <span class="o">[[</span> -n <span class="s2">&quot;${SERVER_STARTER_PORT-}&quot;</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">export </span><span class="nv">GUNICORN_FD</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$SERVER_STARTER_PORT</span> | tr <span class="s1">&#39;;&#39;</span> <span class="s1">&#39; &#39;</span> | xargs -n1 | cut -d<span class="o">=</span> -f2 | xargs | tr <span class="s1">&#39; &#39;</span> <span class="s1">&#39;,&#39;</span><span class="k">)</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>僕はShell Script芸人じゃないので、もっとシンプルな書き方があれば教えていただきたい。</p>

<h2>あとがき</h2>

<p>最初の予告ツイートの商品の販売が始まってましたね。</p>

<ul>
<li><a href="http://p-bandai.jp/item/item-1000102778/">仮面ライダークウガ グロンギ ゲゲルの掟セット【プレミアムバンダイ限定】</a></li>
<li><a href="http://nlab.itmedia.co.jp/nl/articles/1602/27/news018.html">「仮面ライダークウガ」でグロンギ族の必須アイテム「グゼパ」、初の商品化 襲った人間が数えられる!</a></li>
</ul>


<p>商品ページのグロンギ語をいくつか解読してみましたが、あまりうまくいかない・・・。
本家グロンギ語は語順が変わっている場合もあって流石に難しいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MeCabのGolangバインディングを書いてみた]]></title>
    <link href="https://shogo82148.github.io/blog/2016/02/11/golang-mecab-binding/"/>
    <updated>2016-02-11T19:32:00+09:00</updated>
    <id>https://shogo82148.github.io/blog/2016/02/11/golang-mecab-binding</id>
    <content type="html"><![CDATA[<p>Golangから<a href="http://taku910.github.io/mecab/">MeCab</a>を呼び出すライブラリ探せばあるにはあるのですが、
なんだかどれもメモリ管理がちょっと怪しいんですよね・・・。</p>

<ul>
<li><a href="http://yukihir0.hatenablog.jp/entry/2015/01/18/164446">GolangでMeCabを使う。</a>

<ul>
<li><a href="https://github.com/yukihir0/mecab-go">yukihir0/mecab-go</a></li>
</ul>
</li>
<li><a href="http://qiita.com/rerofumi/items/2bb1e49b20f2175ecaac">Go言語から mecab を使う - Qiita</a>

<ul>
<li><a href="https://bitbucket.org/rerofumi/mecab">rerofumi/mecab</a></li>
</ul>
</li>
<li><a href="http://d.hatena.ne.jp/gtaka555/20091116/p2">Go で Mecab を使ってみた</a></li>
</ul>


<p>メモリ管理は<a href="https://github.com/bluele/mecab-golang">bluele/mecab-golang</a>が一番しっかりしているっぽいですが、
libmecabの一番高機能だけど面倒な使い方しか対応していなくて、ちょっとカジュアルに遊ぶにはつらい。</p>

<p>というわけで、カジュアルな用途から高度な使い方まで対応したWrapperを書いてみました。</p>

<ul>
<li><a href="https://github.com/shogo82148/go-mecab">shogo82148/go-mecab</a></li>
</ul>


<!-- More -->


<h2>使い方</h2>

<p>READMEと<a href="https://godoc.org/github.com/shogo82148/go-mecab#pkg-examples">godocのexamples</a>からのコピペになってしまいますが、
簡単に使い方の紹介です。</p>

<h3>インストール</h3>

<p><code>go get</code>で取ってくることはできますが、事前にlibmecabとリンクするための設定が必要です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">CGO_LDFLAGS</span><span class="o">=</span><span class="s2">&quot;-L/path/to/lib -lmecab -lstdc++&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">CGO_CFLAGS</span><span class="o">=</span><span class="s2">&quot;-I/path/to/include&quot;</span>
</span><span class='line'><span class="nv">$ </span>go get github.com/shogo82148/go-mecab
</span></code></pre></td></tr></table></div></figure>


<p><code>mecab</code>コマンドと一緒に<code>mecab-config</code>がインストールされているはずなので、
それを使うのが楽でしょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">CGO_LDFLAGS</span><span class="o">=</span><span class="s2">&quot;`mecab-config --libs`&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">CGO_FLAGS</span><span class="o">=</span><span class="s2">&quot;`mecab-config --inc-dir`&quot;</span>
</span><span class='line'><span class="nv">$ </span>go get github.com/shogo82148/go-mecab
</span></code></pre></td></tr></table></div></figure>


<p>MeCabはデフォルトで<code>/usr/local/</code>以下に入るので、他の実装では決め打ちしている例が多いですが、
100%とは言い切れないので面倒ですが都度指定にしてあります。
cgoはpkg-configに対応しているで、MeCab側が対応してくれると環境変数の設定が不要になってもっと楽なんですけどね。</p>

<h3>カジュアルに使う</h3>

<p><code>Parse</code>を使うと<code>mecab</code>コマンドと同等の結果を文字列として受け取れます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">tagger</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mecab</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{})</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">defer</span> <span class="nx">tagger</span><span class="p">.</span><span class="nx">Destroy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">result</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tagger</span><span class="p">.</span><span class="nx">Parse</span><span class="p">(</span><span class="s">&quot;こんにちは世界&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>オプションの渡し方ですが、いろいろ考えた結果<code>map</code>で渡すようにしてみました。
(Perlの<a href="https://metacpan.org/release/Text-MeCab">Text::MeCab</a>からのインスパイア)
例えば、<code>mecab.New(map[string]string{"output-format-type": "wakati"})</code>のようにすると、分かち書きで出力されます。</p>

<h3>ノードの詳細情報にアクセスする</h3>

<p><code>ParseToNode</code>を使うと表層表現と品詞が最初から分かれた形で取得できます。
生起コストのようなより詳細な情報も取れます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">tagger</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mecab</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{})</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">defer</span> <span class="nx">tagger</span><span class="p">.</span><span class="nx">Destroy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// XXX: avoid GC problem with MeCab 0.996 (see https://github.com/taku910/mecab/pull/24)</span>
</span><span class='line'><span class="nx">tagger</span><span class="p">.</span><span class="nx">Parse</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">node</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tagger</span><span class="p">.</span><span class="nx">ParseToNode</span><span class="p">(</span><span class="s">&quot;こんにちは世界&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">;</span> <span class="nx">node</span> <span class="o">!=</span> <span class="p">(</span><span class="nx">mecab</span><span class="p">.</span><span class="nx">Node</span><span class="p">{});</span> <span class="nx">node</span> <span class="p">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Next</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s\t%s\n&quot;</span><span class="p">,</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Surface</span><span class="p">(),</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Feature</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以前紹介した<a href="http://shogo82148.github.io/blog/2015/12/20/mecab-in-python3-final/">MeCabをPython3から使う(続報)</a>の件、
実はPythonに限ったことではなく、公式で提供されている全ての言語バインディングで発生します。
(例えばRubyでも発生するっぽい: <a href="http://qiita.com/Salinger/items/3448d481b5b1e6cd2efb">Ruby + MeCab で Segmentation fault が発生した場合の対処</a>)
Pythonが参照カウント方式のGCを採用しているので、たまたま発見されるのが早かったというだけですね(Rubyだとメモリを圧迫するまで落ちないらしい)。</p>

<p>そして、公式で提供されているバインディングを参考に書いたので、今回のGo版でも発生します。
<a href="https://github.com/taku910/mecab/pull/24">MeCab側で対応してもらった</a>のでわざわざバインディング側で対応することもないだろうとの考えから、go-mecabでは特に対策をとっていません。
MeCab 0.996以下を使っている方は注意してください。(残念ながら0.996がまだ最新リリースだけど・・・)</p>

<h3>Modelを共有する</h3>

<p><a href="http://taku910.github.io/mecab/libmecab.html">MeCab ライブラリ</a>で紹介されている、マルチスレッド環境の場合での使い方にも対応しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">model</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mecab</span><span class="p">.</span><span class="nx">NewModel</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{})</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">defer</span> <span class="nx">model</span><span class="p">.</span><span class="nx">Destroy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">tagger</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">model</span><span class="p">.</span><span class="nx">NewMeCab</span><span class="p">()</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">defer</span> <span class="nx">tagger</span><span class="p">.</span><span class="nx">Destroy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">lattice</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mecab</span><span class="p">.</span><span class="nx">NewLattice</span><span class="p">()</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">defer</span> <span class="nx">lattice</span><span class="p">.</span><span class="nx">Destroy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">lattice</span><span class="p">.</span><span class="nx">SetSentence</span><span class="p">(</span><span class="s">&quot;こんにちは世界&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">err</span> <span class="p">=</span> <span class="nx">tagger</span><span class="p">.</span><span class="nx">ParseLattice</span><span class="p">(</span><span class="nx">lattice</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">lattice</span><span class="p">.</span><span class="nx">String</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>複数のゴルーチンから<code>model</code>や<code>tagger</code>を共有できると思います。<code>lattice</code>だけはゴルーチン毎に生成してください。
(へいれつへーこーしょりとかよくわかってないですが、スレッドセーフならゴルーチンセーフという認識であってますよね？)
メモリ効率もいいのでは(未検証なので誰か確かめて・・・)。</p>

<h2>GoからCへ文字列を渡す方法について</h2>

<h3>一般的な方法</h3>

<p>GoからCへ文字列を渡すには、Goの文字列を<code>C.CString</code>を使ってCの文字列に変換する必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">cstring</span> <span class="o">:=</span> <span class="nx">C</span><span class="p">.</span><span class="nx">CString</span><span class="p">(</span><span class="nx">gostring</span><span class="p">)</span>
</span><span class='line'><span class="k">defer</span> <span class="nx">C</span><span class="p">.</span><span class="nx">free</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">(</span><span class="nx">cstring</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="nx">C</span><span class="p">.</span><span class="nx">some_useful_function</span><span class="p">(</span><span class="nx">cstring</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで注意が必要なのは<code>C.CString</code>の戻り値はGoのガーベージコレクションの対象から外れるということです。
C側での使用状況をGoのランタイムが把握しきれないからですね。
<code>C.free</code>を使って明示的に開放してあげないとメモリーリークになります。
巷にあふれているMeCabバインディングはここがちょっと甘いものがほとんどでした。</p>

<h3>黒魔術を使う</h3>

<p>別に<code>C.CString</code>でも十分だとは思ったのですが、
<a href="http://qiita.com/mattn/items/176459728ff4f854b165">golang で string を []byte にキャストしてもメモリコピーが走らない方法を考えてみる</a>を見て、つい魔が差してしまいました。
Goの<code>string</code>をメモリーコピーを避けて<code>[]byte</code>にできるのなら、Cの文字列型(<code>*C.char</code>)でも同じことができるはず・・・！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">cstring</span> <span class="o">:=</span> <span class="o">*</span><span class="p">(</span><span class="o">**</span><span class="nx">C</span><span class="p">.</span><span class="nx">char</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">gostring</span><span class="p">))</span>
</span><span class='line'><span class="nx">C</span><span class="p">.</span><span class="nx">some_useful_function2</span><span class="p">(</span><span class="nx">cstring</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">gostring</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>通常C言語の文字列は末尾に<code>'\0'</code>が番兵としてついており、<code>C.CString</code>はそこら辺の事情を考慮してくれます。
しかし、この方法は番兵がいないため、文字列の長さを別途渡してあげる必要があります。
幸いMeCabは文字列長さを明示するインターフェースを備えているので、そちらを使えばOKでした。</p>

<p>Goの<code>string</code>はもちろんGCの対象なので、GCには要注意です。
関数内で閉じた状態にするのが無難ですね。
また、空文字が渡されるとヌルポで死んでしまうようなので、そこにも注意しましょう。</p>

<h2>まとめ</h2>

<ul>
<li>カジュアルな用途から高度な使い方まで対応したMeCabのWrapperを書いてみました

<ul>
<li><a href="https://github.com/shogo82148/go-mecab">shogo82148/go-mecab</a></li>
</ul>
</li>
<li>MeCab 0.996 と一緒に使う場合はGCに注意しましょう</li>
<li>GoからCへの文字列の渡し方を紹介しました

<ul>
<li><code>C.CString</code>を使った方法</li>
<li><code>unsafe.Ponter</code>を使った方法</li>
</ul>
</li>
</ul>


<p>ピンポーン <strong>unsafe をご使用になる時は、用法・用量を守り正しくお使い下さい。</strong></p>
]]></content>
  </entry>
  
</feed>
