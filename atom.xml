<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shogo's Blog]]></title>
  <link href="http://shogo82148.github.io/atom.xml" rel="self"/>
  <link href="http://shogo82148.github.io/"/>
  <updated>2015-04-25T23:03:18+09:00</updated>
  <id>http://shogo82148.github.io/</id>
  <author>
    <name><![CDATA[Shogo Ichinose]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Go言語で画像の減色を行う]]></title>
    <link href="http://shogo82148.github.io/blog/2015/04/25/quantize-image-in-golang/"/>
    <updated>2015-04-25T21:49:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/04/25/quantize-image-in-golang</id>
    <content type="html"><![CDATA[<p>ちょっとGIFアニメを作りたくなって、最近Go触ってるしGoでやってみよう！とやってみたメモ。
ImageMagikでいいじゃん説もあるけど、最終的にツールとして配布したいなってことでGoです。</p>

<p>主に減色まわりについて。</p>

<!-- More -->


<h2>何はともあれ実装してみる</h2>

<p>以前、「<a href="http://d.hatena.ne.jp/sugyan/20140719/1405729672">ターミナル操作の記録(ttyrec)からGIFアニメを生成するツールを作った</a>」という記事を見たので、
これを参考に実装してみる。</p>

<figure class='code'><figcaption><span>naive.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;image&quot;</span>
</span><span class='line'>  <span class="s">&quot;image/color/palette&quot;</span>
</span><span class='line'>  <span class="s">&quot;image/gif&quot;</span>
</span><span class='line'>  <span class="nx">_</span> <span class="s">&quot;image/png&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;Lenna.png&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">reader</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">img</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">image</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="nx">reader</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">paletted</span> <span class="o">:=</span> <span class="nx">image</span><span class="p">.</span><span class="nx">NewPaletted</span><span class="p">(</span><span class="nx">img</span><span class="p">.</span><span class="nx">Bounds</span><span class="p">(),</span> <span class="nx">palette</span><span class="p">.</span><span class="nx">WebSafe</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">y</span> <span class="o">:=</span> <span class="nx">img</span><span class="p">.</span><span class="nx">Bounds</span><span class="p">().</span><span class="nx">Min</span><span class="p">.</span><span class="nx">Y</span><span class="p">;</span> <span class="nx">y</span> <span class="p">&lt;</span> <span class="nx">img</span><span class="p">.</span><span class="nx">Bounds</span><span class="p">().</span><span class="nx">Max</span><span class="p">.</span><span class="nx">Y</span><span class="p">;</span> <span class="nx">y</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">x</span> <span class="o">:=</span> <span class="nx">img</span><span class="p">.</span><span class="nx">Bounds</span><span class="p">().</span><span class="nx">Min</span><span class="p">.</span><span class="nx">X</span><span class="p">;</span> <span class="nx">x</span> <span class="p">&lt;</span> <span class="nx">img</span><span class="p">.</span><span class="nx">Bounds</span><span class="p">().</span><span class="nx">Max</span><span class="p">.</span><span class="nx">X</span><span class="p">;</span> <span class="nx">x</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">paletted</span><span class="p">.</span><span class="nx">Set</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">img</span><span class="p">.</span><span class="nx">At</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">))</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">f</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Create</span><span class="p">(</span><span class="s">&quot;naive.gif&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">opts</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">gif</span><span class="p">.</span><span class="nx">GIF</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Image</span><span class="p">:</span>     <span class="p">[]</span><span class="o">*</span><span class="nx">image</span><span class="p">.</span><span class="nx">Paletted</span><span class="p">{</span><span class="nx">paletted</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">Delay</span><span class="p">:</span>     <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">0</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">LoopCount</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">gif</span><span class="p">.</span><span class="nx">EncodeAll</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="nx">opts</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>画像用意するの面倒だったので静止画になちゃったけど、
<code>gif.GIF.Image</code> に複数枚画像を渡すとアニメーションGIFになります。
みんなだいすきLenaさんをGIFに変換してみます。</p>

<p>元画像:
<img src="http://upload.wikimedia.org/wikipedia/en/2/24/Lenna.png" alt="Lena" /></p>

<p>変換後:
<img src="http://shogo82148.github.io/images/2015-04-25-naive.gif" alt="naive.gif" /></p>

<p>あれ、なんか肌の色とか全然違う・・・</p>

<h2>誤差拡散法でディザリングする</h2>

<p>皆さんご存知の通りGIFはインデックスカラー方式で色を指定するので、一枚の画像で256色までしか扱えません。
少ない色数でより多い色数を表現するためにディザリングがよく行われます。
Goの標準ライブラリのimage/drawに<a href="http://ja.wikipedia.org/wiki/%E3%83%95%E3%83%AD%E3%82%A4%E3%83%89-%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%B3%E3%83%90%E3%83%BC%E3%82%B0%E3%83%BB%E3%83%87%E3%82%A3%E3%82%B6%E3%83%AA%E3%83%B3%E3%82%B0">フロイド-スタインバーグ・ディザリング</a>を実装してものがあるので、
それを使ってみます。</p>

<p><code>gif.Encode</code> を使って静止画GIFを作るときにデフォルトでこの方法が使われるみたいですが、
アニメーションGIFを作るときにはディザリング処理の呼び出しを自分でやらないといけないようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;image&quot;</span>
</span><span class='line'>  <span class="s">&quot;image/color/palette&quot;</span>
</span><span class='line'>  <span class="s">&quot;image/draw&quot;</span>
</span><span class='line'>  <span class="s">&quot;image/gif&quot;</span>
</span><span class='line'>  <span class="nx">_</span> <span class="s">&quot;image/png&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;Lenna.png&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">reader</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">img</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">image</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="nx">reader</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">paletted</span> <span class="o">:=</span> <span class="nx">image</span><span class="p">.</span><span class="nx">NewPaletted</span><span class="p">(</span><span class="nx">img</span><span class="p">.</span><span class="nx">Bounds</span><span class="p">(),</span> <span class="nx">palette</span><span class="p">.</span><span class="nx">WebSafe</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">draw</span><span class="p">.</span><span class="nx">FloydSteinberg</span><span class="p">.</span><span class="nx">Draw</span><span class="p">(</span><span class="nx">paletted</span><span class="p">,</span> <span class="nx">img</span><span class="p">.</span><span class="nx">Bounds</span><span class="p">(),</span> <span class="nx">img</span><span class="p">,</span> <span class="nx">image</span><span class="p">.</span><span class="nx">ZP</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">f</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Create</span><span class="p">(</span><span class="s">&quot;floyd_steinberg.gif&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">opts</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">gif</span><span class="p">.</span><span class="nx">GIF</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Image</span><span class="p">:</span>     <span class="p">[]</span><span class="o">*</span><span class="nx">image</span><span class="p">.</span><span class="nx">Paletted</span><span class="p">{</span><span class="nx">paletted</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">Delay</span><span class="p">:</span>     <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">0</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">LoopCount</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">gif</span><span class="p">.</span><span class="nx">EncodeAll</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="nx">opts</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果:
<img src="http://shogo82148.github.io/images/2015-04-25-floyd_steinberg.gif" alt="floyd_steinberg.gif" /></p>

<p>最初よりはかなり良くなったものの、なんだかざらついた感じがします。
昔はこんな感じの画像よく見ましたね・・・すごく20世紀な感じがします。</p>

<h2>メディアンカットで減色してみる</h2>

<p>20世紀感の原因は<a href="http://www.htmq.com/color/websafe216.shtml">Webセーフカラー</a>(この言葉ってもはや死語なのでは)を使ってるからです。
21世紀の現在においてはWebセーフカラーでない色を使っても、色が変わることはほとんど無いので、
24bitカラーで表現可能な1677万色の中から自由に256色を選択できます。</p>

<p>で、問題はその256色をどうやって選択するかなんですが、
Goの標準ライブラリにはインターフェースは定義されているものの実装が存在しない(？)みたいです。
いろいろ探しまわって<a href="https://github.com/soniakeys/quant">soniakeys/quant</a>というパッケージを見つけたのでこれを使ってみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;github.com/soniakeys/quant/median&quot;</span>
</span><span class='line'>  <span class="s">&quot;image&quot;</span>
</span><span class='line'>  <span class="s">&quot;image/gif&quot;</span>
</span><span class='line'>  <span class="nx">_</span> <span class="s">&quot;image/png&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;Lenna.png&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">reader</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">img</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">image</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="nx">reader</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">q</span> <span class="o">:=</span> <span class="nx">median</span><span class="p">.</span><span class="nx">Quantizer</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">paletted</span> <span class="o">:=</span> <span class="nx">q</span><span class="p">.</span><span class="nx">Image</span><span class="p">(</span><span class="nx">img</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">f</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Create</span><span class="p">(</span><span class="s">&quot;median.gif&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">opts</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">gif</span><span class="p">.</span><span class="nx">GIF</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Image</span><span class="p">:</span>     <span class="p">[]</span><span class="o">*</span><span class="nx">image</span><span class="p">.</span><span class="nx">Paletted</span><span class="p">{</span><span class="nx">paletted</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">Delay</span><span class="p">:</span>     <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">0</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">LoopCount</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">gif</span><span class="p">.</span><span class="nx">EncodeAll</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="nx">opts</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://shogo82148.github.io/images/2015-04-25-median.gif" alt="median.gif" /></p>

<h2>メディアンカットで減色してディザリングもやってみる</h2>

<p>減色前の画像を渡すと減色したあとの画像を返してくれる<a href="https://github.com/soniakeys/quant">soniakeys/quant</a>の便利メソッドを
使って実装してみましたが、
ディザリングをしてくれないのでグラデーション部分があまりキレイではありません。</p>

<p><a href="https://github.com/soniakeys/quant">soniakeys/quant</a>を使うのはパレットの作成だけにして、
draw.FloydSteinbergでディザリングを行ってみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;github.com/soniakeys/quant/median&quot;</span>
</span><span class='line'>  <span class="s">&quot;image&quot;</span>
</span><span class='line'>  <span class="s">&quot;image/color&quot;</span>
</span><span class='line'>  <span class="s">&quot;image/draw&quot;</span>
</span><span class='line'>  <span class="s">&quot;image/gif&quot;</span>
</span><span class='line'>  <span class="nx">_</span> <span class="s">&quot;image/png&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;Lenna.png&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">reader</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">img</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">image</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="nx">reader</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">q</span> <span class="o">:=</span> <span class="nx">median</span><span class="p">.</span><span class="nx">Quantizer</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">p</span> <span class="o">:=</span> <span class="nx">q</span><span class="p">.</span><span class="nx">Quantize</span><span class="p">(</span><span class="nb">make</span><span class="p">(</span><span class="nx">color</span><span class="p">.</span><span class="nx">Palette</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">),</span> <span class="nx">img</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">paletted</span> <span class="o">:=</span> <span class="nx">image</span><span class="p">.</span><span class="nx">NewPaletted</span><span class="p">(</span><span class="nx">img</span><span class="p">.</span><span class="nx">Bounds</span><span class="p">(),</span> <span class="nx">p</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">draw</span><span class="p">.</span><span class="nx">FloydSteinberg</span><span class="p">.</span><span class="nx">Draw</span><span class="p">(</span><span class="nx">paletted</span><span class="p">,</span> <span class="nx">img</span><span class="p">.</span><span class="nx">Bounds</span><span class="p">(),</span> <span class="nx">img</span><span class="p">,</span> <span class="nx">image</span><span class="p">.</span><span class="nx">ZP</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">f</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Create</span><span class="p">(</span><span class="s">&quot;median-floyd-steinberg.gif&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">opts</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">gif</span><span class="p">.</span><span class="nx">GIF</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Image</span><span class="p">:</span>     <span class="p">[]</span><span class="o">*</span><span class="nx">image</span><span class="p">.</span><span class="nx">Paletted</span><span class="p">{</span><span class="nx">paletted</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">Delay</span><span class="p">:</span>     <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">0</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">LoopCount</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">gif</span><span class="p">.</span><span class="nx">EncodeAll</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="nx">opts</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果:
<img src="http://shogo82148.github.io/images/2015-04-25-median-floyd-steinberg.gif" alt="median-floyd-steinberg.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go言語でshuffleする話]]></title>
    <link href="http://shogo82148.github.io/blog/2015/04/25/shuffle-in-golang/"/>
    <updated>2015-04-25T18:07:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/04/25/shuffle-in-golang</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle">Fisher-Yates shuffle</a>を使ってシャッフルライブラリ作ってみました。</p>

<ul>
<li>https://github.com/shogo82148/go-shuffle</li>
</ul>


<p>標準ライブラリのsortと似たような感じで使えます。
デフォルトでintとfloat64とstringのシャッフルに対応していて、
他の型をシャッフルしたい場合はインターフェースを実装してね、って感じです。
実装が簡単なので、インターフェース定義する手間とシャッフルのアルゴリズム自前で書く手間ほとんど一緒ではという気もするけど、
まあライブラリ作成の練習ってことで。</p>

<p>で、ここからが本題。
Fisher-Yates shuffleの名前は以前から知ってたけど、
この前某プロジェクトで以下のようなshuffleの実装を発見。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;math/rand&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">shuffle</span><span class="p">(</span><span class="nx">a</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">a</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">j</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nx">Intn</span><span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">a</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fisher-Yates shuffleと似ているけど、なにかが違う。
ちゃんとシャッフルされているのか気になったので検証してみました。</p>

<!-- More -->


<h2>検証</h2>

<p>n個の数列をシャッフルすることを考えます。
シャッフルの後i番目の要素がj番目に移動する確率を <script type="math/tex">P_n(i, j)</script> と定義します(golangのコードにあわせて0-originで考えます)。</p>

<p>完全にランダムにシャッフルされていれば、
元の数列のどの要素も0からn-1の範囲に一様分布するはずです。
つまり、以下の式がなりたてば「シャッフルされている」と言えそうです。</p>

<script type="math/tex; mode=display">
P_n(i, j) = \frac{1}{n}　　　(i, j = 0, \dots, n - 1)
</script>


<h3>n=1の場合</h3>

<p>n=1の場合は、必ず0番目と0番目の入れ替え(つまり順番変わらない)になります。
上で定義した確率を計算すると<script type="math/tex">P_1(0, 0) = 1/1</script>となるので、シャッフルされていると言えます。</p>

<h3>n=k+1の場合</h3>

<p>ループがk回周ったあと0&#8230;k-1の要素はシャッフルされていると仮定して、
最後のn=k+1回目のループが周ったあと正しくシャッフルされているかを検証します。
全てのi, jの組み合わせについて考えるのは大変なので、いくつか場合分け。</p>

<p>i=n-1の場合。
n-1番目の要素と交換されるのは、0&#8230;n-1番目の中からランダムに一つなので、以下のことはすぐに分かりますね。</p>

<script type="math/tex; mode=display">
P_n(n-1, j) = \frac{1}{n}　　　(j = 0, \dots, n - 1)
</script>


<p>i,j &lt; n-1 の場合。
n回目のループでi番目の要素がj番目に来る確率＝i番目の要素がn-1回のループでj番目に来る確率×最後のループでj番目が入れ替え対象にならない確率なので、
以下のようになります。</p>

<script type="math/tex; mode=display">
P_n(i, j) = P_{n-1}(i,j) \times \frac{n-1}{n} = \frac{1}{n-1} \times \frac{n-1}{n} = \frac{1}{n}
</script>


<p>i&lt;n-1, j=n-1の場合。
n回目のループでi番目の要素がj番目に来る確率＝i番目の要素がn-1回のループでj番目に来る確率×最後のループでj番目が入れ替え対象になる確率です。</p>

<script type="math/tex; mode=display">
P_n(i, n-1) = \sum_{j=0}^{n-2}P_{n-1}(i,j)\times\frac{1}{n} = \frac{1}{n}
</script>


<p>これで全ての場合について</p>

<script type="math/tex; mode=display">
P_n(i, j) = \frac{1}{n}　　　(i, j = 0, \dots, n - 1)
</script>


<p>が成り立ち、シャッフルされているということがわかりました。
数学的帰納法により、1以上の全ての自然数についてシャッフルが行われることになります。</p>

<h2>ループの中でaの値を書き換えるていることについて</h2>

<p><code>for i := range a</code>でイテレーションしている最中に
元のコレクションを書き換える操作をしているのが気になって逆アセンブルしてみた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--- prog list "shuffle" ---
</span><span class='line'>0000 (/Users/shogo/shuffle.go:5) TEXT    shuffle+0(SB),$40-24
</span><span class='line'>0001 (/Users/shogo/shuffle.go:5) FUNCDATA $0,gcargs·0+0(SB)
</span><span class='line'>0002 (/Users/shogo/shuffle.go:5) FUNCDATA $1,gclocals·0+0(SB)
</span><span class='line'>0003 (/Users/shogo/shuffle.go:5) TYPE    a+0(FP){[]int},$24
</span><span class='line'>0004 (/Users/shogo/shuffle.go:5) TYPE    i+-16(SP){int},$8
</span><span class='line'>0005 (/Users/shogo/shuffle.go:5) TYPE    autotmp_0001+-24(SP){int},$8
</span><span class='line'>0006 (/Users/shogo/shuffle.go:5) TYPE    autotmp_0002+-8(SP){int},$8
</span><span class='line'>0007 (/Users/shogo/shuffle.go:5) TYPE    autotmp_0003+0(SP){int},$8
</span><span class='line'>0008 (/Users/shogo/shuffle.go:6) MOVQ    a+8(FP),BX
</span><span class='line'>0009 (/Users/shogo/shuffle.go:6) MOVQ    $0,DI
</span><span class='line'>0010 (/Users/shogo/shuffle.go:6) MOVQ    BX,autotmp_0002+-8(SP)
</span><span class='line'>0011 (/Users/shogo/shuffle.go:6) JMP     ,13
</span><span class='line'>0012 (/Users/shogo/shuffle.go:6) INCQ    ,DI
</span><span class='line'>0013 (/Users/shogo/shuffle.go:6) MOVQ    autotmp_0002+-8(SP),BP
</span><span class='line'>0014 (/Users/shogo/shuffle.go:6) CMPQ    DI,BP
</span><span class='line'>0015 (/Users/shogo/shuffle.go:6) JGE     $0,60
</span><span class='line'>0016 (/Users/shogo/shuffle.go:6) MOVQ    DI,autotmp_0001+-24(SP)
</span><span class='line'>0017 (/Users/shogo/shuffle.go:7) MOVQ    DI,BX
</span><span class='line'>0018 (/Users/shogo/shuffle.go:7) MOVQ    DI,i+-16(SP)
</span><span class='line'>0019 (/Users/shogo/shuffle.go:7) INCQ    ,BX
</span><span class='line'>0020 (/Users/shogo/shuffle.go:7) MOVQ    BX,(SP)
</span><span class='line'>0021 (/Users/shogo/shuffle.go:7) CALL    ,rand.Intn+0(SB)
</span><span class='line'>0022 (/Users/shogo/shuffle.go:7) MOVQ    i+-16(SP),R9
</span><span class='line'>0023 (/Users/shogo/shuffle.go:7) MOVQ    autotmp_0001+-24(SP),DI
</span><span class='line'>0024 (/Users/shogo/shuffle.go:7) MOVQ    a+8(FP),DX
</span><span class='line'>0025 (/Users/shogo/shuffle.go:7) MOVQ    a+0(FP),AX
</span><span class='line'>0026 (/Users/shogo/shuffle.go:7) MOVQ    8(SP),CX
</span><span class='line'>0027 (/Users/shogo/shuffle.go:8) MOVQ    AX,BX
</span><span class='line'>0028 (/Users/shogo/shuffle.go:8) MOVQ    R9,BP
</span><span class='line'>0029 (/Users/shogo/shuffle.go:8) CMPQ    R9,DX
</span><span class='line'>0030 (/Users/shogo/shuffle.go:8) JCS     $1,33
</span><span class='line'>0031 (/Users/shogo/shuffle.go:8) CALL    ,runtime.panicindex+0(SB)
</span><span class='line'>0032 (/Users/shogo/shuffle.go:8) UNDEF   ,
</span><span class='line'>0033 (/Users/shogo/shuffle.go:8) LEAQ    (BX)(BP*8),BX
</span><span class='line'>0034 (/Users/shogo/shuffle.go:8) MOVQ    (BX),SI
</span><span class='line'>0035 (/Users/shogo/shuffle.go:8) MOVQ    AX,BX
</span><span class='line'>0036 (/Users/shogo/shuffle.go:8) MOVQ    R9,BP
</span><span class='line'>0037 (/Users/shogo/shuffle.go:8) CMPQ    R9,DX
</span><span class='line'>0038 (/Users/shogo/shuffle.go:8) JCS     $1,41
</span><span class='line'>0039 (/Users/shogo/shuffle.go:8) CALL    ,runtime.panicindex+0(SB)
</span><span class='line'>0040 (/Users/shogo/shuffle.go:8) UNDEF   ,
</span><span class='line'>0041 (/Users/shogo/shuffle.go:8) LEAQ    (BX)(BP*8),BX
</span><span class='line'>0042 (/Users/shogo/shuffle.go:8) MOVQ    AX,BP
</span><span class='line'>0043 (/Users/shogo/shuffle.go:8) MOVQ    CX,R8
</span><span class='line'>0044 (/Users/shogo/shuffle.go:8) CMPQ    CX,DX
</span><span class='line'>0045 (/Users/shogo/shuffle.go:8) JCS     $1,48
</span><span class='line'>0046 (/Users/shogo/shuffle.go:8) CALL    ,runtime.panicindex+0(SB)
</span><span class='line'>0047 (/Users/shogo/shuffle.go:8) UNDEF   ,
</span><span class='line'>0048 (/Users/shogo/shuffle.go:8) LEAQ    (BP)(R8*8),BP
</span><span class='line'>0049 (/Users/shogo/shuffle.go:8) MOVQ    (BP),R8
</span><span class='line'>0050 (/Users/shogo/shuffle.go:8) MOVQ    R8,(BX)
</span><span class='line'>0051 (/Users/shogo/shuffle.go:8) MOVQ    AX,BX
</span><span class='line'>0052 (/Users/shogo/shuffle.go:8) MOVQ    CX,BP
</span><span class='line'>0053 (/Users/shogo/shuffle.go:8) CMPQ    CX,DX
</span><span class='line'>0054 (/Users/shogo/shuffle.go:8) JCS     $1,57
</span><span class='line'>0055 (/Users/shogo/shuffle.go:8) CALL    ,runtime.panicindex+0(SB)
</span><span class='line'>0056 (/Users/shogo/shuffle.go:8) UNDEF   ,
</span><span class='line'>0057 (/Users/shogo/shuffle.go:8) LEAQ    (BX)(BP*8),BX
</span><span class='line'>0058 (/Users/shogo/shuffle.go:8) MOVQ    SI,(BX)
</span><span class='line'>0059 (/Users/shogo/shuffle.go:6) JMP     ,12
</span><span class='line'>0060 (/Users/shogo/shuffle.go:10) RET     ,</span></code></pre></td></tr></table></div></figure>


<p>アセンブル読めてないけど、ループの最初で<code>len(a)</code>を<code>autotmp_0002+-8(SP)</code>に保存しているっぽいのを感じる。
自動的に<code>size := len(a) for i := 0; i &lt; size; i++ {</code> みたいな処理に書き換えているみたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[社内ISUCONにチームぽわわ3.5で参加しました]]></title>
    <link href="http://shogo82148.github.io/blog/2015/04/19/kayac-isucon/"/>
    <updated>2015-04-19T19:12:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/04/19/kayac-isucon</id>
    <content type="html"><![CDATA[<p>木曜日の社内ISUCONにチームぽわわ3.5として参加してきました。
(今年のISUCON本番に4にアップデート予定)
さきに結果だけ書いておくと、
1位はfujiwaraさんとacidlemonさんのチーム、
2位はチームぽわわ3.5、
3位はぴっぴ先輩率いるチーム例の青い紐でした。</p>

<p>オムライスと紐を倒したので僕は満足です。
簡単にやったことを書いておきます。</p>

<!-- More -->


<h2>課題内容</h2>

<p>Twitterみたいな短文投稿サイトです。
トップページにアクセスすると全ユーザの発言最新100件がみれて、
ログインすると発言したり自分の投稿履歴を確認したりできます。
僕が新卒で入ってきたときはPerlでしたが、今年の参考実装はGolang製です。
(Rubyもあったらしいけど使った人いたのかな)</p>

<h2>やったこと</h2>

<p>僕自身は、相方になったたいがさんに「こんなことしてみては〜」と言ってみる係をやってました。
具体的な対応としては以下の通りです。</p>

<h3>nginxにレスポンス吐かせる</h3>

<p><a href="http://takeshiyako.blogspot.jp/2014/10/nginxmunin-plugin.html">Nginxのレスポンスタイムをパーセンタイル値で計測するMunin plugin</a>
とかを参考にしてもらって、レスポンスタイムを吐くようにしてもらいました。</p>

<p>ログをテキトウスクリプトで集計したとろこ、トップページの全ユーザの発言最新100件みれるページが重いみたい。
高速化の第一ターゲットをトップページにしぼりました。</p>

<h3>MySQLにSlowQuery吐かせる</h3>

<p>トップページが重いっぽいというのはわかったものの、
どのクエリが重いかまでは分からない(もちろんコード読んでたので検討はついてたけど)ので、
処理に0.1秒以上かかっているクエリを吐くようにしました。</p>

<h3>インデックスの追加</h3>

<p>既存のコードに触れずにお手軽ってことで、まずはDBにインデックスを張るところから。
workload10で、99583から101033にスコアアップ！
まあ、他のボトルネックを潰していない段階だとこんなもんでしょうね・・・。</p>

<h3>ループクエリ・無駄クエリの削除</h3>

<p>明らかに無駄クエリっぽいところがあったのでそこを修正しました。</p>

<ul>
<li>投稿100件取得したあとに、100回ユーザ名の取得処理をしている

<ul>
<li>JOINを使って書き換えました</li>
<li>実行計画が狂って逆に遅くなるという事態に陥ったので、IGNORE INDEXとかして頑張った</li>
</ul>
</li>
<li>ユーザの投稿を全取得してるのに、最新1件の情報しか使ってないところ

<ul>
<li>LIMITをつけて制限</li>
</ul>
</li>
<li>全投稿をCOUNTしているところ

<ul>
<li>せっかくGolang使ってるんだから楽しようと、グローバル変数に突っ込んでcount++してみた</li>
</ul>
</li>
</ul>


<p>「グローバル変数に突っ込んでみた」対策みたいに、下手にアプリサーバで情報を保持すると
DBとアプリサーバに差ができてしまうので、実運用では避けるべきテクニックですね。
あとになって考えると、ベンチ回す前にアプリサーバの再起動忘れてたのにベンチ通ってたので、
投稿数数えなくてもよかったのでは・・・。</p>

<h3>nginxによる静的ファイルの配信</h3>

<p>cssとかjsをGolangでかえしていたので、nginxで返すようにしました。
これで724338から802905(workload:100)にScoreアップ！</p>

<h3>画像の縮小</h3>

<p>Twitterらしく投稿には100x100程度のサイズのアイコンが表示されるんですが、
元画像が1000x1000程度だったので縮小しました。
ただ、ベンチが画像にアクセスしにこないので、まったくの効果なし。
最終計測では結局元画像に戻しました。
実運用では確かに効果があると思うんですが、まずはログを見て判断しろという教訓ですね。</p>

<h2>まとめ</h2>

<p>あとはworkloadの調整とかやって最終スコアは935519でした。
2位にはなったものの、インデックス追加とかループクエリの削除とか最低限のことが何とか出来たって感じです。
もっと精進します。</p>

<p>tech kayac へのポストまだかな〜</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perlで文字列の出現回数を調べる]]></title>
    <link href="http://shogo82148.github.io/blog/2015/04/09/count-substrings-in-perl/"/>
    <updated>2015-04-09T23:28:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/04/09/count-substrings-in-perl</id>
    <content type="html"><![CDATA[<p>Perlで特定の文字列の出現回数を調べたくなって、調べてみたメモ。</p>

<!-- More -->


<p>ググるとすぐに見つかった。
<a href="http://d.hatena.ne.jp/shuer/20120907/1347025991">perlで指定文字列の出現回数を取得する(正規表現)</a></p>

<blockquote><p>指定文字列の出現回数は正規表現を使って</p>

<p><code>$count++ while($str =~ m/$pattern/g);</code></p>

<p>もしくは</p>

<p><code>$count = (() = $str =~ m/$pattern/g);</code></p></blockquote>

<p>が、一瞬何をやっているのか把握できない・・・。
こういう意味なのかなーって予想はしてみたけど、あってるか一応調査。</p>

<h2>whileを使った方法</h2>

<p><code>//g</code> をスカラーコンテキストの中でマッチさせると、
前回マッチした場所を覚えておいてくれて、次のマッチでその場所から検索を再開してくれるらしい。
(<a href="http://perldoc.perl.org/perlretut.html#Using-regular-expressions-in-Perl">Using regular expressions in Perl - perlretut</a>)
マッチした場所は <code>pos</code> で取得可能。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$str</span> <span class="o">=</span> <span class="s">&quot;hoge fuga foo bar&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nv">$str</span> <span class="o">=~</span> <span class="sr">m/[a-z]+/g</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">say</span> <span class="nb">pos</span> <span class="nv">$str</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>while</code>を後置にして、ループの回数を数えるようにすれば、最初の方法になる。</p>

<h2>ループを使わない方法</h2>

<p>これが一番謎だった。</p>

<p><code>//g</code> をリストコンテキストで評価すると、マッチした文字列がリストになって帰ってくるらしい。
(<a href="http://perldoc.perl.org/perlop.html#Regexp-Quote-Like-Operators">Quote-Like Operators - perlop</a>)</p>

<p>複数の変数に一括して代入するときに <code>($foo, $bar) = (1, 2)</code> みたいな書き方をするけど、
<code>() = ...</code> の部分はこれの代入先の変数が一個もないケース。
要するに「リストコンテキストで評価してね」という意味のイディオムみたい。</p>

<p>まとめると、以下のような処理を簡略化して一行にしたのがループを使わない方法みたいです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$str</span> <span class="o">=</span> <span class="s">&quot;hoge fuga foo bar&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">@matches</span> <span class="o">=</span> <span class="nv">$str</span> <span class="o">=~</span> <span class="sr">m/[a-z]+/g</span><span class="p">;</span> <span class="c1"># @matches = qw(hoge fuga foo bar);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$count</span> <span class="o">=</span> <span class="nb">scalar</span><span class="p">(</span><span class="nv">@matches</span><span class="p">);</span>     <span class="c1"># $count = 4;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに代入演算子は右に書いた物が優先されるので、実はカッコは無くてもOK。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$count</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=</span> <span class="nv">$str</span> <span class="o">=~</span> <span class="sr">m/$pattern/g</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>余計に闇な感じになった。
何故「リストコンテキストで評価してね」に専用のキーワードがないのか。
Perl難しすぎる。</p>

<h2>参考</h2>

<ul>
<li><a href="http://perldoc.perl.org/perlretut.html#Using-regular-expressions-in-Perl">Using regular expressions in Perl - perlretut</a></li>
<li><a href="http://perldoc.perl.org/perlop.html#Regexp-Quote-Like-Operators">Quote-Like Operators - perlop</a></li>
<li><a href="http://perldoc.perl.org/perldata.html#List-value-constructors">List value constructors</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[名前付き引数とオプション引数とオーバーロードを同時に使うとUnityが死ぬ]]></title>
    <link href="http://shogo82148.github.io/blog/2015/03/29/unity-internal-compiler-error/"/>
    <updated>2015-03-29T12:13:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/03/29/unity-internal-compiler-error</id>
    <content type="html"><![CDATA[<p>オーバーロードの優先順位付けが少しおかしくて、
名前付き引数とオプション引数と一緒に使うと死ぬ場合があるというお話。
ぴーちんが昨日言ってたやつ。
いんたーねっつにも乗っけておく。</p>

<!-- More -->


<p>問題となるのは以下のようなコード。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">class</span> <span class="nc">MainClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">void</span> <span class="nf">Foo</span> <span class="p">(</span><span class="kt">int</span> <span class="n">fuga</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">void</span> <span class="nf">Foo</span> <span class="p">(</span><span class="kt">string</span> <span class="n">hoge</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fuga</span> <span class="p">=</span> <span class="m">10</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">void</span> <span class="nf">Bar</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Foo</span> <span class="p">(</span><span class="n">fuga</span><span class="p">:</span> <span class="m">20</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このコードは以下のような例外を吐いて死ぬ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Internal compiler error. See the console log for more information. output was:
</span><span class='line'>Unhandled Exception: Mono.CSharp.InternalErrorException: Internal error
</span><span class='line'>  at Mono.CSharp.MethodGroupExpr.IsApplicable (Mono.CSharp.ResolveContext ec, Mono.CSharp.Arguments& arguments, Int32 arg_count, System.Reflection.MethodBase& method, System.Boolean& params_expanded_form) [0x00000] in &lt;filename unknown&gt;:0 
</span><span class='line'>  at Mono.CSharp.MethodGroupExpr.OverloadResolve (Mono.CSharp.ResolveContext ec, Mono.CSharp.Arguments& Arguments, Boolean may_fail, Location loc) [0x00000] in &lt;filename unknown&gt;:0 
</span><span class='line'>  at Mono.CSharp.Invocation.DoResolveOverload (Mono.CSharp.ResolveContext ec) [0x00000] in &lt;filename unknown&gt;:0 
</span><span class='line'>  at Mono.CSharp.Invocation.DoResolve (Mono.CSharp.ResolveContext ec) [0x00000] in &lt;filename unknown&gt;:0 
</span><span class='line'>  at Mono.CSharp.Expression.Resolve (Mono.CSharp.ResolveContext ec, ResolveFlags flags) [0x00000] in &lt;filename unknown&gt;:0 
</span><span class='line'>  at Mono.CSharp.Expression.Resolve (Mono.CSharp.ResolveContext ec) [0x00000] in &lt;filename unknown&gt;:0 
</span><span class='line'>  at Mono.CSharp.ExpressionStatement.ResolveStatement (Mono.CSharp.BlockContext ec) [0x00000] in &lt;filename unknown&gt;:0 
</span><span class='line'>  at Mono.CSharp.StatementExpression.Resolve (Mono.CSharp.BlockContext ec) [0x00000] in &lt;filename unknown&gt;:0 
</span><span class='line'>  at Mono.CSharp.Block.Resolve (Mono.CSharp.BlockContext ec) [0x00000] in &lt;filename unknown&gt;:0 
</span><span class='line'>  at Mono.CSharp.ToplevelBlock.Resolve (Mono.CSharp.FlowBranching parent, Mono.CSharp.BlockContext rc, Mono.CSharp.ParametersCompiled ip, IMethodData md) [0x00000] in &lt;filename unknown&gt;:0 
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>All compiler errors have to be fixed before you can enter playmode!
</span><span class='line'>UnityEditor.SceneView:ShowCompileErrorNotification()</span></code></pre></td></tr></table></div></figure>


<p>内部エラーだからどこが間違っているのか全くわからないという・・・。</p>

<p>このエラーに遭遇したのはUnity4.5.3だけど、
Unity5.0.0f4でも同じように死んだ。</p>

<p><code>Foo (fuga: 20);</code> は <code>void Foo (int fuga)</code> を読んで欲しいけど、
Unityがなぜか <code>void Foo (string hoge, int fuga = 10)</code> を呼び出してしまい、
コード生成時にエラーで落ちたんじゃないかと予想している。</p>

<ul>
<li>引数でオプションを取るのをやめる <code>void Foo (string hoge, int fuga)</code></li>
<li>引数の名前を変える <code>void Foo (string hoge, int fugaa = 10)</code></li>
</ul>


<p>という対処をすると大丈夫っぽい。</p>

<p>メソッド名自体を変えるべきではって気もするけど、
どうしてもインターフェースを変えたくなったら以下のようにオプション引数を使わずに、すべてオーバーロードで解決するとかかなあ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">class</span> <span class="nc">MainClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">void</span> <span class="nf">Foo</span> <span class="p">(</span><span class="kt">int</span> <span class="n">fuga</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">void</span> <span class="nf">Foo</span> <span class="p">(</span><span class="kt">string</span> <span class="n">hoge</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">Foo</span> <span class="p">(</span><span class="n">hoge</span><span class="p">,</span> <span class="m">10</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">void</span> <span class="nf">Foo</span> <span class="p">(</span><span class="kt">string</span> <span class="n">hoge</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fuga</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">void</span> <span class="nf">Bar</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Foo</span> <span class="p">(</span><span class="n">fuga</span><span class="p">:</span> <span class="m">20</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>追記</h2>

<p><a href="http://pchin.hatenablog.com/entry/2015/03/30/093130">ぴーちんも書いてくれた</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[travisがいつのまにやらcsharpをサポートしていた件]]></title>
    <link href="http://shogo82148.github.io/blog/2015/03/29/travis-supports-csharp/"/>
    <updated>2015-03-29T11:54:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/03/29/travis-supports-csharp</id>
    <content type="html"><![CDATA[<p>いつもテスト実行でお世話になっているtravisさんが<a href="http://docs.travis-ci.com/user/languages/csharp/">C#をサポートしていました</a>。</p>

<!-- More -->


<p>以前から <a href="https://github.com/travis-ci/travis-ci/issues/649">C#をサポートして欲しいという要望</a>はあったのですが、
2014年12月あたりからついに使えるようになってたみたいです。</p>

<p>以前はC言語のフリをして、設定ファルで頑張ってmonoをインストールする必要があったのですが、</p>

<figure class='code'><figcaption><span>.travis.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1">## Travis CI Integration</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">c</span>
</span><span class='line'><span class="l-Scalar-Plain">install</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">sudo apt-get install mono-devel mono-gmcs</span>
</span><span class='line'><span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">xbuild hogehoge.sln</span>
</span></code></pre></td></tr></table></div></figure>


<p>今はlanguageにcsharpを設定して、solutionを指定するだけです。</p>

<figure class='code'><figcaption><span>.travis.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1">## Travis CI Integration</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">csharp</span>
</span><span class='line'><span class="l-Scalar-Plain">solution</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hogehoge.sln</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/shogo82148/MiniMessagePack">MiniMeggagePack</a> もこちらの設定を使うようにしてみました。</p>

<p>nunitを使ってテストする場合は結局<code>sudo apt-get install nunit-console</code>する必要があるみたいですが、
複数バージョンのmonoでテストできたりしていい感じです。
ただ、ドキュメントにはmono2.10.8もサポートしているとあるのにmonoのインストールが404で失敗したり、
他のバージョンでも時たまmonoのインストールにコケたり、
3.8.0でnunitのテストが上手く動かなかったり、不安定な感じがしてます。
徐々に改善していくといいなー。</p>

<h2>参考</h2>

<ul>
<li><a href="http://docs.travis-ci.com/user/languages/csharp/">Building a C#, F#, or Visual Basic Project</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git diffでcsvの差分を見やすく表示する]]></title>
    <link href="http://shogo82148.github.io/blog/2015/03/24/git-diff-csv/"/>
    <updated>2015-03-24T23:08:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/03/24/git-diff-csv</id>
    <content type="html"><![CDATA[<p>ExcelやGoogle Spreadsheetを使って作ったデータをプログラムに取り込むのにcsv形式が便利でよく使っているんですが、
gitで履歴管理をしてもdiffが見づらい・・・。
gitのdiffがかなり自由にカスタマイズできることを知ったので、いろいろいじってみたメモ。</p>

<!-- More -->


<p>例として、以下のようなcsvファイルを編集することを考えます。</p>

<figure class='code'><figcaption><span>hogehoge.csv</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>id,name,param_a,param_b,param_c,param_d,param_e
</span><span class='line'>101,hoge,314,159,265,358,979
</span><span class='line'>102,fuga,271,828,182,845,904</span></code></pre></td></tr></table></div></figure>


<p>一行目は列の見出しになっていて、プログラムからは列番号ではなく<code>param_d</code>の様に指定する、
という作りになってます。
<code>id: 101</code>の行の<code>param_d</code>の数値に変更が入った場合、普通のgitだと以下のようになります。</p>

<figure class='code'><figcaption><span>git-diff</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/hogehoge.csv b/hogehoge.csv</span>
</span><span class='line'><span class="gh">index c8dbd17..37f4ff5 100644</span>
</span><span class='line'><span class="gd">--- a/hogehoge.csv</span>
</span><span class='line'><span class="gi">+++ b/hogehoge.csv</span>
</span><span class='line'><span class="gu">@@ -1,3 +1,3 @@</span>
</span><span class='line'>id,name,param_a,param_b,param_c,param_d,param_e
</span><span class='line'><span class="gd">-101,hoge,314,159,265,358,979</span>
</span><span class='line'><span class="gi">+101,hoge,314,159,265,359,979</span>
</span><span class='line'> 102,fuga,271,828,182,845,904
</span></code></pre></td></tr></table></div></figure>


<p>二行目に何か変更があったことはわかりますが、
<code>param_d</code> だとはすぐにはわかりませんね・・・</p>

<h2>YAMLに変換して比較する</h2>

<p>バイナリファイルであっても差分が確認できるよう、
git-diffを実行する前に変換ツールを実行する機能があります。
拡張子がcsvのファイルに対してこの機能が働くように<code>.gitattributes</code>に以下の行を足します。</p>

<figure class='code'><figcaption><span>.gitattributes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*.csv diff=csv</span></code></pre></td></tr></table></div></figure>


<p><code>.git/config</code> に変換ツールの設定を追加します。
<code>key: value</code>の形式になっていると見やすそうなので、変換先の形式にはyamlを選びました。</p>

<figure class='code'><figcaption><span>.git/config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[diff "csv"]
</span><span class='line'>    textconv = csv2yaml</span></code></pre></td></tr></table></div></figure>


<p>ここで指定している<code>csv2yaml</code>は自前で用意する必要があります。
インターネット上をさまよえば同名のツールはいくらでもありそうですが、今回は自分でgoを使って書きました。
<a href="https://gist.github.com/shogo82148/8f19cb771dc6f91308a7">csv2yaml.go</a>をコンパイルしてパスの通る場所においておきましょう。
csv2yamlは自分のよく使うcsvのフォーマットにあわせて以下のようなカスタマイズをしてあります。</p>

<ul>
<li><code>id</code>という名前のキーを必ず最初にする</li>
<li>それ以外のキーはアルファベット順にソートする</li>
</ul>


<p>この状態で<code>git diff</code>を実行すると以下のようになります。</p>

<figure class='code'><figcaption><span>git-diff</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/hogehoge.csv b/hogehoge.csv</span>
</span><span class='line'><span class="gh">index c8dbd17..37f4ff5 100644</span>
</span><span class='line'><span class="gd">--- a/hogehoge.csv</span>
</span><span class='line'><span class="gi">+++ b/hogehoge.csv</span>
</span><span class='line'><span class="gu">@@ -3,7 +3,7 @@</span>
</span><span class='line'>   param_a: &quot;314&quot;
</span><span class='line'>   param_b: &quot;159&quot;
</span><span class='line'>   param_c: &quot;265&quot;
</span><span class='line'><span class="gd">-  param_d: &quot;358&quot;</span>
</span><span class='line'><span class="gi">+  param_d: &quot;359&quot;</span>
</span><span class='line'>   param_e: &quot;979&quot;
</span><span class='line'> - id: &quot;102&quot;
</span><span class='line'>   name: fuga
</span></code></pre></td></tr></table></div></figure>


<p>これなら <code>param_d</code> が変更されたとすぐに分かりますね。</p>

<h2>hunk-headerを設定する</h2>

<p>めでたく<code>param_d</code>が変更されていることがわかるようになったのですが、
今度はどの行が変更されたのかがわからなくなってしまいました。</p>

<p>差分の <code>@@ -3,7 +3,7 @@</code> となっている部分はhunk-headerといって、自由にカスタマイズすることができます。
<code>.git/config</code> に表示したい文字列のパターンを入力しましょう。</p>

<figure class='code'><figcaption><span>.git/config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[diff "csv"]
</span><span class='line'>    textconv = csv2yaml
</span><span class='line'>    xfuncname = "^- .*$"</span></code></pre></td></tr></table></div></figure>


<p>この状態で差分を確認すると「<code>id: 101</code>の<code>param_d</code>をいうパラメータ」が更新されたことが一目瞭然ですね！</p>

<figure class='code'><figcaption><span>git-diff</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/hogehoge.csv b/hogehoge.csv</span>
</span><span class='line'><span class="gh">index c8dbd17..37f4ff5 100644</span>
</span><span class='line'><span class="gd">--- a/hogehoge.csv</span>
</span><span class='line'><span class="gi">+++ b/hogehoge.csv</span>
</span><span class='line'><span class="gu">@@ -3,7 +3,7 @@ - id: &quot;101&quot;</span>
</span><span class='line'>   param_a: &quot;314&quot;
</span><span class='line'>   param_b: &quot;159&quot;
</span><span class='line'>   param_c: &quot;265&quot;
</span><span class='line'><span class="gd">-  param_d: &quot;358&quot;</span>
</span><span class='line'><span class="gi">+  param_d: &quot;359&quot;</span>
</span><span class='line'>   param_e: &quot;979&quot;
</span><span class='line'> - id: &quot;102&quot;
</span><span class='line'>   name: fuga
</span></code></pre></td></tr></table></div></figure>


<p><code>csv2yaml</code>を作るときに「<code>id</code>という名前のキーを必ず最初にする」としたのはこの機能を使うためです。
僕のユースケースでは<code>id</code>がわかれば十分なことがほとんどですが、
場合によってはもっと別の情報の方がいいかもしれませんね。</p>

<p>まだ設定したばっかりなので本当に有用かはよくわかってないですが、しばらくこの設定で試してみようと思います。</p>

<h2>参考</h2>

<ul>
<li><a href="http://qiita.com/YasuOza/items/c472f803dab51b7d4f51">gitのdiffを見やすく表示する</a></li>
<li><a href="http://git-scm.com/docs/gitattributes">gitattributes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git で管理しているリポジトリの各ブランチの中身をそれぞれ個別のディレクトリにエクスポートする(git-archive版)]]></title>
    <link href="http://shogo82148.github.io/blog/2015/03/20/git-pack-branch/"/>
    <updated>2015-03-20T18:38:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/03/20/git-pack-branch</id>
    <content type="html"><![CDATA[<p><a href="http://moznion.hatenadiary.com/entry/2015/03/20/175035">git で管理しているリポジトリの各ブランチの中身をそれぞれ個別のディレクトリにエクスポートする</a> を読んで、
git-archive を使うともう少しシンプルに書けるんじゃないかと思ってやってみた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git branch | sed -e <span class="s1">&#39;s/^[\* ]*//g&#39;</span> | xargs -n1 -I% sh -c <span class="s1">&#39;git archive --prefix=%/ % | tar x&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>.gitconfig とかでエイリアスを設定しておくといいんじゃないでしょうか</p>

<p>以上</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[map[string]Hoge or map[string]*Hoge ?]]></title>
    <link href="http://shogo82148.github.io/blog/2015/02/22/should-i-use-a-pointer-in-go/"/>
    <updated>2015-02-22T02:14:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2015/02/22/should-i-use-a-pointer-in-go</id>
    <content type="html"><![CDATA[<p>Go言語でポインタを使うべきか使わないべきか問題。
「ケース・バイ・ケースなので、状況に応じて使い分けましょう！」という結論が出るのは目に見えているので、
具体例について検証してみた結果を書いておきます。</p>

<!-- More -->


<h2>背景</h2>

<p>他の人のコードレビューを見ていたら、
レビュアーが「コピーをしないで済むのでstructの受け渡しにはポインタ使ったほうがいいと思います！」とコメントしていて、
そうなのか？と思ったのですがあんまり自信がなかったので検証してみました。
コメントがついていたのは以下のようなコード。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">hoge</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;strconv&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Hoge</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">A</span> <span class="kt">int</span>
</span><span class='line'>  <span class="nx">B</span> <span class="kt">int</span>
</span><span class='line'>  <span class="nx">C</span> <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">NewHogeMapStruct</span><span class="p">()</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">Hoge</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">m</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">Hoge</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">10000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">m</span><span class="p">[</span><span class="nx">strconv</span><span class="p">.</span><span class="nx">Itoa</span><span class="p">(</span><span class="nx">i</span><span class="p">)]</span> <span class="p">=</span> <span class="nx">Hoge</span><span class="p">{</span><span class="nx">i</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">i</span><span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">m</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ポイントは以下の点です。</p>

<ul>
<li>受け渡すstructはintが3つ程度の小さなもの</li>
<li>mapに入れて返す</li>
</ul>


<h2>benchmarkを使って検証する</h2>

<p>ポインタを使わない版と使う版を両方作ってベンチマークをとってみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">hoge</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;strconv&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Hoge</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">A</span> <span class="kt">int</span>
</span><span class='line'>  <span class="nx">B</span> <span class="kt">int</span>
</span><span class='line'>  <span class="nx">C</span> <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ポインタ使わない版</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">NewHogeMapStruct</span><span class="p">()</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">Hoge</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">m</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">Hoge</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">10000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">m</span><span class="p">[</span><span class="nx">strconv</span><span class="p">.</span><span class="nx">Itoa</span><span class="p">(</span><span class="nx">i</span><span class="p">)]</span> <span class="p">=</span> <span class="nx">Hoge</span><span class="p">{</span><span class="nx">i</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">i</span><span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">m</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ポインタ使う版</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">NewHogeMapPointer</span><span class="p">()</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">Hoge</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">m</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">Hoge</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">10000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">m</span><span class="p">[</span><span class="nx">strconv</span><span class="p">.</span><span class="nx">Itoa</span><span class="p">(</span><span class="nx">i</span><span class="p">)]</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">Hoge</span><span class="p">{</span><span class="nx">i</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">i</span><span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">m</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ベンチマークはこれらの関数をただ呼び出すだけのシンプルなもの。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">hoge</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;strconv&quot;</span>
</span><span class='line'>  <span class="s">&quot;testing&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">BenchmarkStruct</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">NewHogeMapStruct</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">BenchmarkPointer</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">NewHogeMapPointer</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>go test -benchmem -bench .</code> すると以下のような結果が得られました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PASS
</span><span class='line'>BenchmarkStruct        500       3238732 ns/op     1662087 B/op      10615 allocs/op
</span><span class='line'>BenchmarkPointer     500     3485712 ns/op     1372074 B/op      20593 allocs/op
</span><span class='line'>ok    github.com/shogo82148/pointer-test  4.067s</span></code></pre></td></tr></table></div></figure>


<p>ポインタを使わないほうが若干速いですね。
メモリのアロケーション回数はポインタ使う版の半分です。</p>

<p>ポインタ使わない版は速度・メモリアロケーション回数は減ったものの、
必要なバイト数は増えています。
おそらく、これから値が入る予定のメモリ領域を予め確保しており、
その分のメモリを多めに食っているのでしょう。
ポインタ使う版では構造体の中身を入れる分は必要になったときにnewするので、
使用するメモリは最小限で済みます。</p>

<h2>アセンブリを見てみてみる</h2>

<p>go tool を使うとアセンブリが見れるらしい。
<code>go tool 6g -S hoge.go</code> を実行してアセンブリも眺めてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--- prog list "NewHogeMapStruct" ---
</span><span class='line'>0000 (hoge.go:13) TEXT    NewHogeMapStruct+0(SB),$72-8
</span><span class='line'>0001 (hoge.go:13) FUNCDATA $0,gcargs·0+0(SB)
</span><span class='line'>0002 (hoge.go:13) FUNCDATA $1,gclocals·0+0(SB)
</span><span class='line'>0003 (hoge.go:13) TYPE    ~anon0+0(FP){map[string]"".Hoge},$8
</span><span class='line'>0004 (hoge.go:13) TYPE    m+-8(SP){map[string]"".Hoge},$8
</span><span class='line'>0005 (hoge.go:13) TYPE    i+-16(SP){int},$8
</span><span class='line'>0006 (hoge.go:14) MOVQ    $type.map[string]"".Hoge+0(SB),(SP)
</span><span class='line'>0007 (hoge.go:14) MOVQ    $0,8(SP)
</span><span class='line'>0008 (hoge.go:14) PCDATA  $0,$24
</span><span class='line'>0009 (hoge.go:14) CALL    ,runtime.makemap+0(SB)
</span><span class='line'>0010 (hoge.go:14) PCDATA  $0,$-1
</span><span class='line'>0011 (hoge.go:14) MOVQ    16(SP),BX
</span><span class='line'>0012 (hoge.go:14) MOVQ    BX,m+-8(SP)
</span><span class='line'>0013 (hoge.go:15) MOVQ    $0,AX
</span><span class='line'>0014 (hoge.go:15) JMP     ,16
</span><span class='line'>0015 (hoge.go:15) INCQ    ,AX
</span><span class='line'>0016 (hoge.go:15) CMPQ    AX,$10000
</span><span class='line'>0017 (hoge.go:15) JGE     $0,40
</span><span class='line'>0018 (hoge.go:16) MOVQ    AX,i+-16(SP)
</span><span class='line'>0019 (hoge.go:16) MOVQ    AX,(SP)
</span><span class='line'>0020 (hoge.go:16) CALL    ,strconv.Itoa+0(SB)
</span><span class='line'>0021 (hoge.go:16) MOVQ    i+-16(SP),DX
</span><span class='line'>0022 (hoge.go:16) MOVQ    8(SP),SI
</span><span class='line'>0023 (hoge.go:16) MOVQ    16(SP),BP
</span><span class='line'>0024 (hoge.go:16) MOVQ    statictmp_0002+0(SB),BX
</span><span class='line'>0025 (hoge.go:16) MOVQ    statictmp_0002+8(SB),BX
</span><span class='line'>0026 (hoge.go:16) MOVQ    statictmp_0002+16(SB),BX
</span><span class='line'>0027 (hoge.go:16) MOVQ    $type.map[string]"".Hoge+0(SB),(SP)
</span><span class='line'>0028 (hoge.go:16) MOVQ    m+-8(SP),BX
</span><span class='line'>0029 (hoge.go:16) MOVQ    BX,8(SP)
</span><span class='line'>0030 (hoge.go:16) MOVQ    SI,16(SP)
</span><span class='line'>0031 (hoge.go:16) MOVQ    BP,24(SP)
</span><span class='line'>0032 (hoge.go:16) MOVQ    DX,32(SP)
</span><span class='line'>0033 (hoge.go:16) MOVQ    DX,40(SP)
</span><span class='line'>0034 (hoge.go:16) MOVQ    DX,48(SP)
</span><span class='line'>0035 (hoge.go:16) PCDATA  $0,$56
</span><span class='line'>0036 (hoge.go:16) CALL    ,runtime.mapassign1+0(SB)
</span><span class='line'>0037 (hoge.go:16) MOVQ    i+-16(SP),AX
</span><span class='line'>0038 (hoge.go:16) PCDATA  $0,$-1
</span><span class='line'>0039 (hoge.go:15) JMP     ,15
</span><span class='line'>0040 (hoge.go:18) MOVQ    m+-8(SP),BX
</span><span class='line'>0041 (hoge.go:18) MOVQ    BX,~anon0+0(FP)
</span><span class='line'>0042 (hoge.go:18) RET     ,</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--- prog list "NewHogeMapPointer" ---
</span><span class='line'>0043 (hoge.go:21) TEXT    NewHogeMapPointer+0(SB),$72-8
</span><span class='line'>0044 (hoge.go:21) FUNCDATA $0,gcargs·1+0(SB)
</span><span class='line'>0045 (hoge.go:21) FUNCDATA $1,gclocals·1+0(SB)
</span><span class='line'>0046 (hoge.go:21) TYPE    ~anon0+0(FP){map[string]*"".Hoge},$8
</span><span class='line'>0047 (hoge.go:21) TYPE    m+-24(SP){map[string]*"".Hoge},$8
</span><span class='line'>0048 (hoge.go:21) TYPE    i+-32(SP){int},$8
</span><span class='line'>0049 (hoge.go:21) TYPE    autotmp_0003+-16(SP){string},$16
</span><span class='line'>0050 (hoge.go:22) MOVQ    $type.map[string]*"".Hoge+0(SB),(SP)
</span><span class='line'>0051 (hoge.go:22) MOVQ    $0,8(SP)
</span><span class='line'>0052 (hoge.go:22) PCDATA  $0,$24
</span><span class='line'>0053 (hoge.go:22) CALL    ,runtime.makemap+0(SB)
</span><span class='line'>0054 (hoge.go:22) PCDATA  $0,$-1
</span><span class='line'>0055 (hoge.go:22) MOVQ    16(SP),BX
</span><span class='line'>0056 (hoge.go:22) MOVQ    BX,m+-24(SP)
</span><span class='line'>0057 (hoge.go:23) MOVQ    $0,AX
</span><span class='line'>0058 (hoge.go:23) JMP     ,60
</span><span class='line'>0059 (hoge.go:23) INCQ    ,AX
</span><span class='line'>0060 (hoge.go:23) CMPQ    AX,$10000
</span><span class='line'>0061 (hoge.go:23) JGE     $0,94
</span><span class='line'>0062 (hoge.go:24) MOVQ    AX,i+-32(SP)
</span><span class='line'>0063 (hoge.go:24) MOVQ    AX,(SP)
</span><span class='line'>0064 (hoge.go:24) CALL    ,strconv.Itoa+0(SB)
</span><span class='line'>0065 (hoge.go:24) MOVQ    8(SP),BX
</span><span class='line'>0066 (hoge.go:24) MOVQ    BX,autotmp_0003+-16(SP)
</span><span class='line'>0067 (hoge.go:24) MOVQ    16(SP),BX
</span><span class='line'>0068 (hoge.go:24) MOVQ    BX,autotmp_0003+-8(SP)
</span><span class='line'>0069 (hoge.go:24) MOVQ    $type."".Hoge+0(SB),(SP)
</span><span class='line'>0070 (hoge.go:24) PCDATA  $0,$16
</span><span class='line'>0071 (hoge.go:24) CALL    ,runtime.new+0(SB)
</span><span class='line'>0072 (hoge.go:24) MOVQ    i+-32(SP),CX
</span><span class='line'>0073 (hoge.go:24) PCDATA  $0,$-1
</span><span class='line'>0074 (hoge.go:24) MOVQ    8(SP),AX
</span><span class='line'>0075 (hoge.go:24) NOP     ,
</span><span class='line'>0076 (hoge.go:24) MOVQ    CX,(AX)
</span><span class='line'>0077 (hoge.go:24) NOP     ,
</span><span class='line'>0078 (hoge.go:24) MOVQ    CX,8(AX)
</span><span class='line'>0079 (hoge.go:24) NOP     ,
</span><span class='line'>0080 (hoge.go:24) MOVQ    CX,16(AX)
</span><span class='line'>0081 (hoge.go:24) MOVQ    $type.map[string]*"".Hoge+0(SB),(SP)
</span><span class='line'>0082 (hoge.go:24) MOVQ    m+-24(SP),BX
</span><span class='line'>0083 (hoge.go:24) MOVQ    BX,8(SP)
</span><span class='line'>0084 (hoge.go:24) MOVQ    autotmp_0003+-16(SP),BX
</span><span class='line'>0085 (hoge.go:24) MOVQ    BX,16(SP)
</span><span class='line'>0086 (hoge.go:24) MOVQ    autotmp_0003+-8(SP),BX
</span><span class='line'>0087 (hoge.go:24) MOVQ    BX,24(SP)
</span><span class='line'>0088 (hoge.go:24) MOVQ    AX,32(SP)
</span><span class='line'>0089 (hoge.go:24) PCDATA  $0,$40
</span><span class='line'>0090 (hoge.go:24) CALL    ,runtime.mapassign1+0(SB)
</span><span class='line'>0091 (hoge.go:24) MOVQ    i+-32(SP),AX
</span><span class='line'>0092 (hoge.go:24) PCDATA  $0,$-1
</span><span class='line'>0093 (hoge.go:23) JMP     ,59
</span><span class='line'>0094 (hoge.go:26) MOVQ    m+-24(SP),BX
</span><span class='line'>0095 (hoge.go:26) MOVQ    BX,~anon0+0(FP)
</span><span class='line'>0096 (hoge.go:26) RET     ,</span></code></pre></td></tr></table></div></figure>


<p>メモリアロケーションが起きているのはおそらく <code>runtime.new</code> と <code>strconv.Itoa</code> を呼び出している部分でしょう。
ポインタ使う版では両方とも呼び出していますが、ポインタ使わない版では<code>strconv.Itoa</code>の呼び出しだけです。
ポインタ使う版ではmapのkeyとvalueのメモリ領域をそれぞれ確保が必要なのに対して、
ポインタ使わない版ではvalueのためのメモリ領域を<code>new(map[string]Hoge)</code>の時点で一括確保するので、
メモリアロケーションが少なくて済むということですね。</p>

<h2>結論</h2>

<p>今回の場合構造体のサイズが小さいく、コピーのコスト&lt;アロケーションのコストであったため、
速度的にはポインタを使わない方が有利でした。
しかし、<code>map</code>は値の入っていない要素分を予め確保するので、
メモリ使用量的にはポインタを使う方が有利でした。
結局は速度とメモリ使用量のトレードオフということです。</p>

<p>実際のコードでは、キーの個数は60個程度で呼び出される頻度もそんなに多くなく、
速度もメモリも十分に足りるので、正直どっちでも良かった気がします。
ポインタを使わないほうがタイプ数がちょっと減ってコード書くときに少し嬉しいくらいですかね。</p>

<h2>結論の結論</h2>

<p>ケース・バイ・ケースなので、状況に応じて使い分けましょう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GithubのIRCフックがgollumをサポートしました]]></title>
    <link href="http://shogo82148.github.io/blog/2014/11/15/github-irc-hook-supports-gollum/"/>
    <updated>2014-11-15T22:24:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/11/15/github-irc-hook-supports-gollum</id>
    <content type="html"><![CDATA[<p>GithubのIRCフックがgollum(Wikiページの変更通知)をサポートしました。</p>

<!-- More -->


<p>最近ぴーちんさんがWikiの編集業に精を出していて、編集の度にIRCに「変更しました！」とポストしてました。
「自動で通知してくれるとうれしいよねー」と話していたら、ある秘密を教えてもらいました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>acidlemon: githubのwiki編集のIRC通知、ここに秘密が隠されています https://github.com/github/github-services/blob/master/lib/services/irc.rb
</span><span class='line'>acidlemon: Blameおして黄色い変なアイコンを調べれば何をすれば良いかわかるはず</span></code></pre></td></tr></table></div></figure>


<p>おや・・・何処かで見た黄色いアイコンが・・・</p>

<p>真似して<a href="https://github.com/github/github-services">github-services</a>に<a href="https://github.com/github/github-services/pull/970">プルリクエスト</a>をだしてマージしてもらった。
で、さっき<a href="https://api.github.com/hooks">対応イベント一覧</a>見てたらgollum増えてる！
マージのときのコメントで「a few days」と言われたので2,3日かかるのかな？と思ってたけど、24時間経たないうちに反映されたよ！
早い！！</p>

<p>さっそく<a href="https://github.com/Songmu/Github-Hooks-Manager">Github::Hooks::Manager</a>を使って設定しておきました。
「[project-name] shogo82148 edited wiki page hogehoge」みたいに編集されたページが通知されます。</p>

<p>便利！！！</p>

<h2>SEE ALSO</h2>

<ul>
<li><a href="https://github.com/github/github-services">github-services</a></li>
<li><a href="http://soh335.hatenablog.com/entry/2013/07/10/100354">github の irc hook に幾つかの event type が追加されました - @soh335 memo</a></li>
<li><a href="http://www.songmu.jp/riji/entry/2013-12-05-github-hooks.html">GithubのHookについてのまとめとソリューション - おそらくはそれさえも平凡な日々</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitで作業ディレクトリの変更を破棄したのに差分が出続けて困った話その2]]></title>
    <link href="http://shogo82148.github.io/blog/2014/10/21/git-case-sensitivity/"/>
    <updated>2014-10-21T00:56:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/10/21/git-case-sensitivity</id>
    <content type="html"><![CDATA[<p>先日「<a href="http://shogo82148.github.io/blog/2014/10/04/gitattribute-eol-equals-crlf/">Gitで作業ディレクトリの変更を破棄したのに差分が出続けて困った話</a>」と
いうのを書きましたが、より強力な敵が現われました。
このときは文字コードが原因で <code>git checkout -- &lt;file&gt;</code> しても差分が残り続けるというもので、<code>git add</code> してコミットし直すことで回避出来ました。
しかし、今度の敵は <code>git checkout -- &lt;file&gt;</code> しても <code>git add &lt;file&gt;</code>しても差分が残り続けます。</p>

<p>なんだ・・・このボスを倒したら新たなラスボスが現れた感・・・</p>

<p>acidlemon先生の手助けにより事無きを得たのですが、
ちょっと不明な点もあったので、その点もあわせてメモを残しておきます。</p>

<!-- More -->


<h2>症状</h2>

<p><code>git checkout -- &lt;file&gt;</code> しても、<code>git add &lt;file&gt;</code> しても、<code>git reset --hard HEAD</code> しても、
何をしても差分が出続ける・・・なんだこいつ・・・</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout -- AwesomeFeature
</span><span class='line'>$ git add .
</span><span class='line'>$ git status
</span><span class='line'>On branch master
</span><span class='line'>Changes not staged for commit:
</span><span class='line'>  (use "git add &lt;file&gt;..." to update what will be committed)
</span><span class='line'>    (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
</span><span class='line'>  
</span><span class='line'>  modified:   AwesomeFeature/HogeHoge.txt
</span><span class='line'>  
</span><span class='line'>  no changes added to commit (use "git add" and/or "git commit -a")</span></code></pre></td></tr></table></div></figure>


<p>操作は全てMac上で行いました。</p>

<h2>原因</h2>

<p>原因はファイル名の大文字小文字でした。
<code>git ls-files</code> でgitに管理されているファイルの一覧を表示します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git ls-files
</span><span class='line'>AwesomeFeature/HogeHoge.txt
</span><span class='line'>AwesomeFeature/hogehoge.txt
</span><span class='line'>README.txt</span></code></pre></td></tr></table></div></figure>


<p>大文字小文字だけが違う「HogeHoge.txt」と「hogehoge.txt」が管理されています。</p>

<p>しかしワーキングディレクトリにあるのは「HogeHoge.txt」のみです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls AwesomeFeature/
</span><span class='line'>HogeHoge.txt</span></code></pre></td></tr></table></div></figure>


<p>Macのファイルシステムは大文字小文字を区別しないので、
ワーキングディレクトリ上で「HogeHoge.txt」と「hogehoge.txt」を同時に扱えません。
しかしgitは両者を区別するので、よくわからない差分が生まれてしまったわけです。</p>

<p>両方同時に扱えないので、どちらか片方を消して解決します。
<code>git diff</code>で「HogeHoge.txt」と「hogehoge.txt」の差分が見れるのでどっちを残すが選択、
<code>git checkout -- &lt;file&gt;</code>で必要なほうをワーキングディレクトリに反映後、
<code>git rm --cached &lt;file&gt;</code>で不要なファイルをレポジトリから削除です。
「hogehoge.txt」を残す場合は以下のような感じです。全てファイル名を明示してるのがポイントです(症状のところではディレクトリ名指定だった)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ # 差分確認
</span><span class='line'>$ # 今はHogeHoge.txtの方がワーキングディレクトリに反映されているので、hogehoge.txtに変更があるように見える
</span><span class='line'>$ git diff
</span><span class='line'>diff --git a/AwesomeFeature/hogehoge.txt b/AwesomeFeature/hogehoge.txt
</span><span class='line'>index 3488202..1150100 100644
</span><span class='line'>--- a/AwesomeFeature/hogehoge.txt
</span><span class='line'>+++ b/AwesomeFeature/hogehoge.txt
</span><span class='line'>@@ -1 +1 @@
</span><span class='line'>-this is hogehoge.txt
</span><span class='line'>+this is HogeHoge.txt
</span><span class='line'>$
</span><span class='line'>$ # hogehoge.txt の内容をワーキングディレクトリに反映
</span><span class='line'>$ git checkout -- AwesomeFeature/hogehoge.txt
</span><span class='line'>$
</span><span class='line'>$ # 今度はHogeHoge.txtに変更があるように見える
</span><span class='line'>$ git diff
</span><span class='line'>diff --git a/AwesomeFeature/HogeHoge.txt b/AwesomeFeature/HogeHoge.txt
</span><span class='line'>index 1150100..3488202 100644
</span><span class='line'>--- a/AwesomeFeature/HogeHoge.txt
</span><span class='line'>+++ b/AwesomeFeature/HogeHoge.txt
</span><span class='line'>@@ -1 +1 @@
</span><span class='line'>-this is HogeHoge.txt
</span><span class='line'>+this is hogehoge.txt
</span><span class='line'>$
</span><span class='line'>$ # HogeHoge.txtの方はgitから削除
</span><span class='line'>$ git rm AwesomeFeature/HogeHoge.txt
</span><span class='line'>rm 'AwesomeFeature/HogeHoge.txt'
</span><span class='line'>$ git commit -m 'rm AwesomeFeature/HogeHoge.txt'</span></code></pre></td></tr></table></div></figure>


<p>「HogeHoge.txt」があるブランチと「hogehoge.txt」があるブランチをマージするとこうなるようです。
gitの扱いに慣れてない人が触っているレポジトリなのでトラブルが絶えない・・・それにしたってなんでこう見事に地雷を踏抜いて行くんだ・・・(ヽ´ω`)</p>

<h2>まとめ</h2>

<p>大文字小文字を区別しないファイルシステムなんか滅んでしまえ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis::Fast 0.13をリリースしました]]></title>
    <link href="http://shogo82148.github.io/blog/2014/10/16/redis-fast-0-dot-13-released/"/>
    <updated>2014-10-16T23:51:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/10/16/redis-fast-0-dot-13-released</id>
    <content type="html"><![CDATA[<p>Redis::Fast 0.13をリリースしました。
主な変更点は以下のとおりです。</p>

<ul>
<li>passwordオプションの対応</li>
<li>maxclientsに達した場合に、deep recursion することがある問題の修正</li>
<li>トランザクション内で再接続処理が行われる問題の修正</li>
</ul>


<!-- More -->


<h2>passwordオプションの対応</h2>

<p>今更感のある機能ですね。昔は対応してたんです。
対応してたんですが、Sentinel対応のために接続開始周りをごそっと入れ替えて、そのときに間違ってパスワード認証機能を削除しちゃってたっぽいです(・ω&lt;)
なんというかごめんなさい。</p>

<p>実際実装してテストしてみると、認証失敗したときにdouble freeで落ちてちょっとハマりました。
hiredisを使う場合は<code>redisAsyncSetConnectCallback</code>に指定する関数内で、コネクションを切断するような処理(password認証とか)はしないようにしましょう。</p>

<h2>maxclientsに達した場合に、deep recursion することがある問題の修正</h2>

<p>Redis::Fastでは、接続処理の中で、コネクションに名前をつけたり、パスワード認証したり、その他独自の処理を実行しています。
この処理の途中でも再接続処理が走ってしまい、
再接続処理の中で再接続処理が実行されて、その再接続処理の中で再接続が&#8230; というような無限ループに突入する場合があります。
maxclientsに達した場合、一度コネクションの確立に成功したあとに接続が切られるので、この無限ループに入ってしまうようです。</p>

<p>接続処理中は再接続処理を行わないようにすることで対応しました。</p>

<h2>トランザクション内で再接続処理が行われる問題の修正</h2>

<p>Redis::Fast 0.07以降、<code>MULTI</code>-<code>EXEC</code>コマンドを遣ったトランザクションの中にいるときは再接続処理が行わないようになっています。
その仕組みを作るにあたって、トランザクションの中にいるか外にいるかを表すフラグをコマンド送信前に更新していました。</p>

<ol>
<li>再接続を禁止する</li>
<li><code>MULTI</code> コマンドを送る</li>
<li>結果を受け取る</li>
<li>必要なコマンド発行を行う</li>
<li>再接続を許可する</li>
<li><code>EXEC</code>コマンドを実行する</li>
<li>結果を受け取る</li>
</ol>


<p>しかしこれだと 5 と 6 の間で再接続が起こってしまいます。
<code>EXEC</code>コマンドがまだ実行されていないので、ここはまだトランザクションの中ですね。</p>

<p>Redis::Fast 0.13ではフラグの更新はコマンドが成功したときに変更してあります。</p>

<ol>
<li><code>MULTI</code>コマンドを送る</li>
<li>結果を受け取る</li>
<li>再接続を禁止する</li>
<li>必要なコマンド発行を行う</li>
<li><code>EXEC</code>コマンドを実行する</li>
<li>結果を受け取る</li>
<li>再接続を許可する</li>
</ol>


<p>これでトランザクション中に再接続処理が走ることは無いはずです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitで作業ディレクトリの変更を破棄したのに差分が出続けて困った話]]></title>
    <link href="http://shogo82148.github.io/blog/2014/10/04/gitattribute-eol-equals-crlf/"/>
    <updated>2014-10-04T15:05:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/10/04/gitattribute-eol-equals-crlf</id>
    <content type="html"><![CDATA[<p>gitで変更した覚えの無いファイルに差分が出ていたので、
作業ディレクトリの変更を破棄したのに、
<code>git status</code>で差分が出続けて困ったのでメモ。</p>

<!-- More -->


<h2>症状</h2>

<p>gitでは<code>git checkout -- &lt;file&gt;</code> ってコマンドを叩くと、
作業ディレクトリの変更を破棄できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout -- hoge.txt
</span><span class='line'>$ git status
</span><span class='line'>On branch master
</span><span class='line'>Changes not staged for commit:
</span><span class='line'> (use "git add &lt;file&gt;..." to update what will be committed)
</span><span class='line'> (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
</span><span class='line'>
</span><span class='line'>   modified:   hoge.txt</span></code></pre></td></tr></table></div></figure>


<p>しかし、差分が出続ける&#8230;
<code>git checkout -- &lt;file&gt;</code> ならさっきやったよ！</p>

<p><code>git reset --hard HEAD</code> して全変更を破棄してもダメでした。</p>

<h2>原因</h2>

<p>.gitattributesに改行コードの指定があったからでした。</p>

<figure class='code'><figcaption><span>.gitattributes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*.txt text=auto eol=crlf</span></code></pre></td></tr></table></div></figure>


<p>これが指定されていると、CRLFなファイルをコミットしようとしても、
レポジトリには改行コードがLFで保存されるようになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat .gitattributes # .gitattributes には eol=crlf が指定されている
</span><span class='line'>*.txt text=auto eol=crlf
</span><span class='line'>$ hexdump hoge.txt   # hoge.txt は改行コードCRLFで保存されている
</span><span class='line'>0000000 48 65 6c 6c 6f 20 57 6f 72 6c 64 21 21 0d 0a
</span><span class='line'>000000f
</span><span class='line'>$ git add hoge.txt
</span><span class='line'>$ git commit -m 'add hoge.txt'  # 改行コードがCRLFなhoge.txtをコミット
</span><span class='line'>$ git cat-file -p master^{tree} # レポジトリにコミットされているオブジェクトを確認
</span><span class='line'>100644 blob 523f058ebd4f1a280b5a33a79af8f22b74415f37   .gitattributes
</span><span class='line'>100644 blob 936977184a9fa89d82f86957a90b92d4924b6573   hoge.txt
</span><span class='line'>$ git cat-file -p 936977184a9fa89d82f86957a90b92d4924b6573 | hexdump # 改行コードがLF(末尾が0a)になっている！！
</span><span class='line'>0000000 48 65 6c 6c 6f 20 57 6f 72 6c 64 21 21 0a
</span><span class='line'>000000e</span></code></pre></td></tr></table></div></figure>


<p>ところがレポジトリ上にCRLFなファイルがコミットされていると、
コミットすべき内容と一致しないので差分がでてしまう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git cat-file -p master^{tree}
</span><span class='line'>100644 blob 523f058ebd4f1a280b5a33a79af8f22b74415f37   .gitattributes
</span><span class='line'>100644 blob 23c3aefeda706ec02f4a724edc2faf1913a547ef   hoge.txt
</span><span class='line'>$ git cat-file -p 23c3aefeda706ec02f4a724edc2faf1913a547ef | hexdump # 改行コードはCRLF(末尾が0d 0a)
</span><span class='line'>0000000 48 65 6c 6c 6f 20 57 6f 72 6c 64 21 21 0d 0a
</span><span class='line'>000000f
</span><span class='line'>$ git status # 差分がでてしまう
</span><span class='line'>On branch master
</span><span class='line'>Changes not staged for commit:
</span><span class='line'>  (use "git add &lt;file&gt;..." to update what will be committed)
</span><span class='line'>  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
</span><span class='line'>
</span><span class='line'>  modified:   hoge.txt
</span><span class='line'>
</span><span class='line'>  no changes added to commit (use "git add" and/or "git commit -a")</span></code></pre></td></tr></table></div></figure>


<p>作業ディレクトリが壊れているわけでなく、レポジトリの内容がおかしい(<code>eol=crlf</code>が設定されているときは全てのファイルはLFでコミットされているべき)ので、
今回はコミットして正しい状態にすることで解決。
差分計算の効率化のためにタイムスタンプを最初に見ているみたいなので、
touchしただけで差分が！ってなってびっくりした。</p>

<h2>まとめ</h2>

<p>CRLF滅びろ</p>

<h2>追記</h2>

<p><a href="http://shogo82148.github.io/blog/2014/10/21/git-case-sensitivity/">続編</a>がでました</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISUCON4にチームぽわわで参加しました]]></title>
    <link href="http://shogo82148.github.io/blog/2014/10/03/isucon-powawa-4/"/>
    <updated>2014-10-03T19:55:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/10/03/isucon-powawa-4</id>
    <content type="html"><![CDATA[<p>遅くなりましたが、ISUCON4のレポートです。
まこぴーとchroneさんとともにチームぽわわで参加し、惨敗してきました。</p>

<p>2014-10-06 追記: <a href="https://github.com/shogo82148/isucon4_powawa">競技中に使ったレポジトリ</a>を公開しました。</p>

<!-- More -->


<h2>事前準備</h2>

<ul>
<li>メンバー三人で集まって、去年のnopasteアプリで練習

<ul>
<li>chroneさんは初参戦なので雰囲気を掴んでもらう</li>
</ul>
</li>
<li>Ansibleを使っていこうっていう話になったので、プレイブックを書いて遊んでみる</li>
<li>githubにprivate repositoryを予め建てる

<ul>
<li>PayPalに対応してるっぽいので、ログインを試みるも何故か失敗</li>
<li>諦めてクレカ情報を直接入力</li>
<li>どうなってるんですかgithubさん！！！</li>
</ul>
</li>
</ul>


<h2>競技</h2>

<h3>10時くらいまで</h3>

<ul>
<li>お題確認</li>
<li>サーバのセットアップはchroneさんにお願いしスムーズにできた</li>
<li>サーバは人数分準備

<ul>
<li>僕がコミット＆実行確認をこまめに繰り返すタイプなので、書いたコードはすぐにデプロイしてテストに回したい！！</li>
<li>サーバ一台だとインフラの調整とアプリの確認がかぶって面倒</li>
<li>かといってローカルで同じ環境用意するのも面倒</li>
<li>AMIがあるならそれを使っちゃえ！(って記事を去年見た気がしたので)</li>
</ul>
</li>
<li>密かにUkigumoで自動デプロイする仕組みを作っておいた

<ul>
<li>書いたコードはすぐにデプロイしてテストに回したい！！</li>
<li>あらかじめukigumo-agentを起動</li>
<li>github-hookを設定してコミットしたら実行</li>
<li><a href="http://shogo82148.github.io/blog/2014/09/23/github-hooks-receiver-supports-x-hub-signature/">Github::Hooks::Receiverいじってた</a>のはこれやるためだったんだけど、Ukigumoさんで十分でした。便利ですね！！</li>
<li>去年はサーバに入って作業する人(まこぴー)がかなり忙しそうだったので、なんとか解消したかった</li>
</ul>
</li>
</ul>


<h3>お昼くらいまで</h3>

<ul>
<li>nginxで静的ファイル配信とかMySQLのクエリ分析とか</li>
<li>いっちーさんは早速Redis::Fastに手を付ける

<ul>
<li>みんなもRedis::Fast使ってね！！</li>
</ul>
</li>
<li>あとUkigumoさんのおもり

<ul>
<li>UkigumoとAnsibleのお陰で僕が何もしなくても、まこぴー氏が「nginxで静的ファイル配信したよ！」って言って数分後には確認できる状態になっていて便利</li>
<li>これのおかげでページが真っ白になっているのに気がつく</li>
<li>普通に設定を書き換えるとMIMEの設定がなくなるらしい</li>
<li>Ukigumo++</li>
</ul>
</li>
</ul>


<h3>14時くらいまで</h3>

<ul>
<li>chroneさんにMySQLのクエリ改善

<ul>
<li><code>COUNT()</code> している部分を一行SELECTだけにする修正とか</li>
</ul>
</li>
<li>一部Redis::Fastに書き換えた版も一応スコアでる</li>
<li>アプリが単純すぎてMySQLでもRedisでも大差ないスコア</li>
<li>自分の環境でmy.cnfの調整をしたら、MySQL gone awayしてしまってつらいことに

<ul>
<li>Redisに書き換えたものの、reportのロジックには手をつけてなかったので、効果あるのではと</li>
<li>MySQLだけ再起動したらそうなるらしいけど、ansibleのplaybookにアプリの再起動手順も含まれていたので全部再起動かかってたと思うんだけど・・・</li>
<li>結局サーバごと再起動しました(・ω&lt;)</li>
</ul>
</li>
</ul>


<h3>17時くらいまで</h3>

<ul>
<li>workloadを上げるとfailが大量にでて/reportのチェックでコケる問題</li>
<li>トランザクションとかFOR UPDATEの問題かと思ってSQLをいじくりまわす</li>
<li>初期データの考慮を忘れてたことに気が付き、初期化スクリプトを組む</li>
</ul>


<h3>18時まで</h3>

<ul>
<li>workload変えてベンチ走らせたり最後のあがき</li>
</ul>


<h2>まとめ</h2>

<ul>
<li>初期化大事！！

<ul>
<li>社内ISUCONに参加したときも初期化で散々な目にあった</li>
</ul>
</li>
<li>Ansibleがあまり効果的に使えてなかった

<ul>
<li>configいじるのが速いので、どうしても直接いじっちゃう</li>
<li>各個人にサーバ用意したけど、微妙に環境が違ってつらい</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github::Hooks::ReceiverがX-Hub-Signatureをサポートしました]]></title>
    <link href="http://shogo82148.github.io/blog/2014/09/23/github-hooks-receiver-supports-x-hub-signature/"/>
    <updated>2014-09-23T00:25:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/09/23/github-hooks-receiver-supports-x-hub-signature</id>
    <content type="html"><![CDATA[<p><a href="https://metacpan.org/pod/Github::Hooks::Receiver">Github::Hooks::Receiver</a>にX-Hub-SignatureをサポートするPull Requestを送ったら、
速攻取り込まれ、さらにGithubのコミット権とPAUSEのco-maintパーミッションをもらったというお話。</p>

<!-- More -->


<h2>X-Hub-Signature</h2>

<p>GithubのWebhookは大変便利なんですが、特に対策をしないままだと
他の人にcurlとかで叩かれてしまう可能性があります。
本来であればIPアドレスで制限をかけるべきなんですが、
iptablesの設定とかよくわからないし・・・と思ってGithubのドキュメントを読んでいたら、
もっとお手軽な方法発見。</p>

<ul>
<li><a href="https://developer.github.com/webhooks/securing/">Securing your webhooks</a></li>
</ul>


<p>GithubからのリクエストにはX-Hub-Signatureというのがついていて、
これを使うとPayloadの検証ができるらしい。
<a href="https://metacpan.org/pod/Github::Hooks::Receiver">Github::Hooks::Receiver</a>は
このヘッダを全くみていないようだったので<a href="https://github.com/Songmu/Github-Hooks-Receiver/pull/1">Pull Requestを送ってみた</a>。</p>

<p>Github::Hooks::Receiver 0.02以降で、以下のようにsecretの指定ができるようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Github::Hooks::Receiver::</span><span class="n">Declare</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$receiver</span> <span class="o">=</span> <span class="n">receiver</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">secret</span> <span class="s">&#39;secret1234&#39;</span><span class="p">;</span> <span class="c1"># Webhookの設定画面のsecretの項目と同じものを入力</span>
</span><span class='line'>    <span class="n">on</span> <span class="nb">push</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>        <span class="c1"># レポジトリにPushされた時の処理とかをゴニョゴニョ書く</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$psgi</span> <span class="o">=</span> <span class="nv">$receiver</span><span class="o">-&gt;</span><span class="n">to_app</span><span class="p">;</span>
</span><span class='line'><span class="nv">$receiver</span><span class="o">-&gt;</span><span class="n">run</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでsecretを知らない人がリクエストを偽装できなくなるので安心です。
secretはエントロピーが高いほうがいいので
<code>ruby -rsecurerandom -e 'puts SecureRandom.hex(20)'</code>
みたいなコマンド使うといいらしいですよ。</p>

<h2>String::Compare::ConstantTime</h2>

<p>Signatureの比較にはRubyの<a href="http://rubydoc.info/github/rack/rack/master/Rack/Utils.secure_compare">secure_compare</a>のような関数を
使ったほうがいいらしい。
Github::Hooks::Receiverでは、そのPerl版の<a href="https://metacpan.org/pod/String::Compare::ConstantTime">String::Compare::ConstantTime</a>を使ってみた。
ちょっと引数のチェックに甘いところがあって、segmentation fault場合があったので、こちらにもPull Requestを送っておきました。
Github::Hooks::Receiverは使う前にチェックを入れてあるので、現行バージョンでも問題なく動くはず。</p>

<p>String::Compare::ConstantTimeはXSで書かれたモジュールなんですが、
この手のバグが入り込みやすいのでXS難しいですね。</p>

<h2>まとめ</h2>

<ul>
<li>XS怖い</li>
<li>Github::Hooks::Receiverにsecretを指定できるようになったので、IP制限がかけられない場合でも安心</li>
<li>でも、可能であればIP制限もしましょうね</li>
<li>XS怖い</li>
</ul>


<h2>追記</h2>

<h3>IP制限について</h3>

<p>Songmu先生よりコメントをいただきました。</p>

<blockquote class="twitter-tweet"><p>これはいい機能。ちなみにIP制限は、Nginxとかでやるのがお手軽で、plackで完結させたいのであれば、Plack::Middlewareで弾いてやればいいと思います。 / “Github::Hooks::ReceiverがX-…” <a href="http://t.co/NM0uQzW1s8">http://t.co/NM0uQzW1s8</a></p>&mdash; songmu (@songmu) <a href="https://twitter.com/songmu/status/514426458190528513">September 23, 2014</a></blockquote>


<script async src="http://shogo82148.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>確かにPlack::Middlewareとか使えばお手軽に弾けるので、
X-Hub-SignatureだけでなくIP制限もやっておくと良いですね。</p>

<h3>String::Compare::ConstantTime</h3>

<p>String::Compare::ConstantTime ですが、僕のprが取り込まれた 0.310 がリリースされました。
<code>undef</code> を渡すとsegmentation fault で落ちるというバグが修正されています。
XS怖い。</p>

<h2>SEE ALSO</h2>

<ul>
<li><a href="https://metacpan.org/pod/Github::Hooks::Receiver">Github::Hooks::Receiver</a></li>
<li><a href="https://metacpan.org/pod/String::Compare::ConstantTime">String::Compare::ConstantTime</a></li>
<li><a href="http://www.songmu.jp/riji/entry/2013-12-05-github-hooks.html">GithubのHookについてのまとめとソリューション</a></li>
<li><a href="http://www.songmu.jp/riji/entry/2014-04-18-github-hooks.html">Jenkinsでパラメータ付ビルドでブランチ指定出来るようにしつつ、GithubのHookも受け付けられるようにする</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Githubさんにpack exceeds maximum allowed sizeって言われた]]></title>
    <link href="http://shogo82148.github.io/blog/2014/09/13/github-remote-push-pack-size-exceeded/"/>
    <updated>2014-09-13T10:51:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/09/13/github-remote-push-pack-size-exceeded</id>
    <content type="html"><![CDATA[<p>Githubに手元のレポジトリをpushしようとしたら、
「Pushできないよ！！」って言われたときのメモ。</p>

<!-- More -->


<p>コミット数が17kほどあって、画像とかサイズが比較的大きいファイルがたくさんあるレポジトリを、
一度に全部pushしようとしたら「制限を超えてます」って言われてダメだった。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin master
</span><span class='line'>Counting objects: 280874, done.
</span><span class='line'>Delta compression using up to 4 threads.
</span><span class='line'>Compressing objects: 100% (60497/60497), done.
</span><span class='line'>remote: fatal: pack exceeds maximum allowed size
</span><span class='line'>error: pack-objects died of signal 13
</span><span class='line'>error: failed to push some refs to 'git@github.com:***/****.git'</span></code></pre></td></tr></table></div></figure>


<p>ググってみると、おんなじような症状が見つかった。</p>

<ul>
<li><a href="http://stackoverflow.com/questions/15125862/github-remote-push-pack-size-exceeded">Github remote push pack size exceeded</a></li>
</ul>


<p>リモートへのPushはオブジェクトを全部一つにPackしてしまうので、
一度に大量のコミットをPushしようとすると制限に引っかかるらしい。
(そして、サイズを制限する方法はないみたい)</p>

<p>解決策は「2回以上に分けてPushしてね」とのこと</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push remoteB &lt;some previous commit on master&gt;:master
</span><span class='line'>...
</span><span class='line'>git push remoteB &lt;some previous commit after the last one&gt;:master
</span><span class='line'>git push remoteB master</span></code></pre></td></tr></table></div></figure>


<p>頑張ってコミットログを遡ってコミットハッシュを調べるのはつらかったので、
打ってあったタグからコミットハッシュを調べてPushした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push origin `git show v0.1.0 | grep commit | cut -d' ' -f2`:master</span></code></pre></td></tr></table></div></figure>


<p>タグは単なるコミットハッシュの別名ではなくひとつのオブジェクトなので、
コミットだけをPushしたいときはタグと関連づいたコミットを調べる必要がある。
今回はタグの情報からgrepとcutで必要なとこだけ切り抜くってことをしたけど、
もっとスマートな方法があるなら知りたい。
この方法で古いコミットから順番に何度かに分けてPushしたらうまくいった。</p>

<p>今回は見つけた情報に通りに&lt;コミットハッシュ>:&lt;ブランチ名>でPushしたけど、
コミットオブジェクトがリモートに転送されてればいいわけだから、
単にタグをプッシュしてあとから消すでも良かったかもしれない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push origin v0.1.0
</span><span class='line'>git push origin :v0.1.0</span></code></pre></td></tr></table></div></figure>


<p>こちらは未確認。</p>

<p>歴史を守るって大変なことなんだなあ(ヽ´ω`)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[秘密鍵から公開鍵をつくる]]></title>
    <link href="http://shogo82148.github.io/blog/2014/09/03/get-public-key/"/>
    <updated>2014-09-03T13:40:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/09/03/get-public-key</id>
    <content type="html"><![CDATA[<p>githubに公開鍵を登録しようと思ったけど、
手元に秘密鍵しかなくて困った時のメモ。</p>

<!-- More -->


<p>ssh-keygenを使うとできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 秘密鍵を読み込んで公開鍵を出力する</span>
</span><span class='line'>ssh-keygen -y -f ~/.ssh/id_rsa
</span></code></pre></td></tr></table></div></figure>


<p>この公開鍵って登録したっけ？
ってときには以下のコマンドでフィンガープリントを確認できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 公開鍵のフィンガープリントを取得する</span>
</span><span class='line'>ssh-keygen -l -f ~/.ssh/id_rsa.pub
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPC::Asia 2014 に行ってきた #yapcasia]]></title>
    <link href="http://shogo82148.github.io/blog/2014/08/31/yapcasia/"/>
    <updated>2014-08-31T16:02:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/08/31/yapcasia</id>
    <content type="html"><![CDATA[<p><a href="http://yapcasia.org/2014/">YAPC::Asia 2014</a> に参加してきました。
「ブログに書くまでがYAPC」らしいので、メモ書き。</p>

<!-- More -->


<h2>見たトーク</h2>

<ul>
<li><a href="http://yapcasia.org/2014/talk/show/103a434e-ec02-11e3-bd6d-c7a06aeab6a4">Perl meets Real World 〜ハードウェアと恋に落ちるPerlの使い方〜</a>

<ul>
<li>デモ中のURLが「localhost」になってたんであれ？って思ったんですが、WebサーバはPC上にあったんですね。RaspberryPi上でPerl動くんじゃなかったんですか！</li>
<li>ネギ振りミククラウド化するって言ってたんで期待してます</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2014/talk/show/2276d7b2-eba7-11e3-bd6d-c7a06aeab6a4">Go For Perl Mongers</a></li>
<li><a href="http://yapcasia.org/2014/talk/show/66c55626-eba9-11e3-bd6d-c7a06aeab6a4">お待たせしました。Perl で BDD を簡単に実践する最高にクールなフレームワークができました</a></li>
<li><a href="http://yapcasia.org/2014/talk/show/3c896370-01de-11e4-9357-07b16aeab6a4">DBIx::Class - what is it and what is it good for?</a>

<ul>
<li><a href="http://search.cpan.org/~ribasushi/DBIx-Class-0.08270/lib/DBIx/Class/ResultClass/HashRefInflator.pm">HashRefInflator</a>の存在を初めて知りました</li>
<li>今関わってるプロジェクトでDBICのRowObject生成コストが問題になってるんで、後で試してみたいです</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2014/talk/show/d557ddbe-fde4-11e3-b7e8-e4a96aeab6a4">Scala In Perl Company : Hatena</a></li>
<li><a href="http://yapcasia.org/2014/talk/show/e495bc1a-f30d-11e3-b7e8-e4a96aeab6a4">WHERE狙いのキー、ORDER BY狙いのキー</a></li>
<li><a href="http://yapcasia.org/2014/talk/show/e35ec49a-ebba-11e3-bd6d-c7a06aeab6a4">Get a kick out of CPAN</a></li>
<li><p><a href="http://yapcasia.org/2014/talk/show/61b78258-026f-11e4-9357-07b16aeab6a4">初心者が Web エンジニアのコミュニティに触れてみて感じたこと - ゆとりエンジニアの成長戦略</a></p></li>
<li><p><a href="http://yapcasia.org/2014/talk/show/d1eb4942-fdb5-11e3-b7e8-e4a96aeab6a4">突然ITインフラを任された人のための…監視設計入門</a></p></li>
<li><a href="http://yapcasia.org/2014/talk/show/a02d05e6-fead-11e3-b7e8-e4a96aeab6a4">半端なPHPDisでPHPerに陰で笑われないためのPerl Monger向け最新PHP事情(5.6対応)</a>

<ul>
<li>MacにはPHPが最初から入ってるらしいですよ</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2014/talk/show/77109da0-00b8-11e4-b7e8-e4a96aeab6a4">モバイルアプリとAPIのありかたを考える2014</a></li>
<li><a href="http://yapcasia.org/2014/talk/show/3a5f2a0e-ec3e-11e3-bd6d-c7a06aeab6a4">Mobile Application Development for Perl Mongers [ninjinkun x gfx]</a>

<ul>
<li>シングルトンは嫌だシングルトンは嫌だ</li>
</ul>
</li>
<li><a href="http://yapcasia.org/2014/talk/show/d5049940-ebb2-11e3-bd6d-c7a06aeab6a4">そんなにビッグでもないデータ処理手法の話</a>

<ul>
<li>一日分の解析ならなんとか一台で、でも一ヶ月分となると・・・ってことが多いんでもうちょっと調査して、どれかに手を出してみようかな・・・</li>
</ul>
</li>
<li>typester先生のキーノート

<ul>
<li>28才で結婚・・・あと2年・・・20代・・・あと4年・・・(´；ω；｀)ｳｯ…</li>
</ul>
</li>
</ul>


<h2>全体を通して</h2>

<p>僕が見たトークは全体からしたらほんの一部ですが、それでも一覧にすると結構見てるな。
貧乏症なんで、こういうイベント参加するとトークたくさん見ないといけない気持ちになっちゃうんです。
のんびり人と話すのもいいってことは分かるんですけどね。</p>

<p>去年も感じましたが、参加人数に対して会場が狭く、立ち見が多くて大変でした。
特に今年は去年より参加者多かったみたいですし、余計にそう感じたかも。
あと移動時間がほとんどないのもつらい。</p>

<p>NSD(Nagaoka Developers Study)のメンバーや、元同僚も多く参加していて、なんだか同窓会みたいな感じでしたね。
ただ、やっぱり、全く知らない人には話しかけづらい(´・ω・｀)
来年やるようだったら何かトークしたいなと思った２日間でした。</p>

<h2>最後に一番言いたいこと</h2>

<p>Twitterのほうでは騒いでましたが、先日Mac Book Airにアクエリアスを飲ませてダメにするという悲しい事故が・・・。
このブログOctopressで書いてるんで、
ローカルの環境がなくなって再構築面倒だったり、
pushし忘れてて一部記事がなかったり、
非常に面倒でした。</p>

<p>みなさんもアクエリアスの扱いには注意しましょう・・・(ヽ´ω`)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PerlのXS中に起きたシグナルの扱い]]></title>
    <link href="http://shogo82148.github.io/blog/2014/07/05/signal-in-xs/"/>
    <updated>2014-07-05T11:56:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/07/05/signal-in-xs</id>
    <content type="html"><![CDATA[<p><a href="https://metacpan.org/pod/Redis::Fast">Redis::Fast</a> にIssueが来ていたので、
それに関して調査したお話です。</p>

<ul>
<li>接続タイムアウトすると double free check に引っかかる</li>
<li><code>brpop</code> みたいな長時間ブロックするコマンド中にシグナルが入ると、最初の1回が無視される</li>
</ul>


<p>前者はC言語つらいって話で頑張って double free になる条件を探せばいいんですが、
後者はシグナル時のPerlやPOSIX APIの挙動を知らなくと解決できなそう。
そういうわけで、主に後者について調べた結果をまとめておきます。</p>

<!-- More -->


<h2>PERL_ASYNC_CHECKってXS中から呼んでもいいの？</h2>

<p>言いたいことは最初に書いとけって偉い人に言われたので、最初にこの記事の結論を。
「よしななタイミングでPERL_ASYNC_CHECKを呼べばいいっぽい」みたいです。
でも、 <strong> 「PERL_ASYNC_CHECKってXS中から呼んでもいいの？」 </strong> という点に確証が持ててないので、
識者のご意見を募集してます！</p>

<h2>selectの挙動を調べる</h2>

<p>Redis::FastはRedisからのレスポンスを待つのにLinuxのselect apiを叩いてます。
ファイルとかが読み書き可能になるまで処理をブロックしてくれるいいやつです。
しかし、select が処理をブロックしている間にシグナルを受信すると、うまく処理ができてないらしい。
そこで割り込み発生時の挙動を確認してみます。</p>

<p>困った時の<a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man2/select.2.html">manページ(select)</a>
をちゃんと読めば書いてありますね。</p>

<blockquote><p>エラーならば -1 を返し、 errno にエラーを示す値が設定される;</p>

<p>EINTR
シグナルを受信した。</p></blockquote>

<p>Redis::Fastは<code>errno</code>を特に確認せず、とにかくエラーが発生したらリトライになってたのでダメだったみたいです。
通信にエラーが起きたわけではないので、再接続処理とかみたいな複雑なリトライ処理は必要なく、
単にもう一度selectしなおせば良さそうです。</p>

<h2>Perlさんのシグナル処理のタイミング</h2>

<p>「割り込みかかったら再度select」っていうふうに修正してみたんですが、
今度はPerlのシグナルハンドラがなかなか呼び出されない！！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Redis::</span><span class="n">Fast</span><span class="p">;</span>
</span><span class='line'><span class="nv">$SIG</span><span class="p">{</span><span class="n">TERM</span><span class="p">}</span><span class="o">=</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>    <span class="nb">warn</span> <span class="s">&quot;TERM handler called&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$c</span> <span class="o">=-&gt;</span><span class="k">new</span><span class="p">(</span><span class="n">reconnect</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">,</span> <span class="n">every</span> <span class="o">=&gt;</span> <span class="mi">100</span><span class="p">,</span> <span class="n">server</span> <span class="o">=&gt;</span> <span class="s">&quot;localhost:6379&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$c</span><span class="o">-&gt;</span><span class="n">brpop</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span> <span class="c1"># 100秒経ったら諦めて戻ってくる</span>
</span></code></pre></td></tr></table></div></figure>


<p>このコードを実行中にSIGTERMを送ると、送った瞬間に&#8221;TERM handler called&#8221;と表示されて欲しいのですが、
<code>brpop</code>コマンドが終わるまで実行されない……</p>

<p>ググってみるとPerlはシグナルハンドラを即座に処理しているのではなく、
シグナルハンドラを安全に実行できるタイミングを見計らって実行しているみたいです。</p>

<ul>
<li><a href="http://perl-users.jp/articles/advent-calendar/2009/data-model/03.html">Q4M を使ってる時のシグナル処理に注意</a></li>
</ul>


<p>この記事では「Low Levelなシグナルハンドラを使おう」っていうことになってますが、できることならライブラリ側で対応したい。
安全にシグナルハンドラを実行できるタイミングで<code>PERL_ASYNC_CHECK</code>を呼び出しているので、
XS中でもこいつを呼べばできるのでは！ってことでやってみたら動いてるっぽい……？</p>

<p>ただDBIでもシグナルの扱いに同様の問題があるらしく、
これで解決するならDBIが解決してるよな・・・何か罠があるんだろうか。不安だ・・・。</p>

<h2>まとめ</h2>

<ul>
<li>selectはシグナルを受信するとエラーを返すので、<code>errno</code> をみて適切に扱うこと</li>
<li>Perlはシグナルハンドラを安全に実行できるタイミングでしか実行しない</li>
<li><code>PERL_ASYNC_CHECK</code>を使えば解決しそうだけど、どこからか椅子が飛んでくるんじゃないだろうか怖い</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IRCに癒やしボットを入れてみた]]></title>
    <link href="http://shogo82148.github.io/blog/2014/06/04/irc-healing-bot/"/>
    <updated>2014-06-04T07:37:00+09:00</updated>
    <id>http://shogo82148.github.io/blog/2014/06/04/irc-healing-bot</id>
    <content type="html"><![CDATA[<p>別チームがIRCに癒やしボットを入れてたので、自分のチームのチャンネルにも入れてみた。</p>

<!-- More -->


<h2>Instagramに登録する</h2>

<p><a href="http://instagram.com/developer/">InstagramのDeveloperサイト</a>に開発者として登録します。
<a href="http://instagram.com/developer/authentication/">Authentication</a>
のページを見ながら、Server-side (Explicit) Flow を参考にアクセストークンを取得します。</p>

<h2>Instagram APIを叩く</h2>

<p><code>https://api.instagram.com/v1/tags/$TAGNAME/media/recent?access_token=YOUR_ACCESS_TOKEN</code>を叩くと
TAGNAMEに関連する画像の情報がJSONで帰ってくるので、
Perlからこのエンドポイントを叩きます。
IRCとのやりとりには<a href="http://www.songmu.jp/riji/entry/2013-09-09-unazusan.html">UnazuSan</a>を使いました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="o">!</span><span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">perl</span>
</span><span class='line'><span class="k">use</span> <span class="mf">5.014</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">Encode</span> <span class="sx">qw/encode_utf8/</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">Furl</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">JSON</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">UnazuSan</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">neko</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">state</span> <span class="nv">$data</span> <span class="o">=</span> <span class="nb">undef</span><span class="p">;</span>
</span><span class='line'>    <span class="n">state</span> <span class="nv">$time</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nv">$data</span> <span class="o">||</span> <span class="nb">time</span> <span class="o">-</span> <span class="nv">$time</span> <span class="o">&gt;</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$time</span> <span class="o">=</span> <span class="nb">time</span><span class="p">;</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$furl</span> <span class="o">=</span> <span class="n">Furl</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$res</span> <span class="o">=</span> <span class="nv">$furl</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;https://api.instagram.com/v1/tags/%E7%8C%AB/media/recent?access_token=YOUR_ACCESS_TOKEN&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$hash</span> <span class="o">=</span> <span class="nn">JSON::</span><span class="n">decode_json</span><span class="p">(</span><span class="nv">$res</span><span class="o">-&gt;</span><span class="n">content</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$hash</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">data</span><span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$media</span> <span class="o">=</span> <span class="nv">$data</span><span class="o">-&gt;</span><span class="p">[</span><span class="nb">rand</span><span class="p">(</span><span class="nb">scalar</span> <span class="nv">@$data</span><span class="p">)];</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$media</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">images</span><span class="p">}{</span><span class="n">standard_resolution</span><span class="p">}{</span><span class="n">url</span><span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$unazu_san</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$NICKNAME</span> <span class="o">=</span> <span class="s">&#39;iyashi&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$unazu_san</span> <span class="o">=</span> <span class="n">UnazuSan</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span>
</span><span class='line'>    <span class="n">host</span>       <span class="o">=&gt;</span> <span class="s">&#39;127.0.0.1&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">enable_ssl</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">join_channels</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s">&#39;#test&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="n">respond_all</span>   <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">nickname</span>      <span class="o">=&gt;</span> <span class="nv">$NICKNAME</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$unazu_san</span><span class="o">-&gt;</span><span class="n">on_message</span><span class="p">(</span>
</span><span class='line'>    <span class="sx">qr/^\s+$NICKNAME:/</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$receive</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$receive</span><span class="o">-&gt;</span><span class="n">reply</span><span class="p">(</span><span class="s">&#39;うんうん&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="sx">qr/(.*)/</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="p">(</span><span class="nv">$receive</span><span class="p">,</span> <span class="nv">$match</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>        <span class="n">say</span> <span class="nv">$match</span><span class="p">;</span>
</span><span class='line'>        <span class="n">say</span> <span class="nv">$receive</span><span class="o">-&gt;</span><span class="n">message</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$unazu_san</span><span class="o">-&gt;</span><span class="n">on_command</span><span class="p">(</span>
</span><span class='line'>   <span class="s">&#39; 癒やし&#39;</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="p">(</span><span class="nv">$receive</span><span class="p">,</span> <span class="nv">@args</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$receive</span><span class="o">-&gt;</span><span class="n">reply</span><span class="p">(</span><span class="n">neko</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$unazu_san</span><span class="o">-&gt;</span><span class="n">run</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>「癒して」と話しかけると猫画像を検索して返してくれます。</p>

<h2>引数をMeCabで解析する</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>acidlemon unazu_san: 癒やしをうさぎで頼む
</span><span class='line'>acidlemon ネコやん! ('-'#)</span></code></pre></td></tr></table></div></figure>


<p>みたいなことがあったので、「癒して」のあとも見ることにしました。
MeCabを使って名詞っぽいものを抽出して、タグ名に使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">state</span> <span class="nv">$mecab</span> <span class="o">=</span> <span class="nn">Text::</span><span class="n">MeCab</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$n</span> <span class="o">=</span> <span class="nv">$mecab</span><span class="o">-&gt;</span><span class="n">parse</span><span class="p">(</span><span class="nb">join</span> <span class="s">&#39; &#39;</span><span class="p">,</span> <span class="nv">@_</span><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$keyword</span> <span class="o">=</span> <span class="nb">undef</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$f</span> <span class="o">=</span> <span class="n">decode_utf8</span> <span class="nv">$n</span><span class="o">-&gt;</span><span class="n">feature</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$keyword</span> <span class="sr">//</span><span class="o">=</span> <span class="n">decode_utf8</span><span class="p">(</span><span class="nv">$n</span><span class="o">-&gt;</span><span class="n">surface</span><span class="p">)</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$f</span> <span class="o">=~</span><span class="sr"> /^名詞,/</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">$f</span> <span class="o">!~</span> <span class="sr">/^名詞,代名詞,/</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$n</span> <span class="o">=</span> <span class="nv">$n</span><span class="o">-&gt;</span><span class="k">next</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$keyword</span> <span class="sr">//</span><span class="o">=</span> <span class="s">&#39;猫&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$word</span> <span class="o">=</span> <span class="n">uri_escape_utf8</span><span class="p">(</span><span class="nv">$keyword</span><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$res</span> <span class="o">=</span> <span class="nv">$furl</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;https://api.instagram.com/v1/tags/$word/media/recent?access_token=ACCESS_TOKEN&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで癒やしをうさぎで頼まれてもウサギ画像を返せるようになりました。</p>
]]></content>
  </entry>
  
</feed>
