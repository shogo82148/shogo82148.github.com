<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redis on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/redis/</link>
    <description>Recent content in redis on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 28 Mar 2017 19:59:49 +0900</lastBuildDate>
    
	<atom:link href="https://shogo82148.github.io/categories/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis、PostgreSQL、MySQLで近傍検索</title>
      <link>https://shogo82148.github.io/blog/2017/03/28/database-gis/</link>
      <pubDate>Tue, 28 Mar 2017 19:59:49 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2017/03/28/database-gis/</guid>
      <description>「サーバーで付近の情報を通知するサービスのつくり方」 という、Geohashを使って近傍検索を実現する記事をみつけました。 最近Redisに関する記事を書いた関係で、 この記事をみて「GeohashはRedisと一緒に使うともっと便利だよ！」と思わず宣伝したくなったのですが、 MySQL5.7でInnoDBに空間インデックス(Spatial Index)のサポートが入ったので 「MySQLでももっと簡単にできるのでは？」と思い、 RedisやMySQLを含めたいろんなDBで近傍検索を実現する方法を調べてみました。
以前、スマートフォンのセンサを活用して花火の打ち上げ場所を推定するアプリを作った関係で、 地球上での距離計算の実装も気になったので、それについても調査してみました。
関連知識 GeoHash Geohash（ジオハッシュ） は緯度・経度を短い文字列に変換する方法です。 距離が近い2地点のGeohashは似たような文字列になるという特徴があります(一部例外あり)。 この特徴を利用すると、文字列検索だけで近傍検索が実現できます。
地球上の二点間の距離 地球は完全な球体ではなく、回転楕円体であることが知られています。 地球の形がわからないと緯度・経度などを決められないので、 地球楕円体が定義されています。 近似方法によっていくつか種類があるのですが、GPSなどで使われているWGS84がよく使われているようです。
国土地理院が提供している測量計算サイトでは 距離と方位角の計算を使って緯度・経度から距離を計算できます。 回転楕円体上の距離の厳密解は求められない(要出典)ので、 数値計算によって求めることになります。 計算式を見て分かる通り非常に複雑なので、なんらかの近似をしている実装がほとんどです。
各種DBでの実現方法 Redis Redisでは3.2からGEO関連の機能をサポートしています。 ソート済みセットにGeohashを組み合わせて実現しています。
簡単に試してみました。データは以下の記事から拝借したものを使用します。
 MySQLで指定した緯度経度から半径nメートル内検索っぽいのを実現するSQL PostgreSQLとOracleで緯度経度から半径nメートル内検索を実行してみる。  GEOADDでデータ挿入です。 ちなみにデータを削除するGEODELは用意されていないとのこと。 中身はソート済みセットなので、ZREMでいいんですね。
$ cat command.txt GEOADD geotable 139.777254 35.713768 上野駅 139.774029 35.711846 西郷隆盛像 GEOADD geotable 139.774744 35.712737 上野の森美術館 139.770872 35.712351 不忍池弁財天 GEOADD geotable 139.775696 35.716293 野口英世博士像 139.775803 35.715420 国立西洋美術館 GEOADD geotable 139.776544 35.716319 国立科学博物館 139.</description>
    </item>
    
    <item>
      <title>Redisを使ってユニークなIDを配布する</title>
      <link>https://shogo82148.github.io/blog/2017/02/26/unique-id-supplier-using-redis/</link>
      <pubDate>Sun, 26 Feb 2017 19:37:45 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2017/02/26/unique-id-supplier-using-redis/</guid>
      <description>スケーラブルにIDを生成する方法として Twitterのsnowflakeが有名です。 1024台までスケールすることが出来ますが、各snowflakeのサーバにユニークなWoker IDを割り振る必要があります。 IDを振るためのサーバにIDを振るのが問題になるとは難しいですね。
各snowflakeサーバにIDを振る親玉Worker ID配布サーバを作るというアイデアはあったのですが、 Worker IDサーバの可用性を考えるのが大変で手を付けていませんでした。 最近になってWorker IDサーバとしてRedisを使い、ソート済みセット型で管理すれば楽できるのでは？ と思いついたので、やってみたというお話です。
概要 レポジトリはこちらです。
 shogo82148/yaraus  他のsnowflake-likeなID発番サーバの実装として katsubushiや sonyflakeなんていうのもあります。 これらのID発番サーバにRedisを使ってWorker IDを割り振るコマンドです。 Redis3.2以上推奨です。
使い方 Go製なのでgo getでインストールできます。
go get github.com/shogo82148/yaraus/cmd/yaraus # 1から1023までのIDが使えるようにRedisを初期化 $ yaraus init -min 1 -max 1023 # ユニークなIDが必要な処理を実行する $ yaraus run -- echo {} 2017/02/25 17:19:16 getting new id... 2017/02/25 17:19:16 client id: YourHostName-1488010756.738-1, id: 1 2017/02/25 17:19:16 sleep 2s for making sure that other generates which has same id expire.</description>
    </item>
    
    <item>
      <title>WEB&#43;DB PRESS Vol.97にPerlとRedisの記事を寄稿しました</title>
      <link>https://shogo82148.github.io/blog/2017/02/23/perl-webdb-vol97/</link>
      <pubDate>Thu, 23 Feb 2017 18:27:53 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2017/02/23/perl-webdb-vol97/</guid>
      <description>昨年末にSongmuさんからお話を頂き、 WEB+DB PRESS Vol.97内の連載「第43回Perl Hackers Hub」に 「PerlでのRedis活用法」というタイトルで寄稿しました。 発売日は2月24日です。
内容 簡単に内容を紹介しておきます。 Perl使いではじめてRedisを使う人向けに書いたつもりです。
Redisの簡単な説明 Redisのインストール方と、Perlからの接続方法、そしてRedisの型の説明です。 記事の中でも紹介していますが、Redisはその豊富な型が特長です。 読者はきっとPerl使いだろうということで、Perlの型(Perlにも型はあるんだよ！！)と 比較しながら簡単に紹介しています。
Redisの応用例とCPANモジュールの紹介 Redisを使うとこんなことができるよ、という紹介です。 CPANで公開されているRedis関連のモジュールも合わせて紹介しています。
Redis自体の注意点 以前Redisを使ったサービスの運用に携わっていたのですが、 そのなかで実際に起きたことを元に、Redisの注意点について書きました。 さいわいサービスが停止するような事故にはありませんでしたが、 メトリックスを眺めながらエンジニア勢でヤバイヤバイ騒いでましたね・・・。 みなさんも気をつけて下さい。
執筆してみての感想 昔から文章を書くのにはだいぶ苦手意識があり、 今回の執筆も非常に苦労しました。 一文の前半を書いた時点で 「今から書こうとしている情報は本当に必要なのか」 「自分の記憶違いで間違った情報なのでは」と不安になり、 色々考えているうちに、何書こうとしてたのかわからなくなるんですよね。 まずは適当に書き上げて、後からちゃんと推敲しよう、 とは思いつつもなかなか進められず・・・。 スループットを上げたい。
細かい表現とかも気になってなかなか進まないので、 こういうの入れて頑張ろうと思います！
 VS Codeでtextlintを使って文章をチェックする gitbookで技術書を書く環境の構築手順  (執筆が進まないと、こういう環境構築に時間をかけてしまうのもよくないと思うんだ・・・)
余談 ところで、Vol.97と第43回ってどっちも素数ですね！ 雑なプログラムを書いて調べてみたところ、 両方素数になるのはVol.83, 第29回以来、7回目(これも素数だ！)。 次はVol.101, 第47回です。 そのときのPerl Hackerは誰になるのでしょうか。楽しみですね！
use warnings; use strict; sub is_prime { my $n = shift; return 0 if $n &amp;lt; 2; my $i = 2; while($i*$i&amp;lt;=$n) { return 0 if $n % $i == 0; $i++; } return 1; } my $i = 1; for my $n(1.</description>
    </item>
    
    <item>
      <title>Redisのトランザクション・スクリプト・ランキングを扱うPerlモジュールを公開しました</title>
      <link>https://shogo82148.github.io/blog/2016/03/18/releaes-redis-modules/</link>
      <pubDate>Fri, 18 Mar 2016 22:16:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2016/03/18/releaes-redis-modules/</guid>
      <description>以前Redisでスコアを複数設定できるランキングを作ってみたけど、 Githubの肥やしになっていてもあれなので、CPANizeしました。 あわせて、この実装のために作ったユーティリティモジュールも別モジュールとして公開しました。
 Redis::LeaderBoardMulti Redis::Script Redis::Transaction  Redis::LeaderBoardMulti 最初の基準で順位を決められなかった場合の第二基準が欲しいというときに使うモジュールです。 インターフェースがRedis::LeaderBoard互換になるように調整したので、 前回とインターフェースがちょっと変わっています。
se Redis; use Redis::LeaderBoard; my $redis = Redis-&amp;gt;new; my $lb = Redis::LeaderBoardMulti-&amp;gt;new( redis =&amp;gt; $redis, key =&amp;gt; &amp;#39;leader_board:1&amp;#39;, order =&amp;gt; [&amp;#39;asc&amp;#39;, &amp;#39;desc&amp;#39;], # asc/desc, desc as default ); # Redis::LeaderBoardに合わせて複数指定できるようになりました $lb-&amp;gt;set_score( &amp;#39;one&amp;#39; =&amp;gt; [100, time], &amp;#39;two&amp;#39; =&amp;gt; [ 50, time], ); my ($rank, $score, $time) = $lb-&amp;gt;get_rank_with_score(&amp;#39;one&amp;#39;); Redis::LeaderBoard互換なのでそのまま入れ替えられるはずですが、以下のような実装上の制限があります。
 スコアはすべて64bit符号付き整数  Redis::LeaderBoardのスコアは倍精度浮動小数点型なので小数も扱えるが、Redis::LeaderBoardMultiは整数だけ   Redis 2.8.9以降のみで動きます 同順の場合の出現順  Redis::LeaderBoard は ZRANK, ZREVRANK を使い分けているので、orderパラメータによって昇順/降順が変わります Redis::LaederBoardMulti は ZRANK しか使わないので、必ず昇順になります    一応 Lua Script を使わないオプションもそのまま残してありますが、特に理由がない限りデフォルト(Lua Script を使う)で使うといいと思います。 どうしてもロックの範囲が広くなってしまう場合があり、楽観的ロックでは効率が悪いケースがあるためです。</description>
    </item>
    
    <item>
      <title>Redisでスコアを複数設定できるランキングを作ってみた</title>
      <link>https://shogo82148.github.io/blog/2016/02/06/redis-leader-board-multi/</link>
      <pubDate>Sat, 06 Feb 2016 02:30:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2016/02/06/redis-leader-board-multi/</guid>
      <description>ランキングを作っているとスコアを複数設定したいことがよくあると思います。 例えば「得点が同じだったら早くその得点を出した人優先」とか「勝ち点が同じだったら得失点差が大きい方優先」とかのように、 最初の基準で順位を決められなかった場合の第二基準が欲しいみたいな場合です。
ランキングを作るのにはRedisのSorted Setを使うのが便利ですが、残念ながらSorted Setはひとつしかスコアを設定できません。 少し前にどうやったら実装できるかと社内チャットで話題に上ったので、試しにRedis::LeaderBoardMulti(仮名)という名前で書いてみました。
 shogo82148/p5-Redis-LeaderBoardMulti  使い方 メソッドの名前はRedis::LeaderBoardにあわせてありますが、 スコアが複数指定できるようになった関係でちょっと変わってます。
use Redis; use Redis::LeaderBoard; my $redis = Redis-&amp;gt;new; my $lb = Redis::LeaderBoardMulti-&amp;gt;new( redis =&amp;gt; $redis, key =&amp;gt; &amp;#39;leader_board:1&amp;#39;, order =&amp;gt; [&amp;#39;asc&amp;#39;, &amp;#39;desc&amp;#39;], # asc/desc, desc as default ); $lb-&amp;gt;set_score(&amp;#39;one&amp;#39; =&amp;gt; 100, time); # 第二基準は時間=得点が同じだったら早くその得点を出した人優先 $lb-&amp;gt;set_score(&amp;#39;two&amp;#39; =&amp;gt; 50, time); my ($rank, $score, $time) = $lb-&amp;gt;get_rank_with_score(&amp;#39;one&amp;#39;); set_scoreの第二引数以降はすべてスコアとして扱われます。(そのためRedis::LeaderBoardと互換性はない) 上の例では「得点が同じだったら早くその得点を出した人優先」になってます。
制限事項 実装の都合により、以下のような制限があります。
 スコアはすべて64bit符号付き整数です  Redis::LeaderBoardのスコアは倍精度浮動小数点型なので小数も扱えるが、Redis::LeaderBoardMultiは整数だけ   Redis 2.8.9以降のみで動きます  実装の仕組み Sorted Setの同じスコアを持つメンバーは辞書順にソートされます(zaddの同じスコアを持つ要素の項を参照)。 例えば以下の様にメンバー「a」「b」「c」を追加すると、必ず「abc」の順番になることが保証されています。</description>
    </item>
    
    <item>
      <title>Redis::Fast 0.17 をリリースしました</title>
      <link>https://shogo82148.github.io/blog/2016/01/23/redis-fast-0-dot-17-released/</link>
      <pubDate>Sat, 23 Jan 2016 16:20:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2016/01/23/redis-fast-0-dot-17-released/</guid>
      <description>Redis::Fast 0.17 をリリースしました。 主な変更点は以下のとおりです。
 I/Oの待ち合わせに使うシステムコールをselect(2)からpoll(2)に変更 hiredisをv0.13.3にアップデート  macでテストが終わらない問題がありましたが、この変更によって修正されています。
hiredisはconnect(2)をnonblokingモードで呼び出しています。 nonblockingなので接続が未完了であってもすぐに制御を返し、errnoにEINPROGRESSが設定されます。 この場合、manにあるようにselect(2)で書き込み可能になるのを待つことで、接続完了を検知できます。
 select(2) で書き込み可能になった後に、 getsockopt(2) を使って SOL_SOCKET レベルで SO_ERROR オプションを読み出すこ とにより、 connect() が成功したか、失敗したかを判断できる。
 linuxの場合はこれで上手く動くのですが、macだと何故かselect(2)が永遠に制御を返さない場合があるようです。 接続先が存在しない場合に起こるのですが、制御を返す場合もあるので謎です。
いろいろ調べてはみたのですがselect(2)だとどうやっても上手く動かなかったので、poll(2)に変更しました。 poll(2)変更版でテストしてみると、接続先が存在しない場合にPOLLOUTを返すケースとPOLLHUPを返すケースがあるようです。 どうやらPOLLHUPにあたるイベントが来た時の挙動がlinuxとmacとで違うらしい？ 謎です。</description>
    </item>
    
    <item>
      <title>Redis::Fast 0.13をリリースしました</title>
      <link>https://shogo82148.github.io/blog/2014/10/16/redis-fast-0-dot-13-released/</link>
      <pubDate>Thu, 16 Oct 2014 23:51:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2014/10/16/redis-fast-0-dot-13-released/</guid>
      <description>Redis::Fast 0.13をリリースしました。 主な変更点は以下のとおりです。
 passwordオプションの対応 maxclientsに達した場合に、deep recursion することがある問題の修正 トランザクション内で再接続処理が行われる問題の修正  passwordオプションの対応 今更感のある機能ですね。昔は対応してたんです。 対応してたんですが、Sentinel対応のために接続開始周りをごそっと入れ替えて、そのときに間違ってパスワード認証機能を削除しちゃってたっぽいです(・ω&amp;lt;) なんというかごめんなさい。
実際実装してテストしてみると、認証失敗したときにdouble freeで落ちてちょっとハマりました。 hiredisを使う場合はredisAsyncSetConnectCallbackに指定する関数内で、コネクションを切断するような処理(password認証とか)はしないようにしましょう。
maxclientsに達した場合に、deep recursion することがある問題の修正 Redis::Fastでは、接続処理の中で、コネクションに名前をつけたり、パスワード認証したり、その他独自の処理を実行しています。 この処理の途中でも再接続処理が走ってしまい、 再接続処理の中で再接続処理が実行されて、その再接続処理の中で再接続が&amp;hellip; というような無限ループに突入する場合があります。 maxclientsに達した場合、一度コネクションの確立に成功したあとに接続が切られるので、この無限ループに入ってしまうようです。
接続処理中は再接続処理を行わないようにすることで対応しました。
トランザクション内で再接続処理が行われる問題の修正 Redis::Fast 0.07以降、MULTI-EXECコマンドを遣ったトランザクションの中にいるときは再接続処理が行わないようになっています。 その仕組みを作るにあたって、トランザクションの中にいるか外にいるかを表すフラグをコマンド送信前に更新していました。
 再接続を禁止する MULTI コマンドを送る 結果を受け取る 必要なコマンド発行を行う 再接続を許可する EXECコマンドを実行する 結果を受け取る  しかしこれだと 5 と 6 の間で再接続が起こってしまいます。 EXECコマンドがまだ実行されていないので、ここはまだトランザクションの中ですね。
Redis::Fast 0.13ではフラグの更新はコマンドが成功したときに変更してあります。
 MULTIコマンドを送る 結果を受け取る 再接続を禁止する 必要なコマンド発行を行う EXECコマンドを実行する 結果を受け取る 再接続を許可する  これでトランザクション中に再接続処理が走ることは無いはずです。</description>
    </item>
    
    <item>
      <title>Redis::Fast 0.07 をリリースしました！</title>
      <link>https://shogo82148.github.io/blog/2014/05/17/redis-fast-0-dot-07-released/</link>
      <pubDate>Sat, 17 May 2014 16:27:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2014/05/17/redis-fast-0-dot-07-released/</guid>
      <description>Redis::Fast 0.07 をリリースしました。 現時点での最新バージョンである Redis.pm 1.974 とコンパチブルになります。
主な修正点は以下の通りです
 Redis Sentinel 対応 トランザクション内での再接続禁止 再接続にDB選択し直し  Redis Sentinel 対応 Redis Sentinel というのは自動フェールオーバーの仕組みらしいです。 (ソースはコピペしたきただけで仕組みはあまり理解していない) どんなものかは本家ドキュメントや実際に検証してみた人の記事をご参照ください。
 Redis Sentinel Documentation Redis 2.8 の Sentinel の動きを検証してみた Redis Sentinelを動かしてみた  前から移植作業は進めてたのですが、本家 Redis.pm でもテストがコケたりしてちょっと不安だったのでリリースを見送ってました。 今日 Redis.pm の安定版がリリースされたのでこっちも追従しますよ！！
コネクションを作るときに sentinels を渡すと Redis Sentinel から接続情報を取ってきてくれます。 一緒に reconnect を設定しておいてあげると、Masterに何かあった時に接続情報を再取得→ 自動的に Slave へフェールオーバーしてくれます。
use Redis::Fast; my $redis = Redis::Fast-&amp;gt;new( sentinels =&amp;gt; [ &amp;#39;127.0.0.1:26379&amp;#39; ], service =&amp;gt; &amp;#39;mymaster&amp;#39;, reconnect =&amp;gt; 1, ); トランザクション内での再接続禁止 Redisにも簡単なトランザクション機能があって、 複数の命令を同時に実行することができます。 トランザクション中に再接続が発生するとトランザクションがリセットされてしまうので、 接続前の命令を再投入する必要があるのですが、Redis.</description>
    </item>
    
    <item>
      <title>Redis::Fast 0.06 released</title>
      <link>https://shogo82148.github.io/blog/2014/02/01/redis-fast-0-dot-06-released/</link>
      <pubDate>Sat, 01 Feb 2014 21:36:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2014/02/01/redis-fast-0-dot-06-released/</guid>
      <description>こんにちは、もうすぐ17才と100ヶ月を迎えるいっちーです。 今朝、Redis::Fast 0.06をリリースしました。 主な変更点はメモリーリークの修正と、エラー発生時にSegmentation Faltで落ちる問題の修正です。
メモリーリーク Redis::Fastをサブスクライバーモードで動作させると、メモリを無限に食い続ける問題をついに！ついに！修正しました。 原因は、一言で言ってしまえば、Perlのリファレンスカウントの扱いの勉強不足です・・・。
XSの中でPerlのオブジェクトを作るとき、プログラマが手動でリファレンスカウントを制御する必要があります。 とはいうものの、全てのオブジェクトのリファレンスカウントを制御するのは大変なので、 XSには「揮発性」という考え方があります。 sv_2motralを使って変数を揮発性に設定しておけば、よしななタイミングでオブジェクトを解放してくれます。 gfx先生のブログにもあるように、 オブジェクト作成したら原則sv_2motralをつけるようにすれば、 メモリーリークはほとんどなくなるはずです。
SV * s = newSVpv(&amp;#34;Hello World&amp;#34;,0); // Perl の文字列オブジェクト sv_2motral(s) // 揮発性にすることで、使われなくなったら自動的に解放してくれる この「よしななタイミング」をよく理解していなかったのでリークしてました・・・。 XSからオブジェクトへアクセスできなくなったときでないとオブジェクトを解放できないので、 揮発性のオブジェクトが実際に解放されるのは「XSで書かれた関数が終了してPerlに戻るとき」です。 メッセージを待ち続けるwait_for_messages関数は (タイムアウトをしない限り)ずっと終了しないので、 揮発性のオブジェクトを解放するタイミングが一切なかったのです。
不要になったら解放されるよう、揮発性オブジェクトの有効範囲を明示的に指定しました。
sv_2motral(s); ENTER; SAVETMPS; sv_2motral(v); FREETMPS; LEAVE; // v はココで解放される // s は生き残ってる perlcallとかちゃんとドキュメントを読みましょう &amp;gt; 自分
Segmentation Falt 同期的にコマンドを実行してる最中にSIGNAL等で実行が中断されると、 Segmentation Faltが起こる問題を修正しました。 Redis::Fastは同期モードでコマンドを発行したときでも、 hiredisの非同期モードの機能を使って通信しています。 コマンド実行中にエラーが発生すると、 コールバック関数の呼び出しタイミングが変わってしまい、 メモリの確保・解放のタイミングが狂ってしまっていました。
このバグ、試した環境の中ではUbuntu+Perl5.14でしか再現しませんでした。 他の環境ではたまたま解放後もアクセスできてしまって、 正常に動作してしまっていたようです。 嫌なバグだ・・・。
まとめ C言語でメモリ管理するコードは書くべきでない。</description>
    </item>
    
    <item>
      <title>Redis::NamespaceとRedis::Keyをリリースしました</title>
      <link>https://shogo82148.github.io/blog/2013/10/18/redis-namespace-and-redis-key/</link>
      <pubDate>Fri, 18 Oct 2013 23:21:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2013/10/18/redis-namespace-and-redis-key/</guid>
      <description>こんばんは、最近シングルトン恐怖症になっているいっちーです。 Redis::Namespaceと Redis::Keyをリリースしました。
Redis::Namespace 「Redis::NamespaceのPerl版書いた」 で紹介したモジュールをCPANizeしました。 コマンドのキー名に当たる部分に、自動にプレフィックスをつけてくれる賢い奴です。
use Redis; use Redis::Namespace; my $redis = Redis-&amp;gt;new; my $ns = Redis::Namespace-&amp;gt;new(redis =&amp;gt; $redis, namespace =&amp;gt; &amp;#39;fugu&amp;#39;); $ns-&amp;gt;set(&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;); # $redis-&amp;gt;set(&amp;#39;fugu:foo&amp;#39;, &amp;#39;bar&amp;#39;); my $foo = $ns-&amp;gt;get(&amp;#39;foo&amp;#39;); # my $foo = $redis-&amp;gt;get(&amp;#39;fugu:foo&amp;#39;); RedisにはKey-Value Storeなんてかっこいい名前が付いているけど、 結局はシステム全体で使えるグローバル変数なわけです。 グローバル変数は駆逐するべきです。 いちいちプレフィックスつけて名前の衝突を回避するなんて人間のやることとは思えません。
せめてモジュールローカルとか、クラスローカルとかある程度スコープを制限したいですよね。 Redis::Namespaceを使えば簡単に実現できます。
Redis::Key Redis::Key は Redisのキーの簡単なラッパークラスです。 毎回毎回「接続先のRedisサーバ」と「キーの名前」を指定するのは面倒です。 この2つをセットにして、一つのオブジェクトとして扱うことができます。
use Redis; use Redis::Key; my $redis = Redis-&amp;gt;new; my $key = Redis::Key-&amp;gt;new(redis =&amp;gt; $redis, key =&amp;gt; &amp;#39;hoge&amp;#39;); $key-&amp;gt;set(&amp;#39;fugu&amp;#39;); # $redis-&amp;gt;set(&amp;#39;hoge&amp;#39;, &amp;#39;fuga&amp;#39;); $key-&amp;gt;get; # $redis-&amp;gt;get(&amp;#39;hoge&amp;#39;); 普通に使っている限りは他のキーにアクセスすることができなくなるので、 Redis::Keyのオブジェクトを他のクラスに渡す、とかしても安心です。</description>
    </item>
    
    <item>
      <title>Redis::Fastをcpanize＆アップデートしました</title>
      <link>https://shogo82148.github.io/blog/2013/10/13/cpanize-redis-fast/</link>
      <pubDate>Sun, 13 Oct 2013 22:39:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2013/10/13/cpanize-redis-fast/</guid>
      <description>Redis::Fastをcpanizeしました！
さらに！早速不具合が見つかったので0.01から0.02にアップデートしました！
CPANに上げてから24時間も経たないうちにpull requestがやってきてCPAN怖いところです。
最初のバージョンである0.01ではタイムアウト処理をちゃんと書いていなかったので、 タイムアウト時に無限ループに陥る不具合がありました。 LinuxとMacとでコネクションを張るのに失敗したときの挙動が違うらしく、 Linuxでは問題なくテストが通るのに、Mac上でのテストでは再現するという面倒バグでした。 さらに面倒なことにRedisの起動のタイミングによって、 Macでもテストが通ったり通らなかったりするという・・・。
主に開発はLinux上でやって、Linux上でしかテスト動かしてなかったので全く気がついていませんでした。 CPANデビューのモジュールがネットワーク関連でXSで少しハードルを上げ過ぎた感じがします。 環境依存な部分が多くてつらいです。
pull requestを送ってくださったsyohexさん、実際にインストールを試みてテストが通らないことを教えてくださったみなさん、ありがとうございました。 アップデートした0.02では、タイムアウト時の処理を少し書きなおして、pull requestも取り込みました。 Mac上でも問題なくテストが通ってインストールできるはずです(きっとね)。</description>
    </item>
    
    <item>
      <title>Redis::Fastってモジュールを書いた</title>
      <link>https://shogo82148.github.io/blog/2013/09/28/redis-fast/</link>
      <pubDate>Sat, 28 Sep 2013 00:18:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2013/09/28/redis-fast/</guid>
      <description>hiredisをPerlから扱うためのライブラリとして Redis::hiredisってのがあるけど、 なんだか微妙だって聞いたので自分でPerlのhiredisバインディング書いてみたよ。
 https://github.com/shogo82148/Redis-Fast  (READMEからRedis.pmをそのまま持ってきたことがまるわかりですね。なんとかしよう。)
使い方 Redis.pmと全く同じインターフェースなので、 そのまま置換できる、はず。
use Redis::Fast; my $redis = Redis::Fast-&amp;gt;new; ### synchronize mode $redis-&amp;gt;set(&amp;#39;hoge&amp;#39;, &amp;#39;piyo&amp;#39;); print $redis-&amp;gt;get(&amp;#39;hoge&amp;#39;); # piyo ### asynchronize mode $redis-&amp;gt;get(&amp;#39;hoge&amp;#39;, sub { my ($result, $error) = @_; print $result; # piyo }); $redis-&amp;gt;wait_all_responses; ### pubsub $redis-&amp;gt;publish(&amp;#39;fugu&amp;#39;, &amp;#39;fuga&amp;#39;); $redis-&amp;gt;subscribe(&amp;#39;fugu&amp;#39;, sub { my ($message, $topic, $subscribed_topic) = @_; }); my $timeout = 10; $redis-&amp;gt;wait_for_messages($timeout) while 1; 以前作った、Redis::Namespaceにもそのまま使えます。
use Redis::Fast; use Redis::Namespace; my $redis = Redis::Fast-&amp;gt;new; my $ns = Redis::Namespace(redis =&amp;gt; $redis, namespace =&amp;gt; &amp;#39;fugu&amp;#39;); $ns-&amp;gt;set(&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;); # $redis-&amp;gt;set(&amp;#39;fugu:foo&amp;#39;, &amp;#39;bar&amp;#39;); my $foo = $ns-&amp;gt;get(&amp;#39;foo&amp;#39;); # my $foo = $redis-&amp;gt;get(&amp;#39;fugu:foo&amp;#39;); ベンチマーク Redis.</description>
    </item>
    
    <item>
      <title>Redis::NamespaceのPerl版書いた</title>
      <link>https://shogo82148.github.io/blog/2013/09/14/redis-namespace-perl/</link>
      <pubDate>Sat, 14 Sep 2013 18:36:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2013/09/14/redis-namespace-perl/</guid>
      <description>Redis のキーにプリフィックスつけるの面倒だなー自動的につけてくれないかなーと思い、 調べてみると Ruby に Redis-Namespace というものがあるらしい。 だけども、Perl では探しても見つからなかったので書いてみた。
レポジトリはこちら→Redis::Namespace
使い方 インターフェースは Perl Redis と一緒。 コマンドのキー名に当たる部分に、自動的にプレフィックスをつけてくれる。
use Redis; use Redis::Namespace; my $redis = Redis-&amp;gt;new; my $ns = Redis::Namespace(redis =&amp;gt; $redis, namespace =&amp;gt; &amp;#39;fugu&amp;#39;); $ns-&amp;gt;set(&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;); # $redis-&amp;gt;set(&amp;#39;fugu:foo&amp;#39;, &amp;#39;bar&amp;#39;); my $foo = $ns-&amp;gt;get(&amp;#39;foo&amp;#39;); # my $foo = $redis-&amp;gt;get(&amp;#39;fugu:foo&amp;#39;); 大体のコマンドには対応したつもり。 別のプレフィックスがついたキーには基本的にアクセスできなくなるので、 キー名の管理が少し楽になると思います。
でも、flushdb とか flushall すると全部消えるので気をつけてね！</description>
    </item>
    
    <item>
      <title>Perl の Redis ライブラリを調べた</title>
      <link>https://shogo82148.github.io/blog/2013/08/24/perl-redis-libraries/</link>
      <pubDate>Sat, 24 Aug 2013 17:51:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2013/08/24/perl-redis-libraries/</guid>
      <description>最近Redis を使ったコードを書くようになったのですが、 キー名を毎回指定するのがだるいです。 Ruby には redis-objects というのがあって、 Redisのキーをオブジェクトとして扱うことができるようです。 きっと、Perl にも似たようなのあるだろ、って思って調べてみました。
ほしいもの 低レベルなRedisのライブラリはたいていメソッドとRedisのコマンドが一対一対応していて、 次のようなコードになると思います。
$redis-&amp;gt;set(&amp;#39;key-name&amp;#39;, &amp;#39;piyopiyo&amp;#39;); $redis-&amp;gt;get(&amp;#39;key_name&amp;#39;); でも、Redisに何か操作をしたいわけじゃなくて、 Redisのキーに対して操作をしたいので、 次のように書けるべきだと思うんです。
my $key = key($redis, &amp;#39;key-name&amp;#39;); $key-&amp;gt;set(&amp;#39;piyopiyo&amp;#39;); $key-&amp;gt;get(); Redis::Hash, Redis::List Redis::Hashと Redis::Listは Perlのハッシュや配列と同じ操作で Redis にアクセスできるようにするライブラリ。
use utf8; use warnings; use strict; use 5.014; use Redis::Hash; tie my %my_hash, &amp;#39;Redis::Hash&amp;#39;, &amp;#39;hash_prefix&amp;#39;, (server =&amp;gt; &amp;#39;localhost:6379&amp;#39;); # set hash_prefix:hogehoge piyopiyo # set hash_prefix:fugafuga fugufugu $my_hash{hogehoge} = &amp;#39;piyopiyo&amp;#39;; $my_hash{fugafuga} = &amp;#39;fugufugu&amp;#39;; # get hash_prefix:hogehoge piyopiyo say $my_hash{hogehoge}; # piyopiyo # keys hash_prefix:* say join &amp;#39;,&amp;#39;, keys %my_hash; #fugafuga,hogehoge # keys hash_prefix:* # get hash_prefix:fugafuga # get hash_prefix:hogehoge say join &amp;#39;,&amp;#39;, values %my_hash; #fugufugu,piyopiyo # del hash_prefix:hogehoge delete $my_hash{hogehoge}; tie とかよくわかない。 Perl の黒魔術を見た気がしました。</description>
    </item>
    
  </channel>
</rss>