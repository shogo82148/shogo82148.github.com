<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AjaxIME on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/ajaxime/</link>
    <description>Recent content in AjaxIME on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 28 Mar 2012 22:00:00 +0900</lastBuildDate><atom:link href="https://shogo82148.github.io/categories/ajaxime/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavascriptでIME</title>
      <link>https://shogo82148.github.io/blog/2012/03/28/igoime/</link>
      <pubDate>Wed, 28 Mar 2012 22:00:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2012/03/28/igoime/</guid>
      <description>この前いじったChrome17対応版AjaxIMEは 実際の変換を行うのに本家AjaxIMEが提供している変換サーバをそのまま使用しています。 そのため、すべての入力内容は本家サーバに送信されてしまいます。 どんな入力をしたのか作者さんにバレバレです。 この送信内容、暗号化すらされていないので、作者以外の人に見られる可能性もあります。 自分の書いた文章が勝手にインターネットに送信されているっていうのはあんまり嬉しくないですね。 ローカルのみで完結するのが理想です。
本家サーバはどうやらmecab-skkservと同じエンジンを使っているようです。 このバックエンドで動いているのは実はMeCab。 ということは、MeCabと互換性のあるigo-javascriptでも同じことができるはず・・・！ これはならブラウザ上ですべてが完結する！
はい、そういうことで作ってみました。
 IgoIME  使い方は本家と一緒です。Alt-o (Ctrl-9)でモード切替。 ローマ字で日本語を入力することができます。
日本語入力をするためには変換候補をいくつか出力する必要がありますが、 本来Igoにはその機能はありません。 そのため、複数候補を出す部分だけ独自実装してあります。 しかし、まだなんか変換候補が怪しいですね・・・。 長い文章を入力したのに一文字しか結果が帰ってこないことがあります。 なんでだろう・・・・
まだまだ改良が必要なようです。</description>
    </item>
    
    <item>
      <title>Javascriptでの関数宣言</title>
      <link>https://shogo82148.github.io/blog/2012/03/23/javascript-function/</link>
      <pubDate>Fri, 23 Mar 2012 18:22:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2012/03/23/javascript-function/</guid>
      <description>Chrome17対応版AjaxIME Ajaxを使ってIMEを実現したAjaxIMEがFireFoxでは動くのに最新版のChromeで動かない。 動くように少しいじってみた。
 Chrome17対応版AjaxIME  原因 Chromeで動かなかった原因はここ。
if(typeof getComputedStyle == &amp;#39;undefined&amp;#39;) { function getComputedStyle() { //中身は省略  } } FireFoxやChromeには getComputedStyle という関数が定義されているけど、 IEには定義されていない。 if文で有無を判定して、無い場合は動作をエミュレートする関数を定義している。
実行の様子をデバッガで追って見ると、Chromeではエミュレートする必要が無いのになぜか自前で定義した関数が呼び出されていた。 どうやら、Chromeでは 自作 getComputedStyle 関数が if文の中にあったとしてもコード読み込み時に作成されてしまうみたい。 FireFox だと if文の中が実行されない場合には作成されない。
結果だけ書くと、次のように書きなおしたら動いた。
if(typeof getComputedStyle == &amp;#39;undefined&amp;#39;) { getComputedStyle = function() { //中身は省略  } } あと Chrome だと、Input要素にフォーカスがあたった時に余計な装飾がついてしまうので、CSS上書きして抑制。 IE8でTextRangeが使えない問題は「IE8でのTextRange.moveToPoint()」を参考にして解決。 IE7のエミュレートモードにしているだけで、根本的な解決にはなってないけど、まあIEだしいいでしょ。
どっちが正しいの？ とりあえず問題は解決したんだけど、FireFoxとChromeで動作が違うけど、どちらの動作が正しいの？ 気になったので調べてみた。
「mixi Engineers&#39; Blog &amp;raquo; 詳細 ECMA-262-3 第5章 関数」に関数の定義法についてわかりやすい解説が載っていた。 結論からいうと、一番初めの書き方は「誤り」で実際の動作は実装依存、つまり FireFox の動作も Chrome の動作も正しいとのこと。
関数定義と関数式 関数の定義法は大きく分けて、次のような関数定義と関数式に分かれている。 関数式は更に名前なしと名前付きがある。</description>
    </item>
    
  </channel>
</rss>
