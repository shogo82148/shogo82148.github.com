<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wasm on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/wasm/</link>
    <description>Recent content in wasm on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 19 Aug 2018 07:29:00 +0900</lastBuildDate>
    
	<atom:link href="https://shogo82148.github.io/categories/wasm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GoAst ViewerをWebAssemblyへビルドしてみた</title>
      <link>https://shogo82148.github.io/blog/2018/08/19/goast-viewer-using-wasm/</link>
      <pubDate>Sun, 19 Aug 2018 07:29:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2018/08/19/goast-viewer-using-wasm/</guid>
      <description>もうすぐリリースのGo1.11ではWebAssemblyのサポートが予定されています。 (2018/08/19現在の最新版はGo1.11rc1)
 Go言語がWebAssemblyをサポートへ。GOARCHは「wasm」、GOOSは「js」に  正式リリース前に少し遊んでみようということで、@yuroyoroさんのGoAst ViewerをWebAssemblyへビルドしてみました。
 GoAst Viewer WebAssembly Version shogo82148/goast-viewer  JavaScriptの連携方法 コードをASTに変換し、JSONとしてエンコードする部分(ast.go)に関しては、一切変更しなくても動きました。素晴らしい。
ただし、さすがにブラウザ上でHTTPサーバーは動かない(そういえば試してないけど、動かないよね？？)ので、JavaScriptとの連携部分を実装してあげる必要があります。 syscall/jsパッケージはまだ実験段階というステータスで機能が限られているので、 連携には少し工夫が必要です。
JavaScriptからGoの関数を呼ぶ JavaScriptからGoの関数を呼ぶには window にコールバック関数として必要な関数を登録します。
// GoASTParse 関数を定義(Go言語) js.Global().Set(&amp;#34;GoASTParse&amp;#34;, js.NewCallback(func(args []js.Value) { source := args[0].String() // ...ASTへの変換処理... })) 戻り値をGoからJavaScriptへ返す js.NewCallback なのですが、もともとは addEventListener にわたすコールバック関数なので、 関数の戻り値を受けわたす方法がありません。 回避方法はいろいろあるでしょうが、今回はコールバック関数の引数にコールバック関数指定してもらうことにしました。
// GoASTParse 関数を定義(Go言語) js.Global().Set(&amp;#34;GoASTParse&amp;#34;, js.NewCallback(func(args []js.Value) { source := args[0].String() // ...ASTへの変換処理...  args[1].Invoke(string(body)) })) // GoASTParseを呼び出す(JavaScript) GoASTParse(&amp;#34;package main; func main() {}&amp;#34;, function(body) { // ASTの表示処理 }) まとめ Goのバイナリ全般に言えることですが、WASMになってもやっぱりサイズが大きい(3.</description>
    </item>
    
  </channel>
</rss>