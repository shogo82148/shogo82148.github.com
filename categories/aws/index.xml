<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/aws/</link>
    <description>Recent content in Aws on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 30 Mar 2020 06:37:00 +0900</lastBuildDate>
    
	<atom:link href="https://shogo82148.github.io/categories/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Yet Another AWS X-Ray Go SDK を作った</title>
      <link>https://shogo82148.github.io/blog/2020/03/30/aws-xray-yasdk-go/</link>
      <pubDate>Mon, 30 Mar 2020 06:37:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2020/03/30/aws-xray-yasdk-go/</guid>
      <description>AWS X-Ray Go SDK の地雷処理をしている話 で投げたSQLのプルリクエスト も無事マージしてもらい、 その後もちょくちょくプルリクエストを投げて地雷処理をしていたんですが、我慢できずにやってしまいました・・・。
 Yet Another AWS X-Ray SDK for Go  そもそも AWS X-Ray ってなんだ、という方は以下のリンクから @fujiwara さんの記事へ飛べるのでどうぞ。
 AWS Lambda Perl Runtime で AWS X-Ray を使えるようになりました  使い方 だいたいオフィシャルSDKと一緒です。 ただし、パッケージ分割をしたので、呼び出す関数名等はちょっと変わってます。 他にも微妙に挙動が違う箇所があります。
環境変数の設定 AWS_XRAY_DAEMON_ADDRESS, AWS_XRAY_CONTEXT_MISSING 等の環境変数の設定項目は本家と合わせました。 ただし、以下の点が本家とは異なります。
 コード内の設定が優先されます。 環境変数はコード内で明示的に設定が行われなかった場合のフォールバックです。 AWS_XRAY_CONTEXT_MISSING のデフォルト値は LOG_ERROR です。  セグメントの作り方 オフィシャルSDKは seg.Close(err) のようにセグメントを閉じるときにエラーを渡します。 Go には defer という便利な機能があるので、セグメントを閉じるときもこれを使いたいところです。 だたエラーを正しく受け取るには、以下のように戻り値に名前をつけて、defer 部分を無名関数の呼び出しにする必要があります。
// オフィシャルSDKの場合 import &amp;#34;github.com/aws/aws-xray-sdk-go/xray&amp;#34; func DoSomethingWithSubsegment(ctx context.Context) (err error) { ctx, seg := xray.</description>
    </item>
    
    <item>
      <title>AWS X-Ray Go SDK の地雷処理をしている話</title>
      <link>https://shogo82148.github.io/blog/2020/02/11/aws-xray-golang/</link>
      <pubDate>Tue, 11 Feb 2020 06:37:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2020/02/11/aws-xray-golang/</guid>
      <description>AWS Lambda Perl Runtime で AWS X-Ray を使えるようになりました で紹介した AWSの分散アプリケーションの分析サービス AWS X-Ray。 Perl から使えるようにしたももの、自分自身は最近 Perl をあまり使っていないことに気がついた！！ので、AWSが提供しているGo実装である aws/aws-xray-sdk-goに 手を出してみることにしました。
結果、X-Rayのサービスマップやトーレスが見れるようになって便利！・・・にはなったんですが、そこまでの道のりが長かった。 「 @fujiwara さんのYAPC::Tokyo 2019での発表 から1年近く経ってるしそろそろ安定してきているでしょ！」と 軽い気持ちで始めたのが良くない。 色々と地雷(？)を踏んだので、記録として残しておきます。
依存ライブラリのcontext対応が地味に辛い X-Ray で実行をトレースするには、「今実行している関数がどこから呼ばれたのか？」という情報をうまいこと伝える必要があります。 Perlで使われているような黒魔術はGoでは使えないので、 context.Context を地道に引数に渡していくことになります。
まあ、こんなこともあろうかと、context.Context にはバッチリ対応してあるからサクッと行けるでしょ！
と思ってたんですが、現実はそうは甘くなかった。 X-Rayを入れようとしたプロジェクトではWebフレームワークとしてgoadesign/goaを使っています。 GoaのHTTPハンドラーには context.Context が渡ってくるので油断していたのですが、 contextの親をたどっていくと行き着く先は context.Background() (HTTPハンドラーなので request.Context() であってほしい)。 なんとなく context.Context 対応詐欺にあった気分です。
Goaは現在 v2, v3 の開発がメインで現在使っているのは v1 です。 v1からv3へのアップグレードには大幅な書き換えが必要なこと、アップグレードしたとしても直っている保証がないこと、 最近 Goa v1 のリリースが滞りがちなこと、などなどの理由から結局フォークしてくることにしました。
 shogo82148/goa-v1  AWS X-Ray Go SDK 自体の問題ではないのですが、 Contextってタイムアウトをうまく処理するための仕組みなので、実装漏れがちですよね。 皆さん実装するときやライブラリの選定には気をつけましょう。
SQLクエリを実行する関数のシグネチャーが微妙に違う これに関しては @acidlemon 先生の kamakura.</description>
    </item>
    
    <item>
      <title>AWS SDK for Perl Lambda Layerを公開しました</title>
      <link>https://shogo82148.github.io/blog/2019/07/16/aws-lambda-paws-layer/</link>
      <pubDate>Tue, 16 Jul 2019 22:43:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2019/07/16/aws-lambda-paws-layer/</guid>
      <description>ハイラルからこんにちは。
AWS LambdaでCGIを蘇らせる で作成した Perl Custom Runtime 用の AWS Lambda Layer ですが、 中でイベントのハンドリングをしているモジュールを AWS::Lambda として CPAN で公開したところ、 AWS SDKを入れて欲しい との要望が来ました。 完全にネタとして作成したモジュールですが、いるんですね使う人。 というわけで AWS SDK を含んだ AWS Lambda Layer を公開しました。
使い方 公開レイヤーを使う AWS公式ではPerl用のSDKは提供していないので、Pawsという非公式SDKを使いました。 何も考えずにテキトウにインストールしてみたらSDKだけで121MBありました。 Perl本体が85MBなのでSDKのほうがでかい。 AWS Lambdaで作成できる関数は250MBが上限なので、流石に半分SDKに持っていかれるのはつらかろうと、Perl本体とは別のレイヤーに分けてあります。
レイヤーは最大5つまで登録できるので、Perl本体(例: arn:aws:lambda:ap-northeast-1:445285296882:layer:perl-5-30-runtime:2 )に加えて 以下のレイヤーを追加することで、Paws を呼び出すことができるようになります。
 arn:aws:lambda:ap-east-1:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:ap-northeast-1:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:ap-northeast-2:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:ap-south-1:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:ap-southeast-1:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:ap-southeast-2:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:ca-central-1:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:eu-central-1:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:eu-west-1:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:eu-west-2:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:eu-west-3:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:sa-east-1:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:us-east-1:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:us-east-2:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:us-west-1:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:us-west-2:445285296882:layer:perl-5-30-paws:1  いつの間にかマネージドコンソールから編集ができるようになっていたので、開発がはかどりますね。
カスタムランタイムでもAWS Lambdaのマネージドコンソールから内容の編集ができる・・・？ Perl も編集できるぞ・・・ pic.twitter.com/4228rG0hca
&amp;mdash; Ichinose Shogo (@shogo82148) July 16, 2019</description>
    </item>
    
    <item>
      <title>CloudFormationのMackerel用インテグレーションを作ってる話</title>
      <link>https://shogo82148.github.io/blog/2019/04/17/cfn-mackerel-macro/</link>
      <pubDate>Wed, 17 Apr 2019 18:26:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2019/04/17/cfn-mackerel-macro/</guid>
      <description>Mackerel は mkr コマンドを用いて cli から操作ができます。 mkr コマンドを用いると 監視ルールを GitHub で管理 したり、 カスタムダッシュボードを管理したり、といったことができます。 しかし、個人的に以下のような不満があります。
 サービス、ロール、ホスト、新ダッシュボード等々、監視設定以外のリソースに対応していない  旧ダッシュボードは対応しているんだけど、新ダッシュボード対応がまだ 新ダッシュボードのUIは使いやすくてすごくいいんだけど、コピペや一斉置換ができないので、テキストで管理したい  出力がJSONなのつらい  JSON手で書くの難しくないですか？  メトリックスの送信設定と監視設定の管理が別になってしまう  カスタムメトリックス送っているのに監視設定を忘れた、みたいなことが起こる   メトリックスの送信設定については、以前 サーバーレスでCloudWatchメトリクスをMackerelに転送する で CloudFormation上での管理を実現しました。 ここにさらに Mackerel の監視設定を追加できれば、最強なのでは？とやってみました。
例 あれこれ説明する前に例を見てもらったほうがわかりやすいと思うので、こんなことができますよ、という設定例から。
例1: レスポンスタイムの99%パーセンタイルを監視する Mackerel の AWSインテグレーション は ALB に対応していますが、 レスポンスタイムのメトリックスは平均レスポンスタイムだけです。 「平均」は代表的な統計値ですが、全体としては速いんだけど一部のリクエストだけ遅い、という状況を見逃してしまいます。 レスポンスタイムの大まかな分布をパーセンタイルで把握したい、ということはよくありますよね？ (K社でZabbixを使って監視していたときによくお世話になった)
今回作ったインテグレーションを使えば、以下のように「Mackerelのサービス定義」「メトリックスの転送設定」「監視設定」が CloudFormation のテンプレートとして表現できます。
AWSTemplateFormatVersion:2010-09-09# Type: Mackerel::* を使うためのおまじないTransform:-AWS::Serverless-2016-10-31-Mackerel-JSONStringResources:MackerelService:Type:Mackerel::ServiceProperties:Name:&amp;#34;awesome-service&amp;#34;# メトリックスを転送する Lambda 関数MetricsForwarder:Type:AWS::Serverless::ApplicationProperties:Location:ApplicationId:arn:aws:serverlessrepo:us-east-1:445285296882:applications/mackerel-cloudwatch-forwarderSemanticVersion:0.0.9Parameters:ParameterName:&amp;#34;/api-keys/api.mackerelio.com/headers/X-Api-Key&amp;#34;ForwardSettings:!GetAttMetricsForwarderSettings.Query# CloudWatch から99%パーセンタイルを取得するMetricsForwarderSettings:Type:JSON::StringProperties:Query:-service:!GetAttMackerelService.Namename:request_percentile.p99metric:-AWS/ApplicationELB-TargetResponseTime-LoadBalancer-!GetAttLoadBalancer.FullName-TargetGroup-!GetAttTargetGroup.TargetGroupFullNamestat:p99MonitorP99:Type:Mackerel::MonitorProperties:Type:serviceName:request_percentile.p99Duration:1Service:!RefMackerelServiceMetric:request_percentile.p99Operator:&amp;#34;&amp;gt;&amp;#34;Warning:3# 3秒を超えたらWarningCritical:10# 10秒を超えたらCriticalMaxCheckAttempts:3 例2: ログに吐かれたエラーを監視する check-aws-cloudwatch-logs を使うと、 CloudWatch Logs に吐かれたログを検索して、エラーを見つけたらアラートを飛ばすということができます。</description>
    </item>
    
    <item>
      <title>外部サービスでもIAM Roleで認証がしたい！</title>
      <link>https://shogo82148.github.io/blog/2019/02/12/ssm-sign-proxy/</link>
      <pubDate>Tue, 12 Feb 2019 12:46:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2019/02/12/ssm-sign-proxy/</guid>
      <description>背景 外部サービスのAPIやWebHookを叩くときには、多くの場合 API トークンが必要になります。 もちろん API トークン無しでも叩けるサービスはありますが、GitHub APIのようにトークン無しではリクエスト数が大きく制限されたり、 一部機能が制限されてしまう場合があります。
外部連携サービスが増えてくると、このAPIトークンをどうやって管理するかが問題になってきます。 プロダクションに投入されているサービスは普通複数のサーバーから構成されており、各サーバーにAPIトークンを配布するのはちょっと面倒です。 この問題に対して、以下のようなことが行われて来ました。
 プライベートネットワークからのアクセスに限定した Proxy を立てる APIトークンの管理は Proxy に任せる  DevOpsが注目され、Slackの利用が広まったころに、このような目的で書かれたProxyサーバーがよく登場しました。
 社内IRCをSlackに移行した時にやったこと  この記事で紹介されている kayac/nopaste  Slackboard〜Slackプロキシサーバ in Go〜 Slackプロキシサーバ〜slackboard〜を利用したメルカリのSlack活用法 App::Ikachan - 様々なサーバのバッチ処理の結果等を IRC のチャンネルに通知するサーバ  (IRCはHTTPで動いているわけではないし、大本の目的もコネクション維持だけど、認証も代理でやってくれる)   しかし、これらのサーバーはSlack専用だったりIRC専用だったりします。 Slackだけじゃなくって、GitHubにコメント登録したり、Mackerelのグラフアノテーションを投稿したり、 他のサービスとも連携したい！
最近はどんなAPIもHTTPで提供されるようになったので(IRCは・・・ウッ・・・そんなのなかった)、もっと汎用的に書けるのではとやってみました。
実装 APIトークンの保管場所として AWS Systems Manager Parameter Store を採用しました。 Parameter Store からAPIトークンを取り出す部分と、実際にAPIを叩く部分は AWS Lambda を使用します。 各サーバーに Forward Proxy デーモンを立てておき、APIを使いたいアプリケーションはこのProxyを経由するようにします。
この図ではEC2インスタンスを例にしていますが、IAM Roleを付与できるAWSのサービスであれば何でも (ECS, Lambda, CodeBuild, etc.) APIにアクセスすることができます。</description>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt の証明書取得を AWS Lambda でやってみた</title>
      <link>https://shogo82148.github.io/blog/2019/02/07/acme-cert-updater/</link>
      <pubDate>Thu, 07 Feb 2019 19:22:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2019/02/07/acme-cert-updater/</guid>
      <description>背景 ここ数年で暗号化されていないHTTPは減り、常時TLSが当たり前になってきました。 公開用のページはもちろん、開発段階のページでもTLSは必須です。 普段はAWS上で開発をしているので、AWS Certificate Managerを利用することが多いのですが、 ちょっとしたお遊びにELBやCloudFormationを使うのはオーバーキルです。 そこで EC2 にもインストールできて、無料で使える Let&amp;rsquo;s Encrypt を使って証明書を発行することを考えました。
Let&amp;rsquo;s Encrypt で発行できる証明書は期間が90日と短く、60日ごとの自動更新が推奨されています。 証明局とAPIとAPIクライアントの実装例は提供するから、あとの自動化部分は自前で頑張ってねという感じなので、自動化部分を頑張らないといけません。 今回は実行環境として AWS Labda、ACME(Automatic Certificate Management Environment)クライアントとして certbot、 認証方法に dns-01、認証に必要なDNSレコードの書き換えに AWS Route 53 を使用する、という構成にしました。
ソースコードをGitHubに挙げたのと、前回と同様に AWS Serverless Application Repository へ上げたので、ぜひご利用ください。
 shogo82148/acme-cert-updater shogo82148/acme-cert-updater on AWS Serverless Application Repository  関連手法 Amazon Linux 2 に certbot をインストールして使う Amazon Linux 2 のドキュメントに TLS 対応のウェブサーバーを立てる例が載っています。 Let&amp;rsquo;s Encrypt で証明書を取る方法も紹介されているので、まずはこれを利用することを考えました。
 付録: Amazon Linux 2 での Let&amp;rsquo;s Encrypt と Certbot の使用 - チュートリアル: Amazon Linux 2 で SSL/TLS を使用できるように Apache ウェブサーバーを設定する  この方法は以下の理由から見送りました。</description>
    </item>
    
    <item>
      <title>サーバーレスでCloudWatchメトリクスをMackerelに転送する</title>
      <link>https://shogo82148.github.io/blog/2019/01/31/mackerel-cloudwatch-transfer/</link>
      <pubDate>Thu, 31 Jan 2019 17:44:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2019/01/31/mackerel-cloudwatch-transfer/</guid>
      <description>背景 サーバーの監視にMackerelを使っているのですが、 用意されているメトリクスでは足りずカスタムメトリクスを追加することが多々あります。 Mackerel Agent Pluginsを利用すればメトリクスを増やすこと自体は簡単なのですが、 Agentを設置するインスタンスが増えるので、サーバー保守の手間が増えてしまいます。
僕のユースケースでは監視対象はたいていAWSのマネージド・サービスなので、 AWS CloudWatch に投稿されたメトリクスが Mackerel で見れれば十分なことが多いです。
そこで、以下の記事を参考に AWS Lambda と CloudWatch Events を組み合わせて、Mackerelへメトリクスを転送するスクリプトを書いてみました。
 Amazon LambdaでCloudWatchのメトリクスをMackerelに監視させる  デプロイしてみる 今回はなんと！皆さんの AWSマネジメントコンソールから、クリックひとつでデプロイできるようにしてみました！
 mackerel-cloudwatch-forwarder  ・・・と、その前に下準備が必要です。 MackerelのダッシュボードからAPIキーをコピーしてきて、 AWS Systems Manager パラメータストアに Secure String として登録しておきます。 スクショでは Mackerel のものだと分かりやすいよう /development/api.mackerelio.com/headers/X-Api-Key という名前をつけました。 この名前を後で使うので覚えておきましょう。
次に AWS Lambda の画面を開き、「関数の作成」をクリックします。
「一から作る」「設計図」「AWS Serverless Application Repository」の3つの選択肢が表れるので、 「AWS Serverless Application Repository」 を選択します。 検索BOXに「Mackerel」と入れると、mackerel-cloudwatch-forwarderが 出てくるので、それを選択します。 なお、この選択肢はデフォルトでは表示ないので、「Show apps that create custom IAM roles or resource policies」にチェックを入れましょう。</description>
    </item>
    
    <item>
      <title>CloudFormationでECSタスクのドレインをやる</title>
      <link>https://shogo82148.github.io/blog/2019/01/30/drain-ecs-task-with-cloudformation/</link>
      <pubDate>Wed, 30 Jan 2019 17:44:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2019/01/30/drain-ecs-task-with-cloudformation/</guid>
      <description>やってみたはいいものの、1年後には仕組みを忘れていそうなのでメモ。
背景 昔はサービス毎にポコポコEC2インスタンスを立てていたのですが、 幸か不幸かインスタンスのリソースが余り気味でした。 そこで、最近流行りのコンテナ技術に乗っかって Amazon ECS (Amazon Elastic Container Service) を使って、 ひとつのインスタンスに複数のサービスを載せようと目論みました。
ちょうどその頃、Spot Fleetというものを使うと、 スポットインスタンスをお手軽に借りられるという話を聞いたので、 Spot Fleet + ECS で格安クラスターを作ってみよう！と手を出してみました。
(・・・もちろん、Fargateが東京リージョンで使えるようになったことは知っているけれど、スポットインスタンスの価格に負けてしまった・・・)
 AWS Fargate 東京リージョン サービス開始のお知らせ AWS Fargate で最大 50% の値下げを発表  ECS最適化インスタンスの更新問題 クラスターを作るだけなら、そう難しくはなく、インスタンス起動時にAmazon ECS-Optimized Amazon Linux AMIを使うだけです。 問題はこのイメージは定期的に更新される、ということです。 更新情報を流しているSNSトピックがあるので、これをサブスクライブしておくと、時たま更新通知が来ます。
 Amazon ECS-Optimized Amazon Linux AMI の更新の通知のサブスクライブ  この更新には機能追加はもちろん、セキュリティーフィックスも含まれているので、 なるべく早く新しいイメージに移行する必要があります。 移行は大まかに以下の手順で進めます。
 新しいAMIイメージに更新した Spot Fleet を作成する 古いインスタンスに残っているタスクをいい感じに終了する(ドレイン)  突然殺すとユーザーにエラーが見えてしまうので、受付中のリクエストを捌き切ってから終了しないといけない ドレインが始まるとECSがタスク数を調整するために、新しいインスタンスにタスクをお引越ししてくれる  ドレインが終了したら、古いインスタンスをシャットダウンする  ここで問題になってくるのが「古いインスタンスに残っているタスクをいい感じに終了する(ドレイン)」の部分。 コンソールからポチポチするのも面倒なので、自動化したいところ。 しかし、いろいろとドキュメントをあさってみたのですが、「APIかawscliを叩く」「SNSとAWS Lambda をうまいこと組み合わせて頑張る」みたいな方法しか見当たらない・・・ しかもAWSの公式ブログ</description>
    </item>
    
    <item>
      <title>IAM認証でAWS RDSへ接続するMySQLドライバを作った</title>
      <link>https://shogo82148.github.io/blog/2019/01/13/rdsmysql/</link>
      <pubDate>Sun, 13 Jan 2019 17:44:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2019/01/13/rdsmysql/</guid>
      <description>AWS RDS には IAM 認証を使って接続する機能があります。
 MySQL および PostgreSQL に対する IAM データベース認証 IAM 認証情報を使用して Amazon RDS への接続をユーザーに許可する方法を教えてください。  これを使って接続するGo言語のSQLドライバを書いてみました。
 https://github.com/shogo82148/rdsmysql  使い方 IAMデータベース認証はデフォルトで無効になっているので、まずはこれを有効化します。 次に AWSAuthenticationPlugin を認証方式に指定して、新しいユーザーを作りましょう。
 IAM データベース認証の有効化と無効化 データベースアカウントの作成  CREATE USER jane_doe IDENTIFIED WITH AWSAuthenticationPlugin AS &amp;#39;RDS&amp;#39;; 他のSQLドライバはimportするだけで使えるのですが、 rdsmysqlではAWSへの権限情報を設定しなければならない都合上、 sql.Register を自前で呼び出す必要があります。 とは言っても、AWS SDKがいい感じに設定ファイルとか環境変数とか読んでくれるので、 rdsmysql.Driver にAWSセッションを渡すだけです。
c := aws.NewConfig().WithRegion(&amp;#34;ap-northeast-1&amp;#34;) s := session.Must(session.NewSession(c)) d := &amp;amp;Driver{ Session: s, } sql.Register(&amp;#34;rdsmysql&amp;#34;, d) db, err := sql.Open(&amp;#34;rdsmysql&amp;#34;, &amp;#34;jane_doe:@tcp(db-foobar.ap-northeast-1.rds.amazonaws.com:3306)/&amp;#34;) if err !</description>
    </item>
    
    <item>
      <title>AWS LambdaでCGIを蘇らせる</title>
      <link>https://shogo82148.github.io/blog/2018/12/16/run-cgi-in-aws-lambda/</link>
      <pubDate>Sun, 16 Dec 2018 17:44:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2018/12/16/run-cgi-in-aws-lambda/</guid>
      <description>この記事は Perl Advent Calendar 2018の15日目の記事です。 (キリの良いところまでできたのと、記事が書かれていなかったので代打投稿)
Custom Runtime のリリースにより、AWS Lambda 上でPerlが動くようになりました。
 PerlをAWS Lambdaで動かす  次は AWS Lambda + CGI でサーバーレスだな&amp;hellip;
&amp;mdash; Ichinose Shogo (@shogo82148) 2018年12月8日 
ということで、やっていきましょう。
できたもの 動かすのはもちろん、 CGIアクセスカウンター 。 なんと嬉しいことに、最近になって WwwCounter の新バージョン(Ver3.16)がリリースされ、 Perl 5.26 に対応しました！
 2018-11-11 perl 5.26に対応。(Ver3.16)
 更新履歴によれば一つ前の Ver 3.15 のリリースは2003-03-23なので、なんと15年ぶりのアップデートです。 杜甫々さんの AWS Lambda で動かしてくれ！！ という声が聞こえてきそうですね・・・！！！
動いたーーーー！！！！
実装はこちら
 AWS::Lambda  ちなみにWwwCounterのアップデートはPerl 5.26で「@INCからカレントディレクトリが削除」された件への対応だと思います(コミットログがないので予想)。
 第46回　Perl 5.26で変わること（1） - Perl Hackers Hub  実装説明 「そもそもCGIってなんだ？」っていう人も多くなってきたと思うので、そこらへんの歴史の話にも軽く触れます。 この辺の歴史をリアルに体験したわけではないので、誤り等あればご指摘ください。</description>
    </item>
    
    <item>
      <title>PerlをAWS Lambdaで動かす</title>
      <link>https://shogo82148.github.io/blog/2018/11/30/perl-in-lambda/</link>
      <pubDate>Fri, 30 Nov 2018 17:44:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2018/11/30/perl-in-lambda/</guid>
      <description>AWS Lambda で Custom Runtime が発表されました！
 新機能 – AWS Lambda :あらゆるプログラム言語への対応と一般的なコンポーネントの共有 New for AWS Lambda – Use Any Programming Language and Share Common Components AWS Lambda Now Supports Custom Runtimes, and Enables Sharing Common Code Between Functions  Custom Runtime により好きなプログラミング言語でLambda関数を書くことができ、 いくつかの言語についてはAWSおよびパートナーから bootstrap が提供されます。
提供される言語にCOBOLが入って話題になっていますが、 当然ながら(？)Perlはありません。
Custom Runtimeは shell script でも書ける簡単なものなので、Perlでも書いてみました。
Perl in AWS Lambda 以下のスクリプトを bootstrap という名前で保存します。
#!/usr/bin/env perl use utf8; use warnings; use strict; use lib &amp;#34;$ENV{LAMBDA_TASK_ROOT}/local/lib/perl5&amp;#34;; use Furl; use JSON; my $furl = Furl-&amp;gt;new; my ($handler, $function) = split /\.</description>
    </item>
    
  </channel>
</rss>