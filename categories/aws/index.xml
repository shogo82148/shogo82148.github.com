<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aws on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/aws/</link>
    <description>Recent content in aws on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 16 Dec 2021 20:19:00 +0900</lastBuildDate><atom:link href="https://shogo82148.github.io/categories/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWSジャカルタリージョンでPerlランタイムが利用可能になりました</title>
      <link>https://shogo82148.github.io/blog/2021/12/16/aws-lambda-is-available-in-ap-southeast-3/</link>
      <pubDate>Thu, 16 Dec 2021 20:19:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2021/12/16/aws-lambda-is-available-in-ap-southeast-3/</guid>
      <description>Perl Advent Calendar 2021 の途中ですが、ここで臨時ニュースです。
 AWSジャカルタリージョン(ap-southeast-3) が利用可能になったので、 それに併せて AWS::Lambda Perl support for AWS Lambda Custom Runtime も公開しました。
 SHOGO/AWS-Lambda-0.0.34/Changes  以下のランタイムが利用可能です。
 arn:aws:lambda:ap-southeast-3:445285296882:layer:perl-5-34-runtime-al2-x86_64:1 arn:aws:lambda:ap-southeast-3:445285296882:layer:perl-5-32-runtime-al2-x86_64:1  Paws はこちら。
 arn:aws:lambda:ap-southeast-3:445285296882:layer:perl-5-34-paws-al2-x86_64:1 arn:aws:lambda:ap-southeast-3:445285296882:layer:perl-5-32-paws-al2-x86_64:1  Arm64 アーキテクチャについては未対応のようなので、AWS側の対応が終わり次第追って追加します。
 以上、臨時ニュースでした。
引き続き Perl Advent Calendar 2021 をお楽しみください。 まだカレンダーに若干の空きがあります。ブログ記事の投稿も大歓迎です！
参考  Now Open – AWS Asia Pacific (Jakarta) Region AWS::Lambda  </description>
    </item>
    
    <item>
      <title>AWS ClockBound で遊んでみた</title>
      <link>https://shogo82148.github.io/blog/2021/12/11/aws-cloud-bound/</link>
      <pubDate>Sat, 11 Dec 2021 00:00:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2021/12/11/aws-cloud-bound/</guid>
      <description>この記事は、フラー株式会社 Advent Calendar 2021 の11日目の記事です。 10日目は @nobux42 で「再読：リファクタリング・ウェットウェア」でした。
もう一ヶ月前になりますが、AWS から ClockBound という時間を扱うとても 地味な 有益なソフトウェアがリリースされました。
 Amazon Time Sync Service now makes it easier to generate and compare timestamps  地味過ぎてネタかぶりしなさそうなので 時間は現代の情報通信の基盤なので、しっかりと検証していきましょう！ 日本ではNICTの 時空標準研究室 が標準時を定めています。 名前からしてかっこいい。
ClockBound とは 一言でいうとGoogleの TrueTime のAWS版です。 TrueTime は Google が自社のサーバーセンターに設置している非常に正確な時計です。 Google が提供しているリレーショナルデータベースである Cloud Spanner は、 リージョンをまたいだ一貫性を保証するために TrueTime から生成されたタイムスタンプを利用しています。
ようするに ClockBound を使えば、 AWSのインフラ上に Google Cloud Spanner Clone を構築できる！(？)、というわけですね。 すごい！
ClockBoundD のインストール なんかすごそうなことがわかったので、とりあえず動かしてみましょう。
ClockBound はタイムスタンプを提供するデーモン「ClockBoundD」と、ClockBoundD からタイムスタンプを取得するためのライブラリ「ClockBoundC」に分かれています。 タイムスタンプの提供元がないと始まらないので、まずは ClockBoundD をインストールしていきましょう。</description>
    </item>
    
    <item>
      <title>AWS Lambda Perl Runtime の Arm64 互換レイヤーを公開しました</title>
      <link>https://shogo82148.github.io/blog/2021/10/06/aws-lambda-perl-runtime-on-arm64/</link>
      <pubDate>Wed, 06 Oct 2021 09:06:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2021/10/06/aws-lambda-perl-runtime-on-arm64/</guid>
      <description>AWS Lambda の Arm64 対応試してみた の続き。
 Achieve up to 34% better price/performance with AWS Lambda Functions powered by AWS Graviton2 processor  前回は クロスコンパイルが簡単な Go で試してみました。 でもやっぱり・・・皆さん Perl を動かしたいですよね？
というわけでご用意しました。
ARN 一覧 ランタイム本体 ランタイム本体のビルド済みレイヤーです。使い方は過去記事をどうぞ。
  AWS LambdaでCGIを蘇らせる
  arn:aws:lambda:ap-northeast-1:445285296882:layer:perl-5-32-runtime-al2-arm64:1
  arn:aws:lambda:ap-south-1:445285296882:layer:perl-5-32-runtime-al2-arm64:1
  arn:aws:lambda:ap-southeast-1:445285296882:layer:perl-5-32-runtime-al2-arm64:1
  arn:aws:lambda:ap-southeast-2:445285296882:layer:perl-5-32-runtime-al2-arm64:1
  arn:aws:lambda:eu-central-1:445285296882:layer:perl-5-32-runtime-al2-arm64:1
  arn:aws:lambda:eu-west-1:445285296882:layer:perl-5-32-runtime-al2-arm64:1
  arn:aws:lambda:eu-west-2:445285296882:layer:perl-5-32-runtime-al2-arm64:1
  arn:aws:lambda:us-east-1:445285296882:layer:perl-5-32-runtime-al2-arm64:1
  arn:aws:lambda:us-east-2:445285296882:layer:perl-5-32-runtime-al2-arm64:1
  arn:aws:lambda:us-west-2:445285296882:layer:perl-5-32-runtime-al2-arm64:1
  Paws AWS SDK for Perl のビルド済みレイヤーです。ランタイム本体と合わせてご使用ください。</description>
    </item>
    
    <item>
      <title>AWS Lambda の Arm64 対応試してみた</title>
      <link>https://shogo82148.github.io/blog/2021/10/01/arm64-in-aws-lambda/</link>
      <pubDate>Fri, 01 Oct 2021 21:36:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2021/10/01/arm64-in-aws-lambda/</guid>
      <description>AWS Lambda の ARM サポートが発表されましたね。
 Achieve up to 34% better price/performance with AWS Lambda Functions powered by AWS Graviton2 processor  というわけで早速触ってみました。
祝日 API で試してみる 先日公開した祝日API で試してみました。
 https://github.com/shogo82148/holidays-jp/pull/22  変更は実質2行です。簡単ですね！
diff --git a/holidays-api/Makefile b/holidays-api/Makefile index a39a3fa..0908902 100644 --- a/holidays-api/Makefile +++ b/holidays-api/Makefile @@ -1,6 +1,6 @@  .PHONY: build-HolidaysFunction build-HolidaysFunction: -	GOOS=linux GOARCH=amd64 go build -o $(ARTIFACTS_DIR)/bootstrap -tags lambda.norpc ./cmd/bootstrap +	GOOS=linux GOARCH=arm64 go build -o $(ARTIFACTS_DIR)/bootstrap -tags lambda.norpc .</description>
    </item>
    
    <item>
      <title>GitHub Actions &#43; OIDC Token の情報をAWSのセッションタグに設定してみた</title>
      <link>https://shogo82148.github.io/blog/2021/09/24/github-actions-oidc/</link>
      <pubDate>Fri, 24 Sep 2021 13:58:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2021/09/24/github-actions-oidc/</guid>
      <description>GitHub Actions で ID Token が使えるようになったと話題ですね。
うおー！サイコー！！！！！ https://t.co/2stS4miUOD
&amp;mdash; Tori Hara (@toricls) September 15, 2021  Ok I blogged about it. That&amp;#39;s how excited I am. 1. Deploy this CFN template
2. Write this GHA workflow
3. Never worry about IAM users again
https://t.co/KJrr2Jw4bE pic.twitter.com/9IcocgurxP
&amp;mdash; Aidan W Steele (@__steele) September 15, 2021  AWS IAM が OpenID Connect (OIDC) を使った認証 (sts:AssumeRoleWithWebIdentity) に対応しているので、認証プロバイダ(IdP)を用意してあげればシークレットの登録が不要になるということらしいです。 これは便利！
セッションタグを渡したい これはまさに「AWS_SECRET_ACCESS_KEY を GitHub Actions secrets へ突っ込むのに疲れた俺達は」で実現したかったことですね。 このままだとせっかく作ったアクションが不要になりそうで悔しいので このアクションにずっと追加したかった機能があるのですが、OIDCトークンを使うと簡単に実装できそうだったので、お試しで追加してみました。</description>
    </item>
    
    <item>
      <title>祝日APIを公開しました</title>
      <link>https://shogo82148.github.io/blog/2021/09/04/holidays-api-is-released/</link>
      <pubDate>Sat, 04 Sep 2021 18:17:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2021/09/04/holidays-api-is-released/</guid>
      <description>プログラマーなら誰しも一度は祝日について頭を悩ませたことがあるでしょう(要出典)。
日付が固定ならまだ楽なんですが、「春分の日」「秋分の日」のように天体の運行によって決まる祝日があったり、 ハッピーマンデー制度によって「成人の日(一月の第二月曜日)」のような曜日固定の祝日があったり、 振替休日という概念があったりと、ちゃんと考えるとかなり面倒です。
更に面倒なのが国の施策によってたまに変更になるという点です。 東京オリンピックの延期で祝日が移動したのは記憶に新しいですね。 前年の 12 月 4 日に法律が公布されるという、カレンダーの印刷会社泣かせなスケジュール変更です。
 2021 年の祝日移動について 東京五輪開催で夏の祝日が移動 〜各言語の祝日ライブラリの 2021 年の祝日対応を追ってみる〜  プログラムなら更新可能ですが、ライブラリとして組み込まれているとうっかり更新を忘れてしまうこともありますよね。 そういうわけで API として提供されていると嬉しいな、プログラミング言語に縛られることもないし、ということで作りました。
 github.com/shogo82148/holidays-jp holidays-jp.shogo82148.com  使い方 パスに日付を入力して GET リクエストを投げるだけのシンプルな API です。
ある年の祝日一覧を取得する GET /{year} で year の祝日一覧を返します。 以下は 2021 年の祝日一覧を返す例です。
curl https://holidays-jp.shogo82148.com/2021 | jq . { &amp;quot;holidays&amp;quot;: [ { &amp;quot;date&amp;quot;: &amp;quot;2021-01-01&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;元日&amp;quot; }, { &amp;quot;date&amp;quot;: &amp;quot;2021-01-11&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;成人の日&amp;quot; }, { &amp;quot;date&amp;quot;: &amp;quot;2021-02-11&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;建国記念の日&amp;quot; }, (snip) { &amp;quot;date&amp;quot;: &amp;quot;2021-11-23&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;勤労感謝の日&amp;quot; } ] } ある月の祝日一覧を取得する GET /{year}/{month} で月の祝日一覧を返します。 以下は 2021 年 1 月の祝日一覧を返す例です。</description>
    </item>
    
    <item>
      <title>EC2 Instance Metadata Service と Amazon Time Sync Service で IPv6 エンドポイントが利用可能になりました</title>
      <link>https://shogo82148.github.io/blog/2021/08/30/ipv6-metadata-endpoint-and-ntp-are-available/</link>
      <pubDate>Mon, 30 Aug 2021 22:39:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2021/08/30/ipv6-metadata-endpoint-and-ntp-are-available/</guid>
      <description>今日はちょっとした小ネタを
dependabot が作ったプルリクエストを整理していたら AWS Go SDK のリリースノートに面白そうなリリースを発見。
 Release v1.40.0 (2021-07-14)
aws/session: Support has been added for EC2 IPv6-enabled Instance Metadata Service Endpoints (#4006)
 こんなところにも IPv6 の波が！
早速試してみようと思ったんですが、なかなかうまく行かない。 今日ようやくやり方がわかったのでメモしておきます。
インスタンスメタデータ IPv6 エンドポイントを有効化する リリースのアナウンスによるとインスタンスメタデータサービス(IMDS)の IPv6 エンドポイントは明示的に有効化する必要があるそうです。
 IPv6 endpoints are now available for the Amazon EC2 Instance Metadata Service, Amazon Time Sync Service, and Amazon VPC DNS Server
To get started, you need to enable the IPv6 endpoint for IMDS on your EC2 Instances.</description>
    </item>
    
    <item>
      <title>Mackerelにおける「混乱した代理」問題に対応しよう</title>
      <link>https://shogo82148.github.io/blog/2021/08/26/confused-deputy-problem-on-mackerelio/</link>
      <pubDate>Thu, 26 Aug 2021 21:12:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2021/08/26/confused-deputy-problem-on-mackerelio/</guid>
      <description>最近 Mackerel の AWS インテグレーション機能にいくつかセキュリティ強化のアップデートが入りました。 (「最近」と言っても最も古いアップデートは 2 年前ですが・・・)
 AWS インテグレーションで IAM ロールによる認証利用時の権限チェック頻度を変更しました ほか AWS インテグレーション CloudFront 連携で取得できるメトリックを追加しました ほか 【リリース予告】AWS インテグレーションの権限チェックを強化していきます AWS Step Functions インテグレーションをリリースしました　ほか  これらのアップデートは「混乱した代理問題(Confused deputy problem)」に対応するものです。 僕が AWS インテグレーションの設定をしている際にふと 「この機能、攻撃に利用できるのでは？」 と思いついてしまったので、 Mackerel サポートに問題点を伝えて修正していただきました。
リリース記事に関連する AWS のドキュメントが貼ってありますが、正直 AWS のドキュメントは難しい・・・。 そういうわけで、Mackerel の AWS インテグレーションを例に「混乱した代理問題」を噛み砕いて解説しよう、というのが本記事の趣旨です。 (いちおう Mackerel のサポートから許可は頂いています。)
TL;DR 「詳しい解説とかいらない！」という方も、最低限これだけはやっておきましょう。
Mackerel の AWS インテグレーション を利用している場合、以下の項目を確認すること。
 Mackerel の AWS インテグレーション設定のページ で各設定の「編集」をクリックし、ロール ARN に緑のチェックマークが入っていること 連携用の AWS IAM Role に External ID (外部 ID)が設定されていること  設定されていても Mackerel-AWS-Integration になっている場合、それは古い設定です。今すぐ更新してください！    AWS インテグレーションのような「アクセス権の委任」を使った機能を提供する場合は以下の点に注意すること。</description>
    </item>
    
    <item>
      <title>AWS Lambda に EFS をマウントして Perl CGI 完全復活</title>
      <link>https://shogo82148.github.io/blog/2021/06/13/aws-lambada-efs-and-perl/</link>
      <pubDate>Sun, 13 Jun 2021 22:39:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2021/06/13/aws-lambada-efs-and-perl/</guid>
      <description>AWS Lambda で CGI を蘇らせる で蘇った CGI には致命的な問題点がありました。
カウンターの値が永続化されない
この問題を Elastic File System(EFS) をマウントすることで解決したよ、というお話です。
Amazon Elastic File System for AWS Lambda もう一年前になるんですが、 AWS Lambda の環境に Elastic File System(EFS) をマウントできるようになりました。
 新機能 – Lambda 関数の共有ファイルシステム – Amazon Elastic File System for AWS Lambda  従来 AWS Lambda でデーターを永続化するには DynamoDB, RDS, S3 といったデーターストアを別途用意する必要がありました。 ファイル書き込みができる領域として /tmp がありますが、 /tmp は 512MB に制限されていたり、永続化できなかったりと、用途は限定されます。 EFS がマウントできることによって実質これらの制限がなくなります。 プログラムからは普通のファイルとして見えるので、読み書きをするのも簡単です。
よし、じゃあ、 CGI の書き込み先として試してみるか！と思ったものの、 先のリリースを見つけたときには既に別の方がやってました。
 懐かしの CGI 掲示板スクリプトを AWS Lambda ＋ EFS で動かしてみた  AWS::Lambda を利用してもらって非常にありがたいのですが、作者が遅れをとるとは不覚・・・ 自ら二番煎じをする必要もないかと、ずっと放置していたのでした。</description>
    </item>
    
    <item>
      <title>AWS App Runner に Perl をデプロイしてみた</title>
      <link>https://shogo82148.github.io/blog/2021/06/06/perl-on-aws-app-runner/</link>
      <pubDate>Sun, 06 Jun 2021 06:41:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2021/06/06/perl-on-aws-app-runner/</guid>
      <description>先月 AWS App Runner という新サービスがリリースされました。
📣 新サービス #AWSAppRunner のローンチです！🚀
＼数クリックでソースコードやコンテナイメージをデプロイ！／
AWS Fargate より高い抽象度、あるいは AWS Lambda のようなスレッドではなくプロセスそのものを実行したかった方にぜひお試しいただきたいサービスです！1/nhttps://t.co/LPFNOP7CBT
&amp;mdash; Tori Hara (@toricls) May 18, 2021  既にたくさんのデプロイしてみた系の記事が公開されていますが、流石に(残念ながら？) Perl をデプロイしている人はいないですよね？ と言うわけで、ネタがかぶらないよう Perl でやってみましょう。
ソースコードは shogo82148/perl-on-aws-app-runner においてあります。
PSGI アプリを用意する Wikipedia の PSGI のページに書いてあった例をそのまま使います。
# app.psgi my $app = sub { return [200, [&amp;#39;Content-Type&amp;#39; =&amp;gt; &amp;#39;text/plain&amp;#39;], [&amp;#34;hello, world\n&amp;#34;]]; } Dockerfile を用意する PSGI アプリを起動するのに Plack を使用するので、 cpanfile に Plack への依存を書いておきます。
# cpanfile requires &amp;#39;Plack&amp;#39;; Perl の公式イメージをベースに、依存モジュールをインストールしてplackupするだけの 簡単な Dockerfile を書きます。</description>
    </item>
    
    <item>
      <title>Perl 5.34 がリリースされました</title>
      <link>https://shogo82148.github.io/blog/2021/05/22/perl-5.34-is-released/</link>
      <pubDate>Sat, 22 May 2021 15:44:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2021/05/22/perl-5.34-is-released/</guid>
      <description>Perl 5.34 がリリースされましたね。 と、言うわけで、 AWS::Lambda と actions-setup-perl に Perl 5.34 を追加しました。
AWS::Lambda AWS Lambda Layers の ARN 一覧はこちら。 具体的な使い方は過去の記事を参考にどうぞ。 もちろん大阪リージョンも入ってますよ！
 Amazon Linux 2 ベース Perl ランタイム  arn:aws:lambda:af-south-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:ap-east-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:ap-northeast-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:ap-northeast-2:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:ap-northeast-3:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:ap-south-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:ap-southeast-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:ap-southeast-2:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:ca-central-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:eu-central-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:eu-south-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:eu-west-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:eu-west-2:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:eu-west-3:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:me-south-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:sa-east-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:us-east-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:us-east-2:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:us-west-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:us-west-2:445285296882:layer:perl-5-34-runtime-al2:1   Paws レイヤー  arn:aws:lambda:af-south-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:ap-east-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:ap-northeast-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:ap-northeast-2:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:ap-northeast-3:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:ap-south-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:ap-southeast-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:ap-southeast-2:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:ca-central-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:eu-central-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:eu-south-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:eu-west-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:eu-west-2:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:eu-west-3:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:me-south-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:sa-east-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:us-east-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:us-east-2:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:us-west-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:us-west-2:445285296882:layer:perl-5-34-paws-al2:1    合わせて Docker Image も公開済みです。</description>
    </item>
    
    <item>
      <title>AWS Lambda Perl Runtime Layer in 大阪リージョン を公開しました</title>
      <link>https://shogo82148.github.io/blog/2021/03/02/perl-lambda-in-ap-northeast-3/</link>
      <pubDate>Tue, 02 Mar 2021 14:50:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2021/03/02/perl-lambda-in-ap-northeast-3/</guid>
      <description>AWS 大阪リージョンが一般利用可能になりました！
 AWS Asia Pacific (Osaka) Region Now Open to All, with Three AZs and More Services [AWS] 日本 2 番目となる大阪リージョン ap-northeast-3 が利用可能になりました ［速報］「AWS 大阪リージョン」正式オープン。大阪ローカルリージョンを拡張し 3 つのアベイラビリティゾーンから構成、事前申し込みなど不要に  というわけで、 AWS Lambda Perl Runtime AWS::Lambda in Osaka を公開しました。
 ランタイム本体: arn:aws:lambda:ap-northeast-3:445285296882:layer:perl-5-32-runtime-al2:1 AWS SDK for Perl: arn:aws:lambda:ap-northeast-3:445285296882:layer:perl-5-32-paws-al2:1 Zip Archive: https://shogo82148-lambda-perl-runtime-ap-northeast-3.s3.amazonaws.com/perl-5-32-runtime-al2.zip Zip Archive: https://shogo82148-lambda-perl-runtime-ap-northeast-3.s3.amazonaws.com/perl-5-32-paws-al2.zip  大阪の Perl Monger の皆さん、ぜひご利用ください。</description>
    </item>
    
    <item>
      <title>AWS Lambda &#43; S3 を使ってyumレポジトリを作った</title>
      <link>https://shogo82148.github.io/blog/2021/02/21/private-yum-repo-on-s3/</link>
      <pubDate>Sun, 21 Feb 2021 08:11:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2021/02/21/private-yum-repo-on-s3/</guid>
      <description>世の中にはたくさんの OSS が公開されていて、それを Linux 上で動かす選択肢も多様になってきました。 今まで通り自前でビルドするのはもちろん, Go のようにシングルバイナリになってるならバイナリ落としてくるだけのものもあります。 DockerHub で公開されているものなら Docker でコンテナイメージをダウンロードするという手もあります。 Homebrew on Linux なんてものも登場しましたね。
選択肢が増えて動かすだけなら楽になったんですが、 事前の環境構築が最小限で済んで、バージョン管理もできて、依存もいい感じに解決してくれて、 といろいろ考えると結局は Red Hat 系なら標準のパッケージマネージャーである yum が楽なんですよね。
そういうわけで JFrog Bintray にバイナリをあげて、yum レポジトリを公開していました。 ところが今月になって 突然の Bintray 終了のお知らせ！！！
 Into the Sunset on May 1st: Bintray, JCenter, GoCenter, and ChartCenter  前置きが長くなりましたね。 要するに Bintray からのお引越しを考えないといけなくなったので、 yum レポジトリを AWS S3 上に移行した、というお話です。
標準的な yum レポジトリの作り方 yum レポジトリを作るには、まず公開したい rpm パッケージが必要です。 Bintray だろうが S3 だろうが、rpm 作成の手順は一緒なので省略します。
rpm さえできてしまえば、レポジトリの作成は非常に簡単です。 createrepo コマンドをインストールして実行するだけ。</description>
    </item>
    
    <item>
      <title>AWS Lambda Perl Runtime on Amazon Linux 2 を公開しました</title>
      <link>https://shogo82148.github.io/blog/2020/08/15/perl-lambda-runtime-on-amazon-linux2/</link>
      <pubDate>Sat, 15 Aug 2020 20:44:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2020/08/15/perl-lambda-runtime-on-amazon-linux2/</guid>
      <description>Amazon Linux 2 への移行が進む AWS Lambda ですが、 ついに Custom Runtime にも Amazon Linux 2 がやってきました。
 AWS Lambda now supports custom runtimes on Amazon Linux 2  同時に provided.al2 の Docker Image も公開されたので、 それを利用して Amazon Linux 2 対応の Perl Runtime Layer を作成しました。
 AWS::Lambda  ビルド済み公開 Perl Runtime Layer リージョン毎のArn一覧はこちら
 Perl 5.32  arn:aws:lambda:af-south-1:445285296882:layer:perl-5-32-runtime-al2:1 arn:aws:lambda:ap-east-1:445285296882:layer:perl-5-32-runtime-al2:1 arn:aws:lambda:ap-northeast-1:445285296882:layer:perl-5-32-runtime-al2:1 arn:aws:lambda:ap-northeast-2:445285296882:layer:perl-5-32-runtime-al2:1 arn:aws:lambda:ap-south-1:445285296882:layer:perl-5-32-runtime-al2:1 arn:aws:lambda:ap-southeast-1:445285296882:layer:perl-5-32-runtime-al2:1 arn:aws:lambda:ap-southeast-2:445285296882:layer:perl-5-32-runtime-al2:1 arn:aws:lambda:ca-central-1:445285296882:layer:perl-5-32-runtime-al2:1 arn:aws:lambda:eu-central-1:445285296882:layer:perl-5-32-runtime-al2:1 arn:aws:lambda:eu-south-1:445285296882:layer:perl-5-32-runtime-al2:1 arn:aws:lambda:eu-west-1:445285296882:layer:perl-5-32-runtime-al2:1 arn:aws:lambda:eu-west-2:445285296882:layer:perl-5-32-runtime-al2:1 arn:aws:lambda:eu-west-3:445285296882:layer:perl-5-32-runtime-al2:1 arn:aws:lambda:me-south-1:445285296882:layer:perl-5-32-runtime-al2:1 arn:aws:lambda:sa-east-1:445285296882:layer:perl-5-32-runtime-al2:1 arn:aws:lambda:us-east-1:445285296882:layer:perl-5-32-runtime-al2:1 arn:aws:lambda:us-east-2:445285296882:layer:perl-5-32-runtime-al2:1 arn:aws:lambda:us-west-1:445285296882:layer:perl-5-32-runtime-al2:1 arn:aws:lambda:us-west-2:445285296882:layer:perl-5-32-runtime-al2:1    --runtime provided.</description>
    </item>
    
    <item>
      <title>Yet Another AWS X-Ray Go SDK でログの関連付けをサポートした</title>
      <link>https://shogo82148.github.io/blog/2020/07/06/aws-xray-yasdk-go-supports-logs-correlation/</link>
      <pubDate>Mon, 06 Jul 2020 22:49:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2020/07/06/aws-xray-yasdk-go-supports-logs-correlation/</guid>
      <description>僕が管理しているサービスでは、ALB が発行する Trace ID を調査時の手がかりとして使えるようログに出力しています。 これのおかげで、Nginx, アプリケーション, その他AWSのマネージドサービス, etc. といった異なるコンポーネントであっても、関連するログを抽出ができ、 障害発生時の役に立っています。 しかし、肝心の抽出作業がマネージドコンソールぽちぽちなため、完全に職人芸になっているというのが現状でした。
解決のための良いツールがないかな、と目をつけたのが CloudWatch ServiceLens です。 CloudWatch メトリックとログ、AWS X-Ray からのトレースを結び付けて、直感なインターフェースで分析できるというもの。
 Amazon CloudWatch ServiceLens の発表  AWS X-Ray のトレース結果を送るのは、以前開発した Yet Another AWS X-Ray SDK for Go でできます。 CloudWatch Logs への出力方法は色々ありますが、僕は自作の cloudwatch-logs-agent-lite を使っています。
材料はそろった、さあ、ServiceLens で分析だ！と行きたいところですが、 ただ単にこれらの情報を送りつけるだけでは、得られる情報は X-Ray 単体、CloudWatch Logs 単体で使ったときと大差ありません。 X-Ray のトレース結果とログの関連付けが行われていないので、結局 Trace ID を使って CloudWatch Logs を検索する必要が出てきてしまいます。
ドキュメントを見る限り、2020-07-06現在 AWS X-Ray SDK for Java だけがログ関連付け機能に対応しているようです。 JavaにできてGoにできないわけがないだろう・・・ということで移植してきました。
使い方 aws-xray-yasdk-go の v1.1.1 移行で対応しているので、そのバージョンを落としてきます。</description>
    </item>
    
    <item>
      <title>Yet Another AWS X-Ray Go SDK を作った</title>
      <link>https://shogo82148.github.io/blog/2020/03/30/aws-xray-yasdk-go/</link>
      <pubDate>Mon, 30 Mar 2020 06:37:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2020/03/30/aws-xray-yasdk-go/</guid>
      <description>AWS X-Ray Go SDK の地雷処理をしている話 で投げたSQLのプルリクエスト も無事マージしてもらい、 その後もちょくちょくプルリクエストを投げて地雷処理をしていたんですが、我慢できずにやってしまいました・・・。
 Yet Another AWS X-Ray SDK for Go  そもそも AWS X-Ray ってなんだ、という方は以下のリンクから @fujiwara さんの記事へ飛べるのでどうぞ。
 AWS Lambda Perl Runtime で AWS X-Ray を使えるようになりました  使い方 だいたいオフィシャルSDKと一緒です。 ただし、パッケージ分割をしたので、呼び出す関数名等はちょっと変わってます。 他にも微妙に挙動が違う箇所があります。
環境変数の設定 AWS_XRAY_DAEMON_ADDRESS, AWS_XRAY_CONTEXT_MISSING 等の環境変数の設定項目は本家と合わせました。 ただし、以下の点が本家とは異なります。
 コード内の設定が優先されます。 環境変数はコード内で明示的に設定が行われなかった場合のフォールバックです。 AWS_XRAY_CONTEXT_MISSING のデフォルト値は LOG_ERROR です。  セグメントの作り方 オフィシャルSDKは seg.Close(err) のようにセグメントを閉じるときにエラーを渡します。 Go には defer という便利な機能があるので、セグメントを閉じるときもこれを使いたいところです。 だたエラーを正しく受け取るには、以下のように戻り値に名前をつけて、defer 部分を無名関数の呼び出しにする必要があります。
// オフィシャルSDKの場合 import &amp;#34;github.com/aws/aws-xray-sdk-go/xray&amp;#34; func DoSomethingWithSubsegment(ctx context.Context) (err error) { ctx, seg := xray.</description>
    </item>
    
    <item>
      <title>AWS X-Ray Go SDK の地雷処理をしている話</title>
      <link>https://shogo82148.github.io/blog/2020/02/11/aws-xray-golang/</link>
      <pubDate>Tue, 11 Feb 2020 06:37:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2020/02/11/aws-xray-golang/</guid>
      <description>AWS Lambda Perl Runtime で AWS X-Ray を使えるようになりました で紹介した AWSの分散アプリケーションの分析サービス AWS X-Ray。 Perl から使えるようにしたももの、自分自身は最近 Perl をあまり使っていないことに気がついた！！ので、AWSが提供しているGo実装である aws/aws-xray-sdk-goに 手を出してみることにしました。
結果、X-Rayのサービスマップやトーレスが見れるようになって便利！・・・にはなったんですが、そこまでの道のりが長かった。 「 @fujiwara さんのYAPC::Tokyo 2019での発表 から1年近く経ってるしそろそろ安定してきているでしょ！」と 軽い気持ちで始めたのが良くない。 色々と地雷(？)を踏んだので、記録として残しておきます。
依存ライブラリのcontext対応が地味に辛い X-Ray で実行をトレースするには、「今実行している関数がどこから呼ばれたのか？」という情報をうまいこと伝える必要があります。 Perlで使われているような黒魔術はGoでは使えないので、 context.Context を地道に引数に渡していくことになります。
まあ、こんなこともあろうかと、context.Context にはバッチリ対応してあるからサクッと行けるでしょ！
と思ってたんですが、現実はそうは甘くなかった。 X-Rayを入れようとしたプロジェクトではWebフレームワークとしてgoadesign/goaを使っています。 GoaのHTTPハンドラーには context.Context が渡ってくるので油断していたのですが、 contextの親をたどっていくと行き着く先は context.Background() (HTTPハンドラーなので request.Context() であってほしい)。 なんとなく context.Context 対応詐欺にあった気分です。
Goaは現在 v2, v3 の開発がメインで現在使っているのは v1 です。 v1からv3へのアップグレードには大幅な書き換えが必要なこと、アップグレードしたとしても直っている保証がないこと、 最近 Goa v1 のリリースが滞りがちなこと、などなどの理由から結局フォークしてくることにしました。
 shogo82148/goa-v1  AWS X-Ray Go SDK 自体の問題ではないのですが、 Contextってタイムアウトをうまく処理するための仕組みなので、実装漏れがちですよね。 皆さん実装するときやライブラリの選定には気をつけましょう。
SQLクエリを実行する関数のシグネチャーが微妙に違う これに関しては @acidlemon 先生の kamakura.</description>
    </item>
    
    <item>
      <title>AWS SDK for Perl Lambda Layerを公開しました</title>
      <link>https://shogo82148.github.io/blog/2019/07/16/aws-lambda-paws-layer/</link>
      <pubDate>Tue, 16 Jul 2019 22:43:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2019/07/16/aws-lambda-paws-layer/</guid>
      <description>ハイラルからこんにちは。
AWS LambdaでCGIを蘇らせる で作成した Perl Custom Runtime 用の AWS Lambda Layer ですが、 中でイベントのハンドリングをしているモジュールを AWS::Lambda として CPAN で公開したところ、 AWS SDKを入れて欲しい との要望が来ました。 完全にネタとして作成したモジュールですが、いるんですね使う人。 というわけで AWS SDK を含んだ AWS Lambda Layer を公開しました。
使い方 公開レイヤーを使う AWS公式ではPerl用のSDKは提供していないので、Pawsという非公式SDKを使いました。 何も考えずにテキトウにインストールしてみたらSDKだけで121MBありました。 Perl本体が85MBなのでSDKのほうがでかい。 AWS Lambdaで作成できる関数は250MBが上限なので、流石に半分SDKに持っていかれるのはつらかろうと、Perl本体とは別のレイヤーに分けてあります。
レイヤーは最大5つまで登録できるので、Perl本体(例: arn:aws:lambda:ap-northeast-1:445285296882:layer:perl-5-30-runtime:2 )に加えて 以下のレイヤーを追加することで、Paws を呼び出すことができるようになります。
 arn:aws:lambda:ap-east-1:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:ap-northeast-1:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:ap-northeast-2:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:ap-south-1:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:ap-southeast-1:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:ap-southeast-2:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:ca-central-1:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:eu-central-1:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:eu-west-1:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:eu-west-2:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:eu-west-3:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:sa-east-1:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:us-east-1:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:us-east-2:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:us-west-1:445285296882:layer:perl-5-30-paws:1 arn:aws:lambda:us-west-2:445285296882:layer:perl-5-30-paws:1  いつの間にかマネージドコンソールから編集ができるようになっていたので、開発がはかどりますね。
カスタムランタイムでもAWS Lambdaのマネージドコンソールから内容の編集ができる・・・？ Perl も編集できるぞ・・・ pic.twitter.com/4228rG0hca
&amp;mdash; Ichinose Shogo (@shogo82148) July 16, 2019  ZIP アーカイブを使う ビルド済みのZIPアーカイブも公開しています。 以下のURLを指定して新規レイヤーを作成することで利用できます。</description>
    </item>
    
    <item>
      <title>CloudFormationのMackerel用インテグレーションを作ってる話</title>
      <link>https://shogo82148.github.io/blog/2019/04/17/cfn-mackerel-macro/</link>
      <pubDate>Wed, 17 Apr 2019 18:26:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2019/04/17/cfn-mackerel-macro/</guid>
      <description>Mackerel は mkr コマンドを用いて cli から操作ができます。 mkr コマンドを用いると 監視ルールを GitHub で管理 したり、 カスタムダッシュボードを管理したり、といったことができます。 しかし、個人的に以下のような不満があります。
 サービス、ロール、ホスト、新ダッシュボード等々、監視設定以外のリソースに対応していない  旧ダッシュボードは対応しているんだけど、新ダッシュボード対応がまだ 新ダッシュボードのUIは使いやすくてすごくいいんだけど、コピペや一斉置換ができないので、テキストで管理したい   出力がJSONなのつらい  JSON手で書くの難しくないですか？   メトリックスの送信設定と監視設定の管理が別になってしまう  カスタムメトリックス送っているのに監視設定を忘れた、みたいなことが起こる    メトリックスの送信設定については、以前 サーバーレスでCloudWatchメトリクスをMackerelに転送する で CloudFormation上での管理を実現しました。 ここにさらに Mackerel の監視設定を追加できれば、最強なのでは？とやってみました。
例 あれこれ説明する前に例を見てもらったほうがわかりやすいと思うので、こんなことができますよ、という設定例から。
例1: レスポンスタイムの99%パーセンタイルを監視する Mackerel の AWSインテグレーション は ALB に対応していますが、 レスポンスタイムのメトリックスは平均レスポンスタイムだけです。 「平均」は代表的な統計値ですが、全体としては速いんだけど一部のリクエストだけ遅い、という状況を見逃してしまいます。 レスポンスタイムの大まかな分布をパーセンタイルで把握したい、ということはよくありますよね？ (K社でZabbixを使って監視していたときによくお世話になった)
今回作ったインテグレーションを使えば、以下のように「Mackerelのサービス定義」「メトリックスの転送設定」「監視設定」が CloudFormation のテンプレートとして表現できます。
AWSTemplateFormatVersion:2010-09-09# Type: Mackerel::* を使うためのおまじないTransform:- AWS::Serverless-2016-10-31- Mackerel- JSONStringResources:MackerelService:Type:Mackerel::ServiceProperties:Name:&amp;#34;awesome-service&amp;#34;# メトリックスを転送する Lambda 関数MetricsForwarder:Type:AWS::Serverless::ApplicationProperties:Location:ApplicationId:arn:aws:serverlessrepo:us-east-1:445285296882:applications/mackerel-cloudwatch-forwarderSemanticVersion:0.0.9Parameters:ParameterName:&amp;#34;/api-keys/api.mackerelio.com/headers/X-Api-Key&amp;#34;ForwardSettings:!GetAtt MetricsForwarderSettings.Query# CloudWatch から99%パーセンタイルを取得するMetricsForwarderSettings:Type:JSON::StringProperties:Query:- service:!GetAtt MackerelService.</description>
    </item>
    
    <item>
      <title>外部サービスでもIAM Roleで認証がしたい！</title>
      <link>https://shogo82148.github.io/blog/2019/02/12/ssm-sign-proxy/</link>
      <pubDate>Tue, 12 Feb 2019 12:46:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2019/02/12/ssm-sign-proxy/</guid>
      <description>背景 外部サービスのAPIやWebHookを叩くときには、多くの場合 API トークンが必要になります。 もちろん API トークン無しでも叩けるサービスはありますが、GitHub APIのようにトークン無しではリクエスト数が大きく制限されたり、 一部機能が制限されてしまう場合があります。
外部連携サービスが増えてくると、このAPIトークンをどうやって管理するかが問題になってきます。 プロダクションに投入されているサービスは普通複数のサーバーから構成されており、各サーバーにAPIトークンを配布するのはちょっと面倒です。 この問題に対して、以下のようなことが行われて来ました。
 プライベートネットワークからのアクセスに限定した Proxy を立てる APIトークンの管理は Proxy に任せる  DevOpsが注目され、Slackの利用が広まったころに、このような目的で書かれたProxyサーバーがよく登場しました。
 社内IRCをSlackに移行した時にやったこと  この記事で紹介されている kayac/nopaste   Slackboard〜Slackプロキシサーバ in Go〜 Slackプロキシサーバ〜slackboard〜を利用したメルカリのSlack活用法 App::Ikachan - 様々なサーバのバッチ処理の結果等を IRC のチャンネルに通知するサーバ  (IRCはHTTPで動いているわけではないし、大本の目的もコネクション維持だけど、認証も代理でやってくれる)    しかし、これらのサーバーはSlack専用だったりIRC専用だったりします。 Slackだけじゃなくって、GitHubにコメント登録したり、Mackerelのグラフアノテーションを投稿したり、 他のサービスとも連携したい！
最近はどんなAPIもHTTPで提供されるようになったので(IRCは・・・ウッ・・・そんなのなかった)、もっと汎用的に書けるのではとやってみました。
実装 APIトークンの保管場所として AWS Systems Manager Parameter Store を採用しました。 Parameter Store からAPIトークンを取り出す部分と、実際にAPIを叩く部分は AWS Lambda を使用します。 各サーバーに Forward Proxy デーモンを立てておき、APIを使いたいアプリケーションはこのProxyを経由するようにします。
この図ではEC2インスタンスを例にしていますが、IAM Roleを付与できるAWSのサービスであれば何でも (ECS, Lambda, CodeBuild, etc.) APIにアクセスすることができます。</description>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt の証明書取得を AWS Lambda でやってみた</title>
      <link>https://shogo82148.github.io/blog/2019/02/07/acme-cert-updater/</link>
      <pubDate>Thu, 07 Feb 2019 19:22:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2019/02/07/acme-cert-updater/</guid>
      <description>背景 ここ数年で暗号化されていないHTTPは減り、常時TLSが当たり前になってきました。 公開用のページはもちろん、開発段階のページでもTLSは必須です。 普段はAWS上で開発をしているので、AWS Certificate Managerを利用することが多いのですが、 ちょっとしたお遊びにELBやCloudFormationを使うのはオーバーキルです。 そこで EC2 にもインストールできて、無料で使える Let&amp;rsquo;s Encrypt を使って証明書を発行することを考えました。
Let&amp;rsquo;s Encrypt で発行できる証明書は期間が90日と短く、60日ごとの自動更新が推奨されています。 証明局とAPIとAPIクライアントの実装例は提供するから、あとの自動化部分は自前で頑張ってねという感じなので、自動化部分を頑張らないといけません。 今回は実行環境として AWS Labda、ACME(Automatic Certificate Management Environment)クライアントとして certbot、 認証方法に dns-01、認証に必要なDNSレコードの書き換えに AWS Route 53 を使用する、という構成にしました。
ソースコードをGitHubに挙げたのと、前回と同様に AWS Serverless Application Repository へ上げたので、ぜひご利用ください。
 shogo82148/acme-cert-updater shogo82148/acme-cert-updater on AWS Serverless Application Repository  関連手法 Amazon Linux 2 に certbot をインストールして使う Amazon Linux 2 のドキュメントに TLS 対応のウェブサーバーを立てる例が載っています。 Let&amp;rsquo;s Encrypt で証明書を取る方法も紹介されているので、まずはこれを利用することを考えました。
 付録: Amazon Linux 2 での Let&amp;rsquo;s Encrypt と Certbot の使用 - チュートリアル: Amazon Linux 2 で SSL/TLS を使用できるように Apache ウェブサーバーを設定する  この方法は以下の理由から見送りました。</description>
    </item>
    
    <item>
      <title>サーバーレスでCloudWatchメトリクスをMackerelに転送する</title>
      <link>https://shogo82148.github.io/blog/2019/01/31/mackerel-cloudwatch-transfer/</link>
      <pubDate>Thu, 31 Jan 2019 17:44:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2019/01/31/mackerel-cloudwatch-transfer/</guid>
      <description>背景 サーバーの監視にMackerelを使っているのですが、 用意されているメトリクスでは足りずカスタムメトリクスを追加することが多々あります。 Mackerel Agent Pluginsを利用すればメトリクスを増やすこと自体は簡単なのですが、 Agentを設置するインスタンスが増えるので、サーバー保守の手間が増えてしまいます。
僕のユースケースでは監視対象はたいていAWSのマネージド・サービスなので、 AWS CloudWatch に投稿されたメトリクスが Mackerel で見れれば十分なことが多いです。
そこで、以下の記事を参考に AWS Lambda と CloudWatch Events を組み合わせて、Mackerelへメトリクスを転送するスクリプトを書いてみました。
 Amazon LambdaでCloudWatchのメトリクスをMackerelに監視させる  デプロイしてみる 今回はなんと！皆さんの AWSマネジメントコンソールから、クリックひとつでデプロイできるようにしてみました！
 mackerel-cloudwatch-forwarder  ・・・と、その前に下準備が必要です。 MackerelのダッシュボードからAPIキーをコピーしてきて、 AWS Systems Manager パラメータストアに Secure String として登録しておきます。 スクショでは Mackerel のものだと分かりやすいよう /development/api.mackerelio.com/headers/X-Api-Key という名前をつけました。 この名前を後で使うので覚えておきましょう。
次に AWS Lambda の画面を開き、「関数の作成」をクリックします。
「一から作る」「設計図」「AWS Serverless Application Repository」の3つの選択肢が表れるので、 「AWS Serverless Application Repository」 を選択します。 検索BOXに「Mackerel」と入れると、mackerel-cloudwatch-forwarderが 出てくるので、それを選択します。 なお、この選択肢はデフォルトでは表示ないので、「Show apps that create custom IAM roles or resource policies」にチェックを入れましょう。</description>
    </item>
    
    <item>
      <title>CloudFormationでECSタスクのドレインをやる</title>
      <link>https://shogo82148.github.io/blog/2019/01/30/drain-ecs-task-with-cloudformation/</link>
      <pubDate>Wed, 30 Jan 2019 17:44:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2019/01/30/drain-ecs-task-with-cloudformation/</guid>
      <description>やってみたはいいものの、1年後には仕組みを忘れていそうなのでメモ。
背景 昔はサービス毎にポコポコEC2インスタンスを立てていたのですが、 幸か不幸かインスタンスのリソースが余り気味でした。 そこで、最近流行りのコンテナ技術に乗っかって Amazon ECS (Amazon Elastic Container Service) を使って、 ひとつのインスタンスに複数のサービスを載せようと目論みました。
ちょうどその頃、Spot Fleetというものを使うと、 スポットインスタンスをお手軽に借りられるという話を聞いたので、 Spot Fleet + ECS で格安クラスターを作ってみよう！と手を出してみました。
 (・・・もちろん、Fargateが東京リージョンで使えるようになったことは知っているけれど、スポットインスタンスの価格に負けてしまった・・・)
 AWS Fargate 東京リージョン サービス開始のお知らせ AWS Fargate で最大 50% の値下げを発表  ECS最適化インスタンスの更新問題 クラスターを作るだけなら、そう難しくはなく、インスタンス起動時にAmazon ECS-Optimized Amazon Linux AMIを使うだけです。 問題はこのイメージは定期的に更新される、ということです。 更新情報を流しているSNSトピックがあるので、これをサブスクライブしておくと、時たま更新通知が来ます。
 Amazon ECS-Optimized Amazon Linux AMI の更新の通知のサブスクライブ  この更新には機能追加はもちろん、セキュリティーフィックスも含まれているので、 なるべく早く新しいイメージに移行する必要があります。 移行は大まかに以下の手順で進めます。
 新しいAMIイメージに更新した Spot Fleet を作成する 古いインスタンスに残っているタスクをいい感じに終了する(ドレイン)   突然殺すとユーザーにエラーが見えてしまうので、受付中のリクエストを捌き切ってから終了しないといけない ドレインが始まるとECSがタスク数を調整するために、新しいインスタンスにタスクをお引越ししてくれる  ドレインが終了したら、古いインスタンスをシャットダウンする  ここで問題になってくるのが「古いインスタンスに残っているタスクをいい感じに終了する(ドレイン)」の部分。 コンソールからポチポチするのも面倒なので、自動化したいところ。 しかし、いろいろとドキュメントをあさってみたのですが、「APIかawscliを叩く」「SNSとAWS Lambda をうまいこと組み合わせて頑張る」みたいな方法しか見当たらない・・・ しかもAWSの公式ブログ</description>
    </item>
    
    <item>
      <title>IAM認証でAWS RDSへ接続するMySQLドライバを作った</title>
      <link>https://shogo82148.github.io/blog/2019/01/13/rdsmysql/</link>
      <pubDate>Sun, 13 Jan 2019 17:44:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2019/01/13/rdsmysql/</guid>
      <description>AWS RDS には IAM 認証を使って接続する機能があります。
 MySQL および PostgreSQL に対する IAM データベース認証 IAM 認証情報を使用して Amazon RDS への接続をユーザーに許可する方法を教えてください。  これを使って接続するGo言語のSQLドライバを書いてみました。
 https://github.com/shogo82148/rdsmysql  使い方 IAMデータベース認証はデフォルトで無効になっているので、まずはこれを有効化します。 次に AWSAuthenticationPlugin を認証方式に指定して、新しいユーザーを作りましょう。
 IAM データベース認証の有効化と無効化 データベースアカウントの作成  CREATEUSERjane_doeIDENTIFIEDWITHAWSAuthenticationPluginAS&amp;#39;RDS&amp;#39;;他のSQLドライバはimportするだけで使えるのですが、 rdsmysqlではAWSへの権限情報を設定しなければならない都合上、 sql.Register を自前で呼び出す必要があります。 とは言っても、AWS SDKがいい感じに設定ファイルとか環境変数とか読んでくれるので、 rdsmysql.Driver にAWSセッションを渡すだけです。
c := aws.NewConfig().WithRegion(&amp;#34;ap-northeast-1&amp;#34;) s := session.Must(session.NewSession(c)) d := &amp;amp;Driver{ Session: s, } sql.Register(&amp;#34;rdsmysql&amp;#34;, d) db, err := sql.Open(&amp;#34;rdsmysql&amp;#34;, &amp;#34;jane_doe:@tcp(db-foobar.ap-northeast-1.rds.amazonaws.com:3306)/&amp;#34;) if err != nil { log.Fatal(err) } defer db.Close() あとは通常のMySQLドライバとして呼び出すだけです。 go-sql-driver/mysql のラッパーになっているので、 DNS等の書き方はこれに準じます。 認証部分は rdsmysql がやってくれるので、パスワードは空でOKです。 パスワードの管理から開放されて楽ですね！</description>
    </item>
    
    <item>
      <title>AWS LambdaでCGIを蘇らせる</title>
      <link>https://shogo82148.github.io/blog/2018/12/16/run-cgi-in-aws-lambda/</link>
      <pubDate>Sun, 16 Dec 2018 17:44:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2018/12/16/run-cgi-in-aws-lambda/</guid>
      <description>この記事は Perl Advent Calendar 2018の15日目の記事です。 (キリの良いところまでできたのと、記事が書かれていなかったので代打投稿)
 Custom Runtime のリリースにより、AWS Lambda 上でPerlが動くようになりました。
 PerlをAWS Lambdaで動かす  次は AWS Lambda + CGI でサーバーレスだな...
&amp;mdash; Ichinose Shogo (@shogo82148) 2018年12月8日  ということで、やっていきましょう。
できたもの 動かすのはもちろん、 CGIアクセスカウンター 。 なんと嬉しいことに、最近になって WwwCounter の新バージョン(Ver3.16)がリリースされ、 Perl 5.26 に対応しました！
 2018-11-11 perl 5.26に対応。(Ver3.16)
 更新履歴によれば一つ前の Ver 3.15 のリリースは2003-03-23なので、なんと15年ぶりのアップデートです。 杜甫々さんの AWS Lambda で動かしてくれ！！ という声が聞こえてきそうですね・・・！！！
動いたーーーー！！！！
実装はこちら
 AWS::Lambda   ちなみにWwwCounterのアップデートはPerl 5.26で「@INCからカレントディレクトリが削除」された件への対応だと思います(コミットログがないので予想)。
 第46回　Perl 5.26で変わること（1） - Perl Hackers Hub  実装説明 「そもそもCGIってなんだ？」っていう人も多くなってきたと思うので、そこらへんの歴史の話にも軽く触れます。 この辺の歴史をリアルに体験したわけではないので、誤り等あればご指摘ください。</description>
    </item>
    
    <item>
      <title>PerlをAWS Lambdaで動かす</title>
      <link>https://shogo82148.github.io/blog/2018/11/30/perl-in-lambda/</link>
      <pubDate>Fri, 30 Nov 2018 17:44:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2018/11/30/perl-in-lambda/</guid>
      <description>AWS Lambda で Custom Runtime が発表されました！
 新機能 – AWS Lambda :あらゆるプログラム言語への対応と一般的なコンポーネントの共有 New for AWS Lambda – Use Any Programming Language and Share Common Components AWS Lambda Now Supports Custom Runtimes, and Enables Sharing Common Code Between Functions  Custom Runtime により好きなプログラミング言語でLambda関数を書くことができ、 いくつかの言語についてはAWSおよびパートナーから bootstrap が提供されます。
提供される言語にCOBOLが入って話題になっていますが、 当然ながら(？)Perlはありません。
Custom Runtimeは shell script でも書ける簡単なものなので、Perlでも書いてみました。
Perl in AWS Lambda 以下のスクリプトを bootstrap という名前で保存します。
#!/usr/bin/env perl use utf8; use warnings; use strict; use lib &amp;#34;$ENV{LAMBDA_TASK_ROOT}/local/lib/perl5&amp;#34;; use Furl; use JSON; my $furl = Furl-&amp;gt;new; my ($handler, $function) = split /\.</description>
    </item>
    
  </channel>
</rss>
