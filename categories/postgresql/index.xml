<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>postgresql on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/postgresql/</link>
    <description>Recent content in postgresql on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 22 Apr 2017 19:10:21 +0900</lastBuildDate>
    
	<atom:link href="https://shogo82148.github.io/categories/postgresql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Re: PostgreSQLで排他制約がめっちゃ便利！！</title>
      <link>https://shogo82148.github.io/blog/2017/04/22/postgresql-exclusion-constraint/</link>
      <pubDate>Sat, 22 Apr 2017 19:10:21 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2017/04/22/postgresql-exclusion-constraint/</guid>
      <description>PostgreSQLで排他制約がめっちゃ便利！！を拝見したのですが、 とても些細なミスがあるのに気がついてしまいました。 本題とは関係ない重箱の隅をつつくような話なので、わざわざコメントするほどのことでもないかと考えていたのですが、 どうしても試してみたいクエリを思いつき、 偶然にもRedis、PostgreSQL、MySQLで近傍検索したときに セットアップしたPostgreSQL環境が残っていたのでやってみました。
試したかったこと そーだいさんの記事からSQLの実行結果を一部引用します。
demo=# SELECT * FROM schedule; schedule_id | room_name | reservation_time -------------+-------------+----------------------------------------------- 1 | soudai_room | [&amp;#34;2017-04-16 11:30:00&amp;#34;,&amp;#34;2017-04-16 12:00:00&amp;#34;) 4 | soudai_room | [&amp;#34;2017-04-16 12:00:00&amp;#34;,&amp;#34;2017-04-16 12:30:00&amp;#34;) 5 | soudai_room | (&amp;#34;2017-04-16 12:30:00&amp;#34;,&amp;#34;2017-04-16 12:40:00&amp;#34;) 8 | soudai_room | [&amp;#34;2017-04-16 14:30:00&amp;#34;,&amp;#34;2017-04-16 16:00:00&amp;#34;) (4 行) schedule_idの5をよく見て下さい。 他のスケジュールは半開区間[)(開始時刻は期間に含むが、終了時刻は期間に含まない)になっているのですが、 schedule_idの5だけ開区間()(開始時刻も終了時刻も期間に含まない)になっています。 つまり 2017-04-16 12:30:00 ジャストに空き時間があるのです。
ここに予約を入れてみたい！！！
試してみた 環境再現 以下のSQLを実行して、そーだいさんの記事と同じ内容を含んだテーブルを作成します。
CREATE TABLE schedule ( schedule_id SERIAL PRIMARY KEY NOT NULL, room_name TEXT NOT NULL, reservation_time tsrange NOT NULL ); INSERT INTO schedule (schedule_id, room_name, reservation_time) VALUES (1, &amp;#39;soudai_room&amp;#39;, &amp;#39;[&amp;#34;2017-04-16 11:30:00&amp;#34;,&amp;#34;2017-04-16 12:00:00&amp;#34;)&amp;#39;), (4, &amp;#39;soudai_room&amp;#39;, &amp;#39;[&amp;#34;2017-04-16 12:00:00&amp;#34;,&amp;#34;2017-04-16 12:30:00&amp;#34;)&amp;#39;), (5, &amp;#39;soudai_room&amp;#39;, &amp;#39;(&amp;#34;2017-04-16 12:30:00&amp;#34;,&amp;#34;2017-04-16 12:40:00&amp;#34;)&amp;#39;), (8, &amp;#39;soudai_room&amp;#39;, &amp;#39;[&amp;#34;2017-04-16 14:30:00&amp;#34;,&amp;#34;2017-04-16 16:00:00&amp;#34;)&amp;#39;); -- schedule_idが1から始まってしまい、INSERTした内容と重複してしまうので調整 SELECT setval (&amp;#39;schedule_schedule_id_seq&amp;#39;, 8); SELECTを実行すると同じ内容になっていることを確認できます。</description>
    </item>
    
    <item>
      <title>Redis、PostgreSQL、MySQLで近傍検索</title>
      <link>https://shogo82148.github.io/blog/2017/03/28/database-gis/</link>
      <pubDate>Tue, 28 Mar 2017 19:59:49 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2017/03/28/database-gis/</guid>
      <description>「サーバーで付近の情報を通知するサービスのつくり方」 という、Geohashを使って近傍検索を実現する記事をみつけました。 最近Redisに関する記事を書いた関係で、 この記事をみて「GeohashはRedisと一緒に使うともっと便利だよ！」と思わず宣伝したくなったのですが、 MySQL5.7でInnoDBに空間インデックス(Spatial Index)のサポートが入ったので 「MySQLでももっと簡単にできるのでは？」と思い、 RedisやMySQLを含めたいろんなDBで近傍検索を実現する方法を調べてみました。
以前、スマートフォンのセンサを活用して花火の打ち上げ場所を推定するアプリを作った関係で、 地球上での距離計算の実装も気になったので、それについても調査してみました。
関連知識 GeoHash Geohash（ジオハッシュ） は緯度・経度を短い文字列に変換する方法です。 距離が近い2地点のGeohashは似たような文字列になるという特徴があります(一部例外あり)。 この特徴を利用すると、文字列検索だけで近傍検索が実現できます。
地球上の二点間の距離 地球は完全な球体ではなく、回転楕円体であることが知られています。 地球の形がわからないと緯度・経度などを決められないので、 地球楕円体が定義されています。 近似方法によっていくつか種類があるのですが、GPSなどで使われているWGS84がよく使われているようです。
国土地理院が提供している測量計算サイトでは 距離と方位角の計算を使って緯度・経度から距離を計算できます。 回転楕円体上の距離の厳密解は求められない(要出典)ので、 数値計算によって求めることになります。 計算式を見て分かる通り非常に複雑なので、なんらかの近似をしている実装がほとんどです。
各種DBでの実現方法 Redis Redisでは3.2からGEO関連の機能をサポートしています。 ソート済みセットにGeohashを組み合わせて実現しています。
簡単に試してみました。データは以下の記事から拝借したものを使用します。
 MySQLで指定した緯度経度から半径nメートル内検索っぽいのを実現するSQL PostgreSQLとOracleで緯度経度から半径nメートル内検索を実行してみる。  GEOADDでデータ挿入です。 ちなみにデータを削除するGEODELは用意されていないとのこと。 中身はソート済みセットなので、ZREMでいいんですね。
$ cat command.txt GEOADD geotable 139.777254 35.713768 上野駅 139.774029 35.711846 西郷隆盛像 GEOADD geotable 139.774744 35.712737 上野の森美術館 139.770872 35.712351 不忍池弁財天 GEOADD geotable 139.775696 35.716293 野口英世博士像 139.775803 35.715420 国立西洋美術館 GEOADD geotable 139.776544 35.716319 国立科学博物館 139.</description>
    </item>
    
  </channel>
</rss>