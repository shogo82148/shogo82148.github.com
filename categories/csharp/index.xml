<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>csharp on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/csharp/</link>
    <description>Recent content in csharp on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 29 Mar 2015 12:13:00 +0900</lastBuildDate>
    <atom:link href="https://shogo82148.github.io/categories/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>名前付き引数とオプション引数とオーバーロードを同時に使うとUnityが死ぬ</title>
      <link>https://shogo82148.github.io/blog/2015/03/29/unity-internal-compiler-error/</link>
      <pubDate>Sun, 29 Mar 2015 12:13:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2015/03/29/unity-internal-compiler-error/</guid>
      <description>オーバーロードの優先順位付けが少しおかしくて、 名前付き引数とオプション引数と一緒に使うと死ぬ場合があるというお話。 ぴーちんが昨日言ってたやつ。 いんたーねっつにも乗っけておく。
問題となるのは以下のようなコード。
class MainClass { void Foo (int fuga) { } void Foo (string hoge, int fuga = 10) { } void Bar() { Foo (fuga: 20); } } このコードは以下のような例外を吐いて死ぬ。
Internal compiler error. See the console log for more information. output was: Unhandled Exception: Mono.CSharp.InternalErrorException: Internal error at Mono.CSharp.MethodGroupExpr.IsApplicable (Mono.CSharp.ResolveContext ec, Mono.CSharp.Arguments&amp;amp; arguments, Int32 arg_count, System.Reflection.MethodBase&amp;amp; method, System.Boolean&amp;amp; params_expanded_form) [0x00000] in &amp;lt;filename unknown&amp;gt;:0 at Mono.CSharp.MethodGroupExpr.OverloadResolve (Mono.CSharp.ResolveContext ec, Mono.</description>
    </item>
    <item>
      <title>travisがいつのまにやらcsharpをサポートしていた件</title>
      <link>https://shogo82148.github.io/blog/2015/03/29/travis-supports-csharp/</link>
      <pubDate>Sun, 29 Mar 2015 11:54:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2015/03/29/travis-supports-csharp/</guid>
      <description>いつもテスト実行でお世話になっているtravisさんがC#をサポートしていました。
以前から C#をサポートして欲しいという要望はあったのですが、 2014年12月あたりからついに使えるようになってたみたいです。
以前はC言語のフリをして、設定ファルで頑張ってmonoをインストールする必要があったのですが、
## Travis CI Integration language: c install: - sudo apt-get install mono-devel mono-gmcs script: - xbuild hogehoge.sln 今はlanguageにcsharpを設定して、solutionを指定するだけです。
## Travis CI Integration language: csharp solution: hogehoge.sln MiniMeggagePack もこちらの設定を使うようにしてみました。
nunitを使ってテストする場合は結局sudo apt-get install nunit-consoleする必要があるみたいですが、 複数バージョンのmonoでテストできたりしていい感じです。 ただ、ドキュメントにはmono2.10.8もサポートしているとあるのにmonoのインストールが404で失敗したり、 他のバージョンでも時たまmonoのインストールにコケたり、 3.8.0でnunitのテストが上手く動かなかったり、不安定な感じがしてます。 徐々に改善していくといいなー。
参考 Building a C#, F#, or Visual Basic Project </description>
    </item>
    <item>
      <title>C#のconditional Attributeのコンパイル結果を見てみる</title>
      <link>https://shogo82148.github.io/blog/2014/05/29/conditional-attribute/</link>
      <pubDate>Thu, 29 May 2014 19:20:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2014/05/29/conditional-attribute/</guid>
      <description>C#で「ある環境では関数の定義ごと消したい」みたいな要件があって、 そういう用途にconditinal attributeが使えるのかなーと話題のあがったので、実際に確認してみました。
結論から言えばできないのですが、せっかく調べたのでメモとして残しておきます。
conditional attribute 「デバッグ時のみにしか実行して欲しくない関数」みたいなものを定義するための機能です。
using System; using System.IO; using System.Diagnostics; namespace ConditionalAttributeTest { class MainClass { public static void Main (string[] args) { Log(&amp;#34;fugu&amp;#34;); } [ConditionalAttribute(&amp;#34;DEBUG&amp;#34;)] public static void Log(string message) { Console.WriteLine(message); } } } こんなふうに書いておくと DEBUG シンボルが定義されている時にだけLogの呼び出しが行われます。
&amp;gt; mcs -d:DEBUG ConditionalAttributeTest.cs &amp;gt; mono ConditionalAttributeTest fugu &amp;gt; mcs ConditionalAttributeTest.cs &amp;gt; mono ConditionalAttributeTest 逆アセンブルしてみる DEBUG付きでコンパイルした結果を逆アセンブルしてみます。
// ...前略 // method line 2 .method public static hidebysig default void Main (string[] args) cil managed { // Method begins at RVA 0x2058 .</description>
    </item>
    <item>
      <title>初期化なしのusing文ってOK？</title>
      <link>https://shogo82148.github.io/blog/2014/05/27/using-statement-without-instantiating/</link>
      <pubDate>Tue, 27 May 2014 13:48:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2014/05/27/using-statement-without-instantiating/</guid>
      <description>C# の using ステートメント、普通は変数の初期化とか new とかをまとめてやるものだと思ってたんですが、 某プロジェクトでusing文をこんな感じで使っているのを見かけました。
var hoge = new Hoge(); using(hoge) { // using( var hoge = new Hoge() ) { ならよく見る ... } 見慣れない書き方だったので、本当にリソース解放が行われているのか不安・・・。 リソース解放が行われているのか調べてみました。
まずは結論 リソース解放自体は行われているので、ちゃんと書いてあれば問題なし しかしエラーをコンパイル時に見つけられない場合があるので非推奨 逆アセンブルして調べてみた コンパイル結果見ればちゃんとリソース解放されているかわかるよね！ ってことでバイナリを逆アセンブルして調べてみました。
サンプルコード 検証に使ったのはこんなコード。
using System; using System.IO; namespace UsingTest { class MainClass { public static void Main (string[] args) { var sr = new StreamReader (&amp;#34;hoge.txt&amp;#34;); Console.WriteLine (&amp;#34;Hoge: {0}&amp;#34;, sr.ReadLine ()); } } } 僕はMac使いに転向したので、Monoを使います。 mcsを使ってコンパイル、monodis ってのを使うとILを見れるらしいです。 Windowsだったら .</description>
    </item>
    <item>
      <title>C# でお手軽にMessagePack解析！</title>
      <link>https://shogo82148.github.io/blog/2014/05/25/mini-message-pack/</link>
      <pubDate>Sun, 25 May 2014 01:38:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2014/05/25/mini-message-pack/</guid>
      <description>MiniMessagePack.csってのを作った。 C#のプロジェクトにファイルひとつ導入するだけで、お手軽にMessagePackの解析ができます。
なんで作ったの？ MiniJSON の置き換えが目的です。 とあるUnityプロジェクトでMB単位のJSONをパースする箇所があってですね・・・ パースにはMiniJSONを使っているのですが、さすがに対象がでかすぎて重たい。 そこでMessagePackへの置き換えを検討してみたわけです。
もちろん C# で動く MessagePack のパーサはすでにあって、 messagepack-cliとかmessagepack-unityとか見つけました。 しかし、Unityのちょっと古いMonoで動かすためにちょっとゴニョゴニョしないといけなかったり、 MiniJSON との互換性を取るためにもゴニョゴニョしないといけなかったり(実際やってみたらキャストが大量に失敗して辛かった・・・)、 今回の用途にはちょっと高機能かなーと思ったので作っちゃいました！
つかいかた デコードする byteの配列を渡すとパースして返してくれます。 配列はList&amp;lt;object&amp;gt;で、マップはDictionary&amp;lt;string, object&amp;gt;になります。
using MiniMessagePack; // it means {&amp;#34;compact&amp;#34;:true,&amp;#34;schema&amp;#34;:0} in JSON var msgpack = new byte[] { 0x82, 0xa7, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0xc3, 0xa6, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x00 }; var packer = new MiniMessagePacker (); object unpacked_data = packer.Unpack (msgpack); /* unpacked_data = new Dictionary&amp;lt;string, object&amp;gt; { { &amp;#34;compact&amp;#34;, true }, { &amp;#34;schema&amp;#34;, 0}, }; */ エンコードする オブジェクトを渡すと MessagePack にエンコードして返してくれます。</description>
    </item>
    <item>
      <title>Unity Test Tools を使ってみる</title>
      <link>https://shogo82148.github.io/blog/2013/12/21/unity-test-tools/</link>
      <pubDate>Sat, 21 Dec 2013 21:02:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2013/12/21/unity-test-tools/</guid>
      <description>みなさんこんにちは、 最近つらいことばかりで元気のないいっちーです。 少しでもつらいことを解消できないかと Unity Test Tools ってので遊んでみました。
背景 最近あったつらいことのひとつに「Unityで作ってるプロジェクトで、機能拡張したときに間違えて一行消しちゃった！！！」 ってのがあります。
もちろん僕が消したわけじゃないですよ！！！ 僕サーバサイドエンジニアですから、Unityはいじりません。 でも、一応修正コミットは見ていたはずなので、気がつけなかったのは残念です・・・。
どんなにコード書く人が頑張っても、レビューする人が頑張っても、 人間誰だってミスします。 じゃあ、機械にやらせよう！テストコードだ！って話なんですが、 コードカバレッジが低く、今回のつらい事例でもテストがありませんでした。 一部書いてあるテストも、担当者が代わってからなんか怪しい・・・。
あと、自分も手元でテスト動かしてみたのですが、今のテスト面倒・・・。
Unityのコンソールにドバッと流れる テストが全部通ったのか、失敗したのかよくわからない ユニットテストを1項目だけやりたいとかどうやるんだろう 「テストの実行」が「シーンの再生」なので1項目とかどうすんの？ Unity Test Tools つらいので解決方法を探るべくインターネットの海をさまよっていたら Unity Test Tools なるものを発見。
Unity Test Tools Released これを書いてる時点で、3日前のリリースです！ タイムリーだ！！
英語でよくわかんないけど、スクリーンショットはわかりやすくてかっこいいぞ！ 遊んでみよう！
事前準備 まず、Unity Testing Tools をダウンロードしてこよう！ Aseet Store に並んでるので、ダウンロードボタンを押してしばらく待ってれば Unity が勝手に使える状態にしてくれます。
簡単なユニットテストを書いてみる 以前れもんさんが書いた「#24 「Unityでコルーチンも単体テストしよう」 tech.kayac.com Advent Calendar 2012」を Unity Testing Tools でやってみました。
テストの対象はこんな感じのクラスです(短く書けそうな部分があったのでちょっと変えた)。
namespace MyProject { public class Plan { public string Title { get; private set; } public string Text { get; private set; } public Plan(string title, string text) { Title = title; Text = text; } } } れもんさんの記事ではSharpUnitを使っていましたが、 Unity Test Tools は NUnit というテストフレームワークを使うようです。 Plan のテストをNUnitを使って書きなおしてみます。</description>
    </item>
  </channel>
</rss>
