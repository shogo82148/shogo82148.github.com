<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws Lambda on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/aws-lambda/</link>
    <description>Recent content in Aws Lambda on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 06 Dec 2017 05:39:57 +0900</lastBuildDate>
    
	<atom:link href="https://shogo82148.github.io/categories/aws-lambda/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MeCabをAWS Lambdaで動かす(2017年版)</title>
      <link>https://shogo82148.github.io/blog/2017/12/06/mecab-in-lambda/</link>
      <pubDate>Wed, 06 Dec 2017 05:39:57 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2017/12/06/mecab-in-lambda/</guid>
      <description>AWS Lambda上で鯖(Mackerel)の曖昧性問題を機械学習で解決しようの記事の中で、 Lambda上でMeCabを動かすことについて以下のように触れられています。
 日本語を扱う自然言語処理ではMeCabを扱うことが多いですが、Lambda上でMeCabを動かすのは一手間必要なようです。
 確かにLambda上でMeCabを動かすのは一手間必要です。 しかし、参照している記事は少し古くて、今はもう少し手軽にできるようになっています。
ブコメでも言及しましたが、改めて記事として残しておこうと思います。
ビルド方法(2017年版) 結論から言うと Norio Kimura さんのコメント 通りにビルドするのが、2017年12月現在一番楽な方法です。 (お返事すっかり忘れていてスイマセン・・・情報提供ありがとうございます)
 調べてみると、AWS Lambda では環境変数 LD_LIBRARY_PATH が既に設定されていて /var/task/lib を含んでいました。元記事で ./configure &amp;ndash;prefix=$PROJECT_HOME/local ではなく ./configure &amp;ndash;prefix=$PROJECT_HOME とすればライブラリとの動的リンクは何もしなくても実現できます。さらにコードが展開されるディレクトリ /var/task を固定値だと決め打ちして PROJECT_HOME を /var/task にして開発すれば MeCab に渡すパラメーターの設定（-d, -r）も不要になります。undocumented な仕様に２つも依存していて気持ち悪いですが、MeCab を呼ぶ側のコードを Lambda 用に変更する必要がなくなります。
 コメント中の元記事というのは、こちらの記事のことです。
 AWS Lambda で MeCab を動かす  ``` bash install.sh export PROJECT_HOME=/var/task # LAMBDA_TASK_ROOT
1. プロジェクト用にディレクトリを作成 mkdir -p &amp;ldquo;$PROJECT_HOME&amp;rdquo;
2. MeCabのダウンロードとインストール googlecodeサービス終了に伴い、ダウンロードURLが元記事と変わっていることに注意 cd &amp;ldquo;$HOME&amp;rdquo; curl -fsSL &amp;ldquo;https://drive.</description>
    </item>
    
    <item>
      <title>AWS Lambda で MeCab を動かす(改)</title>
      <link>https://shogo82148.github.io/blog/2016/02/10/mecab-in-lambda/</link>
      <pubDate>Wed, 10 Feb 2016 14:52:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2016/02/10/mecab-in-lambda/</guid>
      <description>MeCabのPythonバインディングをいじってた関係で、MeCabについてインターネットをさまよっていたら、 AWS Lambda で MeCab を動かすという記事を見つけました。 Lambdaの計算リソースで形態素解析できるのは楽しいですねー。 ただ実装にまだまだ改善できそうな部分があったので修正してみました。
2017/12/06追記 Norio Kimuraさんのコメントを受けて、MeCabをAWS Lambdaで動かす(2017年版)を書きました。 以下の手順でも動きますが、少し簡単に出来るようになっています。
問題点 第一に「外部プロセスを起動しているので遅い」という点です。 外部プロセスの起動は非常に重くて数百msかかります。 MeCabは非常に高速で数msもあれば解析が終わるのに、もったいないですよね。
第二に「OSコマンドインジェクションの危険性がある」という点です。 解析対象の文字列をコマンドライン引数として渡しており、この際シェルを経由しています。 そのため、{&amp;quot;sentence&amp;quot;: &amp;quot;$(ls)&amp;quot;}のような文字列を渡すと、シェルがコマンドとして実行してしまいます。 API Gatewayなどで外部に公開した場合、第三者が何でもし放題な状態になってしまいます。
頑張ってMeCabをライブラリとして呼ぶ 全ての元凶は外部プロセス起動にあるので、頑張ってMeCabをライブラリとして呼んでみましょう。 そもそもなんで外部プロセス起動をしていたかというと、 LD_LIBRARY_PATHが正しく設定されていないためimport MeCab時にlibmecab.soを発見できないからです。 なんとかならないものかと探したところ、Stack Overflowにそれっぽい記事がありました。
 Setting LD_LIBRARY_PATH from inside Python  「環境変数を設定してから自分自身をexecし直す方法」と「ctypesを使って絶対パス指定で読み込む方法」が紹介されています。 前者の方がvoteは多いですがLambdaでこれをやるのは大変そうなので、後者で試してみます。
``` python lambda_function.py
preload libmecab import os import ctypes libdir = os.path.join(os.getcwd(), &amp;lsquo;local&amp;rsquo;, &amp;lsquo;lib&amp;rsquo;) libmecab = ctypes.cdll.LoadLibrary(os.path.join(libdir, &amp;lsquo;libmecab.so&amp;rsquo;))
 一度読み込んでしまったライブラリは再利用されるため、 `import MeCab`はここで読み込んだライブラリにリンクされます(importの順番が重要なの闇な感じがする)。 `LD_LIBRARY_PATH`が正しく設定されている必要はありません。 さて、これで`lambda_function.py`と`tokenizer.py`が分かれている必要がなくなったので、二つを合体してみましょう。 ``` python lambda_function.py # coding=utf-8 import os import settings import logging logger = logging.</description>
    </item>
    
  </channel>
</rss>