<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>github-actions on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/github-actions/</link>
    <description>Recent content in github-actions on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 26 Oct 2025 21:12:00 +0900</lastBuildDate>
    <atom:link href="https://shogo82148.github.io/categories/github-actions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>shogo82148/actions-setup-mysqlのMySQLビルドスクリプト群を別レポジトリーに移行した</title>
      <link>https://shogo82148.github.io/blog/2025/10/26/split-actions-setup-mysql/</link>
      <pubDate>Sun, 26 Oct 2025 21:12:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2025/10/26/split-actions-setup-mysql/</guid>
      <description>TL;DR shogo82148/actions-setup-mysql には「GitHub Actionsのコード」と「MySQLをビルドするためのスクリプト群」が一緒に入っていたのですが、 このたび「MySQLをビルドするためのスクリプト群」を以下のレポジトリーに移行することにしました。
shogo82148/build-mysql ユーザー側での対応は不要です。
背景・目的 shogo82148/actions-setup-mysql のビルド済みMySQLバイナリー置き場には紆余曲折ありました。 以下のブログ記事はPerlのものですが、MySQLも同じような道筋を辿っています。
Setup Perl GitHub Action を公開しました Setup Perl Environment Action のストレージを Azure Blob Storage に移行しました 紆余曲折あり最終的には GitHub Releases に保存することにしました。 GitHubネイティブの機能で安心感があるのと、なんたって無料なのが魅力的ですね。
v1.45.0 をリリースしたら、 v1.45.0の関連アセットに必要なバイナリーを全部突っ込む、という作戦で運用を続けてきました。 しかし、この方法では以下のような問題がありました。
リリースのたびにすべてのプラットフォームのビルドをし直さなければならない ひとつのリリースに含める事のできるアセットの上限 1000 が見えてきた というわけで、「MySQLをビルドするためのスクリプト群」を別レポジトリーに移行し、 shogo82148/actions-setup-mysql 自体のリリースサイクルとは別に管理するようにしました。
移行作業 shogo82148/build-mysql のセットアップ 「MySQLをビルドするための秘伝のスクリプト群」はすでに手元にあるので、スクリプト群をコピーするたけです。 完成したバイナリーは gh コマンドでアップロードします。
同じMySQLバージョンの再ビルドを行いたい（たとえば、将来リリースされるであろうubuntu-26.04版ビルドの追加とか）ケースも考えて、リリース名に mysql-8.4.6-20251026153058 のようにリリースした日付を入れておきます。 これは、変更不可リリースを有効化しており、過去のリリースを直接書き換えることができないためです。
shogo82148/actions-setup-mysql のダウンロードURL書き換え 毎回 shogo82148/build-mysql のリリースを検索するのも大変なので、 shogo82148/build-mysql の全リリースを gh api --paginate --slurp &#39;/repos/shogo82148/build-mysql/releases?per_page=100&#39; コマンドで取得し、整形したものをソースコードに埋め込んでいます。
[ { &amp;#34;arch&amp;#34;: &amp;#34;arm64&amp;#34;, &amp;#34;distribution&amp;#34;: &amp;#34;mysql&amp;#34;, &amp;#34;os&amp;#34;: &amp;#34;darwin&amp;#34;, &amp;#34;sha256&amp;#34;: &amp;#34;874d49f26f0bcb1cdd186bf768d863cb1da227091609e5873e25255f19e46753&amp;#34;, &amp;#34;url&amp;#34;: &amp;#34;https://github.</description>
    </item>
    <item>
      <title>actions-setup-redisがBuild Provenanceの検証を行うようになりました</title>
      <link>https://shogo82148.github.io/blog/2025/04/06/actions-setup-redis-verifies-build-provenance/</link>
      <pubDate>Sun, 06 Apr 2025 22:34:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2025/04/06/actions-setup-redis-verifies-build-provenance/</guid>
      <description>shogo82148/actions-setup-redis はRedisのバイナリーをGitHub Releasesからダウンロードしています。 このバイナリーをGitHub Artifact Attestationsで署名して、 ダウンロード時に検証するようにしました。
背景 今年3月に発生したGitHub Actionsのサプライチェーン攻撃を受けての対応です。
[Security Advisory] Supply Chain Attack on reviewdog GitHub Actions during a specific time period #2079 New GitHub Action supply chain attack: reviewdog/action-setup GitHub Actions Supply Chain Attack: A Targeted Attack on Coinbase Expanded to the Widespread tj-actions/changed-files Incident: Threat Assessment (Updated 4/2) tj-actions のインシデントレポートを読んだ 個人的にはreviewdog/action-setupをよく利用しているので、びっくりしました。 （インシデントレポートに自分のコミット載ってるし） さいわい侵害を受けたのが日本時間深夜ということもあり、被害を受けたレポジトリーは見つかりませんでした。
しかし、こういった攻撃が身近に迫っていることを、改めて感じた事件でした。 自分自身もいくつかGitHub Actionsを公開しているので、他人事ではありません。 少しでも安全に利用できるよう、何等かの対応をすることにしました。
対応 GitHub Actionsのピン留め 今回の侵害事件においてもっとも効果的なのはGitHub ActionsのSHA1ハッシュによりピン留めです。 他の方もたくさんブログを書いてくれているので、そちらをどうぞ。
GitHub Actionsの侵害・サプライチェーンリスクを軽減:pinactを使ってアクションをバージョンではなくハッシュ値で指定 GitHub Actionsの外部Actionのバージョンをhash指定にし、可読性を維持しつつバージョンを上げる GitHub Actionsの外部ActionでVersionTagを使ってるものを一括でCommitHashにしたい。 shogo82148/actions-setup-redis でも同様の対応を行いました。</description>
    </item>
    <item>
      <title>actions-setup-mysqlとactions-setup-redisがApple M1上で動くようになりました</title>
      <link>https://shogo82148.github.io/blog/2024/02/04/2024-02-04-actions-setup-mysql-and-actions-setup-redis-now-work-on-macos14/</link>
      <pubDate>Sun, 04 Feb 2024 12:35:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2024/02/04/2024-02-04-actions-setup-mysql-and-actions-setup-redis-now-work-on-macos14/</guid>
      <description>GitHub Actions に　Apple Silicon がやってきました！
GitHub Actions: Introducing the new M1 macOS runner available to open source! GitHub Actions: macOS 14 (Sonoma) is now available 先日Perlをビルドして遊んでみました。
actions-setup-perlがApple M1上で動くようになりました 今回はMySQLとRedisをビルドしてみたお話です。
shogo82148/actions-setup-mysql shogo82148/actions-setup-redis actions-setup-mysql v1.31.0, actions-setup-redis リリースのお知らせ actions-setup-mysql v1.31.0, actions-setup-redis v1.33.0 から M1 macOS に対応しています。 runs-on: キーに macos-14 を指定すると M1 を利用できます。
jobs: build: runs-on: macos-14 steps: - uses: actions/checkout@v4 - name: Set up MySQL uses: shogo82148/actions-setup-mysql@v1.31.0 M1による高速化 今日現在（2024-02-04）のMySQL最新安定版リリースは 8.0.36 です。 MySQL 8.</description>
    </item>
    <item>
      <title>actions-setup-perlがApple M1上で動くようになりました</title>
      <link>https://shogo82148.github.io/blog/2024/02/01/2024-02-01-actions-setup-perl-now-works-on-macos14/</link>
      <pubDate>Thu, 01 Feb 2024 20:50:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2024/02/01/2024-02-01-actions-setup-perl-now-works-on-macos14/</guid>
      <description>GitHub Actions に　Apple Silicon がやってきました！
GitHub Actions: Introducing the new M1 macOS runner available to open source! GitHub Actions: macOS 14 (Sonoma) is now available 新しいコンピューティング環境がでてやることといえばアレですよね。 Perlのビルド。 というわけでやっていきましょう。
actions-setup-perl v1.28.0 リリースのお知らせ actions-setup-perl v1.28.0 から M1 macOS に対応しています。 runs-on: キーに macos-14 を指定すると M1 を利用できます。
jobs: build: runs-on: macos-14 steps: - uses: actions/checkout@v4 - name: Set up perl uses: shogo82148/actions-setup-perl@v1.28.0 M1による高速化 今回のリリースにあたり、バージョン違いコンパイルオプション違いの 全148種類 のPerlバイナリを再ビルドしました！ Perl 5.38.2 のビルド時間で比較すると、x64では 11m 27s かかっていたビルドが、M1では 4m 6s へと大きく改善しました。 64.</description>
    </item>
    <item>
      <title>Slack Incoming Webhook を GitHub Actions Secrets へ突っ込むのに疲れた俺達は</title>
      <link>https://shogo82148.github.io/blog/2023/10/01/2023-10-01-github-actions-notify-slack/</link>
      <pubDate>Sun, 01 Oct 2023 00:05:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2023/10/01/2023-10-01-github-actions-notify-slack/</guid>
      <description>GitHub ActionsからSlackへ通知したいとき、一番お手軽なのはSlack Incoming Webhookです。 直接curlで叩いてもいいですし、マーケットプレイスにも通知用のアクションがたくさんあります。
しかし、Incoming Webhookは一般公開してはいけないシークレットです。 迂闊にレポジトリにコミットしてはいけません。 GitHub Actions Secrets へ突っ込む等して、適切に管理する必要があります。 一個や二個ならまだしも、いくつもレポジトリがあると管理が大変です。
そういうわけで、OIDCを使ってSlackへの通知を行うアクションを書きました。
actions-notify-slack 使い方 gha-notify.shogo82148.com へアクセスします。 「Add to Slack」をクリックして、アプリをSlackにインストールします。 @actions-notify-slack というボットが追加されるので、こいつを通知を流したいチャンネルに招待します。 投稿先のチャンネルで /gha-notify allow ORG/REPO スラッシュコマンドを実行します。これにより ORG/REPO からの投稿が許可されます。 ワークフローにアクションを追加して完成！　- uses: shogo82148/actions-notify-slack@v0 with: team-id: T3G1HAY66 # 自分のチームIDに置き換え channel-id: C3GMGG162 # 自分のチャンネルIDに置き換え payload: &amp;#39;{&amp;#34;text&amp;#34;: &amp;#34;hello world&amp;#34;}&amp;#39; 仕組み 早い話が、過去 GitHub や AWS 向けに作ったアクションを Slack 向けに焼き直したものです。
actions-github-app-tokenの紹介 AWS_SECRET_ACCESS_KEY を GitHub Actions secrets へ突っ込むのに疲れた俺達は GitHub Actions は直接 Slack とやり取りするかわりに、中継サーバーにリクエストを投げます。 中継サーバーは、OIDC ID Tokenを検証し、Slackへの投稿権限をチェックします。 権限を確認できたら、ボットユーザーとして投稿する、という流れです。</description>
    </item>
    <item>
      <title>actions-github-app-tokenの紹介</title>
      <link>https://shogo82148.github.io/blog/2023/09/26/2023-09-26-actions-github-app-token/</link>
      <pubDate>Tue, 26 Sep 2023 23:30:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2023/09/26/2023-09-26-actions-github-app-token/</guid>
      <description>GitHub App Tokenを発行するための actions-github-app-token という GitHub アクションを書きました。
実験的なアクションだったので、マーケットには公開していませんでした。 最近になって「安定して動作しているし、マーケットに公開するか！」という気持ちになったので、 改めてご紹介です。
背景 GitHub Actionsのワークフローから、GitHub APIを叩きたいこと、よくありますよね？
GITHUB_TOKEN そんなとき第一候補に挙がるのは secrets.GITHUB_TOKEN です。
Automatic token authentication 特段複雑な設定をせずとも使えるのでお手軽です。 しかし、 secrets.GITHUB_TOKEN には大きな制限があります。 それは「他のGitHub Actions Workflowを起動できない」ということ。 これは無限ループで大量のジョブが投入されるのを防ぐための制限です。 理由もはっきりしていて妥当な制限だとは思うのですが、 必要なワークフローが起動しなくて困ることがときどきあります。
PAT (Personal Access Token) (Classic) 「他のGitHub Actions Workflowを起動できない」制限を回避する簡単な方法は、 Personal Access Token を使うことです。 このトークンにはこの制限はありません。
ただし、トークンを発行したユーザーの権限でAPIを叩くので、権限の範囲が広すぎる、という問題があります。 実行できるアクションは制限できるのですが、レポジトリの範囲までは調整できません。
また、トークンは「ユーザー」に紐づきます。 個人のレポジトリならまだいいんですが、Organization管理のレポジトリ困ることがあります。 一番のあるあるは「トークンを発行したユーザーがOrganizationを抜けるとワークフローが止まる」ですかね。 属人化が進み、健全とは言い難い状態です。
fine-grained personal access tokens 「権限の範囲が広すぎる」問題を解決するのが fine-grained personal access tokens です。 レポジトリ単位でアクセス権を設定できます。
しかし、権限の広さは解決しますが、「トークンがユーザーに紐づいていることの弊害」は解消しません。
また、fine-grained personal access tokensは有効期限の設定が必須です。 管理するレポジトリの数が多いと、トークン更新行脚をする必要があります。
GitHub Apps ここで本命、 GitHub Apps の出番です。</description>
    </item>
    <item>
      <title>actions/checkout@v4の襲撃を受けた件</title>
      <link>https://shogo82148.github.io/blog/2023/09/08/2023-09-08-actions-checkout-v4/</link>
      <pubDate>Fri, 08 Sep 2023 20:22:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2023/09/08/2023-09-08-actions-checkout-v4/</guid>
      <description>先日 actions/checkout@v4 がリリースされましたね。
actions/checkout@v4 まあ、何が言いたいかというと、「メジャーバージョンアップ多すぎじゃない？？？」という話。
actions/checkout@v4の襲撃 新規に作成したレポジトリには基本的にdependabotをセットアップしています。 まあそんな状況下で actions/checkout@v4 なんてリリースされたら、こうなるわけですよ。
actions/checkout のアップデートつらい pic.twitter.com/4bNeCFsE4Y
&amp;mdash; f96fd3a0-bdb9-4f10-b69f-8f765c1d341c ICHINOSEShogo (@shogo82148) September 5, 2023 よほど単純なワークフローでない限り、 actions/checkout は必須のアクションです。 GitHub Actions でCIを組んでいるレポジトリはもれなく使っています。 @shogo82148以下にあるレポジトリだけで、76個のプルリクエストが来ました。 心を無にしてマージボタンを押しまくりました。 他のorgにも参加しているので、実際に対応したプルリクエストはもっと多いです。
Node.js 16 のEOLが近い 背景には Node.js 16 が9月11日にEOLになるという話があります。 actions/checkout@v3 は Node.js 16 で動くので、当然サポート対象外になります。 そこで新しいバージョンが必要なわけです。
actions/checkout@v4 は Node.js 20 で動くようになりました。 GitHub Actions はセフルホストできるので、まだ Node.js 20 が動かない環境も残っています。 そのような環境でオプトインできるよう、メジャーバージョンアップにしたのだと思います。
Node.js 18 がスキップされた話 ちなみに Node.js 16 と Node.js 20 の間には Node.js 18 が存在するわけですが、 Node.js 18 はスキップされました。 （Node.</description>
    </item>
  </channel>
</rss>
