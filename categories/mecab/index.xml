<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mecab on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/mecab/</link>
    <description>Recent content in Mecab on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 06 Dec 2017 05:39:57 +0900</lastBuildDate>
    
	<atom:link href="https://shogo82148.github.io/categories/mecab/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MeCabをAWS Lambdaで動かす(2017年版)</title>
      <link>https://shogo82148.github.io/blog/2017/12/06/2017-12-06-mecab-in-lambda/</link>
      <pubDate>Wed, 06 Dec 2017 05:39:57 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2017/12/06/2017-12-06-mecab-in-lambda/</guid>
      <description>AWS Lambda上で鯖(Mackerel)の曖昧性問題を機械学習で解決しようの記事の中で、 Lambda上でMeCabを動かすことについて以下のように触れられています。
 日本語を扱う自然言語処理ではMeCabを扱うことが多いですが、Lambda上でMeCabを動かすのは一手間必要なようです。
 確かにLambda上でMeCabを動かすのは一手間必要です。 しかし、参照している記事は少し古くて、今はもう少し手軽にできるようになっています。
ブコメでも言及しましたが、改めて記事として残しておこうと思います。
ビルド方法(2017年版) 結論から言うと Norio Kimura さんのコメント 通りにビルドするのが、2017年12月現在一番楽な方法です。 (お返事すっかり忘れていてスイマセン・・・情報提供ありがとうございます)
 調べてみると、AWS Lambda では環境変数 LD_LIBRARY_PATH が既に設定されていて /var/task/lib を含んでいました。元記事で ./configure &amp;ndash;prefix=$PROJECT_HOME/local ではなく ./configure &amp;ndash;prefix=$PROJECT_HOME とすればライブラリとの動的リンクは何もしなくても実現できます。さらにコードが展開されるディレクトリ /var/task を固定値だと決め打ちして PROJECT_HOME を /var/task にして開発すれば MeCab に渡すパラメーターの設定（-d, -r）も不要になります。undocumented な仕様に２つも依存していて気持ち悪いですが、MeCab を呼ぶ側のコードを Lambda 用に変更する必要がなくなります。
 コメント中の元記事というのは、こちらの記事のことです。
 AWS Lambda で MeCab を動かす  ``` bash install.sh export PROJECT_HOME=/var/task # LAMBDA_TASK_ROOT
1. プロジェクト用にディレクトリを作成 mkdir -p &amp;ldquo;$PROJECT_HOME&amp;rdquo;
2. MeCabのダウンロードとインストール googlecodeサービス終了に伴い、ダウンロードURLが元記事と変わっていることに注意 cd &amp;ldquo;$HOME&amp;rdquo; curl -fsSL &amp;ldquo;https://drive.</description>
    </item>
    
    <item>
      <title>MeCabのGolangバインディングを書いてみた</title>
      <link>https://shogo82148.github.io/blog/2016/02/11/2016-02-11-golang-mecab-binding/</link>
      <pubDate>Thu, 11 Feb 2016 19:32:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2016/02/11/2016-02-11-golang-mecab-binding/</guid>
      <description>GolangからMeCabを呼び出すライブラリ探せばあるにはあるのですが、 なんだかどれもメモリ管理がちょっと怪しいんですよね・・・。
 GolangでMeCabを使う。  yukihir0/mecab-go  Go言語から mecab を使う - Qiita  rerofumi/mecab  Go で Mecab を使ってみた  メモリ管理はbluele/mecab-golangが一番しっかりしているっぽいですが、 libmecabの一番高機能だけど面倒な使い方しか対応していなくて、ちょっとカジュアルに遊ぶにはつらい。
というわけで、カジュアルな用途から高度な使い方まで対応したWrapperを書いてみました。
 shogo82148/go-mecab  使い方 READMEとgodocのexamplesからのコピペになってしまいますが、 簡単に使い方の紹介です。
インストール go getで取ってくることはできますが、事前にlibmecabとリンクするための設定が必要です。
$ export CGO_LDFLAGS=&amp;#34;-L/path/to/lib -lmecab -lstdc++&amp;#34; $ export CGO_CFLAGS=&amp;#34;-I/path/to/include&amp;#34; $ go get github.com/shogo82148/go-mecab mecabコマンドと一緒にmecab-configがインストールされているはずなので、 それを使うのが楽でしょう。
$ export CGO_LDFLAGS=&amp;#34;`mecab-config --libs`&amp;#34; $ export CGO_FLAGS=&amp;#34;`mecab-config --inc-dir`&amp;#34; $ go get github.com/shogo82148/go-mecab MeCabはデフォルトで/usr/local/以下に入るので、他の実装では決め打ちしている例が多いですが、 100%とは言い切れないので面倒ですが都度指定にしてあります。 cgoはpkg-configに対応しているで、MeCab側が対応してくれると環境変数の設定が不要になってもっと楽なんですけどね。
カジュアルに使う Parseを使うとmecabコマンドと同等の結果を文字列として受け取れます。
tagger, err := mecab.New(map[string]string{}) if err !</description>
    </item>
    
    <item>
      <title>AWS Lambda で MeCab を動かす(改)</title>
      <link>https://shogo82148.github.io/blog/2016/02/10/2016-02-10-mecab-in-lambda/</link>
      <pubDate>Wed, 10 Feb 2016 14:52:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2016/02/10/2016-02-10-mecab-in-lambda/</guid>
      <description>MeCabのPythonバインディングをいじってた関係で、MeCabについてインターネットをさまよっていたら、 AWS Lambda で MeCab を動かすという記事を見つけました。 Lambdaの計算リソースで形態素解析できるのは楽しいですねー。 ただ実装にまだまだ改善できそうな部分があったので修正してみました。
2017/12/06追記 Norio Kimuraさんのコメントを受けて、MeCabをAWS Lambdaで動かす(2017年版)を書きました。 以下の手順でも動きますが、少し簡単に出来るようになっています。
問題点 第一に「外部プロセスを起動しているので遅い」という点です。 外部プロセスの起動は非常に重くて数百msかかります。 MeCabは非常に高速で数msもあれば解析が終わるのに、もったいないですよね。
第二に「OSコマンドインジェクションの危険性がある」という点です。 解析対象の文字列をコマンドライン引数として渡しており、この際シェルを経由しています。 そのため、{&amp;quot;sentence&amp;quot;: &amp;quot;$(ls)&amp;quot;}のような文字列を渡すと、シェルがコマンドとして実行してしまいます。 API Gatewayなどで外部に公開した場合、第三者が何でもし放題な状態になってしまいます。
頑張ってMeCabをライブラリとして呼ぶ 全ての元凶は外部プロセス起動にあるので、頑張ってMeCabをライブラリとして呼んでみましょう。 そもそもなんで外部プロセス起動をしていたかというと、 LD_LIBRARY_PATHが正しく設定されていないためimport MeCab時にlibmecab.soを発見できないからです。 なんとかならないものかと探したところ、Stack Overflowにそれっぽい記事がありました。
 Setting LD_LIBRARY_PATH from inside Python  「環境変数を設定してから自分自身をexecし直す方法」と「ctypesを使って絶対パス指定で読み込む方法」が紹介されています。 前者の方がvoteは多いですがLambdaでこれをやるのは大変そうなので、後者で試してみます。
``` python lambda_function.py
preload libmecab import os import ctypes libdir = os.path.join(os.getcwd(), &amp;lsquo;local&amp;rsquo;, &amp;lsquo;lib&amp;rsquo;) libmecab = ctypes.cdll.LoadLibrary(os.path.join(libdir, &amp;lsquo;libmecab.so&amp;rsquo;))
 一度読み込んでしまったライブラリは再利用されるため、 `import MeCab`はここで読み込んだライブラリにリンクされます(importの順番が重要なの闇な感じがする)。 `LD_LIBRARY_PATH`が正しく設定されている必要はありません。 さて、これで`lambda_function.py`と`tokenizer.py`が分かれている必要がなくなったので、二つを合体してみましょう。 ``` python lambda_function.py # coding=utf-8 import os import settings import logging logger = logging.</description>
    </item>
    
    <item>
      <title>MeCabをPython3から使う(続報)</title>
      <link>https://shogo82148.github.io/blog/2015/12/20/2015-12-20-mecab-in-python3-final/</link>
      <pubDate>Sun, 20 Dec 2015 01:03:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2015/12/20/2015-12-20-mecab-in-python3-final/</guid>
      <description>Python3からMeCabを扱おうとして挫折していたのですが (MeCabをPython3から使う(中間報告))、 改めて調査して、上手くいかなかった原因が分かったのでご報告します。
おさらい Python3で以下のようにMeCabを使おうとすると
import MeCab tagger = MeCab.Tagger(&amp;#39;&amp;#39;) text = u&amp;#39;MeCabで遊んでみよう!&amp;#39; node = tagger.parseToNode(text) while node: print(node.surface + &amp;#39;\t&amp;#39; + node.feature) node = node.next surfaceが全く読み取れないという現象に遭遇していました。
BOS/EOS,*,*,*,*,*,*,*,* 名詞,一般,*,*,*,*,* 助詞,格助詞,一般,*,*,*,で,デ,デ 動詞,自立,*,*,五段・バ行,連用タ接続,遊ぶ,アソン,アソン 助詞,接続助詞,*,*,*,*,で,デ,デ Traceback (most recent call last): File &amp;#34;m.py&amp;#34;, line 10, in &amp;lt;module&amp;gt; print( node.surface + &amp;#39;\t&amp;#39; + node.feature ) UnicodeDecodeError: &amp;#39;utf-8&amp;#39; codec can&amp;#39;t decode byte 0xa3 in position 1: invalid start byte 解決策 詳しい原因なんてどうでもいいからMeCabを使いたい人向けに、最初に解決方法を書いておきます。 以下のように本当に解析したい対象を解析する前に、一度parseをしておけばOKです。
import MeCab tagger = MeCab.</description>
    </item>
    
    <item>
      <title>MeCabをPython3から使う(中間報告)</title>
      <link>https://shogo82148.github.io/blog/2015/06/02/2015-06-02-mecab-in-python3/</link>
      <pubDate>Tue, 02 Jun 2015 23:12:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2015/06/02/2015-06-02-mecab-in-python3/</guid>
      <description>先日このようなツイートを見かけて、 「Python3になってGCの挙動変わったのかな？」と疑問に思ったので調査してみました。
MeCabをPythonから使う注意点とか - Shogo&amp;#39;s Blog http://t.co/vJnOqZfUd7 @shogo82148さんから python3だと変数に代入しなくても動くのだけど2.xでは留意しないといけない
&amp;mdash; NOKUBI Takatsugu野首貴嗣 (@knok) 2015年6月1日 
Python3へのMeCabインストール 手元のPython3.4.3にMeCab Bindingをインストールします。 MeCabの公式(Google Codeサービス停止にともないgithub pageへ移行している模様)から落とせる Python BindingはPython2.x向けのため、setup.pyがそのままでは動きません。 Python3.xでは非互換な文法の変更が入ったので以下のように書き換える必要があります。
diff --git a/setup.py.org b/setup.py index 4486cbb..657945a 100644 --- a/setup.py.org +++ b/setup.py @@ -7,7 +7,7 @@ def cmd1(str):  return os.popen(str).readlines()[0][:-1] def cmd2(str): - return string.split (cmd1(str)) + return cmd1(str).split()  setup(name = &amp;#34;mecab-python&amp;#34;, version = cmd1(&amp;#34;mecab-config --version&amp;#34;),  あとは python setup.py install で入ります。
動かしてみる 以前書いた「MeCabをPythonから使う注意点とか」を見返しながら、 GCされて上手く動かない例 をPython3.</description>
    </item>
    
    <item>
      <title>MeCabをPythonから使う注意点とか</title>
      <link>https://shogo82148.github.io/blog/2012/12/15/2012-12-15-mecab-python/</link>
      <pubDate>Sat, 15 Dec 2012 17:38:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2012/12/15/2012-12-15-mecab-python/</guid>
      <description>日本語の文章をコンピュータで色々いじるときに， 必ずと言っていいほどよく使うのが形態素解析器． スペースなどの明示的な区切りの無い日本語を単語に分割してくれるツールです． 中でもMeCabが非常に有名で，さまざまなところで使われています．
MeCabはいろいろな言語から呼び出すことができます． 自然言語処理の分野ではPythonが人気のようですね．僕も使っています． しかし，MeCabをPythonから使う場合，注意する点がいくつかあります． そこにハマっている後輩を見かけたので，文章として残しておくことにします． Python2系が対象です(3系はよくわからない)． 注意するのは以下の二点です．
 MeCabに渡す文字列はencode，戻ってきた文字列はdecodeする MeCabに渡した文字列は必ず変数に入れておく  EncodeとDecode Python2系の文字列には，バイト列として扱われる文字列(str)と，Unicodeで表現された文字列(unicode)があります． 日本語を扱う場合，strだといろいろ問題があるので，特に理由がなければunicodeを使うべきです． しかし，MeCabはstrしか受け付けません． そこでMeCabに渡す直前・直後でencode・decodeするようにします．
import MeCab tagger = MeCab.tagger(&amp;#39;-Owakati&amp;#39;) text = u&amp;#39;MeCabで遊んでみよう！&amp;#39; result = tagger.parse(text) # エラー！ encoded_text = text.encode(&amp;#39;utf-8&amp;#39;) # encodeが必要 encoded_result = tagger.parse(text) result = result.decode(&amp;#39;utf-8&amp;#39;) # 必ずdecode &#39;utf-8&#39;の部分は辞書の文字コードに合わせて適宜書き換えてください． デフォルトはeuc-jpですが，utf-8の方が幸せになれると思います．
必ず変数に入れる 次にMeCabの作ったノードに直接アクセスして，品詞情報などを取ってくることを考えます． 適当に書いてみるとこんな感じでしょうか．
import MeCab tagger = MeCab.tagger(&amp;#39;&amp;#39;) text = u&amp;#39;MeCabで遊んでみよう！&amp;#39; node = tagger.parseToNode(text.encode(&amp;#39;utf-8&amp;#39;)) while node: #printはstrを渡す必要があるのでdecodeは不要 print node.surface + &amp;#39;\t&amp;#39; + node.</description>
    </item>
    
  </channel>
</rss>