<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>typescript on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/typescript/</link>
    <description>Recent content in typescript on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 22 Jun 2024 11:01:00 +0900</lastBuildDate>
    <atom:link href="https://shogo82148.github.io/categories/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TypeScriptで同時実行数を制限しながら並行実行する</title>
      <link>https://shogo82148.github.io/blog/2024/06/22/2024-06-22-limit-concurrency-in-typescript/</link>
      <pubDate>Sat, 22 Jun 2024 11:01:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2024/06/22/2024-06-22-limit-concurrency-in-typescript/</guid>
      <description>タスクがたくさんあって並行実行することを考えます。 何も考えずにすべてのタスクを並行実行すると負荷が高すぎるので、 同時実行数を制限したいことがありました。
ググってみるといくつか実装例が見つかりますが、その多くは配列を受け入れるものです。 AsyncIterator を受け入れるバージョンが欲しいなと思い、 他の人の記事を参考に実装してみました。
IteratorまたはIterableを受け入れる版 いきなりAsyncIterator版を実装するのは大変なので、Iterator版で練習してみました。 以下の関数 limitConcurrency は、タスクのIteratorまたはIterableを受け取って、並行実行します。
async function limitConcurrency&amp;lt;T&amp;gt;( iter: Iterator&amp;lt;() =&amp;gt; Promise&amp;lt;T&amp;gt;&amp;gt; | Iterable&amp;lt;() =&amp;gt; Promise&amp;lt;T&amp;gt;&amp;gt;, limit: number ) { const iterator = Symbol.iterator in iter ? iter[Symbol.iterator]() : iter; async function runNext(): Promise&amp;lt;void&amp;gt; { for (;;) { const { value: task, done } = iterator.next(); if (done) { return; } await task(); } } try { const initialTasks: Promise&amp;lt;void&amp;gt;[] = []; for (let i = 0; i &amp;lt; limit; i++) { initialTasks.</description>
    </item>
  </channel>
</rss>
