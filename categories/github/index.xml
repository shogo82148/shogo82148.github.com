<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/github/</link>
    <description>Recent content in Github on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 05 Dec 2019 00:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://shogo82148.github.io/categories/github/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GitHub Goveralls Action を公開しました</title>
      <link>https://shogo82148.github.io/blog/2019/12/05/actions-goveralls/</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2019/12/05/actions-goveralls/</guid>
      <description>この記事はフラーAdvent Calendar 2019の5日目の記事です。 4日目はふるふる先生の「GoでJSONを良い感じに使おうと思ってハマった話」でした。
さて、首を長くして待っていた GitHub Actions がついにGAになりましたね。 (日本語版ヘルプだとまだbetaになってますが)
さっそくActionを自作してちょっと前に公開してたんですが、この機会に紹介しようと思います。
 actions-goveralls - Actions GitHub Marketplace shogo82148/actions-goveralls  使い方 coveralls.io はコードカバレッジの可視化サービスです。 実は公式でGitHub Actionsを提供しており、Coveralls GitHub Action を使うと 「JavaScriptのプロジェクトであれば」簡単にカバレッジを送信することができます。
しかし、Goが出力するカバレッジはJavaScriptと形式が違うので、そのままは使えません。 他のCIではmattn/goverallsにお世話になっていたので、 これを GitHub Actions として簡単に使えるようにしました。 最小限の設定はこれだけです。
# ここらへんにテストとかの設定ば別途描く# coveralls.io に送信-uses:shogo82148/actions-goveralls@v1with:github-token:${{secrets.GITHUB_TOKEN}}path-to-profile:profile.cov 簡単ですね。
マトリックスビルド され、後発なだけあって GitHub Actions では他のCIの便利な機能を簡単に使えます。 その中でも最も便利(偏見)なのがマトリックスビルドです。 例えば以下のように設定するだけで、Linux, macOS, Windows で同じテストを実行できます。
strategy:fail-fast:falsematrix:os:-ubuntu-latest-macos-latest-windows-latestruns-on:${{matrix.os}} ・・・と、ここまではいいんですが、カバレッジをとって coveralls に送ると残念なことになります。 (例:https://coveralls.io/builds/27037772)
どれかがLinuxでどれかがmacOSで残った最後がWindowsの実行結果なのですが、 ジョブの名前が一緒なので区別が付きません。
parallel build webhook coveralls にはこの問題を解決してくれるparallel build webhookというものがあります。 travis-ci だと coveralls側がいい感じにフックを挟んで処理してくれるんですが、GitHub Actions では自前でやらないといけません。 全部自前でやるのは面倒なので、actions-goveralls には補助する機能をいれてあります。</description>
    </item>
    
    <item>
      <title>Setup Perl GitHub Action を公開しました</title>
      <link>https://shogo82148.github.io/blog/2019/09/18/actions-setup-perl/</link>
      <pubDate>Wed, 18 Sep 2019 23:14:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2019/09/18/actions-setup-perl/</guid>
      <description>GitHub Actions の公式レポジトリには Perl のセットアップアクションが無いぞ！ ということで三連休+αで書きました。
 actions-setup-perl on GitHub Marketplace  使い方 Marketplaceの設定例は間違えているので以下を参照。(これ書いていて気がついた) 必要な Perl のバージョンを渡すだけです。簡単！
steps:-uses:actions/checkout@master-uses:shogo82148/actions-setup-perl@v1with:perl-version:&amp;#39;5.30&amp;#39;-run:cpanm--installdeps.-run:prove-lvt Ubuntu, macOS, Windows 各種OSにも対応しています。
jobs:build:runs-on:${{matrix.os}}strategy:matrix:os:[&amp;#39;ubuntu-18.04&amp;#39;,&amp;#39;macOS-10.14&amp;#39;,&amp;#39;windows-2019&amp;#39;]perl:[&amp;#39;5.30&amp;#39;,&amp;#39;5.28&amp;#39;]name:Perl${{matrix.perl}}on${{matrix.os}}steps:-uses:actions/checkout@v1-name:Setupperluses:shogo82148/actions-setup-perl@v1with:perl-version:${{matrix.perl}}-run:perl-V-run:cpanm--installdeps.-run:prove-lvt 動作サンプル
 https://github.com/shogo82148/p5-Acme-OkMacopy/blob/master/.github/workflows/test.yml https://github.com/shogo82148/p5-Acme-OkMacopy/commit/15bf2162a26a1ea8bfe748ddc980164f049a1c67/checks  ok macopy をこんな形で使うことになろうとは、あの当時は思っていなかった・・・
裏方の話 Actionでインストールされるperlについて GitHub Actions の Runner にはキャッシュ領域が用意されていて、こういうバイナリはそこに入れるのがお作法のようです。 perlは付属するCPANモジュールのパスがバイナリに組み込まれているので、パスを変更したい場合は再ビルドが必要です。
そういうわけで、perl 5.8.5 から perl 5.30.0 までの全てのバージョンを再ビルドしました。 もちろん GitHub Actions で！
調子に乗ってパッチレベルも全部そろえたので、perl46バージョン × OS 3platform + テスト2種 × OS 5platform = 158ジョブです。 (↑のスクショは perl 5.8.0 から perl 5.30.0 ビルド時のもの。後述するようにちょっとサポートバージョンを減らしたので、最終的なジョブ数は111です)
ビルドしたバイナリはS3にあげています。 なぜかmacOSにはawscliが入っていなかったので、S3からファイルを落とすだけのツールを作った で作成した s3cli-mini を使っています。 まさかこんな形で再び使うことになるとは。</description>
    </item>
    
    <item>
      <title>GithubのIRCフックがgollumをサポートしました</title>
      <link>https://shogo82148.github.io/blog/2014/11/15/github-irc-hook-supports-gollum/</link>
      <pubDate>Sat, 15 Nov 2014 22:24:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2014/11/15/github-irc-hook-supports-gollum/</guid>
      <description> GithubのIRCフックがgollum(Wikiページの変更通知)をサポートしました。
最近ぴーちんさんがWikiの編集業に精を出していて、編集の度にIRCに「変更しました！」とポストしてました。 「自動で通知してくれるとうれしいよねー」と話していたら、ある秘密を教えてもらいました。
acidlemon: githubのwiki編集のIRC通知、ここに秘密が隠されています https://github.com/github/github-services/blob/master/lib/services/irc.rb acidlemon: Blameおして黄色い変なアイコンを調べれば何をすれば良いかわかるはず おや・・・何処かで見た黄色いアイコンが・・・
真似してgithub-servicesにプルリクエストをだしてマージしてもらった。 で、さっき対応イベント一覧見てたらgollum増えてる！ マージのときのコメントで「a few days」と言われたので2,3日かかるのかな？と思ってたけど、24時間経たないうちに反映されたよ！ 早い！！
さっそくGithub::Hooks::Managerを使って設定しておきました。 「[project-name] shogo82148 edited wiki page hogehoge」みたいに編集されたページが通知されます。
便利！！！
SEE ALSO  github-services github の irc hook に幾つかの event type が追加されました - @soh335 memo GithubのHookについてのまとめとソリューション - おそらくはそれさえも平凡な日々  </description>
    </item>
    
    <item>
      <title>githubのタブサイズを変えるChrome拡張を作った</title>
      <link>https://shogo82148.github.io/blog/2014/02/10/github-tab-change/</link>
      <pubDate>Mon, 10 Feb 2014 08:01:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2014/02/10/github-tab-change/</guid>
      <description>にゃんぱすー。 最近 C# のコードを見ることが多くなってきました。 開発はVSやMonoDevelop等のIDEを使っているのですが、 diffの確認程度ならgithub上で行っています。 しかし、github上の表示は崩れて非常に読みづらい・・・。
githubのコードプレビューはタブストップが8文字幅で表示されます。 しかし、有名ドコロのIDEはデフォルトがタブインデント、4文字幅で設定されているので、 どうしても表示が狂ってしまいます。 タブインデントではなくスペースインデントを使えば解決☆ なのですが、スペースインデントの中にタブインデントを混入する場合が多々あるので、僕は疲れました・・・。 混在したときのコードなんて、読めたものじゃないですよ。
そこで、githubのタブサイズを変更する Chrome拡張を作ってみました。 ユーザスタイルシートでもできるんですが、まあ、勉強を兼ねて。
 GithubTabChange  インストール後、github上のレポジトリを開くと≡みたいなマークがURLの横に表示されます。 それをクリックでタブサイズの設定変更が可能です。 githubのプレビューの一斉設定だけでなく、 レポジトリ単位でタブサイズを切り替えることができます。
アイコンとか設定画面のデザインとかちゃんとしたものを作る気力はなかったので、 皆さんのprをお待ちしております。
 GithubTabChange on github  (これ作ってるときに、githubのHTMLソースの中にtab-size-8というクラスを見つけたのですが、実はどこかに隠し機能としてあるんですかね？)</description>
    </item>
    
    <item>
      <title>GitHubにブログを設置してみたよ</title>
      <link>https://shogo82148.github.io/blog/2012/03/21/test/</link>
      <pubDate>Wed, 21 Mar 2012 19:29:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2012/03/21/test/</guid>
      <description>TLにGitHubでブログのホスティングしている人がいたので、 「githubとjekyllとoctopressで作る簡単でモダンなブログ」 を参考に作ってみましたよ。
RVM のインストール 自分の環境には Ruby 1.9.2.2 が入っているんだけど、Ocropressでは Ruby 1.9.2 が必要らしい。 そのままでもいけるかと思ったけど、怒られた。 rake コマンドを全部 bundle exec rake に置き換えると一応実行はできるけど、なんだか警告がでる。
こういう時は複数のバージョンの Ruby を切り替えて管理できる、 rvm というのを使うといいらしい。 公式サイトの「Installing RVM」通りにコマンドを打てばOK。
bash -s stable &amp;lt; &amp;lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer) echo &amp;#39;[[ -s &amp;#34;$HOME/.rvm/scripts/rvm&amp;#34; ]] &amp;amp;&amp;amp; . &amp;#34;$HOME/.rvm/scripts/rvm&amp;#34; # Load RVM function&amp;#39; &amp;gt;&amp;gt; ~/.bash_profile source ~/.bash_profile rvm install 1.9.2 &amp;amp;&amp;amp; rvm use 1.9.2 rvm rubygems latest Octopress のインストール あとはgitでクローンして、インストールコマンドを叩くだけ。
git clone git://github.com/imathis/octopress.git octopress cd octopress gem install bundler bundle install rake install rake setup_github_pages 最後のコマンドは GitHub Pages に公開するためのもの。公開用のレポジトリを聞いてくるので予め登録しておこう。</description>
    </item>
    
  </channel>
</rss>