<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GitHub on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/github/</link>
    <description>Recent content in GitHub on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 22 Jun 2023 11:45:00 +0900</lastBuildDate><atom:link href="https://shogo82148.github.io/categories/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GitHub Actionsの利用量をまとめる</title>
      <link>https://shogo82148.github.io/blog/2023/06/22/2023-06-22-github-actions-usage-report/</link>
      <pubDate>Thu, 22 Jun 2023 11:45:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2023/06/22/2023-06-22-github-actions-usage-report/</guid>
      <description>GitHub Actionsの利用量はsettings/billingから確認できます。
それはいいんですが、問題は今月分しか確認できないこと！
「先月は〇〇分使ったから上限いくらに設定しておくか〜〜」ということができません。 APIは見つけたので、取得スクリプトを組んでみました。
 Get GitHub Actions billing for an organization  集計スクリプト GitHub REST APIをたたいて、結果をGoogle Spreadsheetにまとめます。 GitHub REST APIを叩く部分はGitHub CLIを使えばすぐにできるんですが、 Google Spreadsheetへの書き込みをシェルスクリプトで組むのはちょっと大変です。
今回はGoで書いてみました。
package main import ( &amp;#34;context&amp;#34; &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os&amp;#34; &amp;#34;time&amp;#34; &amp;#34;google.golang.org/api/sheets/v4&amp;#34; ) func main() { ctx := context.Background() token := os.Getenv(&amp;#34;GITHUB_TOKEN&amp;#34;) if token == &amp;#34;&amp;#34; { log.Fatal(&amp;#34;GITHUB_TOKEN is required&amp;#34;) } sheetID := os.Getenv(&amp;#34;SHEET_ID&amp;#34;) if sheetID == &amp;#34;&amp;#34; { log.Fatal(&amp;#34;SHEET_ID is required&amp;#34;) } org := os.</description>
    </item>
    
    <item>
      <title>GitHub経由で脆弱性報告してみた</title>
      <link>https://shogo82148.github.io/blog/2023/06/18/2023-06-18-report-vulnerability-via-github/</link>
      <pubDate>Sun, 18 Jun 2023 17:00:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2023/06/18/2023-06-18-report-vulnerability-via-github/</guid>
      <description>lestrrat-go/jwxに脆弱性を発見したので報告しました。
 GHSA-rm8v-mxj3-5rmq Potential Padding Oracle Attack Vulnerability  「メールでやり取りするの面倒だなー」と思っていたら、いつのまにかGitHub経由で脆弱性報告できるようになってるじゃないですか。
 Privately reporting a security vulnerability  というわけで試してみたお話です。
背景 脆弱性報告の難しさ 脆弱性に関する情報は悪い人に悪用される可能性があるので、GitHubのIssueで報告するのは厳禁です。 公開レポジトリのIssueは広く公開されているので、悪い人に見つかってしまいます。
そのため、基本的に脆弱性の報告者はメンテナーと直接やり取りをする必要があります。 しかし、やり取りの方法に決まったルールはありません。 GitHubではセキュリティーポリシーをSECURITY.mdに記載するルールになっているので、運が良ければSECURITY.mdに連絡先が書いてあります。
 Adding a security policy to your repository  運が悪ければ連絡先を頑張って探すところからはじめなければなりません。
まあ、たいていは連絡先としてメールアドレスが見つかるので、そこにメールを送ることになります。 ただし、メールというものは脆弱性の報告に特化したものではないので、どうやって情報をやり取りするかお互いに工夫が必要です。 僕はやったことないですが、修正のパッチをメーリングリストに送るんですかね。 大変そうです。
 脆弱性と聞けば、CVEのような脆弱性情報データベースや、IPAの脆弱性関連情報の届出受付を思い浮かべるひとも多いでしょう。
 共通脆弱性識別子CVE概説 - IPA  魚拓   脆弱性関連情報の届出受付 - IPA  魚拓    しかしこういった制度も、メンテナーの連絡先を管理しているわけではありません。 メンテナーの連絡先を探す手間も、メンテナーとのやり取りをする手間もかわりません。 （まあやったことないけど）
実際に報告した人のレポートにもありますが、「虎の威を借る」効果は多少期待できるでしょう。 CVEやIPAの名前だけ知っているというひとは多いでので、優先度を上げてくれるメンテナーも多いと思います。
 脆弱性情報をIPAへ報告して修正されました #情報処理安全確保支援士 アカネちゃん、JVNに謝辞が載る：こうしす！　こちら京姫鉄道 広報部システム課 ＠IT支線（17） - ＠IT  逆に言えば、脆弱性レポートの段階では、その程度の効果しかありません。</description>
    </item>
    
    <item>
      <title>GitHubに接続したらWARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!と怒られる件</title>
      <link>https://shogo82148.github.io/blog/2023/03/24/2023-03-24-github-identification-has-changed/</link>
      <pubDate>Fri, 24 Mar 2023 17:13:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2023/03/24/2023-03-24-github-identification-has-changed/</guid>
      <description>TL;DR SSH経由でGitHubに接続したら、以下のメッセージが表示されました。
% ssh -T github.com @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the RSA key sent by the remote host is SHA256:uNiVztksCsDhcc0u9e8BujQXVUpKZIDTMczCvj3tD2s. Please contact your system administrator. Add correct host key in /Users/shogo.</description>
    </item>
    
    <item>
      <title>GitHub GraphQL のノードIDフォーマットが変わるらしい (続報)</title>
      <link>https://shogo82148.github.io/blog/2022/11/16/2022-10-19-perl-webdb-vol131/</link>
      <pubDate>Wed, 16 Nov 2022 17:17:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2022/11/16/2022-10-19-perl-webdb-vol131/</guid>
      <description>以前 GitHub GraphQL のノードIDフォーマットが変わるらしい に書いたように、 将来ノードIDフォーマットが変わるらしいらしいです。 これについて、旧式のノードIDを使用した場合に警告がでるようになった、とアナウンスがありました。
 GraphQL Legacy Global ID Deprecation Message  というわけで、どんな警告文がでるのか試してみました。
実際の挙動 試しに僕の名前を取得するクエリを実行してみると、以下のような警告文がでました。
$ gh api graphql -f query=&#39;query { node(id: &amp;quot;MDQ6VXNlcjExNTczNDQ=&amp;quot;) { ... on User { id name login } } }&#39; { &amp;quot;data&amp;quot;: { &amp;quot;node&amp;quot;: { &amp;quot;id&amp;quot;: &amp;quot;MDQ6VXNlcjExNTczNDQ=&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;ICHINOSE Shogo&amp;quot;, &amp;quot;login&amp;quot;: &amp;quot;shogo82148&amp;quot; } }, &amp;quot;extensions&amp;quot;: { &amp;quot;warnings&amp;quot;: [ { &amp;quot;type&amp;quot;: &amp;quot;DEPRECATION&amp;quot;, &amp;quot;message&amp;quot;: &amp;quot;The id MDQ6VXNlcjExNTczNDQ= is deprecated. Update your cache to use the next_global_id from the data payload.</description>
    </item>
    
    <item>
      <title>GitHub GraphQL のノードIDフォーマットが変わるらしい</title>
      <link>https://shogo82148.github.io/blog/2021/11/29/github-graphql-global-node-id-will-change/</link>
      <pubDate>Mon, 29 Nov 2021 23:08:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2021/11/29/github-graphql-global-node-id-will-change/</guid>
      <description>弊社では Terraform GitHub Provider を使って GitHub のレポジトリ管理・権限管理などを行っているのですが、 プロバイダーが repository_id を認識してくれない問題に遭遇しました。 原因を探ってみると GitHub GraphQL API に かなり大きな変更が入ること を知ったので、メモとして残しておきます。
グローバルノードID GraphQL API から扱えるすべてのオブジェクト (レポジトリ、ユーザー、etc) にはIDが振ってあります。
 Using global node IDs  例えば僕 (@shogo82148) のノードIDは MDQ6VXNlcjExNTczNDQ= です。
$ curl https://api.github.com/users/shogo82148 | jq .node_id &amp;quot;MDQ6VXNlcjExNTczNDQ=&amp;quot; このノードIDを使って GraphQL のクエリを書くことが出来ます。
$ gh api graphql -f query=&#39;query { node(id: &amp;quot;MDQ6VXNlcjExNTczNDQ=&amp;quot;) { ... on User { name login } } }&#39; { &amp;quot;data&amp;quot;: { &amp;quot;node&amp;quot;: { &amp;quot;name&amp;quot;: &amp;quot;Ichinose Shogo&amp;quot;, &amp;quot;login&amp;quot;: &amp;quot;shogo82148&amp;quot; } } } ノードIDにはオブジェクトの種類の情報 (MDQ6VXNlcjExNTczNDQ= の例では「ユーザー」) も含まれているので、 GitHub が管理している全オブジェクトの中から一意に目的のノードを特定することが出来ます。</description>
    </item>
    
    <item>
      <title>GitHub Actions &#43; OIDC Token の情報をAWSのセッションタグに設定してみた</title>
      <link>https://shogo82148.github.io/blog/2021/09/24/github-actions-oidc/</link>
      <pubDate>Fri, 24 Sep 2021 13:58:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2021/09/24/github-actions-oidc/</guid>
      <description>GitHub Actions で ID Token が使えるようになったと話題ですね。
うおー！サイコー！！！！！ https://t.co/2stS4miUOD
&amp;mdash; Tori Hara (@toricls) September 15, 2021  Ok I blogged about it. That&amp;#39;s how excited I am. 1. Deploy this CFN template
2. Write this GHA workflow
3. Never worry about IAM users again
https://t.co/KJrr2Jw4bE pic.twitter.com/9IcocgurxP
&amp;mdash; Aidan W Steele (@__steele) September 15, 2021  AWS IAM が OpenID Connect (OIDC) を使った認証 (sts:AssumeRoleWithWebIdentity) に対応しているので、認証プロバイダ(IdP)を用意してあげればシークレットの登録が不要になるということらしいです。 これは便利！
セッションタグを渡したい これはまさに「AWS_SECRET_ACCESS_KEY を GitHub Actions secrets へ突っ込むのに疲れた俺達は」で実現したかったことですね。 このままだとせっかく作ったアクションが不要になりそうで悔しいので このアクションにずっと追加したかった機能があるのですが、OIDCトークンを使うと簡単に実装できそうだったので、お試しで追加してみました。</description>
    </item>
    
    <item>
      <title>祝日APIを公開しました</title>
      <link>https://shogo82148.github.io/blog/2021/09/04/holidays-api-is-released/</link>
      <pubDate>Sat, 04 Sep 2021 18:17:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2021/09/04/holidays-api-is-released/</guid>
      <description>プログラマーなら誰しも一度は祝日について頭を悩ませたことがあるでしょう(要出典)。
日付が固定ならまだ楽なんですが、「春分の日」「秋分の日」のように天体の運行によって決まる祝日があったり、 ハッピーマンデー制度によって「成人の日(一月の第二月曜日)」のような曜日固定の祝日があったり、 振替休日という概念があったりと、ちゃんと考えるとかなり面倒です。
更に面倒なのが国の施策によってたまに変更になるという点です。 東京オリンピックの延期で祝日が移動したのは記憶に新しいですね。 前年の 12 月 4 日に法律が公布されるという、カレンダーの印刷会社泣かせなスケジュール変更です。
 2021 年の祝日移動について 東京五輪開催で夏の祝日が移動 〜各言語の祝日ライブラリの 2021 年の祝日対応を追ってみる〜  プログラムなら更新可能ですが、ライブラリとして組み込まれているとうっかり更新を忘れてしまうこともありますよね。 そういうわけで API として提供されていると嬉しいな、プログラミング言語に縛られることもないし、ということで作りました。
 github.com/shogo82148/holidays-jp holidays-jp.shogo82148.com  使い方 パスに日付を入力して GET リクエストを投げるだけのシンプルな API です。
ある年の祝日一覧を取得する GET /{year} で year の祝日一覧を返します。 以下は 2021 年の祝日一覧を返す例です。
curl https://holidays-jp.shogo82148.com/2021 | jq . { &amp;quot;holidays&amp;quot;: [ { &amp;quot;date&amp;quot;: &amp;quot;2021-01-01&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;元日&amp;quot; }, { &amp;quot;date&amp;quot;: &amp;quot;2021-01-11&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;成人の日&amp;quot; }, { &amp;quot;date&amp;quot;: &amp;quot;2021-02-11&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;建国記念の日&amp;quot; }, (snip) { &amp;quot;date&amp;quot;: &amp;quot;2021-11-23&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;勤労感謝の日&amp;quot; } ] } ある月の祝日一覧を取得する GET /{year}/{month} で月の祝日一覧を返します。 以下は 2021 年 1 月の祝日一覧を返す例です。</description>
    </item>
    
    <item>
      <title>Perl 5.34 がリリースされました</title>
      <link>https://shogo82148.github.io/blog/2021/05/22/perl-5.34-is-released/</link>
      <pubDate>Sat, 22 May 2021 15:44:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2021/05/22/perl-5.34-is-released/</guid>
      <description>Perl 5.34 がリリースされましたね。 と、言うわけで、 AWS::Lambda と actions-setup-perl に Perl 5.34 を追加しました。
AWS::Lambda AWS Lambda Layers の ARN 一覧はこちら。 具体的な使い方は過去の記事を参考にどうぞ。 もちろん大阪リージョンも入ってますよ！
 Amazon Linux 2 ベース Perl ランタイム  arn:aws:lambda:af-south-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:ap-east-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:ap-northeast-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:ap-northeast-2:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:ap-northeast-3:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:ap-south-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:ap-southeast-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:ap-southeast-2:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:ca-central-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:eu-central-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:eu-south-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:eu-west-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:eu-west-2:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:eu-west-3:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:me-south-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:sa-east-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:us-east-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:us-east-2:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:us-west-1:445285296882:layer:perl-5-34-runtime-al2:1 arn:aws:lambda:us-west-2:445285296882:layer:perl-5-34-runtime-al2:1   Paws レイヤー  arn:aws:lambda:af-south-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:ap-east-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:ap-northeast-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:ap-northeast-2:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:ap-northeast-3:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:ap-south-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:ap-southeast-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:ap-southeast-2:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:ca-central-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:eu-central-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:eu-south-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:eu-west-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:eu-west-2:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:eu-west-3:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:me-south-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:sa-east-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:us-east-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:us-east-2:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:us-west-1:445285296882:layer:perl-5-34-paws-al2:1 arn:aws:lambda:us-west-2:445285296882:layer:perl-5-34-paws-al2:1    合わせて Docker Image も公開済みです。</description>
    </item>
    
    <item>
      <title>AWS_SECRET_ACCESS_KEY を GitHub Actions secrets へ突っ込むのに疲れた俺達は</title>
      <link>https://shogo82148.github.io/blog/2021/03/24/actions-aws-assume-role/</link>
      <pubDate>Wed, 24 Mar 2021 21:57:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2021/03/24/actions-aws-assume-role/</guid>
      <description>「GitHub Actions から継続的デプロイをしたい！」と思ったときに、 僕の扱うデプロイ先は AWS なことが多いので AWS のキー (AWS_ACCESS_KEY, AWS_SECRET_ACCESS_KEY ) を GitHub Actions secrets へ突っ込む必要があります。 まあ一回や二回ならやるんですが、デベロップメント、ステージング、プロダクション、と複数環境あったり、 プロジェクトも複数あったりして、中々の回数設定を行わなければなりません。 設定するだけでつらいのに、AWS はキーのローテーションを勧めてきます。つらい。
と言うわけで、シークレットの管理を極力しなくて済む方法を考えて、設定用の Action を作成しました。
 fuller-inc/actions-aws-assume-role Configure AWS Credentials by Assuming Roles  2021-08-19 更新 「会社でも使いたいな(ﾎﾞｿｯ」と言ったら社のアカウントで管理してもらえることになりました。 それにともないアクションの URL が shogo82148/actions-aws-assume-role から fuller-inc/actions-aws-assume-role に変更になっています。 正しくリダイレクトされるようですが、念の為 URL の変更をお願いします。
信頼関係に指定する AWS アカウント 053160724612 に変更はありません。 こんなこともあろうかと専用の AWS アカウントを作成しておいたので、まるごと権限を移しました。
使い方 まずは AWS 側に IAM Role を作成します。 IAM Role の信頼関係(trust policy) には以下の内容を記載します。 信頼する AWS アカウントには 053160724612 を指定してください。 これはフラー株式会社の管理している AWS アカウントなので、フラーを信頼できる方だけこの先に進んでください。 外部 ID(ExternalId) にはこのロールを使用する予定のレポジトリ名を入れます。</description>
    </item>
    
    <item>
      <title>Dependabot が起動する GitHub Actions Workflow から write 権限が無くなった件</title>
      <link>https://shogo82148.github.io/blog/2021/03/17/actions-check-permissions/</link>
      <pubDate>Wed, 17 Mar 2021 19:14:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2021/03/17/actions-check-permissions/</guid>
      <description>Dependabot から送られてくるプルリクエストのテストが最近良くコケるようになったなあと思ったら、 3 月 1 日から GitHub Actions Workflow 内の GITHUB_TOKEN のパーミッションが変更になったそうです。
 GitHub Actions: Workflows triggered by Dependabot PRs will run with read-only permissions  更新されたパッケージに secrets を盗み見るような危険なコードが含まれているかもしれません。 そのようなコードでも安全に実行できるよう read-only のパーミッションで実行されるようになりました。
その結果以下のようなワークフローが失敗するようになってしまいました。
 プルリクエストにラベルをつけるような、レポジトリに対して write パーミッションが必要なワークフロー 外部サービスとのインテグレーションテストをやっていて、連携のためにシークレットを読む必要があるワークフロー  2021-12-01 追記 その後のアップデートで GitHub Token のパーミッションをワークフロー中に明示できるようになり、 dependabot もこれに従うようになりました。
 GitHub Actions: Workflows triggered by Dependabot PRs will respect permissions key in workflows  以下のような設定を追加すれば、GitHub Token を使ってレポジトリへの書き込みも可能です。
# Set the access for individual scopes, or use permissions: write-allpermissions:pull-requests:writeissues:writerepository-projects:writeまたこの記事中で以下のように書いていますが、</description>
    </item>
    
    <item>
      <title>Setup Perl Environment Action のストレージを Azure Blob Storage に移行しました</title>
      <link>https://shogo82148.github.io/blog/2021/02/03/setup-perl-uses-azure-blob-storage/</link>
      <pubDate>Wed, 03 Feb 2021 21:33:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2021/02/03/setup-perl-uses-azure-blob-storage/</guid>
      <description>GitHub Actions が一般公開された際に Perl をセットアップするアクションを書きました。
 Setup Perl GitHub Action を公開しました  セットアップのたびに毎回コンパイルすると遅いので、コンパイル済みのバイナリを事前に Amazon S3 にアップロードしていました。 アップロード先に S3 を選んだのは単に自分が AWS に慣れているからなのですが、最近になってちょっとした問題に直面してます。 解決へ向けて S3 から Azure Blob Storage へ移行した、というお話です。
利用する分には全く影響ないはずなんですが、Azure Blob Storage を使ってみたメモも兼ねてやったことを書いておきます。
S3 の問題点 もちろん S3 自体が悪いわけじゃなくって、単に自分の見積もりが甘かっただけなんですが、 ネットワークのアウト向きのデーター転送料が高い！！！！
これまでの僕のユースケースではせいぜい数 MB のバイナリをアップロードするだけだったのが、perl のバイナリは 1 バージョン当たり 100MB 以上あります。 Perl Monger の方々は互換性に気を使うので、いろんな OS、バージョン、コンパイルオプションでテストを実行します。 各 OS(Linux, Windows, macOS)、Perl 5.6〜5.32、multi-thread オプションありなし、という条件でマトリックスのワークフローを組むと 84 ジョブ。 単純計算で 1 ワークフローを実行するだけで、約 8GB の転送が発生するわけです。 2021-02-05 現在のアウトデーター転送料は 0.09USD/GB なので、1 ワークフローあたり 0.72USD です。</description>
    </item>
    
    <item>
      <title>排他制御を行う GitHub Action を作った</title>
      <link>https://shogo82148.github.io/blog/2020/12/30/github-actions-mutex/</link>
      <pubDate>Wed, 30 Dec 2020 00:00:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2020/12/30/github-actions-mutex/</guid>
      <description>弊社では GitHub のレポジトリ管理に Terraform GitHub provider を使用しています。 いちいち手元で terraform plan や terraform apply を叩くのは面倒なので、 GitHub Actions を利用することを考えました。 tf ファイルと現実のリソースとの不整合を避けるために、 これらのコマンドは排他的に実行する必要があります。 例えば terraform apply を実行している最中に terraform plan を実行することはできません。
ここで問題になってくるのが GitHub Actions のジョブ並列数です。 2020-12-30 現在、GitHub Actions は同時に 20 並列まで実行可能ですが、逆に並列数を制限できないという贅沢な悩みがあります。 一応 Matrix Build の並列数を制限するオプションはありますが、 ワークフローをまたいだ並列数の制限はできません。
これを解決するために作ったのが actions-mutex です。
 shogo82148/actions-mutex actions-mutex Marketplace  使い方 ただワークフローから uses を使って呼び出すだけ。 面倒なアクセスキーの設定等は必要ありません。簡単ですね。
on:push:branches:- mainjobs:build:runs-on:ubuntu-lateststeps:- uses:actions/checkout@v2- uses:shogo82148/actions-mutex@v1- run:&amp;#34;: 排他的に実行する必要のあるタスク&amp;#34;仕組み actions-mutex と同様のことを実現する Action として GitHub Action Locks があります。 これの使用も考えたのですが、GitHub Action Locks はバックエンドに AWS DynamoDB を使用しています。 DynamoDB のテーブルを作成した上で AWS IAM を適切に設定する必要があり、セットアップが面倒です (まあ単に DynamoDB 食わず嫌いしているだけ、というのもあります)。</description>
    </item>
    
    <item>
      <title>2020年に書いた GitHub Action &#43; α</title>
      <link>https://shogo82148.github.io/blog/2020/12/03/github-actions-in-2020/</link>
      <pubDate>Thu, 03 Dec 2020 00:00:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2020/12/03/github-actions-in-2020/</guid>
      <description>この記事はフラーAdvent Calendar 2020の3日目の記事です。 2日目はid:gibachan03 さんで「Androidアプリエンジニアになって気づいたiOSとの違い」でした。
 さて、公開当初色々して遊んだ GitHub Actions ですが、今年も引き続き遊んでました。 いくつか新しい Action を作ったものの、このブログでは紹介していなかったので、2020年作ったものを紹介したいと思います。
actions-upload-release-asset  Yet Another Upload Release Asset Action  一言で表すのならば、 Yet Another actions/upload-release-asset GitHub Action です。 GitHub の Releases にファイルをアップロードする Action です。 このアクションは GitHub 公式という安心感はあるのですが、一度のステップで1個のファイルしかアップロードできません。
ソースファイル本体と、ビルド済みバイナリと・・・と色々アップロードしたいものがあったので、新しく作りました。 actions-upload-release-asset は @actions/glob の Glob Pattern に対応しているので、一つのステップで複数のファイルをアップロードすることができます。
例えば、カレントディレクトリにあるテキストファイルを全てアップロードする例は以下のようになります。
on:release:types:- createdjobs:build:runs-on:ubuntu-lateststeps:- uses:actions/checkout@v2# steps for building assets- run:echo &amp;#34;REPLACE ME!&amp;#34; &amp;gt; assets.txt- uses:shogo82148/actions-upload-release-asset@v1with:upload_url:${{ github.event.release.upload_url }}asset_path:&amp;#34;*.txt&amp;#34;actions-setup-mysql  actions-setup-mysql  MySQLをインストールしてくれる Action です。 GitHubが提供している Linux イメージに MySQL はインストールされているのですが、MySQL 8.</description>
    </item>
    
    <item>
      <title>AWS SDK for Go v2 の今後が不安な件について</title>
      <link>https://shogo82148.github.io/blog/2020/10/24/aws-sdk-go-v2-broken/</link>
      <pubDate>Sat, 24 Oct 2020 01:06:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2020/10/24/aws-sdk-go-v2-broken/</guid>
      <description>なんだか今日はもうコードを書く気がしないので、最近思っていることをつらつらと・・・
タイトルの通り、最近 AWS SDK for Go v2 の行く末がちょっと気になっています。 あんまり話題になっているのを観測できていないので、少し現状を書いてみます。
背景 最近あったビッグイベントが v0.25.0 のリリースです。
 Client Updates in the Preview Version of the AWS SDK for Go V2  パッケージの構成が見直され、APIの呼び出し方法も変わりました。 まあ、プレビュー版なのでよくあること・・・なんですが、ちょっと変更点が多すぎて追いきれない。
v0.25.0 移行で入った変更の数々 ちょっと一例を見てみましょう。
設定の読み込み Before: v0.25.0 より前は external パッケージを使って設定を読み込んでいました。
import ( &amp;#34;github.com/aws/aws-sdk-go-v2/aws/external&amp;#34; ) func loadConfig() (aws.Config, error) { return external.LoadDefaultAWSConfig() } After: これが config パッケージに変更になりました。
import ( &amp;#34;github.com/aws/aws-sdk-go-v2/config&amp;#34; ) func loadConfig() (aws.Config, error) { return config.LoadDefaultConfig() } API の呼び出し Before: Requestオブジェクトを作って、そのSendメソッドを呼ぶ形式でした。</description>
    </item>
    
    <item>
      <title>GitHub Actions を使って簡単なボットを作る</title>
      <link>https://shogo82148.github.io/blog/2020/10/23/github-bot-using-actions/</link>
      <pubDate>Fri, 23 Oct 2020 22:03:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2020/10/23/github-bot-using-actions/</guid>
      <description>リリース当初は git push など GitHub 上のイベントしかトリガーにできなかった GitHub Actionsですが、 workflow_dispatch イベント の登場により手動実行ができるようになりました。
社内でもこの機能を利用してワークフローの手動実行をしていたのですが、人間とは欲深いもので「毎回ワークフローを選択してポチポチするのだるい」という声があがってきました。 そういうわけで、Pull Request のコメントをトリガーにしてワークフローを実行する簡単なボットを作ってみました。
方針 workflow_dispatch と issue_comment をトリガーにしたワークフローを作ればいいだけの気もしますが、 以下のような理由からワークフローからワークフローを呼び出す形にしました。
 workflow_dispatch を使った既存のワークフローがあるので、それを流用したい  トリガーが複数あると、イベントの種類に応じてペイロードの形式が異なるので、地味に処理が大変 issue_comment は全部のコメントに反応するので、本当に見たいログが埋もれてしまう   コメントを投稿した Pull Request のHEADでワークフローを実行して欲しい  issue_comment はイベントの発生元として、デフォルトブランチのHEADが渡ってきます イベントのペイロードには、プルリクエストへのリンクが入っているだけで、HEADの情報はわからない    実装 jfurudo1 がサードパーティのアクションを使ってゴニョゴニョやっていたものの、 あんまりうまく行ってなさそうだったので、bash script でエイヤッと書き直しました。
「build」 とコメントすると、.github/workflows/build.yml のワークフローを実行するサンプルです。
name:comment hookon:issue_comment:types:[created]jobs:distribute:runs-on:ubuntu-lateststeps:- name:dispatch workflowrun:|# イベントに関する詳細情報を取ってくる PAYLOAD=$(cat &amp;#34;$GITHUB_EVENT_PATH&amp;#34;) NUMBER=$(echo &amp;#34;$PAYLOAD&amp;#34; | jq -c &amp;#39;.issue.number&amp;#39;) # Issue と Pull Request のコメントが混ざってくるので、Issueは無視する if [[ &amp;#34;$(echo &amp;#34;$PAYLOAD&amp;#34; | jq -c &amp;#39;.</description>
    </item>
    
    <item>
      <title>RE: Pull Request Title Injection とその対策</title>
      <link>https://shogo82148.github.io/blog/2020/04/02/re-pull-request-title-injection/</link>
      <pubDate>Thu, 02 Apr 2020 06:37:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2020/04/02/re-pull-request-title-injection/</guid>
      <description>@furusax が書いてくれた GitHub Action からの Slack 通知機能について以下のようにコメントしたところ、 対策案を考えてくれました。
 そういえばこれって Pull Request Title Injection できないですかね？ まあ、タイトル書くの社員なのでいいんですが。
 対策してみました #はてなブログ
Pull Request Title Injection とその対策 - なまえは まだ ないhttps://t.co/hIkMykFUr8
&amp;mdash; ふるさっくす (@furusax) March 31, 2020   Pull Request Title Injection とその対策  なるほど、こう来ましたか。しかし、まだまだ甘いですね・・・。
2021-08-19 追記 ドッグさん が便利なツールを作ってくれました。
 rhysd/actionlint actionlint v1.4 → v1.6 で実装した新機能の紹介  GitHub Actions のワークフローファイルの静的チェッカーです。 チェック項目にこの記事で紹介したような脆弱性検知も含まれているのでおすすめです！
Pull Request Title Injection について まずはこの記事に出てくる「Pull Request Title Injection」についておさらいです。 以下のような Slack への通知を行う GitHub Actions があります。 github.</description>
    </item>
    
    <item>
      <title>元Yahoo!ジオシティーズ利用者のかたへ、GitHub Pagesのすゝめ</title>
      <link>https://shogo82148.github.io/blog/2020/02/01/goodbye-geocities/</link>
      <pubDate>Sat, 01 Feb 2020 00:00:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2020/02/01/goodbye-geocities/</guid>
      <description>TL;DR  今GitHubにアップロードした内容は1000年残る！ デッドラインは 2020年2月3日(月) 午前7時(日本時間) Yahoo!ジオシティーズのデータがダウンロードできるのは2020年3月31日まで  つまりYahoo!ジオシティーズから移行するなら、今！ GitHubが一番！
Yahoo!ジオシティーズは終了しました Yahoo!ジオシティーズ 公開停止からはや10ヶ月。 ちょっと古いリンクをたどると「Yahoo!ジオシティーズは終了しました」というページを目にすることが多くなりました。
 Yahoo!ジオシティーズは終了しました
2019年3月31日をもちましてYahoo!ジオシティーズのサービス提供を終了いたしました。長らくご愛顧いただき誠にありがとうございました。
ホームページをお持ちのお客様につきましては、2020年3月31日までFTPによるファイルダウンロードのみご利用可能となっております。ホームページやドメインの移行方法などはサービス終了のお知らせをご確認ください。
https://info-geocities.yahoo.co.jp/
 それ見てこんなツイートをしたのですが、なぜ GitHub への移行がいいのか知らない人が多いようなのでちょっと説明しますね。
みんな！FTP経由ならまだジオシティーズからホームページのダウンロードはできる！！今のうちにGitHubへ上げてその黒歴史を1000年後まで残すんだ！！！
&amp;mdash; Ichinose Shogo (@shogo82148) January 31, 2020  GitHub Arctic Code Vault なぜ今 GitHub なのかというと、 GitHub Universe 2019 で GitHub Archive Programというプログラムが発表されたからです。
 今から1,000年後にソフトウェアはどのようになっているのか、また人類はどうなっているのか、推測することしかできません。しかし、今日の時点で最も重要なビルディングブロックを、確実に明日に残せるようにすることは可能です。私たちの世界は、オープンソースソフトウェアで動いています。この文明の隠れた基盤であり、全人類の共有財産です。GitHub Archive Programの使命は、次世代のためにオープンソースソフトウェアを保護することです。
GitHubは、スタンフォード大学図書館、Long Now Foundation、 Internet Archive、Software Heritage Foundation、Piql、Microsoft Research、オックスフォード大学ボドリアン図書館などの機関や団体と連携し、世界のオープンソースコードを保護していきます。この貴重な知識を保護する方法として、あらゆるデータ形式でさまざまな場所に、継続的に複数のコピーを保存していきます。保存場所には、GitHub Arctic Code Vaultと呼ばれる、少なくとも1,000年は存続する非常に長期的なアーカイブも含まれます。
https://github.blog/jp/2019-11-14-universe-day-one/
 このプログラムで最長の保存場所である GitHub Arctic Code Vault は、北極圏に広がる永久凍土の深さ250mに建設されたアーカイブ施設「Arctic World Archive」。</description>
    </item>
    
    <item>
      <title>CloudFormationのテンプレートのLinter actions-cfn-lint のご紹介</title>
      <link>https://shogo82148.github.io/blog/2019/12/06/actions-cfn-lint/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2019/12/06/actions-cfn-lint/</guid>
      <description>この記事はフラーAdvent Calendar 2019の6日目の記事です。 5日目は@shogo82148 さんで「GitHub Goveralls Action を公開しました」でした。
 さて、最近 GitHub Actions を作るのにハマっているので、今日も GitHub Actions の紹介です。
 GitHub Action for CloudFormation Linter with reviewdog shogo82148/actions-cfn-lint  Amazon CloudFormation Infrastructure as Code の盛り上がりも一段落し、今では当たり前のように使っている人も多いと思います。 フラー共創スタジオはAWSがメインなので、CloudFormationをメインに使っています。 色々とクセは強いですが、少なくともtfstateが行方不明になったりはしないので、まあまあ仲良くやっています。
CloudFormation Linter テンプレートを書いている上で地味にややこしいのが、プロパティーの名前や型の統一感が微妙にない、ということです。
例を挙げると、AWS::ApplicationAutoScaling::ScalableTarget の MaxCapacity は整数型です。 これはまあ、納得できますね。
ところが AWS::AutoScaling::AutoScalingGroup の MaxSize は 文字列型 なんです。説明文には「Auto Scaling グループの Amazon EC2 インスタンスの最大数」とあるのに！ オートスケールという似たような機能を持っていて、どちらもスケーリンググループの最大数を表しているの、名前も違えば型が全く違う。
この手のミスは aws cli に付属している テンプレートの validation 機能では見つけられす、実際に反映してみるしかありません。 すぐに失敗してくれればいいんですが、失敗するまでにも十数分かかったりしてかなり面倒です。
 そこでおすすめなのが CloudFormation Linter。 この手の名前のミスや型のミスを指摘してくれるコマンドラインツールです。 各種エディタ用の拡張もあり、VSCodeでも使える ので、ぼくはいつもこれを使っています。</description>
    </item>
    
    <item>
      <title>GitHub Goveralls Action を公開しました</title>
      <link>https://shogo82148.github.io/blog/2019/12/05/actions-goveralls/</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2019/12/05/actions-goveralls/</guid>
      <description>この記事はフラーAdvent Calendar 2019の5日目の記事です。 4日目はふるふる先生の「GoでJSONを良い感じに使おうと思ってハマった話」でした。
 さて、首を長くして待っていた GitHub Actions がついにGAになりましたね。 (日本語版ヘルプだとまだbetaになってますが)
さっそくActionを自作してちょっと前に公開してたんですが、この機会に紹介しようと思います。
 actions-goveralls - Actions GitHub Marketplace shogo82148/actions-goveralls  使い方 coveralls.io はコードカバレッジの可視化サービスです。 実は公式でGitHub Actionsを提供しており、Coveralls GitHub Action を使うと 「JavaScriptのプロジェクトであれば」簡単にカバレッジを送信することができます。
しかし、Goが出力するカバレッジはJavaScriptと形式が違うので、そのままは使えません。 他のCIではmattn/goverallsにお世話になっていたので、 これを GitHub Actions として簡単に使えるようにしました。 最小限の設定はこれだけです。
# ここらへんにテストとかの設定ば別途描く# coveralls.io に送信- uses:shogo82148/actions-goveralls@v1with:github-token:${{ secrets.GITHUB_TOKEN }}path-to-profile:profile.cov簡単ですね。
マトリックスビルド され、後発なだけあって GitHub Actions では他のCIの便利な機能を簡単に使えます。 その中でも最も便利(偏見)なのがマトリックスビルドです。 例えば以下のように設定するだけで、Linux, macOS, Windows で同じテストを実行できます。
strategy:fail-fast:falsematrix:os:- ubuntu-latest- macos-latest- windows-latestruns-on:${{ matrix.os }}・・・と、ここまではいいんですが、カバレッジをとって coveralls に送ると残念なことになります。 (例:https://coveralls.io/builds/27037772)
どれかがLinuxでどれかがmacOSで残った最後がWindowsの実行結果なのですが、 ジョブの名前が一緒なので区別が付きません。
parallel build webhook coveralls にはこの問題を解決してくれるparallel build webhookというものがあります。 travis-ci だと coveralls側がいい感じにフックを挟んで処理してくれるんですが、GitHub Actions では自前でやらないといけません。 全部自前でやるのは面倒なので、actions-goveralls には補助する機能をいれてあります。</description>
    </item>
    
    <item>
      <title>Setup Perl GitHub Action を公開しました</title>
      <link>https://shogo82148.github.io/blog/2019/09/18/actions-setup-perl/</link>
      <pubDate>Wed, 18 Sep 2019 23:14:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2019/09/18/actions-setup-perl/</guid>
      <description>GitHub Actions の公式レポジトリには Perl のセットアップアクションが無いぞ！ ということで三連休+αで書きました。
 actions-setup-perl on GitHub Marketplace  使い方 Marketplaceの設定例は間違えているので以下を参照。(これ書いていて気がついた) 必要な Perl のバージョンを渡すだけです。簡単！
steps:- uses:actions/checkout@master- uses:shogo82148/actions-setup-perl@v1with:perl-version:&amp;#39;5.30&amp;#39;- run:cpanm --installdeps .- run:prove -lv tUbuntu, macOS, Windows 各種OSにも対応しています。
jobs:build:runs-on:${{ matrix.os }}strategy:matrix:os:[&amp;#39;ubuntu-18.04&amp;#39;,&amp;#39;macOS-10.14&amp;#39;,&amp;#39;windows-2019&amp;#39;]perl:[&amp;#39;5.30&amp;#39;,&amp;#39;5.28&amp;#39;]name:Perl ${{ matrix.perl }} on ${{ matrix.os }}steps:- uses:actions/checkout@v1- name:Setup perluses:shogo82148/actions-setup-perl@v1with:perl-version:${{ matrix.perl }}- run:perl -V- run:cpanm --installdeps .- run:prove -lv t動作サンプル
 https://github.com/shogo82148/p5-Acme-OkMacopy/blob/master/.github/workflows/test.yml https://github.com/shogo82148/p5-Acme-OkMacopy/commit/15bf2162a26a1ea8bfe748ddc980164f049a1c67/checks  ok macopy をこんな形で使うことになろうとは、あの当時は思っていなかった・・・
裏方の話 Actionでインストールされるperlについて GitHub Actions の Runner にはキャッシュ領域が用意されていて、こういうバイナリはそこに入れるのがお作法のようです。 perlは付属するCPANモジュールのパスがバイナリに組み込まれているので、パスを変更したい場合は再ビルドが必要です。
そういうわけで、perl 5.8.5 から perl 5.</description>
    </item>
    
    <item>
      <title>GithubのIRCフックがgollumをサポートしました</title>
      <link>https://shogo82148.github.io/blog/2014/11/15/github-irc-hook-supports-gollum/</link>
      <pubDate>Sat, 15 Nov 2014 22:24:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2014/11/15/github-irc-hook-supports-gollum/</guid>
      <description>GithubのIRCフックがgollum(Wikiページの変更通知)をサポートしました。
最近ぴーちんさんがWikiの編集業に精を出していて、編集の度にIRCに「変更しました！」とポストしてました。 「自動で通知してくれるとうれしいよねー」と話していたら、ある秘密を教えてもらいました。
acidlemon: githubのwiki編集のIRC通知、ここに秘密が隠されています https://github.com/github/github-services/blob/master/lib/services/irc.rb acidlemon: Blameおして黄色い変なアイコンを調べれば何をすれば良いかわかるはず おや・・・何処かで見た黄色いアイコンが・・・
真似してgithub-servicesにプルリクエストをだしてマージしてもらった。 で、さっき対応イベント一覧見てたらgollum増えてる！ マージのときのコメントで「a few days」と言われたので2,3日かかるのかな？と思ってたけど、24時間経たないうちに反映されたよ！ 早い！！
さっそくGithub::Hooks::Managerを使って設定しておきました。 「[project-name] shogo82148 edited wiki page hogehoge」みたいに編集されたページが通知されます。
便利！！！
SEE ALSO  github-services github の irc hook に幾つかの event type が追加されました - @soh335 memo GithubのHookについてのまとめとソリューション - おそらくはそれさえも平凡な日々  </description>
    </item>
    
    <item>
      <title>githubのタブサイズを変えるChrome拡張を作った</title>
      <link>https://shogo82148.github.io/blog/2014/02/10/github-tab-change/</link>
      <pubDate>Mon, 10 Feb 2014 08:01:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2014/02/10/github-tab-change/</guid>
      <description>にゃんぱすー。 最近 C# のコードを見ることが多くなってきました。 開発はVSやMonoDevelop等のIDEを使っているのですが、 diffの確認程度ならgithub上で行っています。 しかし、github上の表示は崩れて非常に読みづらい・・・。
githubのコードプレビューはタブストップが8文字幅で表示されます。 しかし、有名ドコロのIDEはデフォルトがタブインデント、4文字幅で設定されているので、 どうしても表示が狂ってしまいます。 タブインデントではなくスペースインデントを使えば解決☆ なのですが、スペースインデントの中にタブインデントを混入する場合が多々あるので、僕は疲れました・・・。 混在したときのコードなんて、読めたものじゃないですよ。
そこで、githubのタブサイズを変更する Chrome拡張を作ってみました。 ユーザスタイルシートでもできるんですが、まあ、勉強を兼ねて。
 GithubTabChange  インストール後、github上のレポジトリを開くと≡みたいなマークがURLの横に表示されます。 それをクリックでタブサイズの設定変更が可能です。 githubのプレビューの一斉設定だけでなく、 レポジトリ単位でタブサイズを切り替えることができます。
アイコンとか設定画面のデザインとかちゃんとしたものを作る気力はなかったので、 皆さんのprをお待ちしております。
 GithubTabChange on github  (これ作ってるときに、githubのHTMLソースの中にtab-size-8というクラスを見つけたのですが、実はどこかに隠し機能としてあるんですかね？)</description>
    </item>
    
    <item>
      <title>GitHubにブログを設置してみたよ</title>
      <link>https://shogo82148.github.io/blog/2012/03/21/test/</link>
      <pubDate>Wed, 21 Mar 2012 19:29:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2012/03/21/test/</guid>
      <description>TLにGitHubでブログのホスティングしている人がいたので、 「githubとjekyllとoctopressで作る簡単でモダンなブログ」 を参考に作ってみましたよ。
RVM のインストール 自分の環境には Ruby 1.9.2.2 が入っているんだけど、Ocropressでは Ruby 1.9.2 が必要らしい。 そのままでもいけるかと思ったけど、怒られた。 rake コマンドを全部 bundle exec rake に置き換えると一応実行はできるけど、なんだか警告がでる。
こういう時は複数のバージョンの Ruby を切り替えて管理できる、 rvm というのを使うといいらしい。 公式サイトの「Installing RVM」通りにコマンドを打てばOK。
bash -s stable &amp;lt; &amp;lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer) echo &amp;#39;[[ -s &amp;#34;$HOME/.rvm/scripts/rvm&amp;#34; ]] &amp;amp;&amp;amp; . &amp;#34;$HOME/.rvm/scripts/rvm&amp;#34; # Load RVM function&amp;#39; &amp;gt;&amp;gt; ~/.bash_profile source ~/.bash_profile rvm install 1.9.2 &amp;amp;&amp;amp; rvm use 1.9.2 rvm rubygems latest Octopress のインストール あとはgitでクローンして、インストールコマンドを叩くだけ。
git clone git://github.com/imathis/octopress.git octopress cd octopress gem install bundler bundle install rake install rake setup_github_pages 最後のコマンドは GitHub Pages に公開するためのもの。公開用のレポジトリを聞いてくるので予め登録しておこう。</description>
    </item>
    
  </channel>
</rss>
