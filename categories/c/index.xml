<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/c/</link>
    <description>Recent content in C on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 18 May 2014 21:24:00 +0900</lastBuildDate><atom:link href="https://shogo82148.github.io/categories/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Google Test を使ってC&#43;&#43;のテストしてみた</title>
      <link>https://shogo82148.github.io/blog/2014/05/18/test-with-google-test/</link>
      <pubDate>Sun, 18 May 2014 21:24:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2014/05/18/test-with-google-test/</guid>
      <description>C++ なライブラリを書こうと思い、C++のテストってどうやるんだろうと調べたメモ。 テストフレームワークとして Google C++ Testing Framework を使用、 コンパイルにはautotoolを使ってtravis-ciでテストするところまでやってみました。
やってみた結果→ cpp-test
Testを書く Google Test の入門ガイドに書いてあったテストをコピペしてきました。
#include &amp;#34;gtest/gtest.h&amp;#34; int Factorial(int n); TEST(FractionTest, hoge) { EXPECT_EQ(1, Factorial(1)); EXPECT_EQ(2, Factorial(2)); EXPECT_EQ(6, Factorial(3)); EXPECT_EQ(40320, Factorial(8)); } テストの対象となる関数はこちら。
// calculate 1 * 2 * 3 * ... * n int Factorial(int n) { if(n == 0) return 1; return n * Factorial(n - 1); } テスト用実行ファイルのビルドをする せっかくならしっかりしたものをつくろうと、Autotoolsを使ってビルドしてみました。 新しめの Autotools (Autoconf&amp;amp;Automake) を使ってみよう を参考に Makefileのひな形を書いていきます。
Google Test と Travice CI で、C言語で書いたライブラリの継続的インテグレーションをしてみた結果 ではGoogle Testをシステムにインストールしていますが、 システムへのインストールは推奨されていないのと、手元で動かすのが面倒だったので Fused Source File を作ってGoogle Testを自分のプロジェクトに同梱しちゃいました。</description>
    </item>
    
    <item>
      <title>CやC&#43;&#43;でのincludeの優先順位</title>
      <link>https://shogo82148.github.io/blog/2012/06/26/c-include/</link>
      <pubDate>Tue, 26 Jun 2012 11:13:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2012/06/26/c-include/</guid>
      <description>こんにちは、gccのオプションを十個も言えない、非人のshogoです。
工藤氏作のTinySVMで遊ぼうとしていたところ、 ヘッダファイルの読み込み順序ではまったのでメモ。
2つのinclude文 皆さんご存知の通り、Cプリプロセッサの#include文ではファイルの指定方法が2種類あります。
 #include &amp;lt;somefile&amp;gt; // システムにインストールされたライブラリを使う場合 #include &amp;quot;somefile&amp;quot; // 自作のヘッダファイルなどを読み込む場合  大抵はコメントで書いたような使い分けをするんじゃないかと思います。 両者の違いはファイルの検索対象となるディレクトリの違いにあります。 前者はコンパイラが知っているディレクトリのみを検索するのに対して、 後者はカレントディレクトリを検索したのち、&amp;lt;&amp;gt;と同じディレクトリを検索します。
コンパイラが知っているディレクトリは具体的に書くと次のようになっています。
 -I オプションで指定されたディレクトリ 環境変数 C_INCLUDE_PATH や CPLUS_INCLUDE_PATH で指定されたディレクトリ システムによって予め決められたディレクトリ(/usr/local/includeとか)  上にあるものほど優先順位高く、同名のファイルがあった場合、優先順位の高いディレクトリにあるものが読み込まれます。
標準のヘッダを使いたい 次のようなCのプログラムを考えてみます。
/* sample.c */ #include &amp;lt;stdio.h&amp;gt; // 標準ヘッダのstdio.hを取り込んでほしい！#include &amp;#34;stdio.h&amp;#34; // ../userheaderディレクトリ内のstdio.hを取り込んでほしい！最初のincludeではシステムに用意された標準ヘッダのstdio.hを、 2つ目のincludeでは自前で用意したstdio.hを読み込もうとしています。 しかし、自前で用意したstdio.hはuserheaderという別ディレクトリにあるので このままでは参照できません。
別ディレクトリにあるヘッダファイルを参照する場合、一般的には-Iオプションを使って次のようにコンパイルすると思います。
gcc -I../userheader sample.c しかしこの例の場合はこの方法は上手く行きません。 &amp;lt;&amp;gt;で囲った場合も&amp;quot;&amp;ldquo;で囲った場合も、カレントディレクトリにはstdio.hは見つからないので、 先の優先順位に従って次のような順番で検索を行います。
 userheader 標準ヘッダstdio.hが入ったディレクトリ  どちらの書き方でもuserheader内のstdio.hを先に発見してしまうので、 標準ヘッダのstdio.hにはどう頑張ってもアクセスすることができません。
解決策 iquoteオプションを使うと、&amp;quot;&amp;quot;で囲った場合のみuserheaderを見に行くようになります。
gcc -iquote../userheader sample.c TinySVMの場合 TinySVM0.09(現時点での最新版)は一部環境でgetoptの違うというエラーが発生するようです。 これは-Iオプションを使ってしまったため、標準ヘッダのgetopt.hと、自前で用意したgetopt.hの使い分けができていないのが原因です。
TinySVMに同梱されたgetopt関数の引数を書き換えることで対処している例がほとんど (himorogiの日記, RとLinuxと&amp;hellip;,etc) ですが、大抵の環境にgetoptはあると思うのでgetopt.</description>
    </item>
    
  </channel>
</rss>
