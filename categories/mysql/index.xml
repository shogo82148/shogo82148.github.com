<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mysql on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/mysql/</link>
    <description>Recent content in mysql on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 20 Mar 2024 21:24:00 +0900</lastBuildDate>
    <atom:link href="https://shogo82148.github.io/categories/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GoでMySQLを使ったテストを書くときにつかうユーティリティーライブラリを作った</title>
      <link>https://shogo82148.github.io/blog/2024/03/20/2024-03-20-go-mysql-pool/</link>
      <pubDate>Wed, 20 Mar 2024 21:24:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2024/03/20/2024-03-20-go-mysql-pool/</guid>
      <description>GoでMySQLを使ったテストを書く場合、MySQLのデータベースを初期化する処理や、使い終わったデータベースを削除する処理が必要になります。 毎回似たような処理を書いているので、そろそろライブラリとして切り出せそうだなと思って書いてみました。
shogo82148/go-mysql-pool 背景 弊社ではデータベースに関連したテストを書く場合、ローカルでMySQLを起動し、実際にMySQLへ接続する手法を取っています。 SQLの文法エラーを検知するには、実際にMySQLで処理するのが手っ取り早いからです。
この方法を採用する場合、次の問題は「いつMySQLのデータベースを初期化するか」です。 Goでは TestMain 関数を用意することで、テストの開始前の処理、テストの終了後の処理を書けます。 初期化しているコードは CREATE DATABASE するだけの単純なものです。 そんな分量もないので、プロジェクト毎にコピー＆ペーストして使っていました。
// こんな感じのイメージ。 // 実際に使っているコードとは異なります。 package example_test import ( &amp;#34;database/sql&amp;#34; &amp;#34;testing&amp;#34; ) // 各ユニットテストで使い回す var db *sql.DB func TestMain(m *testing.M) { var cleanup func() db, cleanup = setup() defer cleanup() m.Run() } func setup() (*sql.DB, func()) { // MySQLに接続して新しいデータベースを作る db0, err := sql.Open(&amp;#34;mysql&amp;#34;, &amp;#34;user:password@/&amp;#34;) if err != nil { panic(err) } _, err = db0.Exec(&amp;#34;CREATE DATABASE dbname&amp;#34;) if err !</description>
    </item>
    <item>
      <title>GoのMySQLドライバーを使うときはmysql.NewConnectorとsql.OpenDBを使おう</title>
      <link>https://shogo82148.github.io/blog/2024/03/12/2024-03-12-use-mysql-new-connector-and-sql-open-db/</link>
      <pubDate>Tue, 12 Mar 2024 23:07:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2024/03/12/2024-03-12-use-mysql-new-connector-and-sql-open-db/</guid>
      <description>これから新規に書くコードでは mysql.NewConnector と sql.OpenDBを使ったほうが良さそう、という話。
昔からある書き方 go-sql-driver/mysql のDSNを文字列結合で実現するのは意外と大変なので、 某所ではDSN(Data Source Name)の生成を mysql.Config を使って行っています。
// DSNの生成 cfg := mysql.NewConfig() cfg.User = &amp;#34;user&amp;#34; cfg.Passwd = &amp;#34;password&amp;#34; cfg.DBName = &amp;#34;dbname&amp;#34; dsn := cfg.FormatDSN() // 接続 db, err := sql.Open(&amp;#34;mysql&amp;#34;, dsn) if err != nil { panic(err) } 新しい書き方 実はDSNを生成しなくとも、 mysql.Configから *sql.DB を取得できます。
cfg := mysql.NewConfig() cfg.User = &amp;#34;user&amp;#34; cfg.Passwd = &amp;#34;password&amp;#34; cfg.DBName = &amp;#34;dbname&amp;#34; // *mysql.Config を直接渡す conn, err := mysql.NewConnector(cfg) if err != nil { panic(err) } db := sql.</description>
    </item>
    <item>
      <title>GoのMySQLドライバーにBeforeConnectが追加されました</title>
      <link>https://shogo82148.github.io/blog/2024/03/11/2024-03-11-before-connect-of-mysql-driver/</link>
      <pubDate>Mon, 11 Mar 2024 22:47:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2024/03/11/2024-03-11-before-connect-of-mysql-driver/</guid>
      <description>先日 go-sql-driver/mysql v1.8.0 がリリースされ、 いくつかのオプションが追加されました。 その中からひとつ BeforeConnect を紹介したいと思います。
Add BeforeConnect callback to configuration object #1469 何が嬉しいの？ パスワード以外の方法で MySQL にログインするのが簡単になります。
BeforeConnect を使わない従来の方法 たとえば、AWS では IAM 認証を使ってログインする方法を提供しています。 IAM の情報を使って短期間だけ有効なトークンを発行し、そのトークンを使ってログインします。
MariaDB、MySQL、および PostgreSQL の IAM データベース認証 トークンの有効期限は短いので、接続を開始する直前にトークンを発行し接続設定を書き換えなければいけません。 しかし、Go はコネクションプールを採用しているため、実際に接続を開始するタイミングを知るのは意外と難しいです。
頑張ってそれを実現するためにわざわざドライバーを書いたこともありました。
IAM 認証で AWS RDS へ接続する MySQL ドライバを作った shogo82148/rdsmysql BeforeConnect を使った方法 BeforeConnect は、接続を開始する直前に接続設定を書き換える機能です。 shogo82148/rdsmysql を使用せずとも、簡単に IAM 認証を実現できます。
package main import ( &amp;#34;context&amp;#34; &amp;#34;github.com/aws/aws-sdk-go-v2/config&amp;#34; &amp;#34;github.com/aws/aws-sdk-go-v2/feature/rds/auth&amp;#34; &amp;#34;github.com/go-sql-driver/mysql&amp;#34; ) func main() { mycnf := mysql.NewConfig() mycnf.TLSConfig = &amp;#34;true&amp;#34; mycnf.</description>
    </item>
    <item>
      <title>actions-setup-mysqlとactions-setup-redisがApple M1上で動くようになりました</title>
      <link>https://shogo82148.github.io/blog/2024/02/04/2024-02-04-actions-setup-mysql-and-actions-setup-redis-now-work-on-macos14/</link>
      <pubDate>Sun, 04 Feb 2024 12:35:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2024/02/04/2024-02-04-actions-setup-mysql-and-actions-setup-redis-now-work-on-macos14/</guid>
      <description>GitHub Actions に　Apple Silicon がやってきました！
GitHub Actions: Introducing the new M1 macOS runner available to open source! GitHub Actions: macOS 14 (Sonoma) is now available 先日Perlをビルドして遊んでみました。
actions-setup-perlがApple M1上で動くようになりました 今回はMySQLとRedisをビルドしてみたお話です。
shogo82148/actions-setup-mysql shogo82148/actions-setup-redis actions-setup-mysql v1.31.0, actions-setup-redis リリースのお知らせ actions-setup-mysql v1.31.0, actions-setup-redis v1.33.0 から M1 macOS に対応しています。 runs-on: キーに macos-14 を指定すると M1 を利用できます。
jobs: build: runs-on: macos-14 steps: - uses: actions/checkout@v4 - name: Set up MySQL uses: shogo82148/actions-setup-mysql@v1.31.0 M1による高速化 今日現在（2024-02-04）のMySQL最新安定版リリースは 8.0.36 です。 MySQL 8.</description>
    </item>
    <item>
      <title>Amazon Linux 2023でMySQLをパッケージングする</title>
      <link>https://shogo82148.github.io/blog/2023/11/09/2023-11-09-build-mysql-rpm/</link>
      <pubDate>Thu, 09 Nov 2023 21:00:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2023/11/09/2023-11-09-build-mysql-rpm/</guid>
      <description>Amazon Linux 2023でMySQLをビルドして、RPMとしてパッケージングしたというお話です。
shogo82148/mysql-rpm-for-amazonlinux2023 背景 普段僕はAWS上での開発をメインにしているため、いろいろな場面でAmazon Linux 2023のお世話になります。 「サーバーレス」「NoSQL」なんて言葉を聞くようになって久しいですが、なんだかんだ言って踏み台サーバーのLinux環境からMySQLに接続することが多いです。
さて、そうなると問題になってくるのが「どうやってAmazon Linux 2023にMySQLをインストールするか」です。
MySQLのビルド済みのバイナリはMySQL Community DownloadsでYUMレポジトリが提供されています。 しかし、2023-11-09現在提供されているのはOracle Linux 9, 8, 7, 6、Fedora 39, 38, 37 です。 Amazon Linux向けには提供されていません。
Amazon Linux 2 ではEPEL(Extra Packages for Enterprise Linux)パッケージが提供されており、 MySQLはEPELがインストールできました。 しかしAmazon Linux 2023ではEPELのサポートはありません。
Amazon Linux 2023はFedoraベースであることが明言されていますが、 その一方で「特定のFedoraのリリースと互換性がある、というわけではない」とも説明されています。
Relationship to Fedora The Generally Available (GA) version of AL2023 isn&amp;rsquo;t directly comparable to any specific Fedora release. The AL2023 GA version includes components from Fedora 34, 35, and 36.</description>
    </item>
    <item>
      <title>Homebrewで過去のバージョンのMySQLクライアントをインストールしたい</title>
      <link>https://shogo82148.github.io/blog/2023/03/29/2023-03-29-downgrade-homebrew/</link>
      <pubDate>Wed, 29 Mar 2023 17:45:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2023/03/29/2023-03-29-downgrade-homebrew/</guid>
      <description>背景 Amazon Aurora（MySQL互換）のダンプを取ろうとしたところ、以下のメッセージが表示されてうまくいきませんでした。
% mysqldump hogehoge --skip-column-statistics --single-transaction --default-character-set=utf8mb4 mysqldump: Couldn&amp;#39;t execute &amp;#39;FLUSH TABLES WITH READ LOCK&amp;#39;: Access denied for user &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39; (using password: YES) (1045) AWS RDSとMySQL 8.0.32の組み合わせが悪いらしく、同じ症状の人がいました。
AWS RDSにmysqldump: Couldn&amp;rsquo;t execute &amp;lsquo;FLUSH TABLES WITH READ LOCK&amp;rsquo;: Access denied for userが出て接続できなくなった mysqldump has incompatibile change in MySQL 8.0.32 手元のmysqldumpのバージョンを確かめてみると、思いっきり影響を受けるバージョンですね。
mysqldump Ver 8.0.32 for macos13.0 on x86_64 (Homebrew) MySQL 8.0.33で修正される見込みのようですが、2023年3月29日現在未リリースです。 リリースサイクルをよく把握してないですが、MySQL 8.0 Release Notesを見る限り、 1, 4, 7, 10月のリリースのようですね。 4月まで待てば解決・・・なんですが、そこまで待っていられないので、MySQL 8.0.31へダウングレードすることにしました。</description>
    </item>
    <item>
      <title>2020年に書いた GitHub Action &#43; α</title>
      <link>https://shogo82148.github.io/blog/2020/12/03/github-actions-in-2020/</link>
      <pubDate>Thu, 03 Dec 2020 00:00:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2020/12/03/github-actions-in-2020/</guid>
      <description>この記事はフラーAdvent Calendar 2020の3日目の記事です。 2日目はid:gibachan03 さんで「Androidアプリエンジニアになって気づいたiOSとの違い」でした。
さて、公開当初色々して遊んだ GitHub Actions ですが、今年も引き続き遊んでました。 いくつか新しい Action を作ったものの、このブログでは紹介していなかったので、2020年作ったものを紹介したいと思います。
actions-upload-release-asset Yet Another Upload Release Asset Action 一言で表すのならば、 Yet Another actions/upload-release-asset GitHub Action です。 GitHub の Releases にファイルをアップロードする Action です。 このアクションは GitHub 公式という安心感はあるのですが、一度のステップで1個のファイルしかアップロードできません。
ソースファイル本体と、ビルド済みバイナリと・・・と色々アップロードしたいものがあったので、新しく作りました。 actions-upload-release-asset は @actions/glob の Glob Pattern に対応しているので、一つのステップで複数のファイルをアップロードすることができます。
例えば、カレントディレクトリにあるテキストファイルを全てアップロードする例は以下のようになります。
on: release: types: - created jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 # steps for building assets - run: echo &amp;#34;REPLACE ME!&amp;#34; &amp;gt; assets.txt - uses: shogo82148/actions-upload-release-asset@v1 with: upload_url: ${{ github.</description>
    </item>
    <item>
      <title>CloudFormationでECSタスクのドレインをやる</title>
      <link>https://shogo82148.github.io/blog/2019/01/30/drain-ecs-task-with-cloudformation/</link>
      <pubDate>Wed, 30 Jan 2019 17:44:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2019/01/30/drain-ecs-task-with-cloudformation/</guid>
      <description>やってみたはいいものの、1年後には仕組みを忘れていそうなのでメモ。
背景 昔はサービス毎にポコポコEC2インスタンスを立てていたのですが、 幸か不幸かインスタンスのリソースが余り気味でした。 そこで、最近流行りのコンテナ技術に乗っかって Amazon ECS (Amazon Elastic Container Service) を使って、 ひとつのインスタンスに複数のサービスを載せようと目論みました。
ちょうどその頃、Spot Fleetというものを使うと、 スポットインスタンスをお手軽に借りられるという話を聞いたので、 Spot Fleet + ECS で格安クラスターを作ってみよう！と手を出してみました。
(・・・もちろん、Fargateが東京リージョンで使えるようになったことは知っているけれど、スポットインスタンスの価格に負けてしまった・・・)
AWS Fargate 東京リージョン サービス開始のお知らせ AWS Fargate で最大 50% の値下げを発表 ECS最適化インスタンスの更新問題 クラスターを作るだけなら、そう難しくはなく、インスタンス起動時にAmazon ECS-Optimized Amazon Linux AMIを使うだけです。 問題はこのイメージは定期的に更新される、ということです。 更新情報を流しているSNSトピックがあるので、これをサブスクライブしておくと、時たま更新通知が来ます。
Amazon ECS-Optimized Amazon Linux AMI の更新の通知のサブスクライブ この更新には機能追加はもちろん、セキュリティーフィックスも含まれているので、 なるべく早く新しいイメージに移行する必要があります。 移行は大まかに以下の手順で進めます。
新しいAMIイメージに更新した Spot Fleet を作成する 古いインスタンスに残っているタスクをいい感じに終了する(ドレイン) 突然殺すとユーザーにエラーが見えてしまうので、受付中のリクエストを捌き切ってから終了しないといけない ドレインが始まるとECSがタスク数を調整するために、新しいインスタンスにタスクをお引越ししてくれる ドレインが終了したら、古いインスタンスをシャットダウンする ここで問題になってくるのが「古いインスタンスに残っているタスクをいい感じに終了する(ドレイン)」の部分。 コンソールからポチポチするのも面倒なので、自動化したいところ。 しかし、いろいろとドキュメントをあさってみたのですが、「APIかawscliを叩く」「SNSとAWS Lambda をうまいこと組み合わせて頑張る」みたいな方法しか見当たらない・・・ しかもAWSの公式ブログ
コンテナインスタンスのドレイン How to Automate Container Instance Draining in Amazon ECS Amazon ECS におけるコンテナ インスタンス ドレイニングの自動化方法 ・・・みんなどうやってるの・・・？</description>
    </item>
    <item>
      <title>IAM認証でAWS RDSへ接続するMySQLドライバを作った</title>
      <link>https://shogo82148.github.io/blog/2019/01/13/rdsmysql/</link>
      <pubDate>Sun, 13 Jan 2019 17:44:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2019/01/13/rdsmysql/</guid>
      <description>AWS RDS には IAM 認証を使って接続する機能があります。
MySQL および PostgreSQL に対する IAM データベース認証 IAM 認証情報を使用して Amazon RDS への接続をユーザーに許可する方法を教えてください。 これを使って接続するGo言語のSQLドライバを書いてみました。
https://github.com/shogo82148/rdsmysql 使い方 IAMデータベース認証はデフォルトで無効になっているので、まずはこれを有効化します。 次に AWSAuthenticationPlugin を認証方式に指定して、新しいユーザーを作りましょう。
IAM データベース認証の有効化と無効化 データベースアカウントの作成 CREATE USER jane_doe IDENTIFIED WITH AWSAuthenticationPlugin AS &amp;#39;RDS&amp;#39;; 他のSQLドライバはimportするだけで使えるのですが、 rdsmysqlではAWSへの権限情報を設定しなければならない都合上、 sql.Register を自前で呼び出す必要があります。 とは言っても、AWS SDKがいい感じに設定ファイルとか環境変数とか読んでくれるので、 rdsmysql.Driver にAWSセッションを渡すだけです。
c := aws.NewConfig().WithRegion(&amp;#34;ap-northeast-1&amp;#34;) s := session.Must(session.NewSession(c)) d := &amp;amp;Driver{ Session: s, } sql.Register(&amp;#34;rdsmysql&amp;#34;, d) db, err := sql.Open(&amp;#34;rdsmysql&amp;#34;, &amp;#34;jane_doe:@tcp(db-foobar.ap-northeast-1.rds.amazonaws.com:3306)/&amp;#34;) if err != nil { log.Fatal(err) } defer db.Close() あとは通常のMySQLドライバとして呼び出すだけです。 go-sql-driver/mysql のラッパーになっているので、 DNS等の書き方はこれに準じます。 認証部分は rdsmysql がやってくれるので、パスワードは空でOKです。 パスワードの管理から開放されて楽ですね！</description>
    </item>
    <item>
      <title>MySQL8.0で近傍検索</title>
      <link>https://shogo82148.github.io/blog/2017/07/16/2024-07-16-mysq8.0-gis/</link>
      <pubDate>Sun, 16 Jul 2017 07:33:00 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2017/07/16/2024-07-16-mysq8.0-gis/</guid>
      <description>「Redis、PostgreSQL、MySQLで近傍検索」を公開した当時は、 MySQL 5.7 で検証を行いました。 「MySQL 8.0 ではGIS関連も強化されているぞ！」という話を聞いていたので、MySQL 8.0でも検証してみます。 （MySQL 8.0リリースから何年経ってるんだよというツッコミは置いておく）
検証環境 検証環境はDocker上で起動しました。 バージョンは2024-07-16時点で8.0系列最新の8.0.38です。
mysql&amp;gt; SELECT VERSION(); +-----------+ | VERSION() | +-----------+ | 8.0.38 | +-----------+ 1 row in set (0.01 sec) 最新LTSの8.4.1がリリースされていますが、Amazon RDSでは未サポートです。 マネージドサービスを利用したいので、ひとまず8.0で検証を行います。
テーブルの準備 スキーマ定義でSRIDを指定できるようになりました。 何が嬉しいかというと MySQL が「地球は丸い」ということを理解してくれます！
CREATE DATABASE test; USE test; CREATE TABLE IF NOT EXISTS `geotable` ( `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, `name` VARCHAR (255) NOT NULL, `geom` POINT NOT NULL SRID 4326, PRIMARY KEY (`id`), SPATIAL KEY `geom` (`geom`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; SRIDは省略可能ですが、インデックスを利用するためには必須です。 忘れずに指定しましょう。</description>
    </item>
    <item>
      <title>ぼくのかんがえたさいきょうのcontext対応版go-mysql-driverをマージしてもらった</title>
      <link>https://shogo82148.github.io/blog/2017/06/16/mysql-driver-and-context/</link>
      <pubDate>Fri, 16 Jun 2017 07:11:15 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2017/06/16/mysql-driver-and-context/</guid>
      <description>go-sql-driverにcontext.Context対応するプルリクエスト go-sql-driver/mysql#608 を送って取り込んでもらいました！！ 現時点ではまだ正式リリースされていませんが、次のリリース(version 1.4)から使えるようにはずです。 masterブランチではすでに使えるようになっているので、引き続き人柱募集中です。
コネクションプーリングを実装していて、自分も「context.Contextサポートしたい！」というかたのために、 実装の概要をメモとして残しておきます。
おおまかな仕組み 「contextの監視のみを行うgoroutine(以下、watcher goroutine)」をあらかじめ起動しておく 「やりたい処理を実際に実行するgoroutine(以下、executor goritune)」とchannelを経由してcontext.Contextをやり取りする watcher goroutineがこの実装で一番重要な部分です。
watcher goroutine の実装 一番重要な watcher goroutine の実装例から見てみましょう (実際には細かい最適化などが入るため、マージされたコードとは異なります)。
func (mc *mysqlConn) startWatcher() { // executor goritune と `context.Context` のやり取りをするための channel watcher := make(chan context.Context, 1) mc.watcher = watcher // executor goritune で処理が完了したことを知るための channel finished := make(chan struct{}) mc.finished = finished // コネクションがCloseされたことを知らせるための channel mc.closech = make(chan struct{}) // ここから watcher goroutine 本体 go func() { for { // executor goritune から `context.</description>
    </item>
    <item>
      <title>Redis、PostgreSQL、MySQLで近傍検索</title>
      <link>https://shogo82148.github.io/blog/2017/03/28/database-gis/</link>
      <pubDate>Tue, 28 Mar 2017 19:59:49 +0900</pubDate>
      <guid>https://shogo82148.github.io/blog/2017/03/28/database-gis/</guid>
      <description>「サーバーで付近の情報を通知するサービスのつくり方」 という、Geohashを使って近傍検索を実現する記事をみつけました。 最近Redisに関する記事を書いた関係で、 この記事をみて「GeohashはRedisと一緒に使うともっと便利だよ！」と思わず宣伝したくなったのですが、 MySQL5.7でInnoDBに空間インデックス(Spatial Index)のサポートが入ったので 「MySQLでももっと簡単にできるのでは？」と思い、 RedisやMySQLを含めたいろんなDBで近傍検索を実現する方法を調べてみました。
以前、スマートフォンのセンサを活用して花火の打ち上げ場所を推定するアプリを作った関係で、 地球上での距離計算の実装も気になったので、それについても調査してみました。
関連知識 GeoHash Geohash（ジオハッシュ） は緯度・経度を短い文字列に変換する方法です。 距離が近い2地点のGeohashは似たような文字列になるという特徴があります(一部例外あり)。 この特徴を利用すると、文字列検索だけで近傍検索が実現できます。
地球上の二点間の距離 地球は完全な球体ではなく、回転楕円体であることが知られています。 地球の形がわからないと緯度・経度などを決められないので、 地球楕円体が定義されています。 近似方法によっていくつか種類があるのですが、GPSなどで使われているWGS84がよく使われているようです。
国土地理院が提供している測量計算サイトでは 距離と方位角の計算を使って緯度・経度から距離を計算できます。 回転楕円体上の距離の厳密解は求められない(要出典)ので、 数値計算によって求めることになります。 計算式を見て分かる通り非常に複雑なので、なんらかの近似をしている実装がほとんどです。
各種DBでの実現方法 Redis Redisでは3.2からGEO関連の機能をサポートしています。 ソート済みセットにGeohashを組み合わせて実現しています。
簡単に試してみました。データは以下の記事から拝借したものを使用します。
MySQLで指定した緯度経度から半径nメートル内検索っぽいのを実現するSQL PostgreSQLとOracleで緯度経度から半径nメートル内検索を実行してみる。 GEOADDでデータ挿入です。 ちなみにデータを削除するGEODELは用意されていないとのこと。 中身はソート済みセットなので、ZREMでいいんですね。
$ cat command.txt GEOADD geotable 139.777254 35.713768 上野駅 139.774029 35.711846 西郷隆盛像 GEOADD geotable 139.774744 35.712737 上野の森美術館 139.770872 35.712351 不忍池弁財天 GEOADD geotable 139.775696 35.716293 野口英世博士像 139.775803 35.715420 国立西洋美術館 GEOADD geotable 139.776544 35.716319 国立科学博物館 139.772776 35.717186 東京都美術館 GEOADD geotable 139.</description>
    </item>
  </channel>
</rss>
