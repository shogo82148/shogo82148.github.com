<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/git/</link>
    <description>Recent content in Git on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 22 Dec 2015 19:04:00 +0900</lastBuildDate>
    
	<atom:link href="https://shogo82148.github.io/categories/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UnityのBitmapフォントの収録文字のdiffを取る</title>
      <link>https://shogo82148.github.io/blog/2015/12/22/diff-of-unity-bitmap-font/</link>
      <pubDate>Tue, 22 Dec 2015 19:04:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2015/12/22/diff-of-unity-bitmap-font/</guid>
      <description>Unityで文字を描画するには 「BMFont(Bitmap Font Generator)でビットマップフォントを作る方法」等にあるように ビットマップフォントを自分で作ってあげないといけないらしいです。 (ダイナミックフォントというものもあるらしいけど、まだ安定性が検証ができていないので使ってない。)
フォントに入っている全部の文字を収録するとでかくなりすぎるので、一部の文字だけ収録するのが一般的だと思います。 入れる文字は自分で選ぶわけですが、フォントファイルを更新する際に、以前は使えた文字が入っていなくてつらい思いをしたので、 gitで差分をみれるようにしてみました。
gitのいろんなファイル形式の差分を見やすくする方法は Git Diffでcsvの差分を見やすく表示するを参照。
csvのときと同じ要領で、まずはfntファイルをdiffを取りやすい形式に変換するスクリプト(fnt2txt)を用意し
#!/bin/bash  grep &amp;#39;char id=&amp;#39; $1 | cut -d&amp;#39; &amp;#39; -f2 | cut -d= -f2 | perl -MEncode -ne &amp;#39;printf &amp;#34;%04x: %s\n&amp;#34;, $_, encode_utf8 chr($_) if $_ &amp;gt;= 32&amp;#39; fnt2txtを使う設定を.git/configに設定します。
[diff &amp;#34;fnt&amp;#34;] textconv = fnt2txt 最後に拡張子.fntに対してだけこの設定が反映されるようにすればOKです。
*.fnt diff=fnt こんな感じでdiffが見れます。
diff --git a/foo.fnt b/foo.fnt index 79391c0..e262b2d 100755 --- a/foo.fnt +++ b/foo.fnt @@ -93,6 +93,7 @@  007c: | 007d: } 007e: ~ +00a0:  00a1: ¡ 00a2: ¢ 00a3: £ 事故防止に是非ご利用ください。</description>
    </item>
    
    <item>
      <title>git-mergeの挙動をカスタマイズする</title>
      <link>https://shogo82148.github.io/blog/2015/12/16/customize-git-merge/</link>
      <pubDate>Wed, 16 Dec 2015 22:24:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2015/12/16/customize-git-merge/</guid>
      <description>最近gitのコンフリクト解消職人みたいになっていてすごくつらいです。 普通のプログラムであれば順番が重要なので手動でのコンフリクト解消は避けられないのですが、 僕が相手にしているのは最終的にMySQLに食わせるデータなのでそこまで順番は重要ではありません。 順番に挿入したところで、MySQLが順番にかえしてくれるとは限りませんからね。 このようなケースではある程度機械的にマージできるのでは？と調べてみました。
merge driver いろいろググってみるとgitattributesでファイル毎にマージの細かい挙動を制御できるようです。 通常マージの方法はgitがよしなに選択してくれますが、merge属性に以下の項目を指定することでマージの方法を強制することができます。
 text  テキストファイルとしてマージする。 コンフリクトすると &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;, =======, &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;でコンフリクトした場所を教えてくれる。   binary  バイナリファイルとしてマージする。 コンフリクトするとマージしようとしたファイルを残しておいてくれる。   union  テキストファイルとしてマージする。 textと違ってコンフリクトしてもマーカを付けない。どちらの変更も残すように適当にマージしてくれる。 適当なので コンフリクト時の行の順番は保証されない    text, binaryはコンフリクトしたときによく見る挙動ですね。 unionは初めて知ったので、簡単なレポジトリを作って挙動を確かめてみました。
$ # masterブランチ上でmembers.txtにAliceを追加する $ git init $ echo Alice &amp;gt; members.txt $ git add members.txt $ git commit -m &amp;#39;add Alice&amp;#39; [master (root-commit) 8c39714] add Alice 1 file changed, 1 insertion(+) create mode 100644 members.</description>
    </item>
    
    <item>
      <title>各ブランチの最後にコミットした人を知る</title>
      <link>https://shogo82148.github.io/blog/2015/05/21/branch-committer/</link>
      <pubDate>Thu, 21 May 2015 00:50:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2015/05/21/branch-committer/</guid>
      <description>ブランチが大量にあるので整理したい、けど大人数で開発しているから誰がどのブランチいじってるか分からない、 ということがあったので、出し方のメモ。
githubのbranch一覧も見ればいいじゃん！っていう意見もあると思うんだけど、 「自分のbranch一覧」は見れるんですが「特定のだれかのbranch一覧」が見れない・・・。
git-for-each-refを使うと各ブランチに対していろいろ操作できるようです。 各ブランチの最後にコミットした人一覧を出すには以下のコマンド。
git for-each-ref --format=&amp;#39;%(authordate:short) %(authorname) %(refname)&amp;#39; --sort=-committerdate refs/remotes/origin/ formatは自由にいじれるのでいろいろ遊べます。 例えば、ブランチをたくさん抱え込んでいる人の一覧を表示する例。
git for-each-ref --format=&amp;#34;%(authorname)&amp;#34; refs/remotes/origin/ | sort | uniq -c | sort -nr 参考  git-for-each-ref - Output information on each ref リモートブランチも含め更新日時が新しい順番にソートする ブランチ一覧を更新時刻つきで表示したい場合、gitのfor-each-refが使える。  </description>
    </item>
    
    <item>
      <title>git diffでcsvの差分を見やすく表示する</title>
      <link>https://shogo82148.github.io/blog/2015/03/24/git-diff-csv/</link>
      <pubDate>Tue, 24 Mar 2015 23:08:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2015/03/24/git-diff-csv/</guid>
      <description>ExcelやGoogle Spreadsheetを使って作ったデータをプログラムに取り込むのにcsv形式が便利でよく使っているんですが、 gitで履歴管理をしてもdiffが見づらい・・・。 gitのdiffがかなり自由にカスタマイズできることを知ったので、いろいろいじってみたメモ。
例として、以下のようなcsvファイルを編集することを考えます。
id,name,param_a,param_b,param_c,param_d,param_e 101,hoge,314,159,265,358,979 102,fuga,271,828,182,845,904 一行目は列の見出しになっていて、プログラムからは列番号ではなくparam_dの様に指定する、 という作りになってます。 id: 101の行のparam_dの数値に変更が入った場合、普通のgitだと以下のようになります。
diff --git a/hogehoge.csv b/hogehoge.csv index c8dbd17..37f4ff5 100644 --- a/hogehoge.csv +++ b/hogehoge.csv @@ -1,3 +1,3 @@ id,name,param_a,param_b,param_c,param_d,param_e -101,hoge,314,159,265,358,979 +101,hoge,314,159,265,359,979  102,fuga,271,828,182,845,904 二行目に何か変更があったことはわかりますが、 param_d だとはすぐにはわかりませんね・・・
YAMLに変換して比較する バイナリファイルであっても差分が確認できるよう、 git-diffを実行する前に変換ツールを実行する機能があります。 拡張子がcsvのファイルに対してこの機能が働くように.gitattributesに以下の行を足します。
*.csv diff=csv .git/config に変換ツールの設定を追加します。 key: valueの形式になっていると見やすそうなので、変換先の形式にはyamlを選びました。
[diff &amp;#34;csv&amp;#34;] textconv = csv2yaml ここで指定しているcsv2yamlは自前で用意する必要があります。 インターネット上をさまよえば同名のツールはいくらでもありそうですが、今回は自分でgoを使って書きました。 csv2yaml.goをコンパイルしてパスの通る場所においておきましょう。 csv2yamlは自分のよく使うcsvのフォーマットにあわせて以下のようなカスタマイズをしてあります。
 idという名前のキーを必ず最初にする それ以外のキーはアルファベット順にソートする  この状態でgit diffを実行すると以下のようになります。
diff --git a/hogehoge.csv b/hogehoge.csv index c8dbd17..37f4ff5 100644 --- a/hogehoge.csv +++ b/hogehoge.</description>
    </item>
    
    <item>
      <title>git で管理しているリポジトリの各ブランチの中身をそれぞれ個別のディレクトリにエクスポートする(git-archive版)</title>
      <link>https://shogo82148.github.io/blog/2015/03/20/git-pack-branch/</link>
      <pubDate>Fri, 20 Mar 2015 18:38:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2015/03/20/git-pack-branch/</guid>
      <description>git で管理しているリポジトリの各ブランチの中身をそれぞれ個別のディレクトリにエクスポートする を読んで、 git-archive を使うともう少しシンプルに書けるんじゃないかと思ってやってみた。
git branch | sed -e &amp;#39;s/^[\* ]*//g&amp;#39; | xargs -n1 -I% sh -c &amp;#39;git archive --prefix=%/ % | tar x&amp;#39; .gitconfig とかでエイリアスを設定しておくといいんじゃないでしょうか
以上</description>
    </item>
    
    <item>
      <title>Gitで作業ディレクトリの変更を破棄したのに差分が出続けて困った話その2</title>
      <link>https://shogo82148.github.io/blog/2014/10/21/git-case-sensitivity/</link>
      <pubDate>Tue, 21 Oct 2014 00:56:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2014/10/21/git-case-sensitivity/</guid>
      <description>先日「Gitで作業ディレクトリの変更を破棄したのに差分が出続けて困った話」と いうのを書きましたが、より強力な敵が現われました。 このときは文字コードが原因で git checkout -- &amp;lt;file&amp;gt; しても差分が残り続けるというもので、git add してコミットし直すことで回避出来ました。 しかし、今度の敵は git checkout -- &amp;lt;file&amp;gt; しても git add &amp;lt;file&amp;gt;しても差分が残り続けます。
なんだ・・・このボスを倒したら新たなラスボスが現れた感・・・
acidlemon先生の手助けにより事無きを得たのですが、 ちょっと不明な点もあったので、その点もあわせてメモを残しておきます。
症状 git checkout -- &amp;lt;file&amp;gt; しても、git add &amp;lt;file&amp;gt; しても、git reset --hard HEAD しても、 何をしても差分が出続ける・・・なんだこいつ・・・
$ git checkout -- AwesomeFeature $ git add . $ git status On branch master Changes not staged for commit: (use &amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34; to update what will be committed) (use &amp;#34;git checkout -- &amp;lt;file&amp;gt;.</description>
    </item>
    
    <item>
      <title>gitで作業ディレクトリの変更を破棄したのに差分が出続けて困った話</title>
      <link>https://shogo82148.github.io/blog/2014/10/04/gitattribute-eol-equals-crlf/</link>
      <pubDate>Sat, 04 Oct 2014 15:05:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2014/10/04/gitattribute-eol-equals-crlf/</guid>
      <description>gitで変更した覚えの無いファイルに差分が出ていたので、 作業ディレクトリの変更を破棄したのに、 git statusで差分が出続けて困ったのでメモ。
症状 gitではgit checkout -- &amp;lt;file&amp;gt; ってコマンドを叩くと、 作業ディレクトリの変更を破棄できます。
$ git checkout -- hoge.txt $ git status On branch master Changes not staged for commit: (use &amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34; to update what will be committed) (use &amp;#34;git checkout -- &amp;lt;file&amp;gt;...&amp;#34; to discard changes in working directory) modified: hoge.txt しかし、差分が出続ける&amp;hellip; git checkout -- &amp;lt;file&amp;gt; ならさっきやったよ！
git reset --hard HEAD して全変更を破棄してもダメでした。
原因 .gitattributesに改行コードの指定があったからでした。
*.txt text=auto eol=crlf これが指定されていると、CRLFなファイルをコミットしようとしても、 レポジトリには改行コードがLFで保存されるようになる。
$ cat .</description>
    </item>
    
    <item>
      <title>Githubさんにpack exceeds maximum allowed sizeって言われた</title>
      <link>https://shogo82148.github.io/blog/2014/09/13/github-remote-push-pack-size-exceeded/</link>
      <pubDate>Sat, 13 Sep 2014 10:51:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2014/09/13/github-remote-push-pack-size-exceeded/</guid>
      <description>Githubに手元のレポジトリをpushしようとしたら、 「Pushできないよ！！」って言われたときのメモ。
コミット数が17kほどあって、画像とかサイズが比較的大きいファイルがたくさんあるレポジトリを、 一度に全部pushしようとしたら「制限を超えてます」って言われてダメだった。
$ git push origin master Counting objects: 280874, done. Delta compression using up to 4 threads. Compressing objects: 100% (60497/60497), done. remote: fatal: pack exceeds maximum allowed size error: pack-objects died of signal 13 error: failed to push some refs to &amp;#39;git@github.com:***/****.git&amp;#39; ググってみると、おんなじような症状が見つかった。
 Github remote push pack size exceeded  リモートへのPushはオブジェクトを全部一つにPackしてしまうので、 一度に大量のコミットをPushしようとすると制限に引っかかるらしい。 (そして、サイズを制限する方法はないみたい)
解決策は「2回以上に分けてPushしてね」とのこと
git push remoteB &amp;lt;some previous commit on master&amp;gt;:master ... git push remoteB &amp;lt;some previous commit after the last one&amp;gt;:master git push remoteB master 頑張ってコミットログを遡ってコミットハッシュを調べるのはつらかったので、 打ってあったタグからコミットハッシュを調べてPushした。</description>
    </item>
    
    <item>
      <title>Gitでプロキシを使う</title>
      <link>https://shogo82148.github.io/blog/2012/07/30/git-proxy/</link>
      <pubDate>Mon, 30 Jul 2012 21:10:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2012/07/30/git-proxy/</guid>
      <description>背景・目的 なぜだか研究室のWiFi経由でSSHが通らないので、 GithubがBitbucketに繋がらない＞＜。 有線LAN経由なら通るので、ネットワークの問題だと思うのですが、 よくわからないのでとりあえずHTTPS経由で頑張ることにしました。
うちの学校ではHTTPSで外部に出るにはプロキシの設定が必要です。 そういうわけで、Gitでプロキシを使う方法を調べて見ました。
方法 .ssh/config に以下の設定をしました。
Host github.com User git Port 22 # or 443 Hostname github.com # or ssh.github.com IdentityFile /path/to/ssh.key TCPKeepAlive yes IdentitiesOnly yes ProxyCommand nc -X connect -x proxy.example.com:8080 %h %p  参考文献  git pull/push to github.com in proxy environment http proxy 越えの ssh SSHでプロキシ経由でアクセス  </description>
    </item>
    
  </channel>
</rss>