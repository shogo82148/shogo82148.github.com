<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>google test on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/google-test/</link>
    <description>Recent content in google test on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 18 May 2014 21:24:00 +0900</lastBuildDate>
    
	<atom:link href="https://shogo82148.github.io/categories/google-test/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Google Test を使ってC&#43;&#43;のテストしてみた</title>
      <link>https://shogo82148.github.io/blog/2014/05/18/test-with-google-test/</link>
      <pubDate>Sun, 18 May 2014 21:24:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2014/05/18/test-with-google-test/</guid>
      <description>C++ なライブラリを書こうと思い、C++のテストってどうやるんだろうと調べたメモ。 テストフレームワークとして Google C++ Testing Framework を使用、 コンパイルにはautotoolを使ってtravis-ciでテストするところまでやってみました。
やってみた結果→ cpp-test
Testを書く Google Test の入門ガイドに書いてあったテストをコピペしてきました。
#include &amp;#34;gtest/gtest.h&amp;#34; int Factorial(int n); TEST(FractionTest, hoge) { EXPECT_EQ(1, Factorial(1)); EXPECT_EQ(2, Factorial(2)); EXPECT_EQ(6, Factorial(3)); EXPECT_EQ(40320, Factorial(8)); } テストの対象となる関数はこちら。
// calculate 1 * 2 * 3 * ... * n int Factorial(int n) { if(n == 0) return 1; return n * Factorial(n - 1); } テスト用実行ファイルのビルドをする せっかくならしっかりしたものをつくろうと、Autotoolsを使ってビルドしてみました。 新しめの Autotools (Autoconf&amp;amp;Automake) を使ってみよう を参考に Makefileのひな形を書いていきます。
Google Test と Travice CI で、C言語で書いたライブラリの継続的インテグレーションをしてみた結果 ではGoogle Testをシステムにインストールしていますが、 システムへのインストールは推奨されていないのと、手元で動かすのが面倒だったので Fused Source File を作ってGoogle Testを自分のプロジェクトに同梱しちゃいました。</description>
    </item>
    
  </channel>
</rss>