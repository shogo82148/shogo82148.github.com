<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Webaudio on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/webaudio/</link>
    <description>Recent content in Webaudio on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 24 Dec 2012 13:51:00 +0900</lastBuildDate>
    
	<atom:link href="https://shogo82148.github.io/categories/webaudio/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript版WaveZutaZuta作ってみた</title>
      <link>https://shogo82148.github.io/blog/2012/12/24/wavezutazutajs/</link>
      <pubDate>Mon, 24 Dec 2012 13:51:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2012/12/24/wavezutazutajs/</guid>
      <description>「WaveZutaZutaというおもちゃを書いている話」 という記事を見ていたら，誰かがツイッターで 「いっちーがJavaScriptに移植してくれる」と発言．
あ，はい．やってみましょう．
どんな感じのものなの？ 音声ファイルをテキトーに切り貼りできるライブラリです． WaveZutaZutaJSにブラウザで実行出来るサンプルを置いたので 実際試してみるのが一番わかりやすいと思います． 適当な音声ファイルをドラッグ＆ドロップして，playボタンを押すと音が流れるので，いろいろ遊んでみてください．
テキストボックスには楽譜が書かれています． 楽譜の書き方は「WaveZutaZutaというおもちゃを書いている話」 と同じです．
 ちなみに、楽譜ファイルの読み方、書き方ですが、aからzまでの文字それぞれにずたずたにされたwaveファイルの&amp;rdquo;破片&amp;rdquo;がアサインされていて、-は音をのばす(タイ)を意味し、0は休符を意味します。*を指定すると、a-zのうちどれかをランダムで鳴らします。1文字が64分音符ひとつ分の長さです。空白文字は無視されます。
 使い方 リポジトリの WaveZutaZutaJS.js がライブラリの本体です． 次のように使います．
var data = new ArrayBuffer(); // ずたずたにしたい音声データを入れておく var context = new AudioContext(); var zuta = new WaveZutaZuta(context); zuta.onSuccess = function(self, source) { // 元の音声の先頭5秒から3秒間流す  zuta.setNote(&amp;#39;a&amp;#39;, 5); var node = zuta.getAudioNode([{sound: &amp;#39;a&amp;#39;: length: 3}]); node.connect(context.destination); }; zuta.loadAudio(data);  data には入力音声のバイナリデータを入れておきます． 形式はブラウザが対応していれば何でもOKです． Chromeなら wav, mp3, mp4 など，メジャーな形式はたいてい読めると思います．
getAudioNodeで返ってくるのは AudioNode なので，WaveZutzZutaJS の出力にさらにエフェクトをかけることができます． 例えば，次のコードで周波数フィルタを通すことができます．</description>
    </item>
    
  </channel>
</rss>