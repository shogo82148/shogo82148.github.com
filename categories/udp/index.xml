<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Udp on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/udp/</link>
    <description>Recent content in Udp on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 28 Dec 2012 16:38:00 +0900</lastBuildDate>
    
	<atom:link href="https://shogo82148.github.io/categories/udp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UDPのパケットをSSHを通してトンネルする</title>
      <link>https://shogo82148.github.io/blog/2012/12/28/tunneling-udp-via-ssh/</link>
      <pubDate>Fri, 28 Dec 2012 16:38:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2012/12/28/tunneling-udp-via-ssh/</guid>
      <description>SSHには標準でTCPのトンネリング機能は付いているのですが， UDPはトンネリングしてくれません． なんとかできないものかと試行錯誤してみました．
TCP をトンネル TCPのトンネリングの復習から． 以下のコマンドでクライアントの8080番ポートを，リモートの80番ポートに転送することができます．
ssh -L 8080:localhost:80 remote SOCKS proxyとして動作させることも出来ます． ブラウザのプロキシとして設定すれば，リモートのサーバがすべての通信を中継してくれます．
ssh -D 8080 remote UDP をトンネル NetCatを使うと TCP/UDP の通信内容と標準入出力をつなげることが出来るらしいです． これを使って，クライアント側で UDP サーバを立て，その通信内容をSSH経由でリモートの UDP クライアントに送ってあげます． 最後にリモートからクライアント側へのパケットを名前付きパイプで転送してあげればトンネル完成です．
mkfifo tunnel nc -ul 8080 &amp;lt; tunnel | ssh remote nc -u localhost 8080 &amp;gt; tunnel Mosh をトンネル なんでこんなことをしようと思ったかというと，Moshをファイヤーウォール越しに使いたかったから． MoshはUDPで通信しているので，SSHしか通らない環境では使えません． そこでUDPをSSHでトンネリングしてできないかとやって見ました． セッションの確立にSSHも使っているので，以下のようにして Mosh用のUDPトンネルと SSH用のTCPトンネルを作ります．
mkfifo tunnel nc -ul 60000 &amp;lt; tunnel | ssh -L 10000:localhost:22 remote nc -u localhost 60000 &amp;gt; tunnel &amp;amp; mosh -p 60000 --ssh=&amp;#34;ssh -p 10000&amp;#34; localhost 外部からのSSH通信が遅かったので，Moshのローカルエコーでなんとかならないかと挑戦してみました． 実際の効果は未確認．またあとで試してみます．</description>
    </item>
    
  </channel>
</rss>