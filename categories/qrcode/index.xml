<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>qrcode on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/qrcode/</link>
    <description>Recent content in qrcode on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 18 Nov 2023 17:11:00 +0900</lastBuildDate><atom:link href="https://shogo82148.github.io/categories/qrcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>URL圧縮サイトを作ってみた</title>
      <link>https://shogo82148.github.io/blog/2023/11/18/2023-11-18-url-compressor-for-qr-code/</link>
      <pubDate>Sat, 18 Nov 2023 17:11:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2023/11/18/2023-11-18-url-compressor-for-qr-code/</guid>
      <description>QRコードへの埋め込みを前提としたURLの圧縮サービスを作ってみました。
 https://c.shogo82148.com/  ソースコードはこちら。
 https://github.com/shogo82148/url-compressor  背景 短縮URLを利用している企業から「短縮URLから不正サイトへ誘導される」として注意喚起のお知らせがありました。
 「いなげや」QRコードから不正サイトに誘導、カード情報抜き取られる被害 原因は「短縮URL」か？　QRコードから不正サイトへ誘導される事例が相次ぐ　オートバックスセブン、学習院大学も 短縮URLサービス利用時に表示された悪質な広告についてまとめてみた  QRコードに短縮URLが使われるのは、以下のような理由からバージョン（QRコードの大きさの）の小さいQRコードの需要があるためです。
 QRコードの印刷品質や読み取り性能が低くても、確実に読み取れるようにしたい 流入元計測のための情報をURLに載せるため、URLは長くなりがち  一方で短縮URLには以下のような問題が指摘されています。
 短縮URLだけではどこに飛ぶかわからない 短縮URLのサービス終了してしまうと、リンク切れになる  目的 「元のURLの情報を圧縮してURLに詰め込めばすべて解決するのでは？」と考えて作ってみました。
名付けて 「圧縮URL」 。 以下の特徴を持ったURLの作成を目的とします。
 QRコードでの共有に特化する 短縮URL自体から情報を取り出せる  短縮URLのサービスが終了しても、元のURLがわかるので安心    デモ 僕のブログ記事の中でももっとも長い、以下のURLを圧縮してみます。
 https://shogo82148.github.io/blog/2023/07/02/2023-07-02-update-aws-sdk-v2-with-grouped-version-updates-for-dependabot/  圧縮すると以下のようになります。
 HTTPS://C.SHOGO82148.COM/0-SLNDB9IQ9IIU.HOR1NB0QGEF7$F2QD2$9V8ONQ9V:U.D-NQ.EVYALL.H74.HID9DLHT2QV5RHV-5P-CFW7.H.DF5NU1U5M30C.AF.CP7.C.A1QXA4-DU5  Google Chart APIを使って、それぞれURLをQRコードに変換してみます。
圧縮前： 圧縮後： 小さなバージョン（QRコードの大きさ）のQRコードが生成されたのがわかると思います。
変換方法 変換方法を見ていきましょう。この手順にしたがって変換すれば、オフラインでも圧縮URLを作成できます。
例として https://example.com を圧縮します。
プロトコル部分を取り除く URLにはかならず https:// か http:// が付きます。 7〜8バイトを使うのは大きなオーバーヘッドです。
今どきHTTPS通信は当たり前なので https:// 以外は対応しないこととし、 先頭の https:// は削除します。</description>
    </item>
    
    <item>
      <title>Twitterの二次元コード問題と、QRコード・フレームQRの見分け方</title>
      <link>https://shogo82148.github.io/blog/2016/11/23/qr-code/</link>
      <pubDate>Wed, 23 Nov 2016 10:32:43 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2016/11/23/qr-code/</guid>
      <description>先日Twitterの公式アプリがQRコード® (お店やお友達を簡単にフォローするために) の作成と読み取りに対応しました。 しかし、生成されるQRコードが標準規格に準拠していないため、 「他のリーダーで読めない」「法的に問題があるのでは？」等々の指摘が出ていました。 人事ながらTwitterさんのことが心配になったので少し調べてみました。
なお、僕は法律の専門家ではないため、本記事の正確性は保証できません。 あくまで個人的な見解なので、 実際にQRコード®を使用するさいは各自の判断でお願いします。
指摘ツイート Twitterが生成するQRコード、規格(JIS X 0510・ISO/IEC 18004)を大幅に逸脱しているので「QRコード®」を名乗ること自体に法的なリスクがある。
&amp;mdash; 祥太(4/15レイフレ18 C19+20) (@shota_) 2016年11月17日  「デンソーウェーブは、JIS、ISOの規格に沿ったQRコードに限っては特許権を行使しませんが、規格を逸脱したQRコードについてはこの限りではございませんので、特許権を行使させていただくこともございます。」
(出典: https://t.co/SKXgBGSb8E )
&amp;mdash; 祥太(4/15レイフレ18 C19+20) (@shota_) 2016年11月17日  明暗暗転で読み取らないという話を多数見かけますけど、そちらについては「ISO/IEC 18004からは逸脱」「JIS X 0510には準拠」(規格票7.3.8参照)という微妙な状況なのです。多分ISOには準拠しているのでアプリは悪くないと思います。
&amp;mdash; 祥太(4/15レイフレ18 C19+20) (@shota_) 2016年11月17日  たしかに qrcode.comのFAQには 特許について以下の記述があります。
 色を付けたりイラストを入れるような使い方をしても問題ありませんか？ (中略) また、QRコードにイラストを重ねたりデザインを乗せるということは、QRコードの規格から外れ「QRコードではないもの」となってしまう可能性がございます。 デンソーウェーブは、JIS、ISOの規格に沿ったQRコードに限っては特許権を行使しませんが、規格を逸脱したQRコードについてはこの限りではございませんので、特許権を行使させていただくこともございます。
 2022-06-05追記: 改めてqrcode.comのFAQを確認したところ、以下のように文言が変更されていました。
 色を付けたりイラストを入れるような使い方をしても問題ありませんか？ QRコードにイラストを重ねたり、デザインをのせて変形してしまうと、ちょっとした汚れや欠けでも読み取りが出来なくなったり、読み取りの反応が悪くなってしまうことがありますので推奨しておりません。 安定した読み取りという面から、JIS、ISOの規格で制定されている内容に従ってご利用いただくことを推奨しております。
なおイラストやデザインを施すような使い方をご希望の場合は、デンソーウェーブのフレームQR®をご利用ください。
 特許権の行使についての文言が削除されています。 2017年1月28日で特許権が有効期限切れになり、デンソーウェーブが特許権を行使することができなくなったからだと思います。 このことから特許についてはクリアになったと言えるでしょう。
とはいえFAQにあるとおり、読み取り性能の観点からイラストを入れるのは非推奨、という点は変わりありません。
追記ここまで
問題点 公式アプリの生成する二次元コードは以下のような問題があります。
 データパターンの20%近くがアイコンで上書きされている 「アライメントパターン」がTwitterのロゴで欠けている 明暗暗転している(一応JISには沿っているらしい)  法的リスク以前に、 読み取り性能/互換性が劣化するので使わない方が無難でしょう。</description>
    </item>
    
  </channel>
</rss>
