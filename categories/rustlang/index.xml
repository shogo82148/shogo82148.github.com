<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rustlang on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/rustlang/</link>
    <description>Recent content in Rustlang on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 25 Feb 2017 16:58:27 +0900</lastBuildDate>
    
	<atom:link href="https://shogo82148.github.io/categories/rustlang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rust vs Go の終戦へ向けてPolyglotを作ってみた</title>
      <link>https://shogo82148.github.io/blog/2017/02/25/2017-02-25-rust-and-go-ploygolot/</link>
      <pubDate>Sat, 25 Feb 2017 16:58:27 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2017/02/25/2017-02-25-rust-and-go-ploygolot/</guid>
      <description>「Golang Rust」とググると、関連項目は「Rust vs Go」のように GolangとRustが対立しているような項目ばかりです。 まあまあ、もっと仲良くやろうじゃないですか、ということで、 どうしたら仲良くなれるかを考えました。 Polyglotにして同じソースコードの中に閉じ込めてやれば、 そのうち仲良くなるのではないかと考え、 RustとGoのPloyglotを作ってみました。
結果 ``` rust polyglot.rs /// package main
import &amp;ldquo;fmt&amp;rdquo;
func main() { fmt.Print(&amp;ldquo;Hello Go!!&amp;rdquo;) _ = */*/ fn main() { println!(&amp;quot;Hello Rust!!&amp;quot;); // }
 ``` go polyglot.go /*/*/ package main import &amp;quot;fmt&amp;quot; func main() { fmt.Print(&amp;quot;Hello Go!!&amp;quot;) _ = `*/*/ fn main() { println!(&amp;quot;Hello Rust!!&amp;quot;); //` }  仕組み 一番のポイントは最初の行の /*/*/ です。 RustもGoも/* */形式の複数行コメントに対応していますが、 Rustはネストに対応しており、Goはネストはできないという違いがあります。 この違いにより、Rustは/*/*/を/* /* /のように「二重にネストしたコメントの開始部分」として扱いますが、 Goは/* / */のように「/をコメントアウトしたもの」と見なします。 これにより2行目package main以降はGoには普通のコードに見えますが、 Rustからは単なるコメントとして認識されます。</description>
    </item>
    
  </channel>
</rss>