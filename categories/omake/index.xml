<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Omake on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/omake/</link>
    <description>Recent content in Omake on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 09 Aug 2012 11:13:00 +0900</lastBuildDate>
    
	<atom:link href="https://shogo82148.github.io/categories/omake/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OMakeの使い方復習</title>
      <link>https://shogo82148.github.io/blog/2012/08/09/omake/</link>
      <pubDate>Thu, 09 Aug 2012 11:13:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2012/08/09/omake/</guid>
      <description>久しぶりにOMakeを使おうと思ったら、使い方を忘れてしまったので復習。
基本的な流れ 初期化 OMakeのインストールはaptitudeやyumやDownload OMakeあたりで頑張る。 OMakeがインストールできたら、まずは初期化のおまじない。
omake --install カレントディレクトリにOmakefileとOmakerootが作られる。 自分のプロジェクト内容に合わせてOmakefileを編集。 具体的な例は後述。
ビルドする 単に「omake」と打つとビルド
omake 継続監視ビルド 「-P」オプションで継続監視ビルド
omake -P 関連するファイルを監視して、変更があれば自動的にビルドしてくれる。
キャッシュの削除 OMakeでビルドすると環境依存なパスの設定とかを書き込んだファイルが作成される。 Dropboxなどの同期ソフトはこれらの設定ファイルも同期してしまうので、 別環境で作業しようとするとエラーを吐いて止まってしまう。
次のコマンドでキャッシュファイルを無視すれば大丈夫。
omake --flush-includes Omakefileの例 TeXの文章をビルドするOMakefileの例。 LinuxとWindowsでデフォルトの文字コードが違って面倒なので、文字コードはutf-8に統一。 PDF出力はA3サイズ。
{% gist 3300749 OMakefile %}
prosperを使ってプレゼン資料を作った時のOMakefile。 dvipdfmでは処理できない場合があるので、一度PostScriptにしてからPDFに変換するようにルールを上書き。 数式を多用するようなプレゼン資料だと便利。
{% gist 3300749 OMakefile-slide %}
参考  OMake つかったらC言語でプログラム書く手間がバカみたいに減った OMake つかって LaTeX コンパイルしたら簡単すぎて身長が5cm伸びた OMake マニュアル日本語訳 omakeが動かない &amp;hellip;. 動いた [卒論] LaTeXのビルドにOMakeを使ってみた  おまけ Dropboxと連携するとこんなことも。
Dropboxで同期しているフォルダで、「omake -P」を実行して自動コンパイルする設定のまま放置してきちゃった。別のPCでソース書き換えると、Dropboxが同期→リモートのomakeが自動コンパイル→Dropbox経由でコンパイル結果が帰ってきた。
&amp;mdash; Ichinose Shogoさん (@shogo82148) 9月 27, 2011</description>
    </item>
    
  </channel>
</rss>