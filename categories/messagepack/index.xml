<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>messagepack on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/messagepack/</link>
    <description>Recent content in messagepack on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 25 May 2014 01:38:00 +0900</lastBuildDate><atom:link href="https://shogo82148.github.io/categories/messagepack/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C# でお手軽にMessagePack解析！</title>
      <link>https://shogo82148.github.io/blog/2014/05/25/mini-message-pack/</link>
      <pubDate>Sun, 25 May 2014 01:38:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2014/05/25/mini-message-pack/</guid>
      <description>MiniMessagePack.csってのを作った。 C#のプロジェクトにファイルひとつ導入するだけで、お手軽にMessagePackの解析ができます。
なんで作ったの？ MiniJSON の置き換えが目的です。 とあるUnityプロジェクトでMB単位のJSONをパースする箇所があってですね・・・ パースにはMiniJSONを使っているのですが、さすがに対象がでかすぎて重たい。 そこでMessagePackへの置き換えを検討してみたわけです。
もちろん C# で動く MessagePack のパーサはすでにあって、 messagepack-cliとかmessagepack-unityとか見つけました。 しかし、Unityのちょっと古いMonoで動かすためにちょっとゴニョゴニョしないといけなかったり、 MiniJSON との互換性を取るためにもゴニョゴニョしないといけなかったり(実際やってみたらキャストが大量に失敗して辛かった・・・)、 今回の用途にはちょっと高機能かなーと思ったので作っちゃいました！
つかいかた デコードする byteの配列を渡すとパースして返してくれます。 配列はList&amp;lt;object&amp;gt;で、マップはDictionary&amp;lt;string, object&amp;gt;になります。
using MiniMessagePack; // it means {&amp;#34;compact&amp;#34;:true,&amp;#34;schema&amp;#34;:0} in JSON var msgpack = new byte[] { 0x82, 0xa7, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0xc3, 0xa6, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x00 }; var packer = new MiniMessagePacker (); object unpacked_data = packer.Unpack (msgpack); /* unpacked_data = new Dictionary&amp;lt;string, object&amp;gt; { { &amp;#34;compact&amp;#34;, true }, { &amp;#34;schema&amp;#34;, 0}, }; */ エンコードする オブジェクトを渡すと MessagePack にエンコードして返してくれます。</description>
    </item>
    
  </channel>
</rss>
