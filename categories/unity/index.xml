<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/unity/</link>
    <description>Recent content in Unity on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 22 Dec 2015 19:04:00 +0900</lastBuildDate>
    
	<atom:link href="https://shogo82148.github.io/categories/unity/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UnityのBitmapフォントの収録文字のdiffを取る</title>
      <link>https://shogo82148.github.io/blog/2015/12/22/2015-12-22-diff-of-unity-bitmap-font/</link>
      <pubDate>Tue, 22 Dec 2015 19:04:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2015/12/22/2015-12-22-diff-of-unity-bitmap-font/</guid>
      <description>Unityで文字を描画するには 「BMFont(Bitmap Font Generator)でビットマップフォントを作る方法」等にあるように ビットマップフォントを自分で作ってあげないといけないらしいです。 (ダイナミックフォントというものもあるらしいけど、まだ安定性が検証ができていないので使ってない。)
フォントに入っている全部の文字を収録するとでかくなりすぎるので、一部の文字だけ収録するのが一般的だと思います。 入れる文字は自分で選ぶわけですが、フォントファイルを更新する際に、以前は使えた文字が入っていなくてつらい思いをしたので、 gitで差分をみれるようにしてみました。
gitのいろんなファイル形式の差分を見やすくする方法は Git Diffでcsvの差分を見やすく表示するを参照。
csvのときと同じ要領で、まずはfntファイルをdiffを取りやすい形式に変換するスクリプト(fnt2txt)を用意し
``` bash fnt2txt #!/bin/bash
grep &amp;lsquo;char id=&amp;rsquo; $1 | cut -d&amp;rsquo; &amp;lsquo; -f2 | cut -d= -f2 | perl -MEncode -ne &amp;lsquo;printf &amp;ldquo;%04x: %s\n&amp;rdquo;, $_, encodeutf8 chr($) if $_ &amp;gt;= 32&amp;rsquo;
 fnt2txtを使う設定を`.git/config`に設定します。 ``` plain .git/config [diff &amp;quot;fnt&amp;quot;] textconv = fnt2txt  最後に拡張子.fntに対してだけこの設定が反映されるようにすればOKです。
``` plain .gitatrribute *.fnt diff=fnt
 こんな感じでdiffが見れます。 ``` diff git-diff diff --git a/foo.fnt b/foo.fnt index 79391c0.</description>
    </item>
    
    <item>
      <title>名前付き引数とオプション引数とオーバーロードを同時に使うとUnityが死ぬ</title>
      <link>https://shogo82148.github.io/blog/2015/03/29/2015-03-29-unity-internal-compiler-error/</link>
      <pubDate>Sun, 29 Mar 2015 12:13:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2015/03/29/2015-03-29-unity-internal-compiler-error/</guid>
      <description>オーバーロードの優先順位付けが少しおかしくて、 名前付き引数とオプション引数と一緒に使うと死ぬ場合があるというお話。 ぴーちんが昨日言ってたやつ。 いんたーねっつにも乗っけておく。
問題となるのは以下のようなコード。
class MainClass { void Foo (int fuga) { } void Foo (string hoge, int fuga = 10) { } void Bar() { Foo (fuga: 20); } } このコードは以下のような例外を吐いて死ぬ。
Internal compiler error. See the console log for more information. output was: Unhandled Exception: Mono.CSharp.InternalErrorException: Internal error at Mono.CSharp.MethodGroupExpr.IsApplicable (Mono.CSharp.ResolveContext ec, Mono.CSharp.Arguments&amp;amp; arguments, Int32 arg_count, System.Reflection.MethodBase&amp;amp; method, System.Boolean&amp;amp; params_expanded_form) [0x00000] in &amp;lt;filename unknown&amp;gt;:0 at Mono.CSharp.MethodGroupExpr.OverloadResolve (Mono.CSharp.ResolveContext ec, Mono.</description>
    </item>
    
    <item>
      <title>C# でお手軽にMessagePack解析！</title>
      <link>https://shogo82148.github.io/blog/2014/05/25/2014-05-25-mini-message-pack/</link>
      <pubDate>Sun, 25 May 2014 01:38:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2014/05/25/2014-05-25-mini-message-pack/</guid>
      <description>MiniMessagePack.csってのを作った。 C#のプロジェクトにファイルひとつ導入するだけで、お手軽にMessagePackの解析ができます。
なんで作ったの？ MiniJSON の置き換えが目的です。 とあるUnityプロジェクトでMB単位のJSONをパースする箇所があってですね・・・ パースにはMiniJSONを使っているのですが、さすがに対象がでかすぎて重たい。 そこでMessagePackへの置き換えを検討してみたわけです。
もちろん C# で動く MessagePack のパーサはすでにあって、 messagepack-cliとかmessagepack-unityとか見つけました。 しかし、Unityのちょっと古いMonoで動かすためにちょっとゴニョゴニョしないといけなかったり、 MiniJSON との互換性を取るためにもゴニョゴニョしないといけなかったり(実際やってみたらキャストが大量に失敗して辛かった・・・)、 今回の用途にはちょっと高機能かなーと思ったので作っちゃいました！
つかいかた デコードする byteの配列を渡すとパースして返してくれます。 配列はList&amp;lt;object&amp;gt;で、マップはDictionary&amp;lt;string, object&amp;gt;になります。
using MiniMessagePack; // it means {&amp;#34;compact&amp;#34;:true,&amp;#34;schema&amp;#34;:0} in JSON var msgpack = new byte[] { 0x82, 0xa7, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0xc3, 0xa6, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x00 }; var packer = new MiniMessagePacker (); object unpacked_data = packer.Unpack (msgpack); /* unpacked_data = new Dictionary&amp;lt;string, object&amp;gt; { { &amp;#34;compact&amp;#34;, true }, { &amp;#34;schema&amp;#34;, 0}, }; */ エンコードする オブジェクトを渡すと MessagePack にエンコードして返してくれます。</description>
    </item>
    
    <item>
      <title>Unity Test Tools を使ってみる</title>
      <link>https://shogo82148.github.io/blog/2013/12/21/2013-12-21-unity-test-tools/</link>
      <pubDate>Sat, 21 Dec 2013 21:02:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2013/12/21/2013-12-21-unity-test-tools/</guid>
      <description>みなさんこんにちは、 最近つらいことばかりで元気のないいっちーです。 少しでもつらいことを解消できないかと Unity Test Tools ってので遊んでみました。
背景 最近あったつらいことのひとつに「Unityで作ってるプロジェクトで、機能拡張したときに間違えて一行消しちゃった！！！」 ってのがあります。
もちろん僕が消したわけじゃないですよ！！！ 僕サーバサイドエンジニアですから、Unityはいじりません。 でも、一応修正コミットは見ていたはずなので、気がつけなかったのは残念です・・・。
どんなにコード書く人が頑張っても、レビューする人が頑張っても、 人間誰だってミスします。 じゃあ、機械にやらせよう！テストコードだ！って話なんですが、 コードカバレッジが低く、今回のつらい事例でもテストがありませんでした。 一部書いてあるテストも、担当者が代わってからなんか怪しい・・・。
あと、自分も手元でテスト動かしてみたのですが、今のテスト面倒・・・。
 Unityのコンソールにドバッと流れる  テストが全部通ったのか、失敗したのかよくわからない  ユニットテストを1項目だけやりたいとかどうやるんだろう  「テストの実行」が「シーンの再生」なので1項目とかどうすんの？   Unity Test Tools つらいので解決方法を探るべくインターネットの海をさまよっていたら Unity Test Tools なるものを発見。
 Unity Test Tools Released  これを書いてる時点で、3日前のリリースです！ タイムリーだ！！
英語でよくわかんないけど、スクリーンショットはわかりやすくてかっこいいぞ！ 遊んでみよう！
事前準備 まず、Unity Testing Tools をダウンロードしてこよう！ Aseet Store に並んでるので、ダウンロードボタンを押してしばらく待ってれば Unity が勝手に使える状態にしてくれます。
簡単なユニットテストを書いてみる 以前れもんさんが書いた「#24 「Unityでコルーチンも単体テストしよう」 tech.kayac.com Advent Calendar 2012」を Unity Testing Tools でやってみました。
テストの対象はこんな感じのクラスです(短く書けそうな部分があったのでちょっと変えた)。</description>
    </item>
    
  </channel>
</rss>