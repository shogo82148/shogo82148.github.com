<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>6さいカンファレンス on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/6%E3%81%95%E3%81%84%E3%82%AB%E3%83%B3%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/</link>
    <description>Recent content in 6さいカンファレンス on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 30 Oct 2013 23:42:00 +0900</lastBuildDate><atom:link href="https://shogo82148.github.io/categories/6%E3%81%95%E3%81%84%E3%82%AB%E3%83%B3%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>第10回６さいカンファレンス「C言語のポインタ復習」</title>
      <link>https://shogo82148.github.io/blog/2013/10/30/6saiconf-10/</link>
      <pubDate>Wed, 30 Oct 2013 23:42:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2013/10/30/6saiconf-10/</guid>
      <description>気づかぬ間に第10回６さいカンファレンスが開催されていました。
 第10回６さいカンファレンス「C言語のポインタ復習」  くいなちゃんSNS上で行われ、ログも残っているのでそちらを参照。 「６さいカンファレンス」のカテゴリから辿れるように記事にしておきます。</description>
    </item>
    
    <item>
      <title>6さいカンファレンス 第9回「マスタリングの技法 ～音圧を上げよう～」まとめ</title>
      <link>https://shogo82148.github.io/blog/2012/11/09/6saiconf-9/</link>
      <pubDate>Fri, 09 Nov 2012 00:13:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2012/11/09/6saiconf-9/</guid>
      <description>2012/11/8にくいなちゃんさん主催で開催された6さいカンファレンスのまとめ。 第9回は「マスタリングの技法 ～音圧を上げよう～」です。
勝手にまとめてしまったので、何か問題があれば@shogo82148まで。
よるほー くいなちゃん: みなさん、自分が作った曲が、市販のCDの曲にくらべ、 音量が小さい (最大まで波形を上げたにも関わらず)と悩んだことはありませんか？
くいなちゃん: しかし、心配はいりません。 今回のことを実践していただくと、 みなさんの曲も、市販の楽曲並みに、音圧をあげることができるですん！ では次の波形をご覧ください。
くいなちゃん: http://kuina.tes.so/6saiconf_9/img0.png はい、さっき作った曲です。 いい曲ですね！ しかし、なんだか音量が小さいですね… それでは、波形に注目してください。 この図では、波形が-1.0～1.0 の範囲で 示されていますが、この範囲に比べ、明らかに波形が小さいです。 余白が空きすぎです！
くいなちゃん: え、mp3ファイルがどこにあるかって？ ｷﾆｼﾅｲ! では、とりあえず、この波形を -1.0～1.0 まで拡大してみましょう。 http://kuina.tes.so/6saiconf_9/img1.png はい、赤い矢印で示されたところが、確かに-1.0～1.0 の範囲に到達していますね。 素人さんは、この状態で完成、と思うでしょう。 しかし、それではダメダメですん☆
くいなちゃん: なぜなら、緑の2本線で示された範囲がメインの波形であって、 そこから飛び出た いわゆる魚の骨は、音量を上げる邪魔をするものだからです。 この魚の骨さえなければ、もっと音量が上がるのに…そう考えてください。
くいなちゃん: 市販のCD の音楽なんかは、こんな波形をしています。 http://kuina.tes.so/6saiconf_9/img2.png これは、全体が波形で埋まった、いわゆる海苔みたいなことになっているので、 業界でもしばしば 海苔 と言われます。 ここまで来ると、相当 音量が大きく聞こえます。 波形のピークは、魚の骨と同じなんですけどね。
くいなちゃん: で、素人さんは、この状態にしようと、魚の骨を無視して、 波形のレベルを上げるわけです。 しかし、これには問題があるのです。
くいなちゃん: http://kuina.tes.so/6saiconf_9/img3.png この図を見ればわかるのですが、青のラインが -1.0 ～ 1.0 の範囲をしめしています。 で、無理やり波形を拡大すると、青のラインを超えた部分が潰されて、 右の波形のようなことになってしまいます。これは、元の波形から変わっているので、 当然音も変わります。大抵、ノイズが入った汚い音になってしまいますですー
くいなちゃん: じゃあ、どうするのか。 それは、波形を潰すことなく、波形のピークを下げて -1.0 ～ 1.</description>
    </item>
    
    <item>
      <title>6さいカンファレンス 第7回「Windowsのアプリをクラックしよう！(再)」まとめ</title>
      <link>https://shogo82148.github.io/blog/2012/10/27/6saiconf-7/</link>
      <pubDate>Sat, 27 Oct 2012 18:21:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2012/10/27/6saiconf-7/</guid>
      <description>2012/10/25にくいなちゃんさん主催で開催された6さいカンファレンスのまとめ。 第7回は「Windowsのアプリをクラックしよう！(再)」です。
第4回「Windowsのアプリをクラックしよう！」はどこへいってしまったのでしょう？ 頑張って探したけどこれしか情報が無い・・・？
厳しい緘口令が敷かれているのか，参加者がくいなちゃんさんしか居なかったのか，そもそもそんなのなかったのか・・・．
勝手にまとめてしまったので、何か問題があれば@shogo82148まで。 (カンファレンスの内容にはくいなちゃんライセンスが適用されるらしいです．怖！)
&amp;mdash;&amp;ndash;ｷﾘﾄﾘｾﾝ&amp;mdash;&amp;ndash; くいなちゃん: 10/25(木) 21:00 から、第７回 ６さいカンファレンスを開催します。 テーマは、「Windowsのアプリをクラックしよう！(再)」 です。 ** (再) と付いていますが、前回やった記憶はございません。 ** 参加されない方は、今のうちにご退場お願いします。 ROMでの参加も歓迎ですん☆ それでは、もうしばらくお待ちください。
くいなちゃん: それでは、第７回　６さいカンファレンスを開催します。 テーマは、「Windowsのアプリをクラックしよう！(再)」　ですん☆ しかし、これを開始する前に、いくつかの免責事項をお伝えしなければなりません。 (６さい的な事情)
くいなちゃん: まず、実際に既存の Windowsアプリをクラックする、という流れで 話を進めていきますが、実際にクラックを行っているわけではなく、 また画像も合成です。 実際に既存のアプリに対してクラックする行為は、 場合によっては犯罪となりますので、** 決してマネしないでください **。 本講座は、犯罪を助長する意図があるわけではなく、 むしろ攻撃側を知ることで、防衛スキルを身に着けようというものです！
マインスイーパ！ くいなちゃん: はい、よろしいでしょうか。 では、本日クラックするアプリはこちらです！ http://kuina.tes.so/6saiconf_7/img0.png
くいなちゃん: みなさん大好きな、マインスイーパですん☆ くいなちゃんは、マインスイーパが得意ではないので、上級をクリアする頃には、 時間が999になってしまいます。 そこで、この時間が経過しないよう、改造することを今日の目標としましょう。
くいなちゃん: まず、ollydbg というフリーソフトを起動します。 これは、主に アプリをクラックするのに使われるソフトです[要出典] http://kuina.tes.so/6saiconf_7/img1.png 画像は、ollydbg 上でマインスイーパを起動したところです。
くいなちゃん: ollydbg には、ウインドウがいくつか分かれていますが、 簡単に説明すると、左上が exeファイルを逆アセンブルしたコード、 左下が 実行時のメモリの内容、右上が CPUのレジスタの内容、 右下は…　コールスタックみたいに見えるけど、よくわからないからキニシナイ！
くいなちゃん: ではここで、もう一つ フリーソフトを起動しましょう。 スペシャルねこまんま５７号　という、アレなアイコンとタイトルのソフトです。 主に、実行しているアプリのメモリを監視したり書き換えたりするのに使います。 http://kuina.</description>
    </item>
    
    <item>
      <title>6さいカンファレンス 第6回「幼女を描いてみよう！　～原画から彩色まで～」まとめ</title>
      <link>https://shogo82148.github.io/blog/2012/10/12/6saiconf-6/</link>
      <pubDate>Fri, 12 Oct 2012 00:28:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2012/10/12/6saiconf-6/</guid>
      <description>2012/10/11にくいなちゃんさん主催で開催された6さいカンファレンスのまとめ。 第6回は「幼女を描いてみよう！　～原画から彩色まで～」です。
勝手にまとめてしまったので、何か問題があれば@shogo82148まで。 (カンファレンスの内容にはくいなちゃんライセンスが適用されるらしいです．怖！)
ゆるふわ☆タイム くいなちゃん: 今日も、前回と引き続き、プログラミングのプの字も出てこない、ゆるふわ講義ですん☆
くいなちゃん: テーマは 「幼女を描いてみよう！　～原画から彩色まで～」 ということなので、今回描いてみた絵を、いきなり完成形からご覧いただくことにします。 ３時間で描いたです。 http://kuina.tes.so/6saiconf_6/img0.jpg
構図を描いてみるです！ くいなちゃん: では、順を追って、描いていくことにしましょう。 最初はもちろん、カンヴァスは白紙です。 そこに、まずは構図をﾃｷﾄｰに描いてみるです： http://kuina.tes.so/6saiconf_6/img1.jpg はい、ここまではみなさん描けますね。 まるで６さいが描いたようなﾃｷﾄｰな落書きです。
くいなちゃん: ここでのポイントは、脳内に立体をイメージすることです。 構図をイメージしやすいように、背景に線を引いていますが、無くてもイメージできるなら描く必要はありません。 注意してほしいのは、2D絵を描くからといって、2Dで捉えないことです。 アニメ絵でも同様ですん
くいなちゃん: はい、キャラに、顔と髪を追加してみました。 http://kuina.tes.so/6saiconf_6/img2.jpg えっ、完成形と絵が違う？ キニシナイ！ あと、独りでは寂しいので、小鳥も追加しました。
色を塗っていくです！ くいなちゃん: アニメ調の絵を描く場合は、ここからアニメ塗りをしていただけば完成しそうなんですが、せっかくなので、油彩画っぽく塗っていくことにします。
くいなちゃん: まずは、べた塗りです。 http://kuina.tes.so/6saiconf_6/img3.jpg
くいなちゃん: なんてことはありません。 太いブラシで、ﾃｷﾄｰに塗っただけです。 はみ出しまくってますね。　しかし、ブラシが太いので、細かな部分はそもそも塗れません。 このくらいﾃｷﾄｰでもキニシナイでok
くいなちゃん: 人物に影が、若干付けられていますが、原画を描くときに立体を意識したならば、光源を意識すればある程度付けられると思います。 物理学的に考えるのです！
細部を塗っていくです！ くいなちゃん: はい、次は、もう少し細いブラシで、細部を塗っていきます。http://kuina.tes.so/6saiconf_6/img4.jpg 基本的には、最初に太いブラシで大まかに塗り、徐々にブラシを細くしていき、細部を描きこんでいく流れですね。 ブラシの目安は、半々にしていくと良さそうです
くいなちゃん: この時点で、服に謎の模様が描かれていますが、ﾃｷﾄｰです。 その太さのブラシで表現できる粒度のものを塗ってください。
くいなちゃん: で、更に細いブラシで塗っていきます(3段階目)　そして、このあたりまで塗ったら、試しに線画(原画)を外してみましょう。 http://kuina.tes.so/6saiconf_6/img5.jpg おや、線画が無くても 綺麗に見えますね！
くいなちゃん: 目を描きこんでいなかったのは、意図的です。 最初のアニメ調の絵で完成させたい場合は、目も塗ってあげてください。
顔を描くです！ くいなちゃん: はい、それでは、もう線画が無くても輪郭が解りますので、線画は非表示にしたまま塗っていきましょう。 更に細いブラシで塗ります。</description>
    </item>
    
    <item>
      <title>6さいカンファレンス 第5回「６さいからの作曲講座」まとめ</title>
      <link>https://shogo82148.github.io/blog/2012/10/11/6saiconf-5/</link>
      <pubDate>Thu, 11 Oct 2012 12:37:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2012/10/11/6saiconf-5/</guid>
      <description>2012/10/04にくいなちゃんさん主催で開催された6さいカンファレンスのまとめ。 第5回は「６さいからの作曲講座」です。
勝手にまとめてしまったので、何か問題があれば@shogo82148まで。 (カンファレンスの内容にはくいなちゃんライセンスが適用されるらしいです．怖！)
THE END くいなちゃん: みなさん、楽譜は読めますね！(ﾁﾗｯ
くいなちゃん: 今回は、作曲理論などの難しい講義というよりも、実際にどうすれば綺麗な曲が作れるのか、という実践的な内容になっています。 くいなちゃんの独自理論ですん
くいなちゃん: では、さっそく、曲を作ってみましょうー
コード くいなちゃん: はい、まず曲に必要なのは、　&amp;ldquo;コード&amp;rdquo;　です。　「えっ、メロディじゃ？」 と言った あなたは素人です。 コードをしっかり押さえない曲は、聴くに堪えない感じになってしまいます。 くいなちゃんは、コードもメロディも全部同時に浮かぶことのできる天才肌ですが、とりあえず今回はコードを中心に創っていきましょう！
くいなちゃん: コードのルール： ** 「あるコードには、移りやすい次のコードが ある程度決まっている」 ** です！ たとえば、C(ド・ミ・ソ) のコードからは、G(ソ・シ・レ) や F(略) や Am(略) に移りやすいです。　逆に、G や F から、 C にも移りやすいです。
くいなちゃん: ということなので、C → G → C → G　は移りやすいコードのルールで作ったので、自然なコードということになりますね。　このコードで曲を作っていきましょ！
くいなちゃん: はい、この楽譜をご覧ください。　C(ドミソ) と G(ソシレ) が交互に来ているのが解るかと思います。　わからない人は、じっくり読んでね。 http://kuina.tes.so/6saiconf_5/img0.png(魚拓)
くいなちゃん: はい、コード完成です！ せっかくなので、これを鳴らしてみましょう。 http://kuina.tes.so/6saiconf_5/snd0.mp3
くいなちゃん: 自然ですね！
メロディをのせる くいなちゃん: では、コードが完成したので、メロディを乗せて行きましょう。 メロディのルール： ** 「拍子の部分には、コードの音を使う」 ** です！ さっきの、音が鳴っているタイミングの部分に、コードの音を使って、メロディを配置してみましょう。</description>
    </item>
    
    <item>
      <title>6さいカンファレンス 第3回「アルゴリズムを自力で生み出すプログラムを作ろう！」まとめ</title>
      <link>https://shogo82148.github.io/blog/2012/10/04/6saiconf-3/</link>
      <pubDate>Thu, 04 Oct 2012 16:58:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2012/10/04/6saiconf-3/</guid>
      <description>2012/09/06にくいなちゃんさん主催で開催された6さいカンファレンスのまとめ。 第3回は「アルゴリズムを自力で生み出すプログラムを作ろう！」です。
勝手にまとめてしまったので、何か問題があれば@shogo82148まで。
WELCOME TO HEAVEN!! くいなちゃん: ところでみなさん、次の( ) に入る数を当ててください
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ( )  くいなちゃん: はい、正解です！ これは、フィボナッチ数列と呼ばれ、 前の2つの値の和が、次の値になっているという数列です
くいなちゃん: これを、f(0) = 0, f(1) = 1, f(2) = 1, f(3) = 2, f(4) = 3, f(5) = 5, … と書いていくことにしましょう。　f(10) = 55　ですね！
くいなちゃん: もっと汎用的に考えて、f(x) の x を与えると、フィボナッチ数が返ってくることを考えましょう。 x = 10 のとき、f(x) が 55 になる、といった感じです
くいなちゃん: ではみなさん、この f(x) を、プログラムで書くことはできますでしょうか。 言語は何でも構いません。
くいなちゃん: やり方は、いくつかあります。 x = 100 と与えられれば、0, 1, 1, 2, 3, 5, …　と 約100回繰り返して、x = 100 の値を求めるというものです。</description>
    </item>
    
    <item>
      <title>6さいカンファレンス 第2回「数学の定理を自動で発見するAI を Haskellで作ろう！」まとめ</title>
      <link>https://shogo82148.github.io/blog/2012/10/02/6saiconf-2/</link>
      <pubDate>Tue, 02 Oct 2012 13:07:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2012/10/02/6saiconf-2/</guid>
      <description>2012/09/13にくいなちゃんさん主催で開催された6さいカンファレンスのまとめ。 第2回は「数学の定理を自動で発見するAI を Haskellで作ろう！」です。
勝手にまとめてしまったので、何か問題があれば@shogo82148まで。
WELCOME TO HELL!! くいなちゃん: それでは、まず、数学の「定理」とは何か、について説明したいと思います。 みなさん、日常的に「定理」という言葉を使っていると思いますが、「定理」とは何か、説明できますか
くいなちゃん: 「教科書に載っている公式が、定理だ！」と思うかもしれませんね。 確かに、教科書にも定理は載っています。
くいなちゃん: では、曖昧な理解の方のために、厳密かつ ゆるふわに説明しましょう。
くいなちゃん: 定理とは、次のように定義できます。
 公理であるならば、定理である。 定理を推論規則によって推論したものは、定理である。  以上。
くいなちゃん: はい、みなさんこれで定理が何かを理解したと思いますので、数学の定理を自動で発見するAIを作ろうと思います。
くいなちゃん: Haskellで。
Haskell! くいなちゃん: そもそも、Haskellって何？ という方もおられるかと思いますので、まずは Haskell について簡単に説明しておきたいと思います。
くいなちゃん: Haskell は、関数型言語です。 宣言的プログラミングによって、プログラムしていくプログラミング言語です。「○○は××である！」というのを繰り返してプログラミングする感じですね。　「まずは○○して、次に××しろ！」という C言語(手続き型言語)とはかなり異なります。
くいなちゃん: では具体的に、今回定理を発見するための数学の体系を説明しながら、同時に Haskell で実装してみることにしましょう。
くいなちゃん: 最終的には 大規模な数学体系の定理を発見するとしても、まずは試しに小さな体系で定理を発見してみることを考えます。 今回は、命題論理を対象としてみます。
定義 くいなちゃん: では、今回対象とする命題論理を、厳密に定義していきましょう。 まず、この体系で用いられる記号は、P　Q　R　￢　⇒　の5種類です。 この5種類をうまく並べると、この数学体系でのあらゆる式や命題が記述できます。
くいなちゃん: まあ、たとえば、　P⇒P　(PならばPである)　といった感じですん。 わかりますね。
くいなちゃん: ￢　は数学における否定によく使われる記号ですが、いまのところ、単なる記号にすぎず、意味は定義されていません
くいなちゃん: ちなみに、くいなちゃんはポーランド記法が好きなので、　P⇒P　を、　⇒PP　と書くことにしましょう</description>
    </item>
    
    <item>
      <title>6さいカンファレンス 第1回「C言語で作る、はじめてのDAW制作」まとめ</title>
      <link>https://shogo82148.github.io/blog/2012/09/30/6saiconf-1/</link>
      <pubDate>Sun, 30 Sep 2012 20:33:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2012/09/30/6saiconf-1/</guid>
      <description>だいぶ時間がたってしまったけど、2012/09/06にくいなちゃんさん主催で開催された6さいカンファレンスのまとめ。 第1回は「C言語で作る、はじめてのDAWソフト制作」です。
勝手にまとめてしまったので、何か問題があれば@shogo82148まで。
BATTLE START!! くいなちゃん: みなさんは、既にC言語の基本的なところはマスターしていると思いますが、念のために軽く復習しておきましょう。　まずは、このソースコードをご覧ください。 http://kuina.tes.so/6saiconf/a.png(魚拓)
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;math.h&amp;gt; int main(void) { return 0; } くいなちゃん: 右下の100% は気にしなくてOKです。　このプログラムは、「何もせず終了するだけ」のプログラムとなっています。　ソースコードを順に解説しましょう。
くいなちゃん: まず、1行目と2行目に書かれている #include ですが、これはおまじないです。　プログラムの本質は、4行目からとなります。
くいなちゃん: int main(void) { } が、プログラムの本質となります。　コンピュータがこのプログラムを起動すると、int main(void) { } の { と } に囲まれた部分を上から順に実行していきます。 } に辿り着いたら終了です。
くいなちゃん: よって、このプログラムは、 return 0; を実行するだけのプログラムとなります。　return 0; とは、おまじないです。　えへへ☆
DAWを作ってみる くいなちゃん: はい、もう、C言語の基本的なところは全てマスターできましたね。　では、早速 DAWソフトを作ってみましょう。
くいなちゃん: DAWとは、簡単にいいますと、曲を作るソフトです。　それでは、int main(void) { } の中に、DAWっぽいプログラムを書いていきましょう。　とりあえず、int i, j; を書きます。</description>
    </item>
    
  </channel>
</rss>
