<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/php/</link>
    <description>Recent content in Php on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 24 Sep 2018 17:44:00 +0900</lastBuildDate>
    
	<atom:link href="https://shogo82148.github.io/categories/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PHPer向けGoのJSONデコーダーを作った</title>
      <link>https://shogo82148.github.io/blog/2018/09/24/go-phper-json/</link>
      <pubDate>Mon, 24 Sep 2018 17:44:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2018/09/24/go-phper-json/</guid>
      <description>必要に迫られて作りました。 PHPでエンコードしたJSONをいい感じにデコードしてくれるGoのパッケージです。
 shogo82148/go-phper-json  背景 さて、PHPerの方々には当たり前のことかもしれませんが、PHPの言語仕様について少しおさらいです。 それがどうしてGoで問題になるか見ていきます。
PHPのarray問題 PHPはとても便利なプログラミング言語なので、配列を扱うことができます。 ここでPHPの配列のマニュアルを読んでみましょう。
 http://php.net/manual/ja/language.types.array.php PHP の配列は、実際には順番付けられたマップです。マップは型の一種で、 値をキーに関連付けます。 この型は、さまざまな使い道にあわせて最適化されます。 配列としてだけでなく、リスト (ベクター)、 ハッシュテーブル (マップの実装の一つ)、辞書、コレクション、スタック、 キュー等として使用することが可能です。 PHP の配列には他の PHP 配列を値として保持することができるため、 非常に簡単にツリー構造を表現することが可能です。 (強調部分は筆者によるもの)
 重要なことなのでもう一度。
 配列としてだけでなく、リスト (ベクター)、 ハッシュテーブル (マップの実装の一つ)、辞書、コレクション、スタック、 キュー等として使用することが可能です。
 他の言語でリスト、ハッシュテーブル、辞書等と呼ばれているものは、PHPにおいてはいずれも配列です。 PHPにとっては、整数を添字にしているか、文字列を添字にしているかの違いでしかありません。 (PHP7.xから整数が添字の場合に最適化が入るようになったらしいけど、大きな挙動の変更はないはず)
そのため、以下のスクリプトは true を返します。
&amp;lt;?php $a = array(&amp;#34;apple&amp;#34;, &amp;#34;banana&amp;#34;); $b = array(0 =&amp;gt; &amp;#34;apple&amp;#34;, 1 =&amp;gt; &amp;#34;banana&amp;#34;); var_dump($a == $b); // bool(true)  この仕様のため、JSONにエンコードすると最初は配列だったのに、 処理を進めていくうちにうっかり文字列のキーを作ってしまって、 JSONのオブジェクトに変わってました、ということが起こりえます。 Goにおいて両者は全く違う型なので、デコードの際に非常に困ります。
&amp;lt;?php $a = array(1, 2, 3); print json_encode($a); // [1,2,3]  $a[&amp;#34;foo&amp;#34;] = &amp;#34;bar&amp;#34;; print json_encode($a); // {&amp;#34;0&amp;#34;:1,&amp;#34;1&amp;#34;:2,&amp;#34;2&amp;#34;:3,&amp;#34;foo&amp;#34;:&amp;#34;bar&amp;#34;}  このような悲劇を防ぐために、 JSON_FORCE_OBJECT というオプションがあるのですが、 オプションの名前通りに全部JSONのオブジェクトになってしまいます。 この要素だけJSONの配列にして欲しい！といった細かな操作はできません。</description>
    </item>
    
  </channel>
</rss>