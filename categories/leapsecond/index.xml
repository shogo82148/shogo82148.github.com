<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leapsecond on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/leapsecond/</link>
    <description>Recent content in leapsecond on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 26 Jun 2017 09:21:42 +0900</lastBuildDate>
    
	<atom:link href="https://shogo82148.github.io/categories/leapsecond/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go1.9から使える Monotonic Clocks を試してみた</title>
      <link>https://shogo82148.github.io/blog/2017/06/26/go19-monotonic-clock/</link>
      <pubDate>Mon, 26 Jun 2017 09:21:42 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2017/06/26/go19-monotonic-clock/</guid>
      <description>先日Go1.9beta1がリリースされました。
 Go 1.9 Release Notes  型エイリアスのサポート、math/bitsパッケージ、 sync.Map型など、 今回のアップデートでも便利そうな機能が追加されます。 詳しくはtenntennさんのGopher Fest 2017参加レポートをどうぞ。
今回のリリースノートを見て、個人的に注目しているのはMonotonic Clocksのサポートです。 他の機能追加はTwitterとかで見かけるけど、 Monotonic Clocksはなぜかあまり見ない・・・。 beta1がでて手軽に試せるようになったので、試してみました。
Monotonic Clocks Go1.8以前で取得していた時刻は「wall clock」といい、現在の正しい時刻を知るために使います。 一方「monotonic clock」は、時間を計るために使うものです。 Go1.9からはtime.Nowで取得できる時刻に「wall clock」と「monotonic clock」が含まれるようになります。
timeパッケージのドキュメントから コード片を引用します。
t := time.Now() ... operation that takes 20 milliseconds ... u := time.Now() elapsed := t.Sub(u) 上のコードで elapsed は 20ms となるはずですが、 実際はそうはならないケースがあります。 具体的には以下のようなケースです。
 ntpdなどによってOSの時刻が変更された場合 うるう秒が挿入・削除された場合  Go1.9からはこのようなケースでも正しく時間を計ることができます。
うるう秒を入れてみた うるう秒が入ったときの挙動が気になったので実際にやってみました。 セットアップが簡単になるようNICTのPerl版SNTPのGolangポートを作ったので、 それを使って偽物のうるう秒を挿入してみます。
 shogo82148/fakentpd  インストールはいつものようにgo getです。 -pオプションで正のうるう秒挿入、-nオプションで負のうるう秒削除です(ほんとうは月末だけだけど、雑な実装のため毎日その日の終わりに挿入・削除されます)。 引数にRFC3339形式で日時を指定すると、その日時を起動時の日時として扱います。
たとえば今月末に正のうるう秒を挿入するには以下のように指定します。</description>
    </item>
    
    <item>
      <title>DateTime.pmにうるう秒の修正が入った話</title>
      <link>https://shogo82148.github.io/blog/2016/12/15/leap-second-in-datetime-dot-pm/</link>
      <pubDate>Thu, 15 Dec 2016 22:17:47 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2016/12/15/leap-second-in-datetime-dot-pm/</guid>
      <description>こんにちは、DateTime.pm Watcherのいっちーです。 本日面白いパッチがDateTime.pmに取り込まれたので、ご紹介したいと思います。
そのpullreqがこちらです。Closedになっていますが、該当コミットはmasterに取り込まれています。
 The leap second in 2012 was on 2012-07-01 not 2012-06-01. #48   per https://confluence.qps.nl/display/KBE/UTC+to+GPS+Time+Correction the leap second in 2012 was on 2012-07-01 not 2012-06-01. It&amp;rsquo;s is well known that leap seconds only occur directly before Jan 1st or July 1st.
 適当な和訳「2012年に挿入されたうるう秒は2012年6月1日ではなく2012年7月1日です。よく知られているように、今までに挿入されたうるう秒は1月1日と7月1日の直前だけです。」
diff --git a/lib/DateTime/LeapSecond.pm b/lib/DateTime/LeapSecond.pm index 66e1b2b..4a38be2 100644 --- a/lib/DateTime/LeapSecond.pm +++ b/lib/DateTime/LeapSecond.pm @@ -108,7 +108,7 @@ sub _initialize {  1999 Jan. 1 +1 2006 Jan.</description>
    </item>
    
    <item>
      <title>Perl の DateTime 利用上の注意点</title>
      <link>https://shogo82148.github.io/blog/2015/12/09/perl-datetime/</link>
      <pubDate>Wed, 09 Dec 2015 00:00:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2015/12/09/perl-datetime/</guid>
      <description>この投稿は Perl 5 Advent Calendar 2015 の 9日目の記事です。
Perl の Time::Piece 利用上の注意点 という記事の最後にDateTimeへの言及があったのですが、 DateTimeはDateTimeでいろいろとハマりどころがあるんですよね・・・。 僕も今年いくつか罠にハマりました。ちょうどアドベントカレンダーの季節ですし、この機会にハマりどころをまとめてみることにします。
遅い いろんなところで言われていることですが 遅い です。 試しに代表的な日付を扱うモジュールでベンチをとってみました。 (比較のために時間をとるためのPerlの組み込み関数も入れてあります)
# いろんな形式で今の時間を取得する use Benchmark qw/ cmpthese /; use Time::HiRes (); use Time::Moment; use Time::Piece (); use DateTime; cmpthese 0, { &amp;#39;time&amp;#39; =&amp;gt; sub { time }, &amp;#39;Time::HiRes&amp;#39; =&amp;gt; sub { Time::HiRes::time }, &amp;#39;localtime&amp;#39; =&amp;gt; sub { () = localtime }, &amp;#39;Time::Moment&amp;#39; =&amp;gt; sub { Time::Moment-&amp;gt;now }, &amp;#39;Time::Piece&amp;#39; =&amp;gt; sub { Time::Piece-&amp;gt;localtime }, &amp;#39;DateTime&amp;#39; =&amp;gt; sub { DateTime-&amp;gt;now( time_zone=&amp;gt;&amp;#39;Asia/Tokyo&amp;#39; ) }, }; Rate DateTime Time::Piece Time::Moment localtime Time::HiRes time DateTime 5303/s -- -95% -98% -99% -100% -100% Time::Piece 103765/s 1857% -- -67% -71% -98% -99% Time::Moment 313599/s 5814% 202% -- -11% -93% -98% localtime 354215/s 6580% 241% 13% -- -92% -98% Time::HiRes 4706723/s 88658% 4436% 1401% 1229% -- -72% time 16536995/s 311751% 15837% 5173% 4569% 251% -- それにしてもTime::Moment速いですね。組み込みのlocaltimeと互角とは。</description>
    </item>
    
  </channel>
</rss>