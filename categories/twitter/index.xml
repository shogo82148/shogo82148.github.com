<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Twitter on Shogo&#39;s Blog</title>
    <link>https://shogo82148.github.io/categories/twitter/</link>
    <description>Recent content in Twitter on Shogo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 27 Apr 2014 21:51:00 +0900</lastBuildDate>
    
	<atom:link href="https://shogo82148.github.io/categories/twitter/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tweepyの2.3.0が出ました</title>
      <link>https://shogo82148.github.io/blog/2014/04/27/tweepy-2-dot-3-0-released/</link>
      <pubDate>Sun, 27 Apr 2014 21:51:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2014/04/27/tweepy-2-dot-3-0-released/</guid>
      <description>Tweepyの2.3.0が出ました。 「Tweepy が Application-only Authentication に対応します」僕のprも取り込まれていて、 Application-only Authentication が標準で使えるようになりました。 というわけで、早速遊んでみます。
Application-only Authenticationで遊ぶ 使い方は「tweepyでApplication-only Authenticationしてみた」のときとほぼ同じ。 Tweepy本体に取り込んでもらったので、名前空間がちょこっと変わったくらいです。 Consumer Key と Consumer Secretだけ設定すればいいので、簡単に使えます。
#!/usr/bin/env python # -*- coding: utf-8 -*- import tweepy import codecs import sys sys.stdin = codecs.getreader(&amp;#39;utf-8&amp;#39;)(sys.stdin) sys.stdout = codecs.getwriter(&amp;#39;utf-8&amp;#39;)(sys.stdout) CONSUMER_KEY = &amp;#39;YOUR CONSUMER KEY&amp;#39; CONSUMER_SECRET = &amp;#39;YOUR CONSUMER SECRET&amp;#39; def main(): user_id = &amp;#34;JO_RI&amp;#34; auth = tweepy.AppAuthHandler(CONSUMER_KEY, CONSUMER_SECRET) api = tweepy.API(auth) arg = {&amp;#39;id&amp;#39;: user_id, &amp;#39;include_rts&amp;#39;: 1} user_statuses = tweepy.Cursor(api.user_timeline, **arg).</description>
    </item>
    
    <item>
      <title>Tweepy が Application-only authentication に対応します</title>
      <link>https://shogo82148.github.io/blog/2014/04/18/tweepy-will-application-only-auth/</link>
      <pubDate>Fri, 18 Apr 2014 06:37:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2014/04/18/tweepy-will-application-only-auth/</guid>
      <description>以前 「tweepyでApplication-only Authenticationしてみた」で 書いたTweepyのAuthHandlerを本体に取り込んでもらいました。 リリースタイミングとかよくわかってないですが、次のリリースとかでApplication-only Authenticationを簡単に使えるようになります、たぶん。
(2014-04-27追記) このprを取り込んだTweepy 2.3.0がリリースされました。早速遊んでみたのでこちらもどうぞ&amp;gt;Tweepyの2.3.0が出ました
取り込まれるまでの経緯  「Application-only Authentication 対応しないの？」って質問は去年からあった(tweepy#318) 先日「ここに動くコード載ってるよ」と僕の記事が紹介される 昨日の夕方「コントリビュートしてみない？」とブログやgithub経由で頼まれる やるしか無い！と思って昨日のうちにpr作成 朝起きたら取り込まれてた  日本語なんてマイナーな言語で記事が書いてあっても、読んでくれる人は読んでくれるんですね。 Tweepy は僕も何度か使ったことがあるので Issue とかみて開発状況をチェックしていたんですが、 見覚えのある名前が見えたときはびっくりしました。
ちょっとしたコードでも公開しておくといいことがあるよ、というお話でした。 最近ここも全然更新してないので、もっとアウトプットしていかないと・・・。</description>
    </item>
    
    <item>
      <title>tweepyでApplication-only authenticationしてみた</title>
      <link>https://shogo82148.github.io/blog/2013/05/09/application-only-authentication-with-tweepy/</link>
      <pubDate>Thu, 09 May 2013 23:29:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2013/05/09/application-only-authentication-with-tweepy/</guid>
      <description>Twitter の API リファレンスを久しぶりに見たら、 Application-only authenticationとかいうのを発見。 特定のユーザと関連付けられない代わりに、普通に認証するより制限が緩いみたい。 3月に追加されてたらしい。
知らなかった・・・。 最近API叩いてなかったからな・・・。
便利そうなので、Python用のTwitterライブラリであるTweepyから使ってみた。
AuthHandler Tweepy用のAuthHandler。 認証部分は TwitterのApplication-only authenticationを試してみた のページからほぼコピペ。
import tweepy import urllib import urllib2 import base64 import json class AppAuthHandler(tweepy.auth.AuthHandler): TOKEN_URL = &amp;#39;https://api.twitter.com/oauth2/token&amp;#39; def __init__(self, consumer_key, consumer_secret): token_credential = urllib.quote(consumer_key) + &amp;#39;:&amp;#39; + urllib.quote(consumer_secret) credential = base64.b64encode(token_credential) value = {&amp;#39;grant_type&amp;#39;: &amp;#39;client_credentials&amp;#39;} data = urllib.urlencode(value) req = urllib2.Request(self.TOKEN_URL) req.add_header(&amp;#39;Authorization&amp;#39;, &amp;#39;Basic &amp;#39; + credential) req.add_header(&amp;#39;Content-Type&amp;#39;, &amp;#39;application/x-www-form-urlencoded;charset=UTF-8&amp;#39;) response = urllib2.urlopen(req, data) json_response = json.loads(response.read()) self.</description>
    </item>
    
    <item>
      <title>OAuthの認証にWebViewを使うのはやめよう</title>
      <link>https://shogo82148.github.io/blog/2012/11/24/no-more-webview/</link>
      <pubDate>Sat, 24 Nov 2012 23:06:00 +0900</pubDate>
      
      <guid>https://shogo82148.github.io/blog/2012/11/24/no-more-webview/</guid>
      <description>AndroidからTwitterへアクセスするためのライブラリとして，Twitter4Jが有名です． これを使ってみようと，「Android Twitter4J」と検索すると 認証にWebViewを使った例がたくさん出てきます．
・・・いや，ちょっとまて． それはちょっとまずいだろう．
そういうわけでもうちょっと賢い方法を探してみました．
何がまずいのさ 「Android Twitter4J」と検索すると，上位にこんなページが出てきます．
 Twitter4jを使ってOAuth認証をアプリ内で行う方法 Twitter4j-2.2.xを使ったOAuth認証のコーディング例 twitter4jでツイートする Android+Twitter4JでOAuthするためのソースコード  上のサイトでは次の様は方法をとっています．
 アプリ内にWebViewを貼り付け WebViewでTwitterの認証画面を表示 onPageStarted や onPageFinished をオーバーライドして callback URL へのアクセスを検出 URL に入っている認証コードで認証  アプリ内でWebViewを使うとURLが表示されません． つまり ** 本当にツイッターにアクセスしているかわからない ** のです． もし，表示されるのが偽の認証画面だったら，アプリから簡単にパスワードがわかってしまいます．
じゃあ，URL を表示させればいいかというとそういうわけでもありません． 画面上のURL表示なんて簡単に偽装できてしまいます． どんな工夫をしても ** アプリがパスワードの要求をしていることには変わりありません ** ． アプリはパスワードを簡単に取得できます．
アプリのユーザはTwitterに限らずSNSへのログイン時にブラウザを開かないアプリは信用しないようにしましょう． どこかでパスワードの抜かれている可能性があります． (ただし，公式アプリは除く．公式アプリが信用できないならそもそもサービスを利用できないもんね．)
じゃあどうするのさ じゃあ，開発者はどうするのかって話ですが，もう少し詳しく検索してみましょう． 他の方法を使っているページもでてきます．
 PINコードを利用  TwitterでPIN番号認証を行う   Intent Fileterを利用しコールバック  twitter4jを使用したAndroid Twitterアプリケーション作成 Twitter4Jを使ってAndroidアプリでStreamingAPIのUserTimelineを取得する TwitterでOAuth認証を行う  Twitterへのアプリケーション登録 Twitterの認証ページをブラウザで開く Access Tokenを取得する      PIN コードを利用 一つ目の方法はPC版クライアントでよく使われる方法． 認証後にPINコードと呼ばれる数字が表示されるので，それをアプリに入力します． twiccaなんかでも使われてますね． Twitter へのアプリケーション登録のときにコールバックURLを入力しないとこの認証方式になります．</description>
    </item>
    
  </channel>
</rss>